

// The Module object: Our interface to the outside world. We import
// and export values on it. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to check if Module already exists (e.g. case 3 above).
// Substitution will be replaced with actual code on later stage of the build,
// this way Closure Compiler will not mangle it (e.g. case 4. above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module = typeof Module !== 'undefined' ? Module : {};

// --pre-jses are emitted after the Module integration code, so that they can
// refer to Module (if they choose; they can also define Module)
// libflac.js - port of libflac to JavaScript using emscripten


(function (root, factory) {

	if (typeof define === 'function' && define.amd) {
		// AMD. Register as an anonymous module.
		define(['module', 'require'], factory.bind(null, root));
	} else if (typeof module === 'object' && module.exports) {
		// Node. Does not work with strict CommonJS, but
		// only CommonJS-like environments that support module.exports,
		// like Node.

		// use process.env (if available) for reading Flac environment settings:
		var env = typeof process !== 'undefined' && process && process.env? process.env : root;
		factory(env, module, module.require);
	} else {
		// Browser globals
		root.Flac = factory(root);
	}

}(typeof self !== 'undefined' ? self : typeof window !== 'undefined' ? window : this, function (global, expLib, require) {
'use strict';

var Module = Module || {};
var _flac_ready = false;
//in case resources are loaded asynchronously (e.g. *.mem file for minified version): setup "ready" handling
Module["onRuntimeInitialized"] = function(){
	_flac_ready = true;
	if(!_exported){
		//if _exported is not yet set (may happen, in case initialization was strictly synchronously),
		// do "pause" until sync initialization has run through
		setTimeout(function(){do_fire_event('ready', [{type: 'ready', target: _exported}], true);}, 0);
	} else {
		do_fire_event('ready', [{type: 'ready', target: _exported}], true);
	}
};

if(global && global.FLAC_SCRIPT_LOCATION){

	Module["locateFile"] = function(fileName){
		var path = global.FLAC_SCRIPT_LOCATION || '';
		if(path[fileName]){
			return path[fileName];
		}
		path += path && !/\/$/.test(path)? '/' : '';
		return path + fileName;
	};

	//NOTE will be overwritten if emscripten has env specific implementation for this
	var readBinary = function(filePath){

		//for Node: use default implementation (copied from generated code):
		if(ENVIRONMENT_IS_NODE){
			var ret = read_(filePath, true);
			if (!ret.buffer) {
				ret = new Uint8Array(ret);
			}
			assert(ret.buffer);
			return ret;
		}

		//otherwise: try "fallback" to AJAX
		return new Promise(function(resolve, reject){
			var xhr = new XMLHttpRequest();
			xhr.responseType = "arraybuffer";
			xhr.addEventListener("load", function(evt){
				resolve(xhr.response);
			});
			xhr.addEventListener("error", function(err){
				reject(err);
			});
			xhr.open("GET", filePath);
			xhr.send();
		});
	};
}

//fallback for fetch && support file://-protocol: try read as binary if fetch fails
if(global && typeof global.fetch === 'function'){
	var _fetch = global.fetch;
	global.fetch = function(url){
		return _fetch.apply(null, arguments).catch(function(err){
			try{
				var result = readBinary(url);
				if(result && result.catch){
					result.catch(function(_err){throw err});
				}
				return result;
			} catch(_err){
				throw err;
			}
		});
	};
}



// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
var key;
for (key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

var arguments_ = [];
var thisProgram = './this.program';
var quit_ = function(status, toThrow) {
  throw toThrow;
};

// Determine the runtime environment we are in. You can customize this by
// setting the ENVIRONMENT setting at compile time (see settings.js).

// Attempt to auto-detect the environment
var ENVIRONMENT_IS_WEB = typeof window === 'object';
var ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
// N.b. Electron.js environment is simultaneously a NODE-environment, but
// also a web environment.
var ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof process.versions === 'object' && typeof process.versions.node === 'string';
var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (Module['ENVIRONMENT']) {
  throw new Error('Module.ENVIRONMENT has been deprecated. To force the environment, use the ENVIRONMENT compile-time option (for example, -s ENVIRONMENT=web or -s ENVIRONMENT=node)');
}

// `/` should be present at the end if `scriptDirectory` is not empty
var scriptDirectory = '';
function locateFile(path) {
  if (Module['locateFile']) {
    return Module['locateFile'](path, scriptDirectory);
  }
  return scriptDirectory + path;
}

// Hooks that are implemented differently in different runtime environments.
var read_,
    readAsync,
    readBinary,
    setWindowTitle;

var nodeFS;
var nodePath;

if (ENVIRONMENT_IS_NODE) {
  if (!(typeof process === 'object' && typeof require === 'function')) throw new Error('not compiled for this environment (did you build to HTML and try to run it not on the web, or set ENVIRONMENT to something - like node - and run it someplace else - like on the web?)');
  if (ENVIRONMENT_IS_WORKER) {
    scriptDirectory = require('path').dirname(scriptDirectory) + '/';
  } else {
    scriptDirectory = __dirname + '/';
  }

// include: node_shell_read.js


read_ = function shell_read(filename, binary) {
  var ret = tryParseAsDataURI(filename);
  if (ret) {
    return binary ? ret : ret.toString();
  }
  if (!nodeFS) nodeFS = require('fs');
  if (!nodePath) nodePath = require('path');
  filename = nodePath['normalize'](filename);
  return nodeFS['readFileSync'](filename, binary ? null : 'utf8');
};

readBinary = function readBinary(filename) {
  var ret = read_(filename, true);
  if (!ret.buffer) {
    ret = new Uint8Array(ret);
  }
  assert(ret.buffer);
  return ret;
};

readAsync = function readAsync(filename, onload, onerror) {
  var ret = tryParseAsDataURI(filename);
  if (ret) {
    onload(ret);
  }
  if (!nodeFS) nodeFS = require('fs');
  if (!nodePath) nodePath = require('path');
  filename = nodePath['normalize'](filename);
  nodeFS['readFile'](filename, function(err, data) {
    if (err) onerror(err);
    else onload(data.buffer);
  });
};

// end include: node_shell_read.js
  if (process['argv'].length > 1) {
    thisProgram = process['argv'][1].replace(/\\/g, '/');
  }

  arguments_ = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  quit_ = function(status, toThrow) {
    if (keepRuntimeAlive()) {
      process['exitCode'] = status;
      throw toThrow;
    }
    process['exit'](status);
  };

  Module['inspect'] = function () { return '[Emscripten Module object]'; };

} else
if (ENVIRONMENT_IS_SHELL) {

  if ((typeof process === 'object' && typeof require === 'function') || typeof window === 'object' || typeof importScripts === 'function') throw new Error('not compiled for this environment (did you build to HTML and try to run it not on the web, or set ENVIRONMENT to something - like node - and run it someplace else - like on the web?)');

  if (typeof read != 'undefined') {
    read_ = function shell_read(f) {
      var data = tryParseAsDataURI(f);
      if (data) {
        return intArrayToString(data);
      }
      return read(f);
    };
  }

  readBinary = function readBinary(f) {
    var data;
    data = tryParseAsDataURI(f);
    if (data) {
      return data;
    }
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  readAsync = function readAsync(f, onload, onerror) {
    setTimeout(function() { onload(readBinary(f)); }, 0);
  };

  if (typeof scriptArgs != 'undefined') {
    arguments_ = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    arguments_ = arguments;
  }

  if (typeof quit === 'function') {
    quit_ = function(status) {
      quit(status);
    };
  }

  if (typeof print !== 'undefined') {
    // Prefer to use print/printErr where they exist, as they usually work better.
    if (typeof console === 'undefined') console = /** @type{!Console} */({});
    console.log = /** @type{!function(this:Console, ...*): undefined} */ (print);
    console.warn = console.error = /** @type{!function(this:Console, ...*): undefined} */ (typeof printErr !== 'undefined' ? printErr : print);
  }

} else

// Note that this includes Node.js workers when relevant (pthreads is enabled).
// Node.js workers are detected as a combination of ENVIRONMENT_IS_WORKER and
// ENVIRONMENT_IS_NODE.
if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  if (ENVIRONMENT_IS_WORKER) { // Check worker, not web, since window could be polyfilled
    scriptDirectory = self.location.href;
  } else if (typeof document !== 'undefined' && document.currentScript) { // web
    scriptDirectory = document.currentScript.src;
  }
  // blob urls look like blob:http://site.com/etc/etc and we cannot infer anything from them.
  // otherwise, slice off the final part of the url to find the script directory.
  // if scriptDirectory does not contain a slash, lastIndexOf will return -1,
  // and scriptDirectory will correctly be replaced with an empty string.
  if (scriptDirectory.indexOf('blob:') !== 0) {
    scriptDirectory = scriptDirectory.substr(0, scriptDirectory.lastIndexOf('/')+1);
  } else {
    scriptDirectory = '';
  }

  if (!(typeof window === 'object' || typeof importScripts === 'function')) throw new Error('not compiled for this environment (did you build to HTML and try to run it not on the web, or set ENVIRONMENT to something - like node - and run it someplace else - like on the web?)');

  // Differentiate the Web Worker from the Node Worker case, as reading must
  // be done differently.
  {

// include: web_or_worker_shell_read.js


  read_ = function(url) {
    try {
      var xhr = new XMLHttpRequest();
      xhr.open('GET', url, false);
      xhr.send(null);
      return xhr.responseText;
    } catch (err) {
      var data = tryParseAsDataURI(url);
      if (data) {
        return intArrayToString(data);
      }
      throw err;
    }
  };

  if (ENVIRONMENT_IS_WORKER) {
    readBinary = function(url) {
      try {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, false);
        xhr.responseType = 'arraybuffer';
        xhr.send(null);
        return new Uint8Array(/** @type{!ArrayBuffer} */(xhr.response));
      } catch (err) {
        var data = tryParseAsDataURI(url);
        if (data) {
          return data;
        }
        throw err;
      }
    };
  }

  readAsync = function(url, onload, onerror) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.responseType = 'arraybuffer';
    xhr.onload = function() {
      if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
        onload(xhr.response);
        return;
      }
      var data = tryParseAsDataURI(url);
      if (data) {
        onload(data.buffer);
        return;
      }
      onerror();
    };
    xhr.onerror = onerror;
    xhr.send(null);
  };

// end include: web_or_worker_shell_read.js
  }

  setWindowTitle = function(title) { document.title = title };
} else
{
  throw new Error('environment detection error');
}

// Set up the out() and err() hooks, which are how we can print to stdout or
// stderr, respectively.
var out = Module['print'] || console.log.bind(console);
var err = Module['printErr'] || console.warn.bind(console);

// Merge back in the overrides
for (key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}
// Free the object hierarchy contained in the overrides, this lets the GC
// reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.
moduleOverrides = null;

// Emit code to handle expected values on the Module object. This applies Module.x
// to the proper local x. This has two benefits: first, we only emit it if it is
// expected to arrive, and second, by using a local everywhere else that can be
// minified.

if (Module['arguments']) arguments_ = Module['arguments'];
if (!Object.getOwnPropertyDescriptor(Module, 'arguments')) {
  Object.defineProperty(Module, 'arguments', {
    configurable: true,
    get: function() {
      abort('Module.arguments has been replaced with plain arguments_ (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)')
    }
  });
}

if (Module['thisProgram']) thisProgram = Module['thisProgram'];
if (!Object.getOwnPropertyDescriptor(Module, 'thisProgram')) {
  Object.defineProperty(Module, 'thisProgram', {
    configurable: true,
    get: function() {
      abort('Module.thisProgram has been replaced with plain thisProgram (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)')
    }
  });
}

if (Module['quit']) quit_ = Module['quit'];
if (!Object.getOwnPropertyDescriptor(Module, 'quit')) {
  Object.defineProperty(Module, 'quit', {
    configurable: true,
    get: function() {
      abort('Module.quit has been replaced with plain quit_ (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)')
    }
  });
}

// perform assertions in shell.js after we set up out() and err(), as otherwise if an assertion fails it cannot print the message
// Assertions on removed incoming Module JS APIs.
assert(typeof Module['memoryInitializerPrefixURL'] === 'undefined', 'Module.memoryInitializerPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['pthreadMainPrefixURL'] === 'undefined', 'Module.pthreadMainPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['cdInitializerPrefixURL'] === 'undefined', 'Module.cdInitializerPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['filePackagePrefixURL'] === 'undefined', 'Module.filePackagePrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['read'] === 'undefined', 'Module.read option was removed (modify read_ in JS)');
assert(typeof Module['readAsync'] === 'undefined', 'Module.readAsync option was removed (modify readAsync in JS)');
assert(typeof Module['readBinary'] === 'undefined', 'Module.readBinary option was removed (modify readBinary in JS)');
assert(typeof Module['setWindowTitle'] === 'undefined', 'Module.setWindowTitle option was removed (modify setWindowTitle in JS)');
assert(typeof Module['TOTAL_MEMORY'] === 'undefined', 'Module.TOTAL_MEMORY has been renamed Module.INITIAL_MEMORY');

if (!Object.getOwnPropertyDescriptor(Module, 'read')) {
  Object.defineProperty(Module, 'read', {
    configurable: true,
    get: function() {
      abort('Module.read has been replaced with plain read_ (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)')
    }
  });
}

if (!Object.getOwnPropertyDescriptor(Module, 'readAsync')) {
  Object.defineProperty(Module, 'readAsync', {
    configurable: true,
    get: function() {
      abort('Module.readAsync has been replaced with plain readAsync (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)')
    }
  });
}

if (!Object.getOwnPropertyDescriptor(Module, 'readBinary')) {
  Object.defineProperty(Module, 'readBinary', {
    configurable: true,
    get: function() {
      abort('Module.readBinary has been replaced with plain readBinary (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)')
    }
  });
}

if (!Object.getOwnPropertyDescriptor(Module, 'setWindowTitle')) {
  Object.defineProperty(Module, 'setWindowTitle', {
    configurable: true,
    get: function() {
      abort('Module.setWindowTitle has been replaced with plain setWindowTitle (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)')
    }
  });
}
var IDBFS = 'IDBFS is no longer included by default; build with -lidbfs.js';
var PROXYFS = 'PROXYFS is no longer included by default; build with -lproxyfs.js';
var WORKERFS = 'WORKERFS is no longer included by default; build with -lworkerfs.js';
var NODEFS = 'NODEFS is no longer included by default; build with -lnodefs.js';


assert(!ENVIRONMENT_IS_SHELL, "shell environment detected but not enabled at build time.  Add 'shell' to `-s ENVIRONMENT` to enable.");




var STACK_ALIGN = 16;

function getNativeTypeSize(type) {
  switch (type) {
    case 'i1': case 'i8': return 1;
    case 'i16': return 2;
    case 'i32': return 4;
    case 'i64': return 8;
    case 'float': return 4;
    case 'double': return 8;
    default: {
      if (type[type.length-1] === '*') {
        return 4; // A pointer
      } else if (type[0] === 'i') {
        var bits = Number(type.substr(1));
        assert(bits % 8 === 0, 'getNativeTypeSize invalid bits ' + bits + ', type ' + type);
        return bits / 8;
      } else {
        return 0;
      }
    }
  }
}

function warnOnce(text) {
  if (!warnOnce.shown) warnOnce.shown = {};
  if (!warnOnce.shown[text]) {
    warnOnce.shown[text] = 1;
    err(text);
  }
}

// include: runtime_functions.js


// Wraps a JS function as a wasm function with a given signature.
function convertJsFunctionToWasm(func, sig) {
  return func;
}

var freeTableIndexes = [];

// Weak map of functions in the table to their indexes, created on first use.
var functionsInTableMap;

function getEmptyTableSlot() {
  // Reuse a free index if there is one, otherwise grow.
  if (freeTableIndexes.length) {
    return freeTableIndexes.pop();
  }
  // Grow the table
  try {
    wasmTable.grow(1);
  } catch (err) {
    if (!(err instanceof RangeError)) {
      throw err;
    }
    throw 'Unable to grow wasm table. Set ALLOW_TABLE_GROWTH.';
  }
  return wasmTable.length - 1;
}

// Add a wasm function to the table.
function addFunctionWasm(func, sig) {
  // Check if the function is already in the table, to ensure each function
  // gets a unique index. First, create the map if this is the first use.
  if (!functionsInTableMap) {
    functionsInTableMap = new WeakMap();
    for (var i = 0; i < wasmTable.length; i++) {
      var item = wasmTable.get(i);
      // Ignore null values.
      if (item) {
        functionsInTableMap.set(item, i);
      }
    }
  }
  if (functionsInTableMap.has(func)) {
    return functionsInTableMap.get(func);
  }

  // It's not in the table, add it now.

  var ret = getEmptyTableSlot();

  // Set the new value.
  try {
    // Attempting to call this with JS function will cause of table.set() to fail
    wasmTable.set(ret, func);
  } catch (err) {
    if (!(err instanceof TypeError)) {
      throw err;
    }
    assert(typeof sig !== 'undefined', 'Missing signature argument to addFunction: ' + func);
    var wrapped = convertJsFunctionToWasm(func, sig);
    wasmTable.set(ret, wrapped);
  }

  functionsInTableMap.set(func, ret);

  return ret;
}

function removeFunction(index) {
  functionsInTableMap.delete(wasmTable.get(index));
  freeTableIndexes.push(index);
}

// 'sig' parameter is required for the llvm backend but only when func is not
// already a WebAssembly function.
function addFunction(func, sig) {
  assert(typeof func !== 'undefined');

  return addFunctionWasm(func, sig);
}

// end include: runtime_functions.js
// include: runtime_debug.js


// end include: runtime_debug.js
var tempRet0 = 0;

var setTempRet0 = function(value) {
  tempRet0 = value;
};

var getTempRet0 = function() {
  return tempRet0;
};



// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in:
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at:
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html

var wasmBinary;
if (Module['wasmBinary']) wasmBinary = Module['wasmBinary'];
if (!Object.getOwnPropertyDescriptor(Module, 'wasmBinary')) {
  Object.defineProperty(Module, 'wasmBinary', {
    configurable: true,
    get: function() {
      abort('Module.wasmBinary has been replaced with plain wasmBinary (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)')
    }
  });
}
var noExitRuntime = Module['noExitRuntime'] || true;
if (!Object.getOwnPropertyDescriptor(Module, 'noExitRuntime')) {
  Object.defineProperty(Module, 'noExitRuntime', {
    configurable: true,
    get: function() {
      abort('Module.noExitRuntime has been replaced with plain noExitRuntime (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)')
    }
  });
}

// include: wasm2js.js


// wasm2js.js - enough of a polyfill for the WebAssembly object so that we can load
// wasm2js code that way.

// Emit "var WebAssembly" if definitely using wasm2js. Otherwise, in MAYBE_WASM2JS
// mode, we can't use a "var" since it would prevent normal wasm from working.
/** @suppress{duplicate, const} */
var
WebAssembly = {
  // Note that we do not use closure quoting (this['buffer'], etc.) on these
  // functions, as they are just meant for internal use. In other words, this is
  // not a fully general polyfill.
  Memory: function(opts) {
    this.buffer = new ArrayBuffer(opts['initial'] * 65536);
  },

  Module: function(binary) {
    // TODO: use the binary and info somehow - right now the wasm2js output is embedded in
    // the main JS
  },

  Instance: function(module, info) {
    // TODO: use the module and info somehow - right now the wasm2js output is embedded in
    // the main JS
    // This will be replaced by the actual wasm2js code.
    this.exports = (
function instantiate(asmLibraryArg) {
function Table(ret) {
  ret.grow = function(by) {
    var old = this.length;
    this.length = this.length + by;
    return old;
  };
  ret.set = function(i, func) {
    this[i] = func;
  };
  ret.get = function(i) {
    return this[i];
  };
  return ret;
}

  var bufferView;
  var base64ReverseLookup = new Uint8Array(123/*'z'+1*/);
  for (var i = 25; i >= 0; --i) {
    base64ReverseLookup[48+i] = 52+i; // '0-9'
    base64ReverseLookup[65+i] = i; // 'A-Z'
    base64ReverseLookup[97+i] = 26+i; // 'a-z'
  }
  base64ReverseLookup[43] = 62; // '+'
  base64ReverseLookup[47] = 63; // '/'
  /** @noinline Inlining this function would mean expanding the base64 string 4x times in the source code, which Closure seems to be happy to do. */
  function base64DecodeToExistingUint8Array(uint8Array, offset, b64) {
    var b1, b2, i = 0, j = offset, bLength = b64.length, end = offset + (bLength*3>>2) - (b64[bLength-2] == '=') - (b64[bLength-1] == '=');
    for (; i < bLength; i += 4) {
      b1 = base64ReverseLookup[b64.charCodeAt(i+1)];
      b2 = base64ReverseLookup[b64.charCodeAt(i+2)];
      uint8Array[j++] = base64ReverseLookup[b64.charCodeAt(i)] << 2 | b1 >> 4;
      if (j < end) uint8Array[j++] = b1 << 4 | b2 >> 2;
      if (j < end) uint8Array[j++] = b2 << 6 | base64ReverseLookup[b64.charCodeAt(i+3)];
    }
  }
function initActiveSegments(imports) {
  base64DecodeToExistingUint8Array(bufferView, 1024, "");
  base64DecodeToExistingUint8Array(bufferView, 10848, "UDdQAFsXAAArFwAAAAAAAAkAAAAAAAAAAAAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAwAAAAAAAAAEAAAAOC8AAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD/////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUAAAAAAAAAAAAAAAkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAoAAAALAAAASDMAAAAEAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAr/////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAArAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAQxkAAAEAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwAAAAAAAABDGQAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAAAAAAAAAEMZAAAAAAAAAAAAAAYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAQxkAAAEAAAABAAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAAAABDGQAAAQAAAAAAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFAAAAAAAAAEMZAAABAAAAAAAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAYAAAAAAAAAJhkAAAEAAAAAAAAADAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABgAAAAAAAAAmGQAAAQAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGAAAAAAAAAPcYAAA=");
  base64DecodeToExistingUint8Array(bufferView
}

  var scratchBuffer = new ArrayBuffer(16);
  var i32ScratchView = new Int32Array(scratchBuffer);
  var f32ScratchView = new Float32Array(scratchBuffer);
  var f64ScratchView = new Float64Array(scratchBuffer);
  
  function wasm2js_scratch_load_i32(index) {
    return i32ScratchView[index];
  }
      
  function wasm2js_scratch_store_i32(index, value) {
    i32ScratchView[index] = value;
  }
      
  function wasm2js_scratch_load_f64() {
    return f64ScratchView[0];
  }
      
  function wasm2js_scratch_store_f64(value) {
    f64ScratchView[0] = value;
  }
      
  function wasm2js_scratch_store_f32(value) {
    f32ScratchView[2] = value;
  }
      
function asmFunc(env) {
 var memory = env.memory;
 var buffer = memory.buffer;
 memory.grow = __wasm_memory_grow;
 var HEAP8 = new Int8Array(buffer);
 var HEAP16 = new Int16Array(buffer);
 var HEAP32 = new Int32Array(buffer);
 var HEAPU8 = new Uint8Array(buffer);
 var HEAPU16 = new Uint16Array(buffer);
 var HEAPU32 = new Uint32Array(buffer);
 var HEAPF32 = new Float32Array(buffer);
 var HEAPF64 = new Float64Array(buffer);
 var Math_imul = Math.imul;
 var Math_fround = Math.fround;
 var Math_abs = Math.abs;
 var Math_clz32 = Math.clz32;
 var Math_min = Math.min;
 var Math_max = Math.max;
 var Math_floor = Math.floor;
 var Math_ceil = Math.ceil;
 var Math_trunc = Math.trunc;
 var Math_sqrt = Math.sqrt;
 var abort = env.abort;
 var nan = NaN;
 var infinity = Infinity;
 var emscripten_resize_heap = env.emscripten_resize_heap;
 var emscripten_memcpy_big = env.emscripten_memcpy_big;
 var __wasi_fd_close = env.fd_close;
 var __wasi_fd_read = env.fd_read;
 var __wasi_fd_write = env.fd_write;
 var setTempRet0 = env.setTempRet0;
 var legalimport$__wasi_fd_seek = env.fd_seek;
 var __stack_pointer = 5257040;
 var __stack_end = 0;
 var __stack_base = 0;
 var GOT_data_internal___memory_base = 0;
 var GOT_data_internal_FLAC__crc16_table = 1280;
 var GOT_data_internal___table_base = 1;
 var GOT_data_internal_FLAC__OGG_MAPPING_MAGIC = 10856;
 var GOT_data_internal_FLAC__OGG_MAPPING_FIRST_HEADER_PACKET_TYPE = 7824;
 var GOT_data_internal_FLAC__SUBFRAME_LPC_QLP_SHIFT_LEN = 6760;
 var GOT_data_internal_FLAC__STREAM_METADATA_APPLICATION_ID_LEN = 6564;
 var GOT_data_internal_stdin = 7832;
 var GOT_func_internal_FLAC__lpc_restore_signal = 5;
 var GOT_func_internal_FLAC__lpc_restore_signal_wide = 6;
 var GOT_data_internal_FLAC__STREAM_SYNC_STRING = 6517;
 var GOT_data_internal_FLAC__STREAM_METADATA_IS_LAST_LEN = 6672;
 var GOT_data_internal_FLAC__STREAM_METADATA_TYPE_LEN = 6676;
 var GOT_data_internal_FLAC__STREAM_METADATA_LENGTH_LEN = 6680;
 var GOT_data_internal_FLAC__STREAM_METADATA_STREAMINFO_MIN_BLOCK_SIZE_LEN = 6532;
 var GOT_data_internal_FLAC__STREAM_METADATA_STREAMINFO_MAX_BLOCK_SIZE_LEN = 6536;
 var GOT_data_internal_FLAC__STREAM_METADATA_STREAMINFO_MIN_FRAME_SIZE_LEN = 6540;
 var GOT_data_internal_FLAC__STREAM_METADATA_STREAMINFO_MAX_FRAME_SIZE_LEN = 6544;
 var GOT_data_internal_FLAC__STREAM_METADATA_STREAMINFO_SAMPLE_RATE_LEN = 6548;
 var GOT_data_internal_FLAC__STREAM_METADATA_STREAMINFO_CHANNELS_LEN = 6552;
 var GOT_data_internal_FLAC__STREAM_METADATA_STREAMINFO_BITS_PER_SAMPLE_LEN = 6556;
 var GOT_data_internal_FLAC__STREAM_METADATA_STREAMINFO_TOTAL_SAMPLES_LEN = 6560;
 var GOT_data_internal_FLAC__STREAM_METADATA_SEEKPOINT_FRAME_SAMPLES_LEN = 6576;
 var GOT_data_internal_FLAC__STREAM_METADATA_SEEKPOINT_STREAM_OFFSET_LEN = 6572;
 var GOT_data_internal_FLAC__STREAM_METADATA_SEEKPOINT_SAMPLE_NUMBER_LEN = 6568;
 var GOT_data_internal_FLAC__SUBFRAME_LPC_QLP_COEFF_PRECISION_LEN = 6756;
 var GOT_data_internal_FLAC__ENTROPY_CODING_METHOD_PARTITIONED_RICE_ORDER_LEN = 6732;
 var GOT_data_internal_FLAC__ENTROPY_CODING_METHOD_TYPE_LEN = 6728;
 var GOT_data_internal_FLAC__FRAME_FOOTER_CRC_LEN = 6724;
 var GOT_data_internal_FLAC__STREAM_METADATA_CUESHEET_MEDIA_CATALOG_NUMBER_LEN = 6620;
 var GOT_data_internal_FLAC__STREAM_METADATA_CUESHEET_LEAD_IN_LEN = 6624;
 var GOT_data_internal_FLAC__STREAM_METADATA_CUESHEET_IS_CD_LEN = 6628;
 var GOT_data_internal_FLAC__STREAM_METADATA_CUESHEET_RESERVED_LEN = 6632;
 var GOT_data_internal_FLAC__STREAM_METADATA_CUESHEET_NUM_TRACKS_LEN = 6636;
 var GOT_data_internal_FLAC__STREAM_METADATA_CUESHEET_TRACK_ISRC_LEN = 6600;
 var GOT_data_internal_FLAC__STREAM_METADATA_CUESHEET_INDEX_RESERVED_LEN = 6588;
 var GOT_data_internal_FLAC__STREAM_METADATA_CUESHEET_INDEX_NUMBER_LEN = 6584;
 var GOT_data_internal_FLAC__STREAM_METADATA_CUESHEET_INDEX_OFFSET_LEN = 6580;
 var GOT_data_internal_FLAC__STREAM_METADATA_CUESHEET_TRACK_NUM_INDICES_LEN = 6616;
 var GOT_data_internal_FLAC__STREAM_METADATA_CUESHEET_TRACK_RESERVED_LEN = 6612;
 var GOT_data_internal_FLAC__STREAM_METADATA_CUESHEET_TRACK_PRE_EMPHASIS_LEN = 6608;
 var GOT_data_internal_FLAC__STREAM_METADATA_CUESHEET_TRACK_TYPE_LEN = 6604;
 var GOT_data_internal_FLAC__STREAM_METADATA_CUESHEET_TRACK_NUMBER_LEN = 6596;
 var GOT_data_internal_FLAC__STREAM_METADATA_CUESHEET_TRACK_OFFSET_LEN = 6592;
 var GOT_data_internal_FLAC__STREAM_METADATA_PICTURE_TYPE_LEN = 6640;
 var GOT_data_internal_FLAC__STREAM_METADATA_PICTURE_MIME_TYPE_LENGTH_LEN = 6644;
 var GOT_data_internal_FLAC__STREAM_METADATA_PICTURE_DESCRIPTION_LENGTH_LEN = 6648;
 var GOT_data_internal_FLAC__STREAM_METADATA_PICTURE_WIDTH_LEN = 6652;
 var GOT_data_internal_FLAC__STREAM_METADATA_PICTURE_HEIGHT_LEN = 6656;
 var GOT_data_internal_FLAC__STREAM_METADATA_PICTURE_DEPTH_LEN = 6660;
 var GOT_data_internal_FLAC__STREAM_METADATA_PICTURE_COLORS_LEN = 6664;
 var GOT_data_internal_FLAC__STREAM_METADATA_PICTURE_DATA_LENGTH_LEN = 6668;
 var GOT_data_internal_FLAC__ENTROPY_CODING_METHOD_PARTITIONED_RICE_ESCAPE_PARAMETER = 6748;
 var GOT_data_internal_FLAC__ENTROPY_CODING_METHOD_PARTITIONED_RICE2_ESCAPE_PARAMETER = 6752;
 var GOT_data_internal_FLAC__ENTROPY_CODING_METHOD_PARTITIONED_RICE_PARAMETER_LEN = 6736;
 var GOT_data_internal_FLAC__ENTROPY_CODING_METHOD_PARTITIONED_RICE2_PARAMETER_LEN = 6740;
 var GOT_data_internal_FLAC__ENTROPY_CODING_METHOD_PARTITIONED_RICE_RAW_LEN = 6744;
 var GOT_data_internal_FLAC__OGG_MAPPING_NUM_HEADERS_LEN = 7828;
 var GOT_data_internal_FLAC__VENDOR_STRING = 10852;
 var GOT_data_internal_FLAC__FRAME_HEADER_SYNC_LEN = 6688;
 var GOT_data_internal_FLAC__FRAME_HEADER_SYNC = 6684;
 var GOT_data_internal_FLAC__FRAME_HEADER_RESERVED_LEN = 6692;
 var GOT_data_internal_FLAC__FRAME_HEADER_BLOCKING_STRATEGY_LEN = 6696;
 var GOT_data_internal_FLAC__FRAME_HEADER_BLOCK_SIZE_LEN = 6700;
 var GOT_data_internal_FLAC__FRAME_HEADER_SAMPLE_RATE_LEN = 6704;
 var GOT_data_internal_FLAC__FRAME_HEADER_CHANNEL_ASSIGNMENT_LEN = 6708;
 var GOT_data_internal_FLAC__FRAME_HEADER_BITS_PER_SAMPLE_LEN = 6712;
 var GOT_data_internal_FLAC__FRAME_HEADER_ZERO_PAD_LEN = 6716;
 var GOT_data_internal_FLAC__FRAME_HEADER_CRC_LEN = 6720;
 var GOT_data_internal_FLAC__SUBFRAME_TYPE_CONSTANT_BYTE_ALIGNED_MASK = 6776;
 var GOT_data_internal_FLAC__SUBFRAME_ZERO_PAD_LEN = 6764;
 var GOT_data_internal_FLAC__SUBFRAME_TYPE_LEN = 6768;
 var GOT_data_internal_FLAC__SUBFRAME_WASTED_BITS_FLAG_LEN = 6772;
 var GOT_data_internal_FLAC__SUBFRAME_TYPE_FIXED_BYTE_ALIGNED_MASK = 6784;
 var GOT_data_internal_FLAC__SUBFRAME_TYPE_LPC_BYTE_ALIGNED_MASK = 6788;
 var GOT_data_internal_FLAC__SUBFRAME_TYPE_VERBATIM_BYTE_ALIGNED_MASK = 6780;
 var GOT_data_internal_stdout = 7868;
 var GOT_func_internal_FLAC__lpc_compute_residual_from_qlp_coefficients = 12;
 var GOT_func_internal_FLAC__lpc_compute_residual_from_qlp_coefficients_wide = 13;
 var GOT_func_internal_FLAC__fixed_compute_best_predictor_wide = 14;
 var GOT_func_internal_FLAC__fixed_compute_best_predictor = 15;
 var GOT_func_internal_FLAC__lpc_compute_autocorrelation = 17;
 var GOT_data_internal_FLAC__STREAM_SYNC_LEN = 6528;
 var GOT_data_internal_FLAC__STREAM_SYNC = 6524;
 var __wasm_intrinsics_temp_i64 = 0;
 var __wasm_intrinsics_temp_i64$hi = 0;
 var i64toi32_i32$HIGH_BITS = 0;
 // EMSCRIPTEN_START_FUNCS
;
 function __wasm_call_ctors() {
  emscripten_stack_init();
 }
 
 function emscripten_stack_init() {
  __stack_base = 5257040;
  __stack_end = (14152 + 15 | 0) & -16 | 0;
 }
 
 function emscripten_stack_get_free() {
  return __stack_pointer - __stack_end | 0 | 0;
 }
 
 function emscripten_stack_get_end() {
  return __stack_end | 0;
 }
 
 function emscripten_get_heap_size() {
  return __wasm_memory_size() << 16 | 0 | 0;
 }
 
 function __errno_location() {
  return 11568 | 0;
 }
 
 function sbrk($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $1 = HEAP32[(0 + 10848 | 0) >> 2] | 0;
  $2 = ($0 + 3 | 0) & -4 | 0;
  $0 = $1 + $2 | 0;
  label$1 : {
   label$2 : {
    if (!$2) {
     break label$2
    }
    if ($0 >>> 0 <= $1 >>> 0) {
     break label$1
    }
   }
   label$3 : {
    if ($0 >>> 0 <= (emscripten_get_heap_size() | 0) >>> 0) {
     break label$3
    }
    if (!(emscripten_resize_heap($0 | 0) | 0)) {
     break label$1
    }
   }
   HEAP32[(0 + 10848 | 0) >> 2] = $0;
   return $1 | 0;
  }
  (wasm2js_i32$0 = __errno_location() | 0, wasm2js_i32$1 = 48), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  return -1 | 0;
 }
 
 function memset($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, i64toi32_i32$0 = 0, $4 = 0, i64toi32_i32$1 = 0, $6 = 0, $5 = 0, $6$hi = 0;
  label$1 : {
   if (!$2) {
    break label$1
   }
   $3 = $2 + $0 | 0;
   HEAP8[($3 + -1 | 0) >> 0] = $1;
   HEAP8[$0 >> 0] = $1;
   if ($2 >>> 0 < 3 >>> 0) {
    break label$1
   }
   HEAP8[($3 + -2 | 0) >> 0] = $1;
   HEAP8[($0 + 1 | 0) >> 0] = $1;
   HEAP8[($3 + -3 | 0) >> 0] = $1;
   HEAP8[($0 + 2 | 0) >> 0] = $1;
   if ($2 >>> 0 < 7 >>> 0) {
    break label$1
   }
   HEAP8[($3 + -4 | 0) >> 0] = $1;
   HEAP8[($0 + 3 | 0) >> 0] = $1;
   if ($2 >>> 0 < 9 >>> 0) {
    break label$1
   }
   $4 = (0 - $0 | 0) & 3 | 0;
   $3 = $0 + $4 | 0;
   $1 = Math_imul($1 & 255 | 0, 16843009);
   HEAP32[$3 >> 2] = $1;
   $4 = ($2 - $4 | 0) & -4 | 0;
   $2 = $3 + $4 | 0;
   HEAP32[($2 + -4 | 0) >> 2] = $1;
   if ($4 >>> 0 < 9 >>> 0) {
    break label$1
   }
   HEAP32[($3 + 8 | 0) >> 2] = $1;
   HEAP32[($3 + 4 | 0) >> 2] = $1;
   HEAP32[($2 + -8 | 0) >> 2] = $1;
   HEAP32[($2 + -12 | 0) >> 2] = $1;
   if ($4 >>> 0 < 25 >>> 0) {
    break label$1
   }
   HEAP32[($3 + 24 | 0) >> 2] = $1;
   HEAP32[($3 + 20 | 0) >> 2] = $1;
   HEAP32[($3 + 16 | 0) >> 2] = $1;
   HEAP32[($3 + 12 | 0) >> 2] = $1;
   HEAP32[($2 + -16 | 0) >> 2] = $1;
   HEAP32[($2 + -20 | 0) >> 2] = $1;
   HEAP32[($2 + -24 | 0) >> 2] = $1;
   HEAP32[($2 + -28 | 0) >> 2] = $1;
   $5 = $3 & 4 | 0 | 24 | 0;
   $2 = $4 - $5 | 0;
   if ($2 >>> 0 < 32 >>> 0) {
    break label$1
   }
   i64toi32_i32$0 = 0;
   i64toi32_i32$1 = 1;
   i64toi32_i32$1 = __wasm_i64_mul($1 | 0, i64toi32_i32$0 | 0, 1 | 0, i64toi32_i32$1 | 0) | 0;
   i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
   $6 = i64toi32_i32$1;
   $6$hi = i64toi32_i32$0;
   $1 = $3 + $5 | 0;
   label$2 : while (1) {
    i64toi32_i32$0 = $6$hi;
    i64toi32_i32$1 = $1;
    HEAP32[($1 + 24 | 0) >> 2] = $6;
    HEAP32[($1 + 28 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = $1;
    HEAP32[($1 + 16 | 0) >> 2] = $6;
    HEAP32[($1 + 20 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = $1;
    HEAP32[($1 + 8 | 0) >> 2] = $6;
    HEAP32[($1 + 12 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = $1;
    HEAP32[$1 >> 2] = $6;
    HEAP32[($1 + 4 | 0) >> 2] = i64toi32_i32$0;
    $1 = $1 + 32 | 0;
    $2 = $2 + -32 | 0;
    if ($2 >>> 0 > 31 >>> 0) {
     continue label$2
    }
    break label$2;
   };
  }
  return $0 | 0;
 }
 
 function __memcpy($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $4 = 0, $3 = 0, $5 = 0;
  label$1 : {
   if ($2 >>> 0 < 512 >>> 0) {
    break label$1
   }
   emscripten_memcpy_big($0 | 0, $1 | 0, $2 | 0) | 0;
   return $0 | 0;
  }
  $3 = $0 + $2 | 0;
  label$2 : {
   label$3 : {
    if (($1 ^ $0 | 0) & 3 | 0) {
     break label$3
    }
    label$4 : {
     label$5 : {
      if ($0 & 3 | 0) {
       break label$5
      }
      $2 = $0;
      break label$4;
     }
     label$6 : {
      if (($2 | 0) >= (1 | 0)) {
       break label$6
      }
      $2 = $0;
      break label$4;
     }
     $2 = $0;
     label$7 : while (1) {
      HEAP8[$2 >> 0] = HEAPU8[$1 >> 0] | 0;
      $1 = $1 + 1 | 0;
      $2 = $2 + 1 | 0;
      if (!($2 & 3 | 0)) {
       break label$4
      }
      if ($2 >>> 0 < $3 >>> 0) {
       continue label$7
      }
      break label$7;
     };
    }
    label$8 : {
     $4 = $3 & -4 | 0;
     if ($4 >>> 0 < 64 >>> 0) {
      break label$8
     }
     $5 = $4 + -64 | 0;
     if ($2 >>> 0 > $5 >>> 0) {
      break label$8
     }
     label$9 : while (1) {
      HEAP32[$2 >> 2] = HEAP32[$1 >> 2] | 0;
      HEAP32[($2 + 4 | 0) >> 2] = HEAP32[($1 + 4 | 0) >> 2] | 0;
      HEAP32[($2 + 8 | 0) >> 2] = HEAP32[($1 + 8 | 0) >> 2] | 0;
      HEAP32[($2 + 12 | 0) >> 2] = HEAP32[($1 + 12 | 0) >> 2] | 0;
      HEAP32[($2 + 16 | 0) >> 2] = HEAP32[($1 + 16 | 0) >> 2] | 0;
      HEAP32[($2 + 20 | 0) >> 2] = HEAP32[($1 + 20 | 0) >> 2] | 0;
      HEAP32[($2 + 24 | 0) >> 2] = HEAP32[($1 + 24 | 0) >> 2] | 0;
      HEAP32[($2 + 28 | 0) >> 2] = HEAP32[($1 + 28 | 0) >> 2] | 0;
      HEAP32[($2 + 32 | 0) >> 2] = HEAP32[($1 + 32 | 0) >> 2] | 0;
      HEAP32[($2 + 36 | 0) >> 2] = HEAP32[($1 + 36 | 0) >> 2] | 0;
      HEAP32[($2 + 40 | 0) >> 2] = HEAP32[($1 + 40 | 0) >> 2] | 0;
      HEAP32[($2 + 44 | 0) >> 2] = HEAP32[($1 + 44 | 0) >> 2] | 0;
      HEAP32[($2 + 48 | 0) >> 2] = HEAP32[($1 + 48 | 0) >> 2] | 0;
      HEAP32[($2 + 52 | 0) >> 2] = HEAP32[($1 + 52 | 0) >> 2] | 0;
      HEAP32[($2 + 56 | 0) >> 2] = HEAP32[($1 + 56 | 0) >> 2] | 0;
      HEAP32[($2 + 60 | 0) >> 2] = HEAP32[($1 + 60 | 0) >> 2] | 0;
      $1 = $1 + 64 | 0;
      $2 = $2 + 64 | 0;
      if ($2 >>> 0 <= $5 >>> 0) {
       continue label$9
      }
      break label$9;
     };
    }
    if ($2 >>> 0 >= $4 >>> 0) {
     break label$2
    }
    label$10 : while (1) {
     HEAP32[$2 >> 2] = HEAP32[$1 >> 2] | 0;
     $1 = $1 + 4 | 0;
     $2 = $2 + 4 | 0;
     if ($2 >>> 0 < $4 >>> 0) {
      continue label$10
     }
     break label$2;
    };
   }
   label$11 : {
    if ($3 >>> 0 >= 4 >>> 0) {
     break label$11
    }
    $2 = $0;
    break label$2;
   }
   label$12 : {
    $4 = $3 + -4 | 0;
    if ($4 >>> 0 >= $0 >>> 0) {
     break label$12
    }
    $2 = $0;
    break label$2;
   }
   $2 = $0;
   label$13 : while (1) {
    HEAP8[$2 >> 0] = HEAPU8[$1 >> 0] | 0;
    HEAP8[($2 + 1 | 0) >> 0] = HEAPU8[($1 + 1 | 0) >> 0] | 0;
    HEAP8[($2 + 2 | 0) >> 0] = HEAPU8[($1 + 2 | 0) >> 0] | 0;
    HEAP8[($2 + 3 | 0) >> 0] = HEAPU8[($1 + 3 | 0) >> 0] | 0;
    $1 = $1 + 4 | 0;
    $2 = $2 + 4 | 0;
    if ($2 >>> 0 <= $4 >>> 0) {
     continue label$13
    }
    break label$13;
   };
  }
  label$14 : {
   if ($2 >>> 0 >= $3 >>> 0) {
    break label$14
   }
   label$15 : while (1) {
    HEAP8[$2 >> 0] = HEAPU8[$1 >> 0] | 0;
    $1 = $1 + 1 | 0;
    $2 = $2 + 1 | 0;
    if (($2 | 0) != ($3 | 0)) {
     continue label$15
    }
    break label$15;
   };
  }
  return $0 | 0;
 }
 
 function dlmalloc($0) {
  $0 = $0 | 0;
  var $4 = 0, $5 = 0, $6 = 0, $8 = 0, $3 = 0, $2 = 0, $12 = 0, $7 = 0, $9 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $10 = 0, $11 = 0, $1 = 0, $81 = 0, $94 = 0, $105 = 0, $113 = 0, $121 = 0, $212 = 0, $223 = 0, $231 = 0, $239 = 0, $274 = 0, $347 = 0, $354 = 0, $361 = 0, $452 = 0, $463 = 0, $471 = 0, $479 = 0, $1173 = 0, $1180 = 0, $1187 = 0, $1307 = 0, $1309 = 0, $1370 = 0, $1377 = 0, $1384 = 0, $1618 = 0, $1625 = 0, $1632 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        label$7 : {
         label$8 : {
          label$9 : {
           label$10 : {
            label$11 : {
             label$12 : {
              label$13 : {
               if ($0 >>> 0 > 244 >>> 0) {
                break label$13
               }
               label$14 : {
                $2 = HEAP32[(0 + 11572 | 0) >> 2] | 0;
                $3 = $0 >>> 0 < 11 >>> 0 ? 16 : ($0 + 11 | 0) & -8 | 0;
                $4 = $3 >>> 3 | 0;
                $0 = $2 >>> $4 | 0;
                if (!($0 & 3 | 0)) {
                 break label$14
                }
                $5 = (($0 ^ -1 | 0) & 1 | 0) + $4 | 0;
                $6 = $5 << 3 | 0;
                $4 = HEAP32[($6 + 11620 | 0) >> 2] | 0;
                $0 = $4 + 8 | 0;
                label$15 : {
                 label$16 : {
                  $3 = HEAP32[($4 + 8 | 0) >> 2] | 0;
                  $6 = $6 + 11612 | 0;
                  if (($3 | 0) != ($6 | 0)) {
                   break label$16
                  }
                  (wasm2js_i32$0 = 0, wasm2js_i32$1 = $2 & (__wasm_rotl_i32(-2 | 0, $5 | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 11572 | 0) >> 2] = wasm2js_i32$1;
                  break label$15;
                 }
                 HEAP32[($3 + 12 | 0) >> 2] = $6;
                 HEAP32[($6 + 8 | 0) >> 2] = $3;
                }
                $5 = $5 << 3 | 0;
                HEAP32[($4 + 4 | 0) >> 2] = $5 | 3 | 0;
                $4 = ($4 + $5 | 0) + 4 | 0;
                HEAP32[$4 >> 2] = HEAP32[$4 >> 2] | 0 | 1 | 0;
                break label$1;
               }
               $7 = HEAP32[(0 + 11580 | 0) >> 2] | 0;
               if ($3 >>> 0 <= $7 >>> 0) {
                break label$12
               }
               label$17 : {
                if (!$0) {
                 break label$17
                }
                label$18 : {
                 label$19 : {
                  $81 = $0 << $4 | 0;
                  $0 = 2 << $4 | 0;
                  $0 = $81 & ($0 | (0 - $0 | 0) | 0) | 0;
                  $0 = ($0 & (0 - $0 | 0) | 0) + -1 | 0;
                  $94 = $0;
                  $0 = ($0 >>> 12 | 0) & 16 | 0;
                  $4 = $94 >>> $0 | 0;
                  $5 = ($4 >>> 5 | 0) & 8 | 0;
                  $105 = $5 | $0 | 0;
                  $0 = $4 >>> $5 | 0;
                  $4 = ($0 >>> 2 | 0) & 4 | 0;
                  $113 = $105 | $4 | 0;
                  $0 = $0 >>> $4 | 0;
                  $4 = ($0 >>> 1 | 0) & 2 | 0;
                  $121 = $113 | $4 | 0;
                  $0 = $0 >>> $4 | 0;
                  $4 = ($0 >>> 1 | 0) & 1 | 0;
                  $5 = ($121 | $4 | 0) + ($0 >>> $4 | 0) | 0;
                  $6 = $5 << 3 | 0;
                  $4 = HEAP32[($6 + 11620 | 0) >> 2] | 0;
                  $0 = HEAP32[($4 + 8 | 0) >> 2] | 0;
                  $6 = $6 + 11612 | 0;
                  if (($0 | 0) != ($6 | 0)) {
                   break label$19
                  }
                  $2 = $2 & (__wasm_rotl_i32(-2 | 0, $5 | 0) | 0) | 0;
                  HEAP32[(0 + 11572 | 0) >> 2] = $2;
                  break label$18;
                 }
                 HEAP32[($0 + 12 | 0) >> 2] = $6;
                 HEAP32[($6 + 8 | 0) >> 2] = $0;
                }
                $0 = $4 + 8 | 0;
                HEAP32[($4 + 4 | 0) >> 2] = $3 | 3 | 0;
                $6 = $4 + $3 | 0;
                $8 = $5 << 3 | 0;
                $5 = $8 - $3 | 0;
                HEAP32[($6 + 4 | 0) >> 2] = $5 | 1 | 0;
                HEAP32[($4 + $8 | 0) >> 2] = $5;
                label$20 : {
                 if (!$7) {
                  break label$20
                 }
                 $8 = $7 >>> 3 | 0;
                 $3 = ($8 << 3 | 0) + 11612 | 0;
                 $4 = HEAP32[(0 + 11592 | 0) >> 2] | 0;
                 label$21 : {
                  label$22 : {
                   $8 = 1 << $8 | 0;
                   if ($2 & $8 | 0) {
                    break label$22
                   }
                   HEAP32[(0 + 11572 | 0) >> 2] = $2 | $8 | 0;
                   $8 = $3;
                   break label$21;
                  }
                  $8 = HEAP32[($3 + 8 | 0) >> 2] | 0;
                 }
                 HEAP32[($3 + 8 | 0) >> 2] = $4;
                 HEAP32[($8 + 12 | 0) >> 2] = $4;
                 HEAP32[($4 + 12 | 0) >> 2] = $3;
                 HEAP32[($4 + 8 | 0) >> 2] = $8;
                }
                HEAP32[(0 + 11592 | 0) >> 2] = $6;
                HEAP32[(0 + 11580 | 0) >> 2] = $5;
                break label$1;
               }
               $9 = HEAP32[(0 + 11576 | 0) >> 2] | 0;
               if (!$9) {
                break label$12
               }
               $0 = ($9 & (0 - $9 | 0) | 0) + -1 | 0;
               $212 = $0;
               $0 = ($0 >>> 12 | 0) & 16 | 0;
               $4 = $212 >>> $0 | 0;
               $5 = ($4 >>> 5 | 0) & 8 | 0;
               $223 = $5 | $0 | 0;
               $0 = $4 >>> $5 | 0;
               $4 = ($0 >>> 2 | 0) & 4 | 0;
               $231 = $223 | $4 | 0;
               $0 = $0 >>> $4 | 0;
               $4 = ($0 >>> 1 | 0) & 2 | 0;
               $239 = $231 | $4 | 0;
               $0 = $0 >>> $4 | 0;
               $4 = ($0 >>> 1 | 0) & 1 | 0;
               $6 = HEAP32[(((($239 | $4 | 0) + ($0 >>> $4 | 0) | 0) << 2 | 0) + 11876 | 0) >> 2] | 0;
               $4 = ((HEAP32[($6 + 4 | 0) >> 2] | 0) & -8 | 0) - $3 | 0;
               $5 = $6;
               label$23 : {
                label$24 : while (1) {
                 label$25 : {
                  $0 = HEAP32[($5 + 16 | 0) >> 2] | 0;
                  if ($0) {
                   break label$25
                  }
                  $0 = HEAP32[($5 + 20 | 0) >> 2] | 0;
                  if (!$0) {
                   break label$23
                  }
                 }
                 $5 = ((HEAP32[($0 + 4 | 0) >> 2] | 0) & -8 | 0) - $3 | 0;
                 $274 = $5;
                 $5 = $5 >>> 0 < $4 >>> 0;
                 $4 = $5 ? $274 : $4;
                 $6 = $5 ? $0 : $6;
                 $5 = $0;
                 continue label$24;
                };
               }
               $10 = $6 + $3 | 0;
               if ($10 >>> 0 <= $6 >>> 0) {
                break label$11
               }
               $11 = HEAP32[($6 + 24 | 0) >> 2] | 0;
               label$26 : {
                $8 = HEAP32[($6 + 12 | 0) >> 2] | 0;
                if (($8 | 0) == ($6 | 0)) {
                 break label$26
                }
                $0 = HEAP32[($6 + 8 | 0) >> 2] | 0;
                HEAP32[(0 + 11588 | 0) >> 2] | 0;
                HEAP32[($0 + 12 | 0) >> 2] = $8;
                HEAP32[($8 + 8 | 0) >> 2] = $0;
                break label$2;
               }
               label$27 : {
                $5 = $6 + 20 | 0;
                $0 = HEAP32[$5 >> 2] | 0;
                if ($0) {
                 break label$27
                }
                $0 = HEAP32[($6 + 16 | 0) >> 2] | 0;
                if (!$0) {
                 break label$10
                }
                $5 = $6 + 16 | 0;
               }
               label$28 : while (1) {
                $12 = $5;
                $8 = $0;
                $5 = $0 + 20 | 0;
                $0 = HEAP32[$5 >> 2] | 0;
                if ($0) {
                 continue label$28
                }
                $5 = $8 + 16 | 0;
                $0 = HEAP32[($8 + 16 | 0) >> 2] | 0;
                if ($0) {
                 continue label$28
                }
                break label$28;
               };
               HEAP32[$12 >> 2] = 0;
               break label$2;
              }
              $3 = -1;
              if ($0 >>> 0 > -65 >>> 0) {
               break label$12
              }
              $0 = $0 + 11 | 0;
              $3 = $0 & -8 | 0;
              $7 = HEAP32[(0 + 11576 | 0) >> 2] | 0;
              if (!$7) {
               break label$12
              }
              $12 = 0;
              label$29 : {
               if ($3 >>> 0 < 256 >>> 0) {
                break label$29
               }
               $12 = 31;
               if ($3 >>> 0 > 16777215 >>> 0) {
                break label$29
               }
               $0 = $0 >>> 8 | 0;
               $347 = $0;
               $0 = (($0 + 1048320 | 0) >>> 16 | 0) & 8 | 0;
               $4 = $347 << $0 | 0;
               $354 = $4;
               $4 = (($4 + 520192 | 0) >>> 16 | 0) & 4 | 0;
               $5 = $354 << $4 | 0;
               $361 = $5;
               $5 = (($5 + 245760 | 0) >>> 16 | 0) & 2 | 0;
               $0 = (($361 << $5 | 0) >>> 15 | 0) - ($0 | $4 | 0 | $5 | 0) | 0;
               $12 = ($0 << 1 | 0 | (($3 >>> ($0 + 21 | 0) | 0) & 1 | 0) | 0) + 28 | 0;
              }
              $4 = 0 - $3 | 0;
              label$30 : {
               label$31 : {
                label$32 : {
                 label$33 : {
                  $5 = HEAP32[(($12 << 2 | 0) + 11876 | 0) >> 2] | 0;
                  if ($5) {
                   break label$33
                  }
                  $0 = 0;
                  $8 = 0;
                  break label$32;
                 }
                 $0 = 0;
                 $6 = $3 << (($12 | 0) == (31 | 0) ? 0 : 25 - ($12 >>> 1 | 0) | 0) | 0;
                 $8 = 0;
                 label$34 : while (1) {
                  label$35 : {
                   $2 = ((HEAP32[($5 + 4 | 0) >> 2] | 0) & -8 | 0) - $3 | 0;
                   if ($2 >>> 0 >= $4 >>> 0) {
                    break label$35
                   }
                   $4 = $2;
                   $8 = $5;
                   if ($4) {
                    break label$35
                   }
                   $4 = 0;
                   $8 = $5;
                   $0 = $5;
                   break label$31;
                  }
                  $2 = HEAP32[($5 + 20 | 0) >> 2] | 0;
                  $5 = HEAP32[(($5 + (($6 >>> 29 | 0) & 4 | 0) | 0) + 16 | 0) >> 2] | 0;
                  $0 = $2 ? (($2 | 0) == ($5 | 0) ? $0 : $2) : $0;
                  $6 = $6 << 1 | 0;
                  if ($5) {
                   continue label$34
                  }
                  break label$34;
                 };
                }
                label$36 : {
                 if ($0 | $8 | 0) {
                  break label$36
                 }
                 $8 = 0;
                 $0 = 2 << $12 | 0;
                 $0 = ($0 | (0 - $0 | 0) | 0) & $7 | 0;
                 if (!$0) {
                  break label$12
                 }
                 $0 = ($0 & (0 - $0 | 0) | 0) + -1 | 0;
                 $452 = $0;
                 $0 = ($0 >>> 12 | 0) & 16 | 0;
                 $5 = $452 >>> $0 | 0;
                 $6 = ($5 >>> 5 | 0) & 8 | 0;
                 $463 = $6 | $0 | 0;
                 $0 = $5 >>> $6 | 0;
                 $5 = ($0 >>> 2 | 0) & 4 | 0;
                 $471 = $463 | $5 | 0;
                 $0 = $0 >>> $5 | 0;
                 $5 = ($0 >>> 1 | 0) & 2 | 0;
                 $479 = $471 | $5 | 0;
                 $0 = $0 >>> $5 | 0;
                 $5 = ($0 >>> 1 | 0) & 1 | 0;
                 $0 = HEAP32[(((($479 | $5 | 0) + ($0 >>> $5 | 0) | 0) << 2 | 0) + 11876 | 0) >> 2] | 0;
                }
                if (!$0) {
                 break label$30
                }
               }
               label$37 : while (1) {
                $2 = ((HEAP32[($0 + 4 | 0) >> 2] | 0) & -8 | 0) - $3 | 0;
                $6 = $2 >>> 0 < $4 >>> 0;
                label$38 : {
                 $5 = HEAP32[($0 + 16 | 0) >> 2] | 0;
                 if ($5) {
                  break label$38
                 }
                 $5 = HEAP32[($0 + 20 | 0) >> 2] | 0;
                }
                $4 = $6 ? $2 : $4;
                $8 = $6 ? $0 : $8;
                $0 = $5;
                if ($0) {
                 continue label$37
                }
                break label$37;
               };
              }
              if (!$8) {
               break label$12
              }
              if ($4 >>> 0 >= ((HEAP32[(0 + 11580 | 0) >> 2] | 0) - $3 | 0) >>> 0) {
               break label$12
              }
              $12 = $8 + $3 | 0;
              if ($12 >>> 0 <= $8 >>> 0) {
               break label$11
              }
              $9 = HEAP32[($8 + 24 | 0) >> 2] | 0;
              label$39 : {
               $6 = HEAP32[($8 + 12 | 0) >> 2] | 0;
               if (($6 | 0) == ($8 | 0)) {
                break label$39
               }
               $0 = HEAP32[($8 + 8 | 0) >> 2] | 0;
               HEAP32[(0 + 11588 | 0) >> 2] | 0;
               HEAP32[($0 + 12 | 0) >> 2] = $6;
               HEAP32[($6 + 8 | 0) >> 2] = $0;
               break label$3;
              }
              label$40 : {
               $5 = $8 + 20 | 0;
               $0 = HEAP32[$5 >> 2] | 0;
               if ($0) {
                break label$40
               }
               $0 = HEAP32[($8 + 16 | 0) >> 2] | 0;
               if (!$0) {
                break label$9
               }
               $5 = $8 + 16 | 0;
              }
              label$41 : while (1) {
               $2 = $5;
               $6 = $0;
               $5 = $0 + 20 | 0;
               $0 = HEAP32[$5 >> 2] | 0;
               if ($0) {
                continue label$41
               }
               $5 = $6 + 16 | 0;
               $0 = HEAP32[($6 + 16 | 0) >> 2] | 0;
               if ($0) {
                continue label$41
               }
               break label$41;
              };
              HEAP32[$2 >> 2] = 0;
              break label$3;
             }
             label$42 : {
              $0 = HEAP32[(0 + 11580 | 0) >> 2] | 0;
              if ($0 >>> 0 < $3 >>> 0) {
               break label$42
              }
              $4 = HEAP32[(0 + 11592 | 0) >> 2] | 0;
              label$43 : {
               label$44 : {
                $5 = $0 - $3 | 0;
                if ($5 >>> 0 < 16 >>> 0) {
                 break label$44
                }
                HEAP32[(0 + 11580 | 0) >> 2] = $5;
                $6 = $4 + $3 | 0;
                HEAP32[(0 + 11592 | 0) >> 2] = $6;
                HEAP32[($6 + 4 | 0) >> 2] = $5 | 1 | 0;
                HEAP32[($4 + $0 | 0) >> 2] = $5;
                HEAP32[($4 + 4 | 0) >> 2] = $3 | 3 | 0;
                break label$43;
               }
               HEAP32[(0 + 11592 | 0) >> 2] = 0;
               HEAP32[(0 + 11580 | 0) >> 2] = 0;
               HEAP32[($4 + 4 | 0) >> 2] = $0 | 3 | 0;
               $0 = ($0 + $4 | 0) + 4 | 0;
               HEAP32[$0 >> 2] = HEAP32[$0 >> 2] | 0 | 1 | 0;
              }
              $0 = $4 + 8 | 0;
              break label$1;
             }
             label$45 : {
              $6 = HEAP32[(0 + 11584 | 0) >> 2] | 0;
              if ($6 >>> 0 <= $3 >>> 0) {
               break label$45
              }
              $4 = $6 - $3 | 0;
              HEAP32[(0 + 11584 | 0) >> 2] = $4;
              $0 = HEAP32[(0 + 11596 | 0) >> 2] | 0;
              $5 = $0 + $3 | 0;
              HEAP32[(0 + 11596 | 0) >> 2] = $5;
              HEAP32[($5 + 4 | 0) >> 2] = $4 | 1 | 0;
              HEAP32[($0 + 4 | 0) >> 2] = $3 | 3 | 0;
              $0 = $0 + 8 | 0;
              break label$1;
             }
             label$46 : {
              label$47 : {
               if (!(HEAP32[(0 + 12044 | 0) >> 2] | 0)) {
                break label$47
               }
               $4 = HEAP32[(0 + 12052 | 0) >> 2] | 0;
               break label$46;
              }
              i64toi32_i32$1 = 0;
              i64toi32_i32$0 = -1;
              HEAP32[(i64toi32_i32$1 + 12056 | 0) >> 2] = -1;
              HEAP32[(i64toi32_i32$1 + 12060 | 0) >> 2] = i64toi32_i32$0;
              i64toi32_i32$1 = 0;
              i64toi32_i32$0 = 4096;
              HEAP32[(i64toi32_i32$1 + 12048 | 0) >> 2] = 4096;
              HEAP32[(i64toi32_i32$1 + 12052 | 0) >> 2] = i64toi32_i32$0;
              HEAP32[(0 + 12044 | 0) >> 2] = (($1 + 12 | 0) & -16 | 0) ^ 1431655768 | 0;
              HEAP32[(0 + 12064 | 0) >> 2] = 0;
              HEAP32[(0 + 12016 | 0) >> 2] = 0;
              $4 = 4096;
             }
             $0 = 0;
             $7 = $3 + 47 | 0;
             $2 = $4 + $7 | 0;
             $12 = 0 - $4 | 0;
             $8 = $2 & $12 | 0;
             if ($8 >>> 0 <= $3 >>> 0) {
              break label$1
             }
             $0 = 0;
             label$48 : {
              $4 = HEAP32[(0 + 12012 | 0) >> 2] | 0;
              if (!$4) {
               break label$48
              }
              $5 = HEAP32[(0 + 12004 | 0) >> 2] | 0;
              $9 = $5 + $8 | 0;
              if ($9 >>> 0 <= $5 >>> 0) {
               break label$1
              }
              if ($9 >>> 0 > $4 >>> 0) {
               break label$1
              }
             }
             if ((HEAPU8[(0 + 12016 | 0) >> 0] | 0) & 4 | 0) {
              break label$6
             }
             label$49 : {
              label$50 : {
               label$51 : {
                $4 = HEAP32[(0 + 11596 | 0) >> 2] | 0;
                if (!$4) {
                 break label$51
                }
                $0 = 12020;
                label$52 : while (1) {
                 label$53 : {
                  $5 = HEAP32[$0 >> 2] | 0;
                  if ($5 >>> 0 > $4 >>> 0) {
                   break label$53
                  }
                  if (($5 + (HEAP32[($0 + 4 | 0) >> 2] | 0) | 0) >>> 0 > $4 >>> 0) {
                   break label$50
                  }
                 }
                 $0 = HEAP32[($0 + 8 | 0) >> 2] | 0;
                 if ($0) {
                  continue label$52
                 }
                 break label$52;
                };
               }
               $6 = sbrk(0 | 0) | 0;
               if (($6 | 0) == (-1 | 0)) {
                break label$7
               }
               $2 = $8;
               label$54 : {
                $0 = HEAP32[(0 + 12048 | 0) >> 2] | 0;
                $4 = $0 + -1 | 0;
                if (!($4 & $6 | 0)) {
                 break label$54
                }
                $2 = ($8 - $6 | 0) + (($4 + $6 | 0) & (0 - $0 | 0) | 0) | 0;
               }
               if ($2 >>> 0 <= $3 >>> 0) {
                break label$7
               }
               if ($2 >>> 0 > 2147483646 >>> 0) {
                break label$7
               }
               label$55 : {
                $0 = HEAP32[(0 + 12012 | 0) >> 2] | 0;
                if (!$0) {
                 break label$55
                }
                $4 = HEAP32[(0 + 12004 | 0) >> 2] | 0;
                $5 = $4 + $2 | 0;
                if ($5 >>> 0 <= $4 >>> 0) {
                 break label$7
                }
                if ($5 >>> 0 > $0 >>> 0) {
                 break label$7
                }
               }
               $0 = sbrk($2 | 0) | 0;
               if (($0 | 0) != ($6 | 0)) {
                break label$49
               }
               break label$5;
              }
              $2 = ($2 - $6 | 0) & $12 | 0;
              if ($2 >>> 0 > 2147483646 >>> 0) {
               break label$7
              }
              $6 = sbrk($2 | 0) | 0;
              if (($6 | 0) == ((HEAP32[$0 >> 2] | 0) + (HEAP32[($0 + 4 | 0) >> 2] | 0) | 0 | 0)) {
               break label$8
              }
              $0 = $6;
             }
             label$56 : {
              if (($0 | 0) == (-1 | 0)) {
               break label$56
              }
              if (($3 + 48 | 0) >>> 0 <= $2 >>> 0) {
               break label$56
              }
              label$57 : {
               $4 = HEAP32[(0 + 12052 | 0) >> 2] | 0;
               $4 = (($7 - $2 | 0) + $4 | 0) & (0 - $4 | 0) | 0;
               if ($4 >>> 0 <= 2147483646 >>> 0) {
                break label$57
               }
               $6 = $0;
               break label$5;
              }
              label$58 : {
               if ((sbrk($4 | 0) | 0 | 0) == (-1 | 0)) {
                break label$58
               }
               $2 = $4 + $2 | 0;
               $6 = $0;
               break label$5;
              }
              sbrk(0 - $2 | 0 | 0) | 0;
              break label$7;
             }
             $6 = $0;
             if (($0 | 0) != (-1 | 0)) {
              break label$5
             }
             break label$7;
            }
            abort();
           }
           $8 = 0;
           break label$2;
          }
          $6 = 0;
          break label$3;
         }
         if (($6 | 0) != (-1 | 0)) {
          break label$5
         }
        }
        HEAP32[(0 + 12016 | 0) >> 2] = HEAP32[(0 + 12016 | 0) >> 2] | 0 | 4 | 0;
       }
       if ($8 >>> 0 > 2147483646 >>> 0) {
        break label$4
       }
       $6 = sbrk($8 | 0) | 0;
       $0 = sbrk(0 | 0) | 0;
       if (($6 | 0) == (-1 | 0)) {
        break label$4
       }
       if (($0 | 0) == (-1 | 0)) {
        break label$4
       }
       if ($6 >>> 0 >= $0 >>> 0) {
        break label$4
       }
       $2 = $0 - $6 | 0;
       if ($2 >>> 0 <= ($3 + 40 | 0) >>> 0) {
        break label$4
       }
      }
      $0 = (HEAP32[(0 + 12004 | 0) >> 2] | 0) + $2 | 0;
      HEAP32[(0 + 12004 | 0) >> 2] = $0;
      label$59 : {
       if ($0 >>> 0 <= (HEAP32[(0 + 12008 | 0) >> 2] | 0) >>> 0) {
        break label$59
       }
       HEAP32[(0 + 12008 | 0) >> 2] = $0;
      }
      label$60 : {
       label$61 : {
        label$62 : {
         label$63 : {
          $4 = HEAP32[(0 + 11596 | 0) >> 2] | 0;
          if (!$4) {
           break label$63
          }
          $0 = 12020;
          label$64 : while (1) {
           $5 = HEAP32[$0 >> 2] | 0;
           $8 = HEAP32[($0 + 4 | 0) >> 2] | 0;
           if (($6 | 0) == ($5 + $8 | 0 | 0)) {
            break label$62
           }
           $0 = HEAP32[($0 + 8 | 0) >> 2] | 0;
           if ($0) {
            continue label$64
           }
           break label$61;
          };
         }
         label$65 : {
          label$66 : {
           $0 = HEAP32[(0 + 11588 | 0) >> 2] | 0;
           if (!$0) {
            break label$66
           }
           if ($6 >>> 0 >= $0 >>> 0) {
            break label$65
           }
          }
          HEAP32[(0 + 11588 | 0) >> 2] = $6;
         }
         $0 = 0;
         HEAP32[(0 + 12024 | 0) >> 2] = $2;
         HEAP32[(0 + 12020 | 0) >> 2] = $6;
         HEAP32[(0 + 11604 | 0) >> 2] = -1;
         HEAP32[(0 + 11608 | 0) >> 2] = HEAP32[(0 + 12044 | 0) >> 2] | 0;
         HEAP32[(0 + 12032 | 0) >> 2] = 0;
         label$67 : while (1) {
          $4 = $0 << 3 | 0;
          $5 = $4 + 11612 | 0;
          HEAP32[($4 + 11620 | 0) >> 2] = $5;
          HEAP32[($4 + 11624 | 0) >> 2] = $5;
          $0 = $0 + 1 | 0;
          if (($0 | 0) != (32 | 0)) {
           continue label$67
          }
          break label$67;
         };
         $0 = ($6 + 8 | 0) & 7 | 0 ? (-8 - $6 | 0) & 7 | 0 : 0;
         $4 = $6 + $0 | 0;
         HEAP32[(0 + 11596 | 0) >> 2] = $4;
         $0 = ($2 - $0 | 0) + -40 | 0;
         HEAP32[(0 + 11584 | 0) >> 2] = $0;
         HEAP32[($4 + 4 | 0) >> 2] = $0 | 1 | 0;
         HEAP32[(($2 + $6 | 0) + -36 | 0) >> 2] = 40;
         HEAP32[(0 + 11600 | 0) >> 2] = HEAP32[(0 + 12060 | 0) >> 2] | 0;
         break label$60;
        }
        if ((HEAPU8[($0 + 12 | 0) >> 0] | 0) & 8 | 0) {
         break label$61
        }
        if ($5 >>> 0 > $4 >>> 0) {
         break label$61
        }
        if ($6 >>> 0 <= $4 >>> 0) {
         break label$61
        }
        HEAP32[($0 + 4 | 0) >> 2] = $8 + $2 | 0;
        $0 = ($4 + 8 | 0) & 7 | 0 ? (-8 - $4 | 0) & 7 | 0 : 0;
        $5 = $4 + $0 | 0;
        HEAP32[(0 + 11596 | 0) >> 2] = $5;
        $6 = (HEAP32[(0 + 11584 | 0) >> 2] | 0) + $2 | 0;
        $0 = $6 - $0 | 0;
        HEAP32[(0 + 11584 | 0) >> 2] = $0;
        HEAP32[($5 + 4 | 0) >> 2] = $0 | 1 | 0;
        HEAP32[(($6 + $4 | 0) + 4 | 0) >> 2] = 40;
        HEAP32[(0 + 11600 | 0) >> 2] = HEAP32[(0 + 12060 | 0) >> 2] | 0;
        break label$60;
       }
       label$68 : {
        $12 = HEAP32[(0 + 11588 | 0) >> 2] | 0;
        if ($6 >>> 0 >= $12 >>> 0) {
         break label$68
        }
        HEAP32[(0 + 11588 | 0) >> 2] = $6;
        $12 = $6;
       }
       $8 = $6 + $2 | 0;
       $0 = 12020;
       label$69 : {
        label$70 : {
         label$71 : {
          label$72 : {
           label$73 : {
            label$74 : {
             label$75 : {
              label$76 : while (1) {
               if ((HEAP32[$0 >> 2] | 0 | 0) == ($8 | 0)) {
                break label$75
               }
               $0 = HEAP32[($0 + 8 | 0) >> 2] | 0;
               if ($0) {
                continue label$76
               }
               break label$74;
              };
             }
             if (!((HEAPU8[($0 + 12 | 0) >> 0] | 0) & 8 | 0)) {
              break label$73
             }
            }
            $0 = 12020;
            label$77 : while (1) {
             label$78 : {
              $5 = HEAP32[$0 >> 2] | 0;
              if ($5 >>> 0 > $4 >>> 0) {
               break label$78
              }
              $5 = $5 + (HEAP32[($0 + 4 | 0) >> 2] | 0) | 0;
              if ($5 >>> 0 > $4 >>> 0) {
               break label$72
              }
             }
             $0 = HEAP32[($0 + 8 | 0) >> 2] | 0;
             continue label$77;
            };
           }
           HEAP32[$0 >> 2] = $6;
           HEAP32[($0 + 4 | 0) >> 2] = (HEAP32[($0 + 4 | 0) >> 2] | 0) + $2 | 0;
           $2 = $6 + (($6 + 8 | 0) & 7 | 0 ? (-8 - $6 | 0) & 7 | 0 : 0) | 0;
           HEAP32[($2 + 4 | 0) >> 2] = $3 | 3 | 0;
           $8 = $8 + (($8 + 8 | 0) & 7 | 0 ? (-8 - $8 | 0) & 7 | 0 : 0) | 0;
           $3 = $2 + $3 | 0;
           $5 = $8 - $3 | 0;
           label$79 : {
            if (($4 | 0) != ($8 | 0)) {
             break label$79
            }
            HEAP32[(0 + 11596 | 0) >> 2] = $3;
            $0 = (HEAP32[(0 + 11584 | 0) >> 2] | 0) + $5 | 0;
            HEAP32[(0 + 11584 | 0) >> 2] = $0;
            HEAP32[($3 + 4 | 0) >> 2] = $0 | 1 | 0;
            break label$70;
           }
           label$80 : {
            if ((HEAP32[(0 + 11592 | 0) >> 2] | 0 | 0) != ($8 | 0)) {
             break label$80
            }
            HEAP32[(0 + 11592 | 0) >> 2] = $3;
            $0 = (HEAP32[(0 + 11580 | 0) >> 2] | 0) + $5 | 0;
            HEAP32[(0 + 11580 | 0) >> 2] = $0;
            HEAP32[($3 + 4 | 0) >> 2] = $0 | 1 | 0;
            HEAP32[($3 + $0 | 0) >> 2] = $0;
            break label$70;
           }
           label$81 : {
            $0 = HEAP32[($8 + 4 | 0) >> 2] | 0;
            if (($0 & 3 | 0 | 0) != (1 | 0)) {
             break label$81
            }
            $7 = $0 & -8 | 0;
            label$82 : {
             label$83 : {
              if ($0 >>> 0 > 255 >>> 0) {
               break label$83
              }
              $4 = HEAP32[($8 + 8 | 0) >> 2] | 0;
              $12 = $0 >>> 3 | 0;
              $6 = ($12 << 3 | 0) + 11612 | 0;
              label$84 : {
               $0 = HEAP32[($8 + 12 | 0) >> 2] | 0;
               if (($0 | 0) != ($4 | 0)) {
                break label$84
               }
               (wasm2js_i32$0 = 0, wasm2js_i32$1 = (HEAP32[(0 + 11572 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $12 | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 11572 | 0) >> 2] = wasm2js_i32$1;
               break label$82;
              }
              HEAP32[($4 + 12 | 0) >> 2] = $0;
              HEAP32[($0 + 8 | 0) >> 2] = $4;
              break label$82;
             }
             $9 = HEAP32[($8 + 24 | 0) >> 2] | 0;
             label$85 : {
              label$86 : {
               $6 = HEAP32[($8 + 12 | 0) >> 2] | 0;
               if (($6 | 0) == ($8 | 0)) {
                break label$86
               }
               $0 = HEAP32[($8 + 8 | 0) >> 2] | 0;
               HEAP32[($0 + 12 | 0) >> 2] = $6;
               HEAP32[($6 + 8 | 0) >> 2] = $0;
               break label$85;
              }
              label$87 : {
               $0 = $8 + 20 | 0;
               $4 = HEAP32[$0 >> 2] | 0;
               if ($4) {
                break label$87
               }
               $0 = $8 + 16 | 0;
               $4 = HEAP32[$0 >> 2] | 0;
               if ($4) {
                break label$87
               }
               $6 = 0;
               break label$85;
              }
              label$88 : while (1) {
               $12 = $0;
               $6 = $4;
               $0 = $4 + 20 | 0;
               $4 = HEAP32[$0 >> 2] | 0;
               if ($4) {
                continue label$88
               }
               $0 = $6 + 16 | 0;
               $4 = HEAP32[($6 + 16 | 0) >> 2] | 0;
               if ($4) {
                continue label$88
               }
               break label$88;
              };
              HEAP32[$12 >> 2] = 0;
             }
             if (!$9) {
              break label$82
             }
             label$89 : {
              label$90 : {
               $4 = HEAP32[($8 + 28 | 0) >> 2] | 0;
               $0 = ($4 << 2 | 0) + 11876 | 0;
               if ((HEAP32[$0 >> 2] | 0 | 0) != ($8 | 0)) {
                break label$90
               }
               HEAP32[$0 >> 2] = $6;
               if ($6) {
                break label$89
               }
               (wasm2js_i32$0 = 0, wasm2js_i32$1 = (HEAP32[(0 + 11576 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $4 | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 11576 | 0) >> 2] = wasm2js_i32$1;
               break label$82;
              }
              HEAP32[($9 + ((HEAP32[($9 + 16 | 0) >> 2] | 0 | 0) == ($8 | 0) ? 16 : 20) | 0) >> 2] = $6;
              if (!$6) {
               break label$82
              }
             }
             HEAP32[($6 + 24 | 0) >> 2] = $9;
             label$91 : {
              $0 = HEAP32[($8 + 16 | 0) >> 2] | 0;
              if (!$0) {
               break label$91
              }
              HEAP32[($6 + 16 | 0) >> 2] = $0;
              HEAP32[($0 + 24 | 0) >> 2] = $6;
             }
             $0 = HEAP32[($8 + 20 | 0) >> 2] | 0;
             if (!$0) {
              break label$82
             }
             HEAP32[($6 + 20 | 0) >> 2] = $0;
             HEAP32[($0 + 24 | 0) >> 2] = $6;
            }
            $5 = $7 + $5 | 0;
            $8 = $8 + $7 | 0;
           }
           HEAP32[($8 + 4 | 0) >> 2] = (HEAP32[($8 + 4 | 0) >> 2] | 0) & -2 | 0;
           HEAP32[($3 + 4 | 0) >> 2] = $5 | 1 | 0;
           HEAP32[($3 + $5 | 0) >> 2] = $5;
           label$92 : {
            if ($5 >>> 0 > 255 >>> 0) {
             break label$92
            }
            $4 = $5 >>> 3 | 0;
            $0 = ($4 << 3 | 0) + 11612 | 0;
            label$93 : {
             label$94 : {
              $5 = HEAP32[(0 + 11572 | 0) >> 2] | 0;
              $4 = 1 << $4 | 0;
              if ($5 & $4 | 0) {
               break label$94
              }
              HEAP32[(0 + 11572 | 0) >> 2] = $5 | $4 | 0;
              $4 = $0;
              break label$93;
             }
             $4 = HEAP32[($0 + 8 | 0) >> 2] | 0;
            }
            HEAP32[($0 + 8 | 0) >> 2] = $3;
            HEAP32[($4 + 12 | 0) >> 2] = $3;
            HEAP32[($3 + 12 | 0) >> 2] = $0;
            HEAP32[($3 + 8 | 0) >> 2] = $4;
            break label$70;
           }
           $0 = 31;
           label$95 : {
            if ($5 >>> 0 > 16777215 >>> 0) {
             break label$95
            }
            $0 = $5 >>> 8 | 0;
            $1173 = $0;
            $0 = (($0 + 1048320 | 0) >>> 16 | 0) & 8 | 0;
            $4 = $1173 << $0 | 0;
            $1180 = $4;
            $4 = (($4 + 520192 | 0) >>> 16 | 0) & 4 | 0;
            $6 = $1180 << $4 | 0;
            $1187 = $6;
            $6 = (($6 + 245760 | 0) >>> 16 | 0) & 2 | 0;
            $0 = (($1187 << $6 | 0) >>> 15 | 0) - ($0 | $4 | 0 | $6 | 0) | 0;
            $0 = ($0 << 1 | 0 | (($5 >>> ($0 + 21 | 0) | 0) & 1 | 0) | 0) + 28 | 0;
           }
           HEAP32[($3 + 28 | 0) >> 2] = $0;
           i64toi32_i32$1 = $3;
           i64toi32_i32$0 = 0;
           HEAP32[($3 + 16 | 0) >> 2] = 0;
           HEAP32[($3 + 20 | 0) >> 2] = i64toi32_i32$0;
           $4 = ($0 << 2 | 0) + 11876 | 0;
           label$96 : {
            label$97 : {
             $6 = HEAP32[(0 + 11576 | 0) >> 2] | 0;
             $8 = 1 << $0 | 0;
             if ($6 & $8 | 0) {
              break label$97
             }
             HEAP32[(0 + 11576 | 0) >> 2] = $6 | $8 | 0;
             HEAP32[$4 >> 2] = $3;
             HEAP32[($3 + 24 | 0) >> 2] = $4;
             break label$96;
            }
            $0 = $5 << (($0 | 0) == (31 | 0) ? 0 : 25 - ($0 >>> 1 | 0) | 0) | 0;
            $6 = HEAP32[$4 >> 2] | 0;
            label$98 : while (1) {
             $4 = $6;
             if (((HEAP32[($4 + 4 | 0) >> 2] | 0) & -8 | 0 | 0) == ($5 | 0)) {
              break label$71
             }
             $6 = $0 >>> 29 | 0;
             $0 = $0 << 1 | 0;
             $8 = ($4 + ($6 & 4 | 0) | 0) + 16 | 0;
             $6 = HEAP32[$8 >> 2] | 0;
             if ($6) {
              continue label$98
             }
             break label$98;
            };
            HEAP32[$8 >> 2] = $3;
            HEAP32[($3 + 24 | 0) >> 2] = $4;
           }
           HEAP32[($3 + 12 | 0) >> 2] = $3;
           HEAP32[($3 + 8 | 0) >> 2] = $3;
           break label$70;
          }
          $0 = ($6 + 8 | 0) & 7 | 0 ? (-8 - $6 | 0) & 7 | 0 : 0;
          $12 = $6 + $0 | 0;
          HEAP32[(0 + 11596 | 0) >> 2] = $12;
          $0 = ($2 - $0 | 0) + -40 | 0;
          HEAP32[(0 + 11584 | 0) >> 2] = $0;
          HEAP32[($12 + 4 | 0) >> 2] = $0 | 1 | 0;
          HEAP32[($8 + -36 | 0) >> 2] = 40;
          HEAP32[(0 + 11600 | 0) >> 2] = HEAP32[(0 + 12060 | 0) >> 2] | 0;
          $0 = ($5 + (($5 + -39 | 0) & 7 | 0 ? (39 - $5 | 0) & 7 | 0 : 0) | 0) + -47 | 0;
          $8 = $0 >>> 0 < ($4 + 16 | 0) >>> 0 ? $4 : $0;
          HEAP32[($8 + 4 | 0) >> 2] = 27;
          i64toi32_i32$2 = 0;
          i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 12028 | 0) >> 2] | 0;
          i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 12032 | 0) >> 2] | 0;
          $1307 = i64toi32_i32$0;
          i64toi32_i32$0 = $8 + 16 | 0;
          HEAP32[i64toi32_i32$0 >> 2] = $1307;
          HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
          i64toi32_i32$2 = 0;
          i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 12020 | 0) >> 2] | 0;
          i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 12024 | 0) >> 2] | 0;
          $1309 = i64toi32_i32$1;
          i64toi32_i32$1 = $8;
          HEAP32[($8 + 8 | 0) >> 2] = $1309;
          HEAP32[($8 + 12 | 0) >> 2] = i64toi32_i32$0;
          HEAP32[(0 + 12028 | 0) >> 2] = $8 + 8 | 0;
          HEAP32[(0 + 12024 | 0) >> 2] = $2;
          HEAP32[(0 + 12020 | 0) >> 2] = $6;
          HEAP32[(0 + 12032 | 0) >> 2] = 0;
          $0 = $8 + 24 | 0;
          label$99 : while (1) {
           HEAP32[($0 + 4 | 0) >> 2] = 7;
           $6 = $0 + 8 | 0;
           $0 = $0 + 4 | 0;
           if ($5 >>> 0 > $6 >>> 0) {
            continue label$99
           }
           break label$99;
          };
          if (($8 | 0) == ($4 | 0)) {
           break label$60
          }
          HEAP32[($8 + 4 | 0) >> 2] = (HEAP32[($8 + 4 | 0) >> 2] | 0) & -2 | 0;
          $2 = $8 - $4 | 0;
          HEAP32[($4 + 4 | 0) >> 2] = $2 | 1 | 0;
          HEAP32[$8 >> 2] = $2;
          label$100 : {
           if ($2 >>> 0 > 255 >>> 0) {
            break label$100
           }
           $5 = $2 >>> 3 | 0;
           $0 = ($5 << 3 | 0) + 11612 | 0;
           label$101 : {
            label$102 : {
             $6 = HEAP32[(0 + 11572 | 0) >> 2] | 0;
             $5 = 1 << $5 | 0;
             if ($6 & $5 | 0) {
              break label$102
             }
             HEAP32[(0 + 11572 | 0) >> 2] = $6 | $5 | 0;
             $5 = $0;
             break label$101;
            }
            $5 = HEAP32[($0 + 8 | 0) >> 2] | 0;
           }
           HEAP32[($0 + 8 | 0) >> 2] = $4;
           HEAP32[($5 + 12 | 0) >> 2] = $4;
           HEAP32[($4 + 12 | 0) >> 2] = $0;
           HEAP32[($4 + 8 | 0) >> 2] = $5;
           break label$60;
          }
          $0 = 31;
          label$103 : {
           if ($2 >>> 0 > 16777215 >>> 0) {
            break label$103
           }
           $0 = $2 >>> 8 | 0;
           $1370 = $0;
           $0 = (($0 + 1048320 | 0) >>> 16 | 0) & 8 | 0;
           $5 = $1370 << $0 | 0;
           $1377 = $5;
           $5 = (($5 + 520192 | 0) >>> 16 | 0) & 4 | 0;
           $6 = $1377 << $5 | 0;
           $1384 = $6;
           $6 = (($6 + 245760 | 0) >>> 16 | 0) & 2 | 0;
           $0 = (($1384 << $6 | 0) >>> 15 | 0) - ($0 | $5 | 0 | $6 | 0) | 0;
           $0 = ($0 << 1 | 0 | (($2 >>> ($0 + 21 | 0) | 0) & 1 | 0) | 0) + 28 | 0;
          }
          i64toi32_i32$1 = $4;
          i64toi32_i32$0 = 0;
          HEAP32[($4 + 16 | 0) >> 2] = 0;
          HEAP32[($4 + 20 | 0) >> 2] = i64toi32_i32$0;
          HEAP32[($4 + 28 | 0) >> 2] = $0;
          $5 = ($0 << 2 | 0) + 11876 | 0;
          label$104 : {
           label$105 : {
            $6 = HEAP32[(0 + 11576 | 0) >> 2] | 0;
            $8 = 1 << $0 | 0;
            if ($6 & $8 | 0) {
             break label$105
            }
            HEAP32[(0 + 11576 | 0) >> 2] = $6 | $8 | 0;
            HEAP32[$5 >> 2] = $4;
            HEAP32[($4 + 24 | 0) >> 2] = $5;
            break label$104;
           }
           $0 = $2 << (($0 | 0) == (31 | 0) ? 0 : 25 - ($0 >>> 1 | 0) | 0) | 0;
           $6 = HEAP32[$5 >> 2] | 0;
           label$106 : while (1) {
            $5 = $6;
            if (((HEAP32[($5 + 4 | 0) >> 2] | 0) & -8 | 0 | 0) == ($2 | 0)) {
             break label$69
            }
            $6 = $0 >>> 29 | 0;
            $0 = $0 << 1 | 0;
            $8 = ($5 + ($6 & 4 | 0) | 0) + 16 | 0;
            $6 = HEAP32[$8 >> 2] | 0;
            if ($6) {
             continue label$106
            }
            break label$106;
           };
           HEAP32[$8 >> 2] = $4;
           HEAP32[($4 + 24 | 0) >> 2] = $5;
          }
          HEAP32[($4 + 12 | 0) >> 2] = $4;
          HEAP32[($4 + 8 | 0) >> 2] = $4;
          break label$60;
         }
         $0 = HEAP32[($4 + 8 | 0) >> 2] | 0;
         HEAP32[($0 + 12 | 0) >> 2] = $3;
         HEAP32[($4 + 8 | 0) >> 2] = $3;
         HEAP32[($3 + 24 | 0) >> 2] = 0;
         HEAP32[($3 + 12 | 0) >> 2] = $4;
         HEAP32[($3 + 8 | 0) >> 2] = $0;
        }
        $0 = $2 + 8 | 0;
        break label$1;
       }
       $0 = HEAP32[($5 + 8 | 0) >> 2] | 0;
       HEAP32[($0 + 12 | 0) >> 2] = $4;
       HEAP32[($5 + 8 | 0) >> 2] = $4;
       HEAP32[($4 + 24 | 0) >> 2] = 0;
       HEAP32[($4 + 12 | 0) >> 2] = $5;
       HEAP32[($4 + 8 | 0) >> 2] = $0;
      }
      $0 = HEAP32[(0 + 11584 | 0) >> 2] | 0;
      if ($0 >>> 0 <= $3 >>> 0) {
       break label$4
      }
      $4 = $0 - $3 | 0;
      HEAP32[(0 + 11584 | 0) >> 2] = $4;
      $0 = HEAP32[(0 + 11596 | 0) >> 2] | 0;
      $5 = $0 + $3 | 0;
      HEAP32[(0 + 11596 | 0) >> 2] = $5;
      HEAP32[($5 + 4 | 0) >> 2] = $4 | 1 | 0;
      HEAP32[($0 + 4 | 0) >> 2] = $3 | 3 | 0;
      $0 = $0 + 8 | 0;
      break label$1;
     }
     (wasm2js_i32$0 = __errno_location() | 0, wasm2js_i32$1 = 48), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
     $0 = 0;
     break label$1;
    }
    label$107 : {
     if (!$9) {
      break label$107
     }
     label$108 : {
      label$109 : {
       $5 = HEAP32[($8 + 28 | 0) >> 2] | 0;
       $0 = ($5 << 2 | 0) + 11876 | 0;
       if (($8 | 0) != (HEAP32[$0 >> 2] | 0 | 0)) {
        break label$109
       }
       HEAP32[$0 >> 2] = $6;
       if ($6) {
        break label$108
       }
       $7 = $7 & (__wasm_rotl_i32(-2 | 0, $5 | 0) | 0) | 0;
       HEAP32[(0 + 11576 | 0) >> 2] = $7;
       break label$107;
      }
      HEAP32[($9 + ((HEAP32[($9 + 16 | 0) >> 2] | 0 | 0) == ($8 | 0) ? 16 : 20) | 0) >> 2] = $6;
      if (!$6) {
       break label$107
      }
     }
     HEAP32[($6 + 24 | 0) >> 2] = $9;
     label$110 : {
      $0 = HEAP32[($8 + 16 | 0) >> 2] | 0;
      if (!$0) {
       break label$110
      }
      HEAP32[($6 + 16 | 0) >> 2] = $0;
      HEAP32[($0 + 24 | 0) >> 2] = $6;
     }
     $0 = HEAP32[($8 + 20 | 0) >> 2] | 0;
     if (!$0) {
      break label$107
     }
     HEAP32[($6 + 20 | 0) >> 2] = $0;
     HEAP32[($0 + 24 | 0) >> 2] = $6;
    }
    label$111 : {
     label$112 : {
      if ($4 >>> 0 > 15 >>> 0) {
       break label$112
      }
      $0 = $4 + $3 | 0;
      HEAP32[($8 + 4 | 0) >> 2] = $0 | 3 | 0;
      $0 = ($0 + $8 | 0) + 4 | 0;
      HEAP32[$0 >> 2] = HEAP32[$0 >> 2] | 0 | 1 | 0;
      break label$111;
     }
     HEAP32[($8 + 4 | 0) >> 2] = $3 | 3 | 0;
     HEAP32[($12 + 4 | 0) >> 2] = $4 | 1 | 0;
     HEAP32[($12 + $4 | 0) >> 2] = $4;
     label$113 : {
      if ($4 >>> 0 > 255 >>> 0) {
       break label$113
      }
      $4 = $4 >>> 3 | 0;
      $0 = ($4 << 3 | 0) + 11612 | 0;
      label$114 : {
       label$115 : {
        $5 = HEAP32[(0 + 11572 | 0) >> 2] | 0;
        $4 = 1 << $4 | 0;
        if ($5 & $4 | 0) {
         break label$115
        }
        HEAP32[(0 + 11572 | 0) >> 2] = $5 | $4 | 0;
        $4 = $0;
        break label$114;
       }
       $4 = HEAP32[($0 + 8 | 0) >> 2] | 0;
      }
      HEAP32[($0 + 8 | 0) >> 2] = $12;
      HEAP32[($4 + 12 | 0) >> 2] = $12;
      HEAP32[($12 + 12 | 0) >> 2] = $0;
      HEAP32[($12 + 8 | 0) >> 2] = $4;
      break label$111;
     }
     $0 = 31;
     label$116 : {
      if ($4 >>> 0 > 16777215 >>> 0) {
       break label$116
      }
      $0 = $4 >>> 8 | 0;
      $1618 = $0;
      $0 = (($0 + 1048320 | 0) >>> 16 | 0) & 8 | 0;
      $5 = $1618 << $0 | 0;
      $1625 = $5;
      $5 = (($5 + 520192 | 0) >>> 16 | 0) & 4 | 0;
      $3 = $1625 << $5 | 0;
      $1632 = $3;
      $3 = (($3 + 245760 | 0) >>> 16 | 0) & 2 | 0;
      $0 = (($1632 << $3 | 0) >>> 15 | 0) - ($0 | $5 | 0 | $3 | 0) | 0;
      $0 = ($0 << 1 | 0 | (($4 >>> ($0 + 21 | 0) | 0) & 1 | 0) | 0) + 28 | 0;
     }
     HEAP32[($12 + 28 | 0) >> 2] = $0;
     i64toi32_i32$1 = $12;
     i64toi32_i32$0 = 0;
     HEAP32[($12 + 16 | 0) >> 2] = 0;
     HEAP32[($12 + 20 | 0) >> 2] = i64toi32_i32$0;
     $5 = ($0 << 2 | 0) + 11876 | 0;
     label$117 : {
      label$118 : {
       label$119 : {
        $3 = 1 << $0 | 0;
        if ($7 & $3 | 0) {
         break label$119
        }
        HEAP32[(0 + 11576 | 0) >> 2] = $7 | $3 | 0;
        HEAP32[$5 >> 2] = $12;
        HEAP32[($12 + 24 | 0) >> 2] = $5;
        break label$118;
       }
       $0 = $4 << (($0 | 0) == (31 | 0) ? 0 : 25 - ($0 >>> 1 | 0) | 0) | 0;
       $3 = HEAP32[$5 >> 2] | 0;
       label$120 : while (1) {
        $5 = $3;
        if (((HEAP32[($5 + 4 | 0) >> 2] | 0) & -8 | 0 | 0) == ($4 | 0)) {
         break label$117
        }
        $3 = $0 >>> 29 | 0;
        $0 = $0 << 1 | 0;
        $6 = ($5 + ($3 & 4 | 0) | 0) + 16 | 0;
        $3 = HEAP32[$6 >> 2] | 0;
        if ($3) {
         continue label$120
        }
        break label$120;
       };
       HEAP32[$6 >> 2] = $12;
       HEAP32[($12 + 24 | 0) >> 2] = $5;
      }
      HEAP32[($12 + 12 | 0) >> 2] = $12;
      HEAP32[($12 + 8 | 0) >> 2] = $12;
      break label$111;
     }
     $0 = HEAP32[($5 + 8 | 0) >> 2] | 0;
     HEAP32[($0 + 12 | 0) >> 2] = $12;
     HEAP32[($5 + 8 | 0) >> 2] = $12;
     HEAP32[($12 + 24 | 0) >> 2] = 0;
     HEAP32[($12 + 12 | 0) >> 2] = $5;
     HEAP32[($12 + 8 | 0) >> 2] = $0;
    }
    $0 = $8 + 8 | 0;
    break label$1;
   }
   label$121 : {
    if (!$11) {
     break label$121
    }
    label$122 : {
     label$123 : {
      $5 = HEAP32[($6 + 28 | 0) >> 2] | 0;
      $0 = ($5 << 2 | 0) + 11876 | 0;
      if (($6 | 0) != (HEAP32[$0 >> 2] | 0 | 0)) {
       break label$123
      }
      HEAP32[$0 >> 2] = $8;
      if ($8) {
       break label$122
      }
      (wasm2js_i32$0 = 0, wasm2js_i32$1 = $9 & (__wasm_rotl_i32(-2 | 0, $5 | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 11576 | 0) >> 2] = wasm2js_i32$1;
      break label$121;
     }
     HEAP32[($11 + ((HEAP32[($11 + 16 | 0) >> 2] | 0 | 0) == ($6 | 0) ? 16 : 20) | 0) >> 2] = $8;
     if (!$8) {
      break label$121
     }
    }
    HEAP32[($8 + 24 | 0) >> 2] = $11;
    label$124 : {
     $0 = HEAP32[($6 + 16 | 0) >> 2] | 0;
     if (!$0) {
      break label$124
     }
     HEAP32[($8 + 16 | 0) >> 2] = $0;
     HEAP32[($0 + 24 | 0) >> 2] = $8;
    }
    $0 = HEAP32[($6 + 20 | 0) >> 2] | 0;
    if (!$0) {
     break label$121
    }
    HEAP32[($8 + 20 | 0) >> 2] = $0;
    HEAP32[($0 + 24 | 0) >> 2] = $8;
   }
   label$125 : {
    label$126 : {
     if ($4 >>> 0 > 15 >>> 0) {
      break label$126
     }
     $0 = $4 + $3 | 0;
     HEAP32[($6 + 4 | 0) >> 2] = $0 | 3 | 0;
     $0 = ($0 + $6 | 0) + 4 | 0;
     HEAP32[$0 >> 2] = HEAP32[$0 >> 2] | 0 | 1 | 0;
     break label$125;
    }
    HEAP32[($6 + 4 | 0) >> 2] = $3 | 3 | 0;
    HEAP32[($10 + 4 | 0) >> 2] = $4 | 1 | 0;
    HEAP32[($10 + $4 | 0) >> 2] = $4;
    label$127 : {
     if (!$7) {
      break label$127
     }
     $3 = $7 >>> 3 | 0;
     $5 = ($3 << 3 | 0) + 11612 | 0;
     $0 = HEAP32[(0 + 11592 | 0) >> 2] | 0;
     label$128 : {
      label$129 : {
       $3 = 1 << $3 | 0;
       if ($3 & $2 | 0) {
        break label$129
       }
       HEAP32[(0 + 11572 | 0) >> 2] = $3 | $2 | 0;
       $3 = $5;
       break label$128;
      }
      $3 = HEAP32[($5 + 8 | 0) >> 2] | 0;
     }
     HEAP32[($5 + 8 | 0) >> 2] = $0;
     HEAP32[($3 + 12 | 0) >> 2] = $0;
     HEAP32[($0 + 12 | 0) >> 2] = $5;
     HEAP32[($0 + 8 | 0) >> 2] = $3;
    }
    HEAP32[(0 + 11592 | 0) >> 2] = $10;
    HEAP32[(0 + 11580 | 0) >> 2] = $4;
   }
   $0 = $6 + 8 | 0;
  }
  __stack_pointer = $1 + 16 | 0;
  return $0 | 0;
 }
 
 function dlfree($0) {
  $0 = $0 | 0;
  var $2 = 0, $6 = 0, $1 = 0, $4 = 0, $3 = 0, $5 = 0, $7 = 0, $379 = 0, $386 = 0, $393 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  label$1 : {
   if (!$0) {
    break label$1
   }
   $1 = $0 + -8 | 0;
   $2 = HEAP32[($0 + -4 | 0) >> 2] | 0;
   $0 = $2 & -8 | 0;
   $3 = $1 + $0 | 0;
   label$2 : {
    if ($2 & 1 | 0) {
     break label$2
    }
    if (!($2 & 3 | 0)) {
     break label$1
    }
    $2 = HEAP32[$1 >> 2] | 0;
    $1 = $1 - $2 | 0;
    $4 = HEAP32[(0 + 11588 | 0) >> 2] | 0;
    if ($1 >>> 0 < $4 >>> 0) {
     break label$1
    }
    $0 = $2 + $0 | 0;
    label$3 : {
     if ((HEAP32[(0 + 11592 | 0) >> 2] | 0 | 0) == ($1 | 0)) {
      break label$3
     }
     label$4 : {
      if ($2 >>> 0 > 255 >>> 0) {
       break label$4
      }
      $4 = HEAP32[($1 + 8 | 0) >> 2] | 0;
      $5 = $2 >>> 3 | 0;
      $6 = ($5 << 3 | 0) + 11612 | 0;
      label$5 : {
       $2 = HEAP32[($1 + 12 | 0) >> 2] | 0;
       if (($2 | 0) != ($4 | 0)) {
        break label$5
       }
       (wasm2js_i32$0 = 0, wasm2js_i32$1 = (HEAP32[(0 + 11572 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $5 | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 11572 | 0) >> 2] = wasm2js_i32$1;
       break label$2;
      }
      HEAP32[($4 + 12 | 0) >> 2] = $2;
      HEAP32[($2 + 8 | 0) >> 2] = $4;
      break label$2;
     }
     $7 = HEAP32[($1 + 24 | 0) >> 2] | 0;
     label$6 : {
      label$7 : {
       $6 = HEAP32[($1 + 12 | 0) >> 2] | 0;
       if (($6 | 0) == ($1 | 0)) {
        break label$7
       }
       $2 = HEAP32[($1 + 8 | 0) >> 2] | 0;
       HEAP32[($2 + 12 | 0) >> 2] = $6;
       HEAP32[($6 + 8 | 0) >> 2] = $2;
       break label$6;
      }
      label$8 : {
       $2 = $1 + 20 | 0;
       $4 = HEAP32[$2 >> 2] | 0;
       if ($4) {
        break label$8
       }
       $2 = $1 + 16 | 0;
       $4 = HEAP32[$2 >> 2] | 0;
       if ($4) {
        break label$8
       }
       $6 = 0;
       break label$6;
      }
      label$9 : while (1) {
       $5 = $2;
       $6 = $4;
       $2 = $6 + 20 | 0;
       $4 = HEAP32[$2 >> 2] | 0;
       if ($4) {
        continue label$9
       }
       $2 = $6 + 16 | 0;
       $4 = HEAP32[($6 + 16 | 0) >> 2] | 0;
       if ($4) {
        continue label$9
       }
       break label$9;
      };
      HEAP32[$5 >> 2] = 0;
     }
     if (!$7) {
      break label$2
     }
     label$10 : {
      label$11 : {
       $4 = HEAP32[($1 + 28 | 0) >> 2] | 0;
       $2 = ($4 << 2 | 0) + 11876 | 0;
       if ((HEAP32[$2 >> 2] | 0 | 0) != ($1 | 0)) {
        break label$11
       }
       HEAP32[$2 >> 2] = $6;
       if ($6) {
        break label$10
       }
       (wasm2js_i32$0 = 0, wasm2js_i32$1 = (HEAP32[(0 + 11576 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $4 | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 11576 | 0) >> 2] = wasm2js_i32$1;
       break label$2;
      }
      HEAP32[($7 + ((HEAP32[($7 + 16 | 0) >> 2] | 0 | 0) == ($1 | 0) ? 16 : 20) | 0) >> 2] = $6;
      if (!$6) {
       break label$2
      }
     }
     HEAP32[($6 + 24 | 0) >> 2] = $7;
     label$12 : {
      $2 = HEAP32[($1 + 16 | 0) >> 2] | 0;
      if (!$2) {
       break label$12
      }
      HEAP32[($6 + 16 | 0) >> 2] = $2;
      HEAP32[($2 + 24 | 0) >> 2] = $6;
     }
     $2 = HEAP32[($1 + 20 | 0) >> 2] | 0;
     if (!$2) {
      break label$2
     }
     HEAP32[($6 + 20 | 0) >> 2] = $2;
     HEAP32[($2 + 24 | 0) >> 2] = $6;
     break label$2;
    }
    $2 = HEAP32[($3 + 4 | 0) >> 2] | 0;
    if (($2 & 3 | 0 | 0) != (3 | 0)) {
     break label$2
    }
    HEAP32[(0 + 11580 | 0) >> 2] = $0;
    HEAP32[($3 + 4 | 0) >> 2] = $2 & -2 | 0;
    HEAP32[($1 + 4 | 0) >> 2] = $0 | 1 | 0;
    HEAP32[($1 + $0 | 0) >> 2] = $0;
    return;
   }
   if ($3 >>> 0 <= $1 >>> 0) {
    break label$1
   }
   $2 = HEAP32[($3 + 4 | 0) >> 2] | 0;
   if (!($2 & 1 | 0)) {
    break label$1
   }
   label$13 : {
    label$14 : {
     if ($2 & 2 | 0) {
      break label$14
     }
     label$15 : {
      if ((HEAP32[(0 + 11596 | 0) >> 2] | 0 | 0) != ($3 | 0)) {
       break label$15
      }
      HEAP32[(0 + 11596 | 0) >> 2] = $1;
      $0 = (HEAP32[(0 + 11584 | 0) >> 2] | 0) + $0 | 0;
      HEAP32[(0 + 11584 | 0) >> 2] = $0;
      HEAP32[($1 + 4 | 0) >> 2] = $0 | 1 | 0;
      if (($1 | 0) != (HEAP32[(0 + 11592 | 0) >> 2] | 0 | 0)) {
       break label$1
      }
      HEAP32[(0 + 11580 | 0) >> 2] = 0;
      HEAP32[(0 + 11592 | 0) >> 2] = 0;
      return;
     }
     label$16 : {
      if ((HEAP32[(0 + 11592 | 0) >> 2] | 0 | 0) != ($3 | 0)) {
       break label$16
      }
      HEAP32[(0 + 11592 | 0) >> 2] = $1;
      $0 = (HEAP32[(0 + 11580 | 0) >> 2] | 0) + $0 | 0;
      HEAP32[(0 + 11580 | 0) >> 2] = $0;
      HEAP32[($1 + 4 | 0) >> 2] = $0 | 1 | 0;
      HEAP32[($1 + $0 | 0) >> 2] = $0;
      return;
     }
     $0 = ($2 & -8 | 0) + $0 | 0;
     label$17 : {
      label$18 : {
       if ($2 >>> 0 > 255 >>> 0) {
        break label$18
       }
       $4 = HEAP32[($3 + 8 | 0) >> 2] | 0;
       $5 = $2 >>> 3 | 0;
       $6 = ($5 << 3 | 0) + 11612 | 0;
       label$19 : {
        $2 = HEAP32[($3 + 12 | 0) >> 2] | 0;
        if (($2 | 0) != ($4 | 0)) {
         break label$19
        }
        (wasm2js_i32$0 = 0, wasm2js_i32$1 = (HEAP32[(0 + 11572 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $5 | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 11572 | 0) >> 2] = wasm2js_i32$1;
        break label$17;
       }
       HEAP32[($4 + 12 | 0) >> 2] = $2;
       HEAP32[($2 + 8 | 0) >> 2] = $4;
       break label$17;
      }
      $7 = HEAP32[($3 + 24 | 0) >> 2] | 0;
      label$20 : {
       label$21 : {
        $6 = HEAP32[($3 + 12 | 0) >> 2] | 0;
        if (($6 | 0) == ($3 | 0)) {
         break label$21
        }
        $2 = HEAP32[($3 + 8 | 0) >> 2] | 0;
        HEAP32[(0 + 11588 | 0) >> 2] | 0;
        HEAP32[($2 + 12 | 0) >> 2] = $6;
        HEAP32[($6 + 8 | 0) >> 2] = $2;
        break label$20;
       }
       label$22 : {
        $2 = $3 + 20 | 0;
        $4 = HEAP32[$2 >> 2] | 0;
        if ($4) {
         break label$22
        }
        $2 = $3 + 16 | 0;
        $4 = HEAP32[$2 >> 2] | 0;
        if ($4) {
         break label$22
        }
        $6 = 0;
        break label$20;
       }
       label$23 : while (1) {
        $5 = $2;
        $6 = $4;
        $2 = $6 + 20 | 0;
        $4 = HEAP32[$2 >> 2] | 0;
        if ($4) {
         continue label$23
        }
        $2 = $6 + 16 | 0;
        $4 = HEAP32[($6 + 16 | 0) >> 2] | 0;
        if ($4) {
         continue label$23
        }
        break label$23;
       };
       HEAP32[$5 >> 2] = 0;
      }
      if (!$7) {
       break label$17
      }
      label$24 : {
       label$25 : {
        $4 = HEAP32[($3 + 28 | 0) >> 2] | 0;
        $2 = ($4 << 2 | 0) + 11876 | 0;
        if ((HEAP32[$2 >> 2] | 0 | 0) != ($3 | 0)) {
         break label$25
        }
        HEAP32[$2 >> 2] = $6;
        if ($6) {
         break label$24
        }
        (wasm2js_i32$0 = 0, wasm2js_i32$1 = (HEAP32[(0 + 11576 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $4 | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 11576 | 0) >> 2] = wasm2js_i32$1;
        break label$17;
       }
       HEAP32[($7 + ((HEAP32[($7 + 16 | 0) >> 2] | 0 | 0) == ($3 | 0) ? 16 : 20) | 0) >> 2] = $6;
       if (!$6) {
        break label$17
       }
      }
      HEAP32[($6 + 24 | 0) >> 2] = $7;
      label$26 : {
       $2 = HEAP32[($3 + 16 | 0) >> 2] | 0;
       if (!$2) {
        break label$26
       }
       HEAP32[($6 + 16 | 0) >> 2] = $2;
       HEAP32[($2 + 24 | 0) >> 2] = $6;
      }
      $2 = HEAP32[($3 + 20 | 0) >> 2] | 0;
      if (!$2) {
       break label$17
      }
      HEAP32[($6 + 20 | 0) >> 2] = $2;
      HEAP32[($2 + 24 | 0) >> 2] = $6;
     }
     HEAP32[($1 + 4 | 0) >> 2] = $0 | 1 | 0;
     HEAP32[($1 + $0 | 0) >> 2] = $0;
     if (($1 | 0) != (HEAP32[(0 + 11592 | 0) >> 2] | 0 | 0)) {
      break label$13
     }
     HEAP32[(0 + 11580 | 0) >> 2] = $0;
     return;
    }
    HEAP32[($3 + 4 | 0) >> 2] = $2 & -2 | 0;
    HEAP32[($1 + 4 | 0) >> 2] = $0 | 1 | 0;
    HEAP32[($1 + $0 | 0) >> 2] = $0;
   }
   label$27 : {
    if ($0 >>> 0 > 255 >>> 0) {
     break label$27
    }
    $2 = $0 >>> 3 | 0;
    $0 = ($2 << 3 | 0) + 11612 | 0;
    label$28 : {
     label$29 : {
      $4 = HEAP32[(0 + 11572 | 0) >> 2] | 0;
      $2 = 1 << $2 | 0;
      if ($4 & $2 | 0) {
       break label$29
      }
      HEAP32[(0 + 11572 | 0) >> 2] = $4 | $2 | 0;
      $2 = $0;
      break label$28;
     }
     $2 = HEAP32[($0 + 8 | 0) >> 2] | 0;
    }
    HEAP32[($0 + 8 | 0) >> 2] = $1;
    HEAP32[($2 + 12 | 0) >> 2] = $1;
    HEAP32[($1 + 12 | 0) >> 2] = $0;
    HEAP32[($1 + 8 | 0) >> 2] = $2;
    return;
   }
   $2 = 31;
   label$30 : {
    if ($0 >>> 0 > 16777215 >>> 0) {
     break label$30
    }
    $2 = $0 >>> 8 | 0;
    $379 = $2;
    $2 = (($2 + 1048320 | 0) >>> 16 | 0) & 8 | 0;
    $4 = $379 << $2 | 0;
    $386 = $4;
    $4 = (($4 + 520192 | 0) >>> 16 | 0) & 4 | 0;
    $6 = $386 << $4 | 0;
    $393 = $6;
    $6 = (($6 + 245760 | 0) >>> 16 | 0) & 2 | 0;
    $2 = (($393 << $6 | 0) >>> 15 | 0) - ($2 | $4 | 0 | $6 | 0) | 0;
    $2 = ($2 << 1 | 0 | (($0 >>> ($2 + 21 | 0) | 0) & 1 | 0) | 0) + 28 | 0;
   }
   HEAP32[($1 + 16 | 0) >> 2] = 0;
   HEAP32[($1 + 20 | 0) >> 2] = 0;
   HEAP32[($1 + 28 | 0) >> 2] = $2;
   $4 = ($2 << 2 | 0) + 11876 | 0;
   label$31 : {
    label$32 : {
     label$33 : {
      label$34 : {
       $6 = HEAP32[(0 + 11576 | 0) >> 2] | 0;
       $3 = 1 << $2 | 0;
       if ($6 & $3 | 0) {
        break label$34
       }
       HEAP32[(0 + 11576 | 0) >> 2] = $6 | $3 | 0;
       HEAP32[$4 >> 2] = $1;
       HEAP32[($1 + 24 | 0) >> 2] = $4;
       break label$33;
      }
      $2 = $0 << (($2 | 0) == (31 | 0) ? 0 : 25 - ($2 >>> 1 | 0) | 0) | 0;
      $6 = HEAP32[$4 >> 2] | 0;
      label$35 : while (1) {
       $4 = $6;
       if (((HEAP32[($6 + 4 | 0) >> 2] | 0) & -8 | 0 | 0) == ($0 | 0)) {
        break label$32
       }
       $6 = $2 >>> 29 | 0;
       $2 = $2 << 1 | 0;
       $3 = ($4 + ($6 & 4 | 0) | 0) + 16 | 0;
       $6 = HEAP32[$3 >> 2] | 0;
       if ($6) {
        continue label$35
       }
       break label$35;
      };
      HEAP32[$3 >> 2] = $1;
      HEAP32[($1 + 24 | 0) >> 2] = $4;
     }
     HEAP32[($1 + 12 | 0) >> 2] = $1;
     HEAP32[($1 + 8 | 0) >> 2] = $1;
     break label$31;
    }
    $0 = HEAP32[($4 + 8 | 0) >> 2] | 0;
    HEAP32[($0 + 12 | 0) >> 2] = $1;
    HEAP32[($4 + 8 | 0) >> 2] = $1;
    HEAP32[($1 + 24 | 0) >> 2] = 0;
    HEAP32[($1 + 12 | 0) >> 2] = $4;
    HEAP32[($1 + 8 | 0) >> 2] = $0;
   }
   $1 = (HEAP32[(0 + 11604 | 0) >> 2] | 0) + -1 | 0;
   HEAP32[(0 + 11604 | 0) >> 2] = $1 ? $1 : -1;
  }
 }
 
 function dlcalloc($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $2 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $13 = 0, $6$hi = 0, $8$hi = 0, $3 = 0, $3$hi = 0, $16 = 0, i64toi32_i32$2 = 0;
  label$1 : {
   label$2 : {
    if ($0) {
     break label$2
    }
    $2 = 0;
    break label$1;
   }
   i64toi32_i32$0 = 0;
   $6$hi = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   $8$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $6$hi;
   i64toi32_i32$1 = $8$hi;
   i64toi32_i32$1 = __wasm_i64_mul($0 | 0, i64toi32_i32$0 | 0, $1 | 0, i64toi32_i32$1 | 0) | 0;
   i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
   $3 = i64toi32_i32$1;
   $3$hi = i64toi32_i32$0;
   $2 = i64toi32_i32$1;
   if (($1 | $0 | 0) >>> 0 < 65536 >>> 0) {
    break label$1
   }
   $16 = $2;
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$2 = $3;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 32;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = 0;
    $13 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    $13 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
   }
   $2 = ($13 | 0) != (0 | 0) ? -1 : $16;
  }
  label$3 : {
   $0 = dlmalloc($2 | 0) | 0;
   if (!$0) {
    break label$3
   }
   if (!((HEAPU8[($0 + -4 | 0) >> 0] | 0) & 3 | 0)) {
    break label$3
   }
   memset($0 | 0, 0 | 0, $2 | 0) | 0;
  }
  return $0 | 0;
 }
 
 function dlrealloc($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  label$1 : {
   if ($0) {
    break label$1
   }
   return dlmalloc($1 | 0) | 0 | 0;
  }
  label$2 : {
   if ($1 >>> 0 < -64 >>> 0) {
    break label$2
   }
   (wasm2js_i32$0 = __errno_location() | 0, wasm2js_i32$1 = 48), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
   return 0 | 0;
  }
  label$3 : {
   $2 = try_realloc_chunk($0 + -8 | 0 | 0, ($1 >>> 0 < 11 >>> 0 ? 16 : ($1 + 11 | 0) & -8 | 0) | 0) | 0;
   if (!$2) {
    break label$3
   }
   return $2 + 8 | 0 | 0;
  }
  label$4 : {
   $2 = dlmalloc($1 | 0) | 0;
   if ($2) {
    break label$4
   }
   return 0 | 0;
  }
  $3 = HEAP32[($0 + -4 | 0) >> 2] | 0;
  $3 = ($3 & 3 | 0 ? -4 : -8) + ($3 & -8 | 0) | 0;
  __memcpy($2 | 0, $0 | 0, ($3 >>> 0 < $1 >>> 0 ? $3 : $1) | 0) | 0;
  dlfree($0 | 0);
  return $2 | 0;
 }
 
 function try_realloc_chunk($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $3 = 0, $4 = 0, $6 = 0, $5 = 0, $2 = 0, $7 = 0, $9 = 0, $10 = 0, $8 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $2 = HEAP32[($0 + 4 | 0) >> 2] | 0;
  $3 = $2 & -8 | 0;
  label$1 : {
   label$2 : {
    if ($2 & 3 | 0) {
     break label$2
    }
    label$3 : {
     if ($1 >>> 0 >= 256 >>> 0) {
      break label$3
     }
     return 0 | 0;
    }
    label$4 : {
     if ($3 >>> 0 < ($1 + 4 | 0) >>> 0) {
      break label$4
     }
     $4 = $0;
     if (($3 - $1 | 0) >>> 0 <= ((HEAP32[(0 + 12052 | 0) >> 2] | 0) << 1 | 0) >>> 0) {
      break label$1
     }
    }
    return 0 | 0;
   }
   label$5 : {
    label$6 : {
     if ($3 >>> 0 < $1 >>> 0) {
      break label$6
     }
     $4 = $3 - $1 | 0;
     if ($4 >>> 0 < 16 >>> 0) {
      break label$5
     }
     HEAP32[($0 + 4 | 0) >> 2] = $2 & 1 | 0 | $1 | 0 | 2 | 0;
     $1 = $0 + $1 | 0;
     HEAP32[($1 + 4 | 0) >> 2] = $4 | 3 | 0;
     $3 = $0 + ($3 | 4 | 0) | 0;
     HEAP32[$3 >> 2] = HEAP32[$3 >> 2] | 0 | 1 | 0;
     dispose_chunk($1 | 0, $4 | 0);
     break label$5;
    }
    $4 = 0;
    label$7 : {
     $5 = $0 + $3 | 0;
     if ((HEAP32[(0 + 11596 | 0) >> 2] | 0 | 0) != ($5 | 0)) {
      break label$7
     }
     $3 = (HEAP32[(0 + 11584 | 0) >> 2] | 0) + $3 | 0;
     if ($3 >>> 0 <= $1 >>> 0) {
      break label$1
     }
     HEAP32[($0 + 4 | 0) >> 2] = $2 & 1 | 0 | $1 | 0 | 2 | 0;
     $2 = $0 + $1 | 0;
     $1 = $3 - $1 | 0;
     HEAP32[($2 + 4 | 0) >> 2] = $1 | 1 | 0;
     HEAP32[(0 + 11584 | 0) >> 2] = $1;
     HEAP32[(0 + 11596 | 0) >> 2] = $2;
     break label$5;
    }
    label$8 : {
     if ((HEAP32[(0 + 11592 | 0) >> 2] | 0 | 0) != ($5 | 0)) {
      break label$8
     }
     $4 = 0;
     $3 = (HEAP32[(0 + 11580 | 0) >> 2] | 0) + $3 | 0;
     if ($3 >>> 0 < $1 >>> 0) {
      break label$1
     }
     label$9 : {
      label$10 : {
       $4 = $3 - $1 | 0;
       if ($4 >>> 0 < 16 >>> 0) {
        break label$10
       }
       HEAP32[($0 + 4 | 0) >> 2] = $2 & 1 | 0 | $1 | 0 | 2 | 0;
       $1 = $0 + $1 | 0;
       HEAP32[($1 + 4 | 0) >> 2] = $4 | 1 | 0;
       $3 = $0 + $3 | 0;
       HEAP32[$3 >> 2] = $4;
       HEAP32[($3 + 4 | 0) >> 2] = (HEAP32[($3 + 4 | 0) >> 2] | 0) & -2 | 0;
       break label$9;
      }
      HEAP32[($0 + 4 | 0) >> 2] = $2 & 1 | 0 | $3 | 0 | 2 | 0;
      $1 = ($3 + $0 | 0) + 4 | 0;
      HEAP32[$1 >> 2] = HEAP32[$1 >> 2] | 0 | 1 | 0;
      $4 = 0;
      $1 = 0;
     }
     HEAP32[(0 + 11592 | 0) >> 2] = $1;
     HEAP32[(0 + 11580 | 0) >> 2] = $4;
     break label$5;
    }
    $4 = 0;
    $6 = HEAP32[($5 + 4 | 0) >> 2] | 0;
    if ($6 & 2 | 0) {
     break label$1
    }
    $7 = ($6 & -8 | 0) + $3 | 0;
    if ($7 >>> 0 < $1 >>> 0) {
     break label$1
    }
    $8 = $7 - $1 | 0;
    label$11 : {
     label$12 : {
      if ($6 >>> 0 > 255 >>> 0) {
       break label$12
      }
      $3 = HEAP32[($5 + 8 | 0) >> 2] | 0;
      $9 = $6 >>> 3 | 0;
      $6 = ($9 << 3 | 0) + 11612 | 0;
      label$13 : {
       $4 = HEAP32[($5 + 12 | 0) >> 2] | 0;
       if (($4 | 0) != ($3 | 0)) {
        break label$13
       }
       (wasm2js_i32$0 = 0, wasm2js_i32$1 = (HEAP32[(0 + 11572 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $9 | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 11572 | 0) >> 2] = wasm2js_i32$1;
       break label$11;
      }
      HEAP32[($3 + 12 | 0) >> 2] = $4;
      HEAP32[($4 + 8 | 0) >> 2] = $3;
      break label$11;
     }
     $10 = HEAP32[($5 + 24 | 0) >> 2] | 0;
     label$14 : {
      label$15 : {
       $6 = HEAP32[($5 + 12 | 0) >> 2] | 0;
       if (($6 | 0) == ($5 | 0)) {
        break label$15
       }
       $3 = HEAP32[($5 + 8 | 0) >> 2] | 0;
       HEAP32[(0 + 11588 | 0) >> 2] | 0;
       HEAP32[($3 + 12 | 0) >> 2] = $6;
       HEAP32[($6 + 8 | 0) >> 2] = $3;
       break label$14;
      }
      label$16 : {
       $3 = $5 + 20 | 0;
       $4 = HEAP32[$3 >> 2] | 0;
       if ($4) {
        break label$16
       }
       $3 = $5 + 16 | 0;
       $4 = HEAP32[$3 >> 2] | 0;
       if ($4) {
        break label$16
       }
       $6 = 0;
       break label$14;
      }
      label$17 : while (1) {
       $9 = $3;
       $6 = $4;
       $3 = $6 + 20 | 0;
       $4 = HEAP32[$3 >> 2] | 0;
       if ($4) {
        continue label$17
       }
       $3 = $6 + 16 | 0;
       $4 = HEAP32[($6 + 16 | 0) >> 2] | 0;
       if ($4) {
        continue label$17
       }
       break label$17;
      };
      HEAP32[$9 >> 2] = 0;
     }
     if (!$10) {
      break label$11
     }
     label$18 : {
      label$19 : {
       $4 = HEAP32[($5 + 28 | 0) >> 2] | 0;
       $3 = ($4 << 2 | 0) + 11876 | 0;
       if ((HEAP32[$3 >> 2] | 0 | 0) != ($5 | 0)) {
        break label$19
       }
       HEAP32[$3 >> 2] = $6;
       if ($6) {
        break label$18
       }
       (wasm2js_i32$0 = 0, wasm2js_i32$1 = (HEAP32[(0 + 11576 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $4 | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 11576 | 0) >> 2] = wasm2js_i32$1;
       break label$11;
      }
      HEAP32[($10 + ((HEAP32[($10 + 16 | 0) >> 2] | 0 | 0) == ($5 | 0) ? 16 : 20) | 0) >> 2] = $6;
      if (!$6) {
       break label$11
      }
     }
     HEAP32[($6 + 24 | 0) >> 2] = $10;
     label$20 : {
      $3 = HEAP32[($5 + 16 | 0) >> 2] | 0;
      if (!$3) {
       break label$20
      }
      HEAP32[($6 + 16 | 0) >> 2] = $3;
      HEAP32[($3 + 24 | 0) >> 2] = $6;
     }
     $3 = HEAP32[($5 + 20 | 0) >> 2] | 0;
     if (!$3) {
      break label$11
     }
     HEAP32[($6 + 20 | 0) >> 2] = $3;
     HEAP32[($3 + 24 | 0) >> 2] = $6;
    }
    label$21 : {
     if ($8 >>> 0 > 15 >>> 0) {
      break label$21
     }
     HEAP32[($0 + 4 | 0) >> 2] = $2 & 1 | 0 | $7 | 0 | 2 | 0;
     $1 = $0 + ($7 | 4 | 0) | 0;
     HEAP32[$1 >> 2] = HEAP32[$1 >> 2] | 0 | 1 | 0;
     break label$5;
    }
    HEAP32[($0 + 4 | 0) >> 2] = $2 & 1 | 0 | $1 | 0 | 2 | 0;
    $1 = $0 + $1 | 0;
    HEAP32[($1 + 4 | 0) >> 2] = $8 | 3 | 0;
    $3 = $0 + ($7 | 4 | 0) | 0;
    HEAP32[$3 >> 2] = HEAP32[$3 >> 2] | 0 | 1 | 0;
    dispose_chunk($1 | 0, $8 | 0);
   }
   $4 = $0;
  }
  return $4 | 0;
 }
 
 function dispose_chunk($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $3 = 0, $6 = 0, $4 = 0, $2 = 0, $5 = 0, $7 = 0, $360 = 0, $367 = 0, $374 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $2 = $0 + $1 | 0;
  label$1 : {
   label$2 : {
    $3 = HEAP32[($0 + 4 | 0) >> 2] | 0;
    if ($3 & 1 | 0) {
     break label$2
    }
    if (!($3 & 3 | 0)) {
     break label$1
    }
    $3 = HEAP32[$0 >> 2] | 0;
    $1 = $3 + $1 | 0;
    label$3 : {
     label$4 : {
      $0 = $0 - $3 | 0;
      if ((HEAP32[(0 + 11592 | 0) >> 2] | 0 | 0) == ($0 | 0)) {
       break label$4
      }
      label$5 : {
       if ($3 >>> 0 > 255 >>> 0) {
        break label$5
       }
       $4 = HEAP32[($0 + 8 | 0) >> 2] | 0;
       $5 = $3 >>> 3 | 0;
       $6 = ($5 << 3 | 0) + 11612 | 0;
       $3 = HEAP32[($0 + 12 | 0) >> 2] | 0;
       if (($3 | 0) != ($4 | 0)) {
        break label$3
       }
       (wasm2js_i32$0 = 0, wasm2js_i32$1 = (HEAP32[(0 + 11572 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $5 | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 11572 | 0) >> 2] = wasm2js_i32$1;
       break label$2;
      }
      $7 = HEAP32[($0 + 24 | 0) >> 2] | 0;
      label$6 : {
       label$7 : {
        $6 = HEAP32[($0 + 12 | 0) >> 2] | 0;
        if (($6 | 0) == ($0 | 0)) {
         break label$7
        }
        $3 = HEAP32[($0 + 8 | 0) >> 2] | 0;
        HEAP32[(0 + 11588 | 0) >> 2] | 0;
        HEAP32[($3 + 12 | 0) >> 2] = $6;
        HEAP32[($6 + 8 | 0) >> 2] = $3;
        break label$6;
       }
       label$8 : {
        $3 = $0 + 20 | 0;
        $4 = HEAP32[$3 >> 2] | 0;
        if ($4) {
         break label$8
        }
        $3 = $0 + 16 | 0;
        $4 = HEAP32[$3 >> 2] | 0;
        if ($4) {
         break label$8
        }
        $6 = 0;
        break label$6;
       }
       label$9 : while (1) {
        $5 = $3;
        $6 = $4;
        $3 = $6 + 20 | 0;
        $4 = HEAP32[$3 >> 2] | 0;
        if ($4) {
         continue label$9
        }
        $3 = $6 + 16 | 0;
        $4 = HEAP32[($6 + 16 | 0) >> 2] | 0;
        if ($4) {
         continue label$9
        }
        break label$9;
       };
       HEAP32[$5 >> 2] = 0;
      }
      if (!$7) {
       break label$2
      }
      label$10 : {
       label$11 : {
        $4 = HEAP32[($0 + 28 | 0) >> 2] | 0;
        $3 = ($4 << 2 | 0) + 11876 | 0;
        if ((HEAP32[$3 >> 2] | 0 | 0) != ($0 | 0)) {
         break label$11
        }
        HEAP32[$3 >> 2] = $6;
        if ($6) {
         break label$10
        }
        (wasm2js_i32$0 = 0, wasm2js_i32$1 = (HEAP32[(0 + 11576 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $4 | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 11576 | 0) >> 2] = wasm2js_i32$1;
        break label$2;
       }
       HEAP32[($7 + ((HEAP32[($7 + 16 | 0) >> 2] | 0 | 0) == ($0 | 0) ? 16 : 20) | 0) >> 2] = $6;
       if (!$6) {
        break label$2
       }
      }
      HEAP32[($6 + 24 | 0) >> 2] = $7;
      label$12 : {
       $3 = HEAP32[($0 + 16 | 0) >> 2] | 0;
       if (!$3) {
        break label$12
       }
       HEAP32[($6 + 16 | 0) >> 2] = $3;
       HEAP32[($3 + 24 | 0) >> 2] = $6;
      }
      $3 = HEAP32[($0 + 20 | 0) >> 2] | 0;
      if (!$3) {
       break label$2
      }
      HEAP32[($6 + 20 | 0) >> 2] = $3;
      HEAP32[($3 + 24 | 0) >> 2] = $6;
      break label$2;
     }
     $3 = HEAP32[($2 + 4 | 0) >> 2] | 0;
     if (($3 & 3 | 0 | 0) != (3 | 0)) {
      break label$2
     }
     HEAP32[(0 + 11580 | 0) >> 2] = $1;
     HEAP32[($2 + 4 | 0) >> 2] = $3 & -2 | 0;
     HEAP32[($0 + 4 | 0) >> 2] = $1 | 1 | 0;
     HEAP32[$2 >> 2] = $1;
     return;
    }
    HEAP32[($4 + 12 | 0) >> 2] = $3;
    HEAP32[($3 + 8 | 0) >> 2] = $4;
   }
   label$13 : {
    label$14 : {
     $3 = HEAP32[($2 + 4 | 0) >> 2] | 0;
     if ($3 & 2 | 0) {
      break label$14
     }
     label$15 : {
      if ((HEAP32[(0 + 11596 | 0) >> 2] | 0 | 0) != ($2 | 0)) {
       break label$15
      }
      HEAP32[(0 + 11596 | 0) >> 2] = $0;
      $1 = (HEAP32[(0 + 11584 | 0) >> 2] | 0) + $1 | 0;
      HEAP32[(0 + 11584 | 0) >> 2] = $1;
      HEAP32[($0 + 4 | 0) >> 2] = $1 | 1 | 0;
      if (($0 | 0) != (HEAP32[(0 + 11592 | 0) >> 2] | 0 | 0)) {
       break label$1
      }
      HEAP32[(0 + 11580 | 0) >> 2] = 0;
      HEAP32[(0 + 11592 | 0) >> 2] = 0;
      return;
     }
     label$16 : {
      if ((HEAP32[(0 + 11592 | 0) >> 2] | 0 | 0) != ($2 | 0)) {
       break label$16
      }
      HEAP32[(0 + 11592 | 0) >> 2] = $0;
      $1 = (HEAP32[(0 + 11580 | 0) >> 2] | 0) + $1 | 0;
      HEAP32[(0 + 11580 | 0) >> 2] = $1;
      HEAP32[($0 + 4 | 0) >> 2] = $1 | 1 | 0;
      HEAP32[($0 + $1 | 0) >> 2] = $1;
      return;
     }
     $1 = ($3 & -8 | 0) + $1 | 0;
     label$17 : {
      label$18 : {
       if ($3 >>> 0 > 255 >>> 0) {
        break label$18
       }
       $4 = HEAP32[($2 + 8 | 0) >> 2] | 0;
       $5 = $3 >>> 3 | 0;
       $6 = ($5 << 3 | 0) + 11612 | 0;
       label$19 : {
        $3 = HEAP32[($2 + 12 | 0) >> 2] | 0;
        if (($3 | 0) != ($4 | 0)) {
         break label$19
        }
        (wasm2js_i32$0 = 0, wasm2js_i32$1 = (HEAP32[(0 + 11572 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $5 | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 11572 | 0) >> 2] = wasm2js_i32$1;
        break label$17;
       }
       HEAP32[($4 + 12 | 0) >> 2] = $3;
       HEAP32[($3 + 8 | 0) >> 2] = $4;
       break label$17;
      }
      $7 = HEAP32[($2 + 24 | 0) >> 2] | 0;
      label$20 : {
       label$21 : {
        $6 = HEAP32[($2 + 12 | 0) >> 2] | 0;
        if (($6 | 0) == ($2 | 0)) {
         break label$21
        }
        $3 = HEAP32[($2 + 8 | 0) >> 2] | 0;
        HEAP32[(0 + 11588 | 0) >> 2] | 0;
        HEAP32[($3 + 12 | 0) >> 2] = $6;
        HEAP32[($6 + 8 | 0) >> 2] = $3;
        break label$20;
       }
       label$22 : {
        $4 = $2 + 20 | 0;
        $3 = HEAP32[$4 >> 2] | 0;
        if ($3) {
         break label$22
        }
        $4 = $2 + 16 | 0;
        $3 = HEAP32[$4 >> 2] | 0;
        if ($3) {
         break label$22
        }
        $6 = 0;
        break label$20;
       }
       label$23 : while (1) {
        $5 = $4;
        $6 = $3;
        $4 = $3 + 20 | 0;
        $3 = HEAP32[$4 >> 2] | 0;
        if ($3) {
         continue label$23
        }
        $4 = $6 + 16 | 0;
        $3 = HEAP32[($6 + 16 | 0) >> 2] | 0;
        if ($3) {
         continue label$23
        }
        break label$23;
       };
       HEAP32[$5 >> 2] = 0;
      }
      if (!$7) {
       break label$17
      }
      label$24 : {
       label$25 : {
        $4 = HEAP32[($2 + 28 | 0) >> 2] | 0;
        $3 = ($4 << 2 | 0) + 11876 | 0;
        if ((HEAP32[$3 >> 2] | 0 | 0) != ($2 | 0)) {
         break label$25
        }
        HEAP32[$3 >> 2] = $6;
        if ($6) {
         break label$24
        }
        (wasm2js_i32$0 = 0, wasm2js_i32$1 = (HEAP32[(0 + 11576 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $4 | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 11576 | 0) >> 2] = wasm2js_i32$1;
        break label$17;
       }
       HEAP32[($7 + ((HEAP32[($7 + 16 | 0) >> 2] | 0 | 0) == ($2 | 0) ? 16 : 20) | 0) >> 2] = $6;
       if (!$6) {
        break label$17
       }
      }
      HEAP32[($6 + 24 | 0) >> 2] = $7;
      label$26 : {
       $3 = HEAP32[($2 + 16 | 0) >> 2] | 0;
       if (!$3) {
        break label$26
       }
       HEAP32[($6 + 16 | 0) >> 2] = $3;
       HEAP32[($3 + 24 | 0) >> 2] = $6;
      }
      $3 = HEAP32[($2 + 20 | 0) >> 2] | 0;
      if (!$3) {
       break label$17
      }
      HEAP32[($6 + 20 | 0) >> 2] = $3;
      HEAP32[($3 + 24 | 0) >> 2] = $6;
     }
     HEAP32[($0 + 4 | 0) >> 2] = $1 | 1 | 0;
     HEAP32[($0 + $1 | 0) >> 2] = $1;
     if (($0 | 0) != (HEAP32[(0 + 11592 | 0) >> 2] | 0 | 0)) {
      break label$13
     }
     HEAP32[(0 + 11580 | 0) >> 2] = $1;
     return;
    }
    HEAP32[($2 + 4 | 0) >> 2] = $3 & -2 | 0;
    HEAP32[($0 + 4 | 0) >> 2] = $1 | 1 | 0;
    HEAP32[($0 + $1 | 0) >> 2] = $1;
   }
   label$27 : {
    if ($1 >>> 0 > 255 >>> 0) {
     break label$27
    }
    $3 = $1 >>> 3 | 0;
    $1 = ($3 << 3 | 0) + 11612 | 0;
    label$28 : {
     label$29 : {
      $4 = HEAP32[(0 + 11572 | 0) >> 2] | 0;
      $3 = 1 << $3 | 0;
      if ($4 & $3 | 0) {
       break label$29
      }
      HEAP32[(0 + 11572 | 0) >> 2] = $4 | $3 | 0;
      $3 = $1;
      break label$28;
     }
     $3 = HEAP32[($1 + 8 | 0) >> 2] | 0;
    }
    HEAP32[($1 + 8 | 0) >> 2] = $0;
    HEAP32[($3 + 12 | 0) >> 2] = $0;
    HEAP32[($0 + 12 | 0) >> 2] = $1;
    HEAP32[($0 + 8 | 0) >> 2] = $3;
    return;
   }
   $3 = 31;
   label$30 : {
    if ($1 >>> 0 > 16777215 >>> 0) {
     break label$30
    }
    $3 = $1 >>> 8 | 0;
    $360 = $3;
    $3 = (($3 + 1048320 | 0) >>> 16 | 0) & 8 | 0;
    $4 = $360 << $3 | 0;
    $367 = $4;
    $4 = (($4 + 520192 | 0) >>> 16 | 0) & 4 | 0;
    $6 = $367 << $4 | 0;
    $374 = $6;
    $6 = (($6 + 245760 | 0) >>> 16 | 0) & 2 | 0;
    $3 = (($374 << $6 | 0) >>> 15 | 0) - ($3 | $4 | 0 | $6 | 0) | 0;
    $3 = ($3 << 1 | 0 | (($1 >>> ($3 + 21 | 0) | 0) & 1 | 0) | 0) + 28 | 0;
   }
   HEAP32[($0 + 16 | 0) >> 2] = 0;
   HEAP32[($0 + 20 | 0) >> 2] = 0;
   HEAP32[($0 + 28 | 0) >> 2] = $3;
   $4 = ($3 << 2 | 0) + 11876 | 0;
   label$31 : {
    label$32 : {
     label$33 : {
      $6 = HEAP32[(0 + 11576 | 0) >> 2] | 0;
      $2 = 1 << $3 | 0;
      if ($6 & $2 | 0) {
       break label$33
      }
      HEAP32[(0 + 11576 | 0) >> 2] = $6 | $2 | 0;
      HEAP32[$4 >> 2] = $0;
      HEAP32[($0 + 24 | 0) >> 2] = $4;
      break label$32;
     }
     $3 = $1 << (($3 | 0) == (31 | 0) ? 0 : 25 - ($3 >>> 1 | 0) | 0) | 0;
     $6 = HEAP32[$4 >> 2] | 0;
     label$34 : while (1) {
      $4 = $6;
      if (((HEAP32[($6 + 4 | 0) >> 2] | 0) & -8 | 0 | 0) == ($1 | 0)) {
       break label$31
      }
      $6 = $3 >>> 29 | 0;
      $3 = $3 << 1 | 0;
      $2 = ($4 + ($6 & 4 | 0) | 0) + 16 | 0;
      $6 = HEAP32[$2 >> 2] | 0;
      if ($6) {
       continue label$34
      }
      break label$34;
     };
     HEAP32[$2 >> 2] = $0;
     HEAP32[($0 + 24 | 0) >> 2] = $4;
    }
    HEAP32[($0 + 12 | 0) >> 2] = $0;
    HEAP32[($0 + 8 | 0) >> 2] = $0;
    return;
   }
   $1 = HEAP32[($4 + 8 | 0) >> 2] | 0;
   HEAP32[($1 + 12 | 0) >> 2] = $0;
   HEAP32[($4 + 8 | 0) >> 2] = $0;
   HEAP32[($0 + 24 | 0) >> 2] = 0;
   HEAP32[($0 + 12 | 0) >> 2] = $4;
   HEAP32[($0 + 8 | 0) >> 2] = $1;
  }
 }
 
 function __lock($0) {
  $0 = $0 | 0;
 }
 
 function __unlock($0) {
  $0 = $0 | 0;
 }
 
 function __ofl_lock() {
  __lock(12068 | 0);
  return 12076 | 0;
 }
 
 function __ofl_unlock() {
  __unlock(12068 | 0);
 }
 
 function __lockfile($0) {
  $0 = $0 | 0;
  return 1 | 0;
 }
 
 function __unlockfile($0) {
  $0 = $0 | 0;
 }
 
 function memchr($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0;
  $3 = ($2 | 0) != (0 | 0);
  label$1 : {
   label$2 : {
    label$3 : {
     if (!($0 & 3 | 0)) {
      break label$3
     }
     if (!$2) {
      break label$3
     }
     $4 = $1 & 255 | 0;
     label$4 : while (1) {
      if ((HEAPU8[$0 >> 0] | 0 | 0) == ($4 | 0)) {
       break label$2
      }
      $2 = $2 + -1 | 0;
      $3 = ($2 | 0) != (0 | 0);
      $0 = $0 + 1 | 0;
      if (!($0 & 3 | 0)) {
       break label$3
      }
      if ($2) {
       continue label$4
      }
      break label$4;
     };
    }
    if (!$3) {
     break label$1
    }
   }
   label$5 : {
    if ((HEAPU8[$0 >> 0] | 0 | 0) == ($1 & 255 | 0 | 0)) {
     break label$5
    }
    if ($2 >>> 0 < 4 >>> 0) {
     break label$5
    }
    $4 = Math_imul($1 & 255 | 0, 16843009);
    label$6 : while (1) {
     $3 = (HEAP32[$0 >> 2] | 0) ^ $4 | 0;
     if ((($3 ^ -1 | 0) & ($3 + -16843009 | 0) | 0) & -2139062144 | 0) {
      break label$5
     }
     $0 = $0 + 4 | 0;
     $2 = $2 + -4 | 0;
     if ($2 >>> 0 > 3 >>> 0) {
      continue label$6
     }
     break label$6;
    };
   }
   if (!$2) {
    break label$1
   }
   $3 = $1 & 255 | 0;
   label$7 : while (1) {
    label$8 : {
     if ((HEAPU8[$0 >> 0] | 0 | 0) != ($3 | 0)) {
      break label$8
     }
     return $0 | 0;
    }
    $0 = $0 + 1 | 0;
    $2 = $2 + -1 | 0;
    if ($2) {
     continue label$7
    }
    break label$7;
   };
  }
  return 0 | 0;
 }
 
 function frexp($0, $1) {
  $0 = +$0;
  $1 = $1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $3 = 0, i64toi32_i32$2 = 0, i64toi32_i32$4 = 0, $2 = 0, $10 = 0, $2$hi = 0;
  label$1 : {
   wasm2js_scratch_store_f64(+$0);
   i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
   $2 = wasm2js_scratch_load_i32(0 | 0) | 0;
   $2$hi = i64toi32_i32$0;
   i64toi32_i32$2 = $2;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 52;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = 0;
    $10 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    $10 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
   }
   $3 = $10 & 2047 | 0;
   if (($3 | 0) == (2047 | 0)) {
    break label$1
   }
   label$2 : {
    if ($3) {
     break label$2
    }
    label$3 : {
     label$4 : {
      if ($0 != 0.0) {
       break label$4
      }
      $3 = 0;
      break label$3;
     }
     $0 = +frexp(+($0 * 18446744073709551615.0), $1 | 0);
     $3 = (HEAP32[$1 >> 2] | 0) + -64 | 0;
    }
    HEAP32[$1 >> 2] = $3;
    return +$0;
   }
   HEAP32[$1 >> 2] = $3 + -1022 | 0;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$0 = $2;
   i64toi32_i32$2 = -2146435073;
   i64toi32_i32$3 = -1;
   i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
   i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
   i64toi32_i32$0 = 1071644672;
   i64toi32_i32$3 = 0;
   i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
   wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$1 | i64toi32_i32$3 | 0 | 0);
   wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$0 | 0);
   $0 = +wasm2js_scratch_load_f64();
  }
  return +$0;
 }
 
 function __ashlti3($0, $1, $1$hi, $2, $2$hi, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $1$hi = $1$hi | 0;
  $2 = $2 | 0;
  $2$hi = $2$hi | 0;
  $3 = $3 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$3 = 0, $4$hi = 0, $18 = 0, $20 = 0, $21 = 0, $22 = 0, $11$hi = 0, $18$hi = 0, $19 = 0, $19$hi = 0, $4 = 0, $24$hi = 0;
  label$1 : {
   label$2 : {
    if (!($3 & 64 | 0)) {
     break label$2
    }
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$0 = 0;
    $11$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$2 = $1;
    i64toi32_i32$1 = $11$hi;
    i64toi32_i32$3 = $3 + -64 | 0;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
     $18 = 0;
    } else {
     i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
     $18 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
    }
    $2 = $18;
    $2$hi = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    $1 = 0;
    $1$hi = i64toi32_i32$1;
    break label$1;
   }
   if (!$3) {
    break label$1
   }
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$1 = 0;
   $18$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$0 = $1;
   i64toi32_i32$2 = $18$hi;
   i64toi32_i32$3 = 64 - $3 | 0;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = 0;
    $20 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
    $20 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
   }
   $19 = $20;
   $19$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$2 = 0;
   $4 = $3;
   $4$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$1 = $2;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$3 = $3;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
    $21 = 0;
   } else {
    i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
    $21 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
   }
   $24$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $19$hi;
   i64toi32_i32$2 = $19;
   i64toi32_i32$1 = $24$hi;
   i64toi32_i32$3 = $21;
   i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
   $2 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
   $2$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$0 = $1;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$3 = $4;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    $22 = 0;
   } else {
    i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
    $22 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
   }
   $1 = $22;
   $1$hi = i64toi32_i32$2;
  }
  i64toi32_i32$2 = $1$hi;
  i64toi32_i32$0 = $0;
  HEAP32[i64toi32_i32$0 >> 2] = $1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$2;
  i64toi32_i32$2 = $2$hi;
  HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $2;
  HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$2;
 }
 
 function __lshrti3($0, $1, $1$hi, $2, $2$hi, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $1$hi = $1$hi | 0;
  $2 = $2 | 0;
  $2$hi = $2$hi | 0;
  $3 = $3 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $4$hi = 0, $18 = 0, $20 = 0, $21 = 0, $22 = 0, $11$hi = 0, $18$hi = 0, $19 = 0, $19$hi = 0, $4 = 0, $24$hi = 0;
  label$1 : {
   label$2 : {
    if (!($3 & 64 | 0)) {
     break label$2
    }
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$0 = 0;
    $11$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$2 = $2;
    i64toi32_i32$1 = $11$hi;
    i64toi32_i32$3 = $3 + -64 | 0;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $18 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
     $18 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
    }
    $1 = $18;
    $1$hi = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    $2 = 0;
    $2$hi = i64toi32_i32$1;
    break label$1;
   }
   if (!$3) {
    break label$1
   }
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$1 = 0;
   $18$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$0 = $2;
   i64toi32_i32$2 = $18$hi;
   i64toi32_i32$3 = 64 - $3 | 0;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    $20 = 0;
   } else {
    i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
    $20 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
   }
   $19 = $20;
   $19$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$2 = 0;
   $4 = $3;
   $4$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$1 = $1;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$3 = $3;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = 0;
    $21 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
    $21 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
   }
   $24$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $19$hi;
   i64toi32_i32$2 = $19;
   i64toi32_i32$1 = $24$hi;
   i64toi32_i32$3 = $21;
   i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
   $1 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
   $1$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$0 = $2;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$3 = $4;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = 0;
    $22 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
    $22 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
   }
   $2 = $22;
   $2$hi = i64toi32_i32$2;
  }
  i64toi32_i32$2 = $1$hi;
  i64toi32_i32$0 = $0;
  HEAP32[i64toi32_i32$0 >> 2] = $1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$2;
  i64toi32_i32$2 = $2$hi;
  HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $2;
  HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$2;
 }
 
 function __trunctfdf2($0, $0$hi, $1, $1$hi) {
  $0 = $0 | 0;
  $0$hi = $0$hi | 0;
  $1 = $1 | 0;
  $1$hi = $1$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$5 = 0, i64toi32_i32$4 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$1 = 0, $3 = 0, $3$hi = 0, $4$hi = 0, $4 = 0, $2 = 0, $5 = 0, $43 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $12 = 0, $12$hi = 0, $14$hi = 0, $17 = 0, $17$hi = 0, $19$hi = 0, $34 = 0, $34$hi = 0, $37 = 0, $39 = 0, $44 = 0, $44$hi = 0, $46$hi = 0, $74 = 0, $74$hi = 0, $78$hi = 0, $81 = 0, $81$hi = 0, $83 = 0, $83$hi = 0, $87 = 0, $87$hi = 0, $89 = 0, $90$hi = 0, $100$hi = 0, $107 = 0, $107$hi = 0;
  $2 = __stack_pointer - 32 | 0;
  __stack_pointer = $2;
  label$1 : {
   label$2 : {
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$2 = $1;
    i64toi32_i32$1 = 2147483647;
    i64toi32_i32$3 = -1;
    i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
    $3 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
    $3$hi = i64toi32_i32$1;
    i64toi32_i32$0 = $3;
    i64toi32_i32$2 = -1006698496;
    i64toi32_i32$3 = 0;
    i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
    i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    $12 = i64toi32_i32$4;
    $12$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$1 = $3;
    i64toi32_i32$0 = -1140785152;
    i64toi32_i32$3 = 0;
    i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
    i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
    if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
    }
    $14$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $12$hi;
    i64toi32_i32$5 = $12;
    i64toi32_i32$1 = $14$hi;
    i64toi32_i32$3 = i64toi32_i32$2;
    if (i64toi32_i32$4 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$5 >>> 0 >= i64toi32_i32$3 >>> 0 | 0) | 0) {
     break label$2
    }
    i64toi32_i32$5 = $0$hi;
    i64toi32_i32$3 = $0;
    i64toi32_i32$4 = 0;
    i64toi32_i32$1 = 60;
    i64toi32_i32$0 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$4 = 0;
     $43 = i64toi32_i32$5 >>> i64toi32_i32$0 | 0;
    } else {
     i64toi32_i32$4 = i64toi32_i32$5 >>> i64toi32_i32$0 | 0;
     $43 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$0 | 0) | 0;
    }
    $17 = $43;
    $17$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $1$hi;
    i64toi32_i32$5 = $1;
    i64toi32_i32$3 = 0;
    i64toi32_i32$1 = 4;
    i64toi32_i32$0 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = i64toi32_i32$5 << i64toi32_i32$0 | 0;
     $45 = 0;
    } else {
     i64toi32_i32$3 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$0 | 0) | 0;
     $45 = i64toi32_i32$5 << i64toi32_i32$0 | 0;
    }
    $19$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $17$hi;
    i64toi32_i32$4 = $17;
    i64toi32_i32$5 = $19$hi;
    i64toi32_i32$1 = $45;
    i64toi32_i32$5 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
    $3 = i64toi32_i32$4 | i64toi32_i32$1 | 0;
    $3$hi = i64toi32_i32$5;
    label$3 : {
     i64toi32_i32$5 = $0$hi;
     i64toi32_i32$3 = $0;
     i64toi32_i32$4 = 268435455;
     i64toi32_i32$1 = -1;
     i64toi32_i32$4 = i64toi32_i32$5 & i64toi32_i32$4 | 0;
     $0 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
     $0$hi = i64toi32_i32$4;
     i64toi32_i32$5 = $0;
     i64toi32_i32$3 = 134217728;
     i64toi32_i32$1 = 1;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0) {
      break label$3
     }
     i64toi32_i32$5 = $3$hi;
     i64toi32_i32$1 = $3;
     i64toi32_i32$4 = 1073741824;
     i64toi32_i32$3 = 1;
     i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
     i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $4 = i64toi32_i32$0;
     $4$hi = i64toi32_i32$2;
     break label$1;
    }
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$5 = $3;
    i64toi32_i32$1 = 1073741824;
    i64toi32_i32$3 = 0;
    i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
    i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
    }
    $4 = i64toi32_i32$4;
    $4$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $0$hi;
    i64toi32_i32$2 = $0;
    i64toi32_i32$5 = 134217728;
    i64toi32_i32$3 = 0;
    i64toi32_i32$5 = i64toi32_i32$0 ^ i64toi32_i32$5 | 0;
    i64toi32_i32$0 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 0;
    if ((i64toi32_i32$0 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$5 | 0) != (i64toi32_i32$2 | 0) | 0) {
     break label$1
    }
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$0 = $3$hi;
    i64toi32_i32$3 = $3;
    i64toi32_i32$5 = 0;
    i64toi32_i32$2 = 1;
    i64toi32_i32$5 = i64toi32_i32$0 & i64toi32_i32$5 | 0;
    $34 = i64toi32_i32$3 & i64toi32_i32$2 | 0;
    $34$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $4$hi;
    i64toi32_i32$0 = $4;
    i64toi32_i32$3 = $34$hi;
    i64toi32_i32$2 = $34;
    i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
    i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
    if (i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
    }
    $4 = i64toi32_i32$1;
    $4$hi = i64toi32_i32$4;
    break label$1;
   }
   label$4 : {
    i64toi32_i32$4 = $0$hi;
    $37 = !($0 | i64toi32_i32$4 | 0);
    i64toi32_i32$4 = $3$hi;
    i64toi32_i32$5 = $3;
    i64toi32_i32$0 = 2147418112;
    i64toi32_i32$2 = 0;
    $39 = i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
    i64toi32_i32$5 = i64toi32_i32$4;
    i64toi32_i32$2 = $3;
    i64toi32_i32$4 = 2147418112;
    i64toi32_i32$0 = 0;
    if ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & (i64toi32_i32$5 | 0) == (i64toi32_i32$4 | 0) | 0 ? $37 : $39) {
     break label$4
    }
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$0 = $0;
    i64toi32_i32$5 = 0;
    i64toi32_i32$4 = 60;
    i64toi32_i32$3 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$5 = 0;
     $46 = i64toi32_i32$2 >>> i64toi32_i32$3 | 0;
    } else {
     i64toi32_i32$5 = i64toi32_i32$2 >>> i64toi32_i32$3 | 0;
     $46 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$3 | 0) | 0;
    }
    $44 = $46;
    $44$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $1$hi;
    i64toi32_i32$2 = $1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$4 = 4;
    i64toi32_i32$3 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
     $47 = 0;
    } else {
     i64toi32_i32$0 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$3 | 0) | 0;
     $47 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
    }
    $46$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $44$hi;
    i64toi32_i32$5 = $44;
    i64toi32_i32$2 = $46$hi;
    i64toi32_i32$4 = $47;
    i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
    i64toi32_i32$0 = i64toi32_i32$5 | i64toi32_i32$4 | 0;
    i64toi32_i32$5 = 524287;
    i64toi32_i32$4 = -1;
    i64toi32_i32$5 = i64toi32_i32$2 & i64toi32_i32$5 | 0;
    i64toi32_i32$2 = i64toi32_i32$0 & i64toi32_i32$4 | 0;
    i64toi32_i32$0 = 2146959360;
    i64toi32_i32$4 = 0;
    i64toi32_i32$0 = i64toi32_i32$5 | i64toi32_i32$0 | 0;
    $4 = i64toi32_i32$2 | i64toi32_i32$4 | 0;
    $4$hi = i64toi32_i32$0;
    break label$1;
   }
   i64toi32_i32$0 = 2146435072;
   $4 = 0;
   $4$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$5 = $3;
   i64toi32_i32$2 = 1140785151;
   i64toi32_i32$4 = -1;
   if (i64toi32_i32$0 >>> 0 > i64toi32_i32$2 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$5 >>> 0 > i64toi32_i32$4 >>> 0 | 0) | 0) {
    break label$1
   }
   i64toi32_i32$5 = 0;
   $4 = 0;
   $4$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $3$hi;
   i64toi32_i32$4 = $3;
   i64toi32_i32$0 = 0;
   i64toi32_i32$2 = 48;
   i64toi32_i32$3 = i64toi32_i32$2 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = 0;
    $48 = i64toi32_i32$5 >>> i64toi32_i32$3 | 0;
   } else {
    i64toi32_i32$0 = i64toi32_i32$5 >>> i64toi32_i32$3 | 0;
    $48 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$3 | 0) | 0;
   }
   $5 = $48;
   if ($5 >>> 0 < 15249 >>> 0) {
    break label$1
   }
   i64toi32_i32$0 = $0$hi;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$5 = $1;
   i64toi32_i32$4 = 65535;
   i64toi32_i32$2 = -1;
   i64toi32_i32$4 = i64toi32_i32$0 & i64toi32_i32$4 | 0;
   i64toi32_i32$0 = i64toi32_i32$5 & i64toi32_i32$2 | 0;
   i64toi32_i32$5 = 65536;
   i64toi32_i32$2 = 0;
   i64toi32_i32$5 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
   $3 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
   $3$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $0$hi;
   i64toi32_i32$0 = $3$hi;
   __ashlti3($2 + 16 | 0 | 0, $0 | 0, i64toi32_i32$5 | 0, $3 | 0, i64toi32_i32$0 | 0, $5 + -15233 | 0 | 0);
   i64toi32_i32$0 = i64toi32_i32$5;
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$0 = i64toi32_i32$5;
   i64toi32_i32$5 = $3$hi;
   __lshrti3($2 | 0, $0 | 0, i64toi32_i32$0 | 0, $3 | 0, i64toi32_i32$5 | 0, 15361 - $5 | 0 | 0);
   i64toi32_i32$4 = $2;
   i64toi32_i32$5 = HEAP32[i64toi32_i32$4 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
   $3 = i64toi32_i32$5;
   $3$hi = i64toi32_i32$0;
   i64toi32_i32$4 = i64toi32_i32$5;
   i64toi32_i32$5 = 0;
   i64toi32_i32$2 = 60;
   i64toi32_i32$3 = i64toi32_i32$2 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
    i64toi32_i32$5 = 0;
    $49 = i64toi32_i32$0 >>> i64toi32_i32$3 | 0;
   } else {
    i64toi32_i32$5 = i64toi32_i32$0 >>> i64toi32_i32$3 | 0;
    $49 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$3 | 0) | 0;
   }
   $74 = $49;
   $74$hi = i64toi32_i32$5;
   i64toi32_i32$0 = $2 + 8 | 0;
   i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
   i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
   i64toi32_i32$0 = i64toi32_i32$5;
   i64toi32_i32$5 = 0;
   i64toi32_i32$2 = 4;
   i64toi32_i32$3 = i64toi32_i32$2 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$0 << i64toi32_i32$3 | 0;
    $50 = 0;
   } else {
    i64toi32_i32$5 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$3 | 0) | 0;
    $50 = i64toi32_i32$0 << i64toi32_i32$3 | 0;
   }
   $78$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $74$hi;
   i64toi32_i32$4 = $74;
   i64toi32_i32$0 = $78$hi;
   i64toi32_i32$2 = $50;
   i64toi32_i32$0 = i64toi32_i32$5 | i64toi32_i32$0 | 0;
   $4 = i64toi32_i32$4 | i64toi32_i32$2 | 0;
   $4$hi = i64toi32_i32$0;
   label$5 : {
    i64toi32_i32$0 = $3$hi;
    i64toi32_i32$5 = $3;
    i64toi32_i32$4 = 268435455;
    i64toi32_i32$2 = -1;
    i64toi32_i32$4 = i64toi32_i32$0 & i64toi32_i32$4 | 0;
    $81 = i64toi32_i32$5 & i64toi32_i32$2 | 0;
    $81$hi = i64toi32_i32$4;
    i64toi32_i32$0 = $2;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 16 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 20 | 0) >> 2] | 0;
    $83 = i64toi32_i32$4;
    $83$hi = i64toi32_i32$5;
    i64toi32_i32$0 = (i64toi32_i32$0 + 16 | 0) + 8 | 0;
    i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
    $87 = i64toi32_i32$5;
    $87$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $83$hi;
    i64toi32_i32$0 = $83;
    i64toi32_i32$5 = $87$hi;
    i64toi32_i32$2 = $87;
    i64toi32_i32$5 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
    i64toi32_i32$4 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$2 = 0;
    $89 = (i64toi32_i32$4 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$5 | 0) != (i64toi32_i32$0 | 0) | 0;
    i64toi32_i32$4 = 0;
    $90$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $81$hi;
    i64toi32_i32$2 = $81;
    i64toi32_i32$5 = $90$hi;
    i64toi32_i32$0 = $89;
    i64toi32_i32$5 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
    $3 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
    $3$hi = i64toi32_i32$5;
    i64toi32_i32$4 = $3;
    i64toi32_i32$2 = 134217728;
    i64toi32_i32$0 = 1;
    if (i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0) {
     break label$5
    }
    i64toi32_i32$4 = $4$hi;
    i64toi32_i32$0 = $4;
    i64toi32_i32$5 = 0;
    i64toi32_i32$2 = 1;
    i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
    i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
    if (i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
    }
    $4 = i64toi32_i32$3;
    $4$hi = i64toi32_i32$1;
    break label$1;
   }
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$4 = $3;
   i64toi32_i32$0 = 134217728;
   i64toi32_i32$2 = 0;
   i64toi32_i32$0 = i64toi32_i32$1 ^ i64toi32_i32$0 | 0;
   i64toi32_i32$1 = i64toi32_i32$4 ^ i64toi32_i32$2 | 0;
   i64toi32_i32$4 = 0;
   i64toi32_i32$2 = 0;
   if ((i64toi32_i32$1 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$4 | 0) | 0) {
    break label$1
   }
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$2 = $4;
   i64toi32_i32$0 = 0;
   i64toi32_i32$4 = 1;
   i64toi32_i32$0 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
   $100$hi = i64toi32_i32$0;
   i64toi32_i32$0 = i64toi32_i32$1;
   i64toi32_i32$0 = $100$hi;
   i64toi32_i32$1 = i64toi32_i32$2 & i64toi32_i32$4 | 0;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$4 = $4;
   i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
   i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
   if (i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0) {
    i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
   }
   $4 = i64toi32_i32$5;
   $4$hi = i64toi32_i32$3;
  }
  __stack_pointer = $2 + 32 | 0;
  i64toi32_i32$3 = $4$hi;
  i64toi32_i32$3 = $1$hi;
  i64toi32_i32$0 = $1;
  i64toi32_i32$1 = -2147483648;
  i64toi32_i32$4 = 0;
  i64toi32_i32$1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
  $107 = i64toi32_i32$0 & i64toi32_i32$4 | 0;
  $107$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $4$hi;
  i64toi32_i32$3 = $4;
  i64toi32_i32$0 = $107$hi;
  i64toi32_i32$4 = $107;
  i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
  wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$3 | i64toi32_i32$4 | 0 | 0);
  wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$0 | 0);
  return +(+wasm2js_scratch_load_f64());
 }
 
 function FLAC__crc8($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $4 = 0, $3 = 0;
  label$1 : {
   label$2 : {
    if ($1) {
     break label$2
    }
    $1 = 0;
    break label$1;
   }
   $2 = $1 & 3 | 0;
   label$3 : {
    label$4 : {
     if (($1 + -1 | 0) >>> 0 >= 3 >>> 0) {
      break label$4
     }
     $1 = 0;
     break label$3;
    }
    $3 = $1 & -4 | 0;
    $1 = 0;
    label$5 : while (1) {
     $4 = GOT_data_internal___memory_base + 1024 | 0;
     $1 = HEAPU8[($4 + ((HEAPU8[($0 + 3 | 0) >> 0] | 0) ^ (HEAPU8[($4 + ((HEAPU8[($0 + 2 | 0) >> 0] | 0) ^ (HEAPU8[($4 + ((HEAPU8[($0 + 1 | 0) >> 0] | 0) ^ (HEAPU8[($4 + ((HEAPU8[$0 >> 0] | 0) ^ ($1 & 255 | 0) | 0) | 0) >> 0] | 0) | 0) | 0) >> 0] | 0) | 0) | 0) >> 0] | 0) | 0) | 0) >> 0] | 0;
     $0 = $0 + 4 | 0;
     $3 = $3 + -4 | 0;
     if ($3) {
      continue label$5
     }
     break label$5;
    };
   }
   if (!$2) {
    break label$1
   }
   label$6 : while (1) {
    $1 = HEAPU8[((GOT_data_internal___memory_base + 1024 | 0) + ((HEAPU8[$0 >> 0] | 0) ^ ($1 & 255 | 0) | 0) | 0) >> 0] | 0;
    $0 = $0 + 1 | 0;
    $2 = $2 + -1 | 0;
    if ($2) {
     continue label$6
    }
    break label$6;
   };
  }
  return $1 & 255 | 0 | 0;
 }
 
 function FLAC__crc16($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $2 = 0, $3 = 0, $113 = 0;
  $2 = 0;
  label$1 : {
   if ($1 >>> 0 <= 7 >>> 0) {
    break label$1
   }
   label$2 : while (1) {
    $3 = HEAPU8[$0 >> 0] | 0 | ((HEAPU8[($0 + 1 | 0) >> 0] | 0) << 8 | 0) | 0;
    $4 = GOT_data_internal___memory_base + 1280 | 0;
    $2 = ($3 << 8 | 0 | ($3 >>> 8 | 0) | 0) ^ $2 | 0;
    $2 = (((((((HEAPU16[(($4 + (($2 & 255 | 0) << 1 | 0) | 0) + 3072 | 0) >> 1] | 0) ^ (HEAPU16[(($4 + (($2 >>> 7 | 0) & 510 | 0) | 0) + 3584 | 0) >> 1] | 0) | 0) ^ (HEAPU16[(($4 + ((HEAPU8[($0 + 2 | 0) >> 0] | 0) << 1 | 0) | 0) + 2560 | 0) >> 1] | 0) | 0) ^ (HEAPU16[(($4 + ((HEAPU8[($0 + 3 | 0) >> 0] | 0) << 1 | 0) | 0) + 2048 | 0) >> 1] | 0) | 0) ^ (HEAPU16[(($4 + ((HEAPU8[($0 + 4 | 0) >> 0] | 0) << 1 | 0) | 0) + 1536 | 0) >> 1] | 0) | 0) ^ (HEAPU16[(($4 + ((HEAPU8[($0 + 5 | 0) >> 0] | 0) << 1 | 0) | 0) + 1024 | 0) >> 1] | 0) | 0) ^ (HEAPU16[(($4 + ((HEAPU8[($0 + 6 | 0) >> 0] | 0) << 1 | 0) | 0) + 512 | 0) >> 1] | 0) | 0) ^ (HEAPU16[($4 + ((HEAPU8[($0 + 7 | 0) >> 0] | 0) << 1 | 0) | 0) >> 1] | 0) | 0;
    $0 = $0 + 8 | 0;
    $1 = $1 + -8 | 0;
    if ($1 >>> 0 > 7 >>> 0) {
     continue label$2
    }
    break label$2;
   };
  }
  label$3 : {
   if (!$1) {
    break label$3
   }
   label$4 : {
    label$5 : {
     if ($1 & 1 | 0) {
      break label$5
     }
     $4 = $1;
     break label$4;
    }
    $2 = (HEAPU16[((GOT_data_internal___memory_base + 1280 | 0) + (((HEAPU8[$0 >> 0] | 0) ^ (($2 & 65280 | 0) >>> 8 | 0) | 0) << 1 | 0) | 0) >> 1] | 0) ^ ($2 << 8 | 0) | 0;
    $0 = $0 + 1 | 0;
    $4 = $1 + -1 | 0;
   }
   if (($1 | 0) == (1 | 0)) {
    break label$3
   }
   label$6 : while (1) {
    $3 = GOT_data_internal___memory_base + 1280 | 0;
    $113 = $3;
    $3 = HEAPU16[($3 + (((HEAPU8[$0 >> 0] | 0) ^ (($2 & 65280 | 0) >>> 8 | 0) | 0) << 1 | 0) | 0) >> 1] | 0;
    $2 = (HEAPU16[($113 + (((HEAPU8[($0 + 1 | 0) >> 0] | 0) ^ ((($3 ^ ($2 << 8 | 0) | 0) & 65280 | 0) >>> 8 | 0) | 0) << 1 | 0) | 0) >> 1] | 0) ^ ($3 << 8 | 0) | 0;
    $0 = $0 + 2 | 0;
    $4 = $4 + -2 | 0;
    if ($4) {
     continue label$6
    }
    break label$6;
   };
  }
  return $2 & 65535 | 0 | 0;
 }
 
 function FLAC__crc16_update_words32($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0, $45 = 0;
  label$1 : {
   if ($1 >>> 0 < 2 >>> 0) {
    break label$1
   }
   label$2 : while (1) {
    $3 = GOT_data_internal___memory_base + 1280 | 0;
    $4 = HEAP32[$0 >> 2] | 0;
    $2 = $2 ^ ($4 >>> 16 | 0) | 0;
    $45 = (((HEAPU16[(($3 + (($2 & 255 | 0) << 1 | 0) | 0) + 3072 | 0) >> 1] | 0) ^ (HEAPU16[(($3 + (($2 >>> 7 | 0) & 510 | 0) | 0) + 3584 | 0) >> 1] | 0) | 0) ^ (HEAPU16[(($3 + (($4 >>> 7 | 0) & 510 | 0) | 0) + 2560 | 0) >> 1] | 0) | 0) ^ (HEAPU16[(($3 + (($4 & 255 | 0) << 1 | 0) | 0) + 2048 | 0) >> 1] | 0) | 0;
    $4 = HEAP32[($0 + 4 | 0) >> 2] | 0;
    $2 = ((($45 ^ (HEAPU16[(($3 + (($4 >>> 23 | 0) & 510 | 0) | 0) + 1536 | 0) >> 1] | 0) | 0) ^ (HEAPU16[(($3 + (($4 >>> 15 | 0) & 510 | 0) | 0) + 1024 | 0) >> 1] | 0) | 0) ^ (HEAPU16[(($3 + (($4 >>> 7 | 0) & 510 | 0) | 0) + 512 | 0) >> 1] | 0) | 0) ^ (HEAPU16[($3 + (($4 & 255 | 0) << 1 | 0) | 0) >> 1] | 0) | 0;
    $0 = $0 + 8 | 0;
    $1 = $1 + -2 | 0;
    if ($1 >>> 0 > 1 >>> 0) {
     continue label$2
    }
    break label$2;
   };
  }
  label$3 : {
   if (!$1) {
    break label$3
   }
   $3 = GOT_data_internal___memory_base + 1280 | 0;
   $0 = HEAP32[$0 >> 2] | 0;
   $4 = $2 ^ ($0 >>> 16 | 0) | 0;
   $2 = (((HEAPU16[(($3 + (($4 & 255 | 0) << 1 | 0) | 0) + 1024 | 0) >> 1] | 0) ^ (HEAPU16[(($3 + (($4 >>> 7 | 0) & 510 | 0) | 0) + 1536 | 0) >> 1] | 0) | 0) ^ (HEAPU16[(($3 + (($0 >>> 7 | 0) & 510 | 0) | 0) + 512 | 0) >> 1] | 0) | 0) ^ (HEAPU16[($3 + (($0 & 255 | 0) << 1 | 0) | 0) >> 1] | 0) | 0;
  }
  return $2 & 65535 | 0 | 0;
 }
 
 function memmove($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0;
  label$1 : {
   if (($0 | 0) == ($1 | 0)) {
    break label$1
   }
   label$2 : {
    $3 = $0 + $2 | 0;
    if (($1 - $3 | 0) >>> 0 > (0 - ($2 << 1 | 0) | 0) >>> 0) {
     break label$2
    }
    return __memcpy($0 | 0, $1 | 0, $2 | 0) | 0 | 0;
   }
   $4 = ($1 ^ $0 | 0) & 3 | 0;
   label$3 : {
    label$4 : {
     label$5 : {
      if ($0 >>> 0 >= $1 >>> 0) {
       break label$5
      }
      label$6 : {
       if (!$4) {
        break label$6
       }
       $3 = $0;
       break label$3;
      }
      label$7 : {
       if ($0 & 3 | 0) {
        break label$7
       }
       $3 = $0;
       break label$4;
      }
      $3 = $0;
      label$8 : while (1) {
       if (!$2) {
        break label$1
       }
       HEAP8[$3 >> 0] = HEAPU8[$1 >> 0] | 0;
       $1 = $1 + 1 | 0;
       $2 = $2 + -1 | 0;
       $3 = $3 + 1 | 0;
       if (!($3 & 3 | 0)) {
        break label$4
       }
       continue label$8;
      };
     }
     label$9 : {
      if ($4) {
       break label$9
      }
      label$10 : {
       if (!($3 & 3 | 0)) {
        break label$10
       }
       label$11 : while (1) {
        if (!$2) {
         break label$1
        }
        $2 = $2 + -1 | 0;
        $3 = $0 + $2 | 0;
        HEAP8[$3 >> 0] = HEAPU8[($1 + $2 | 0) >> 0] | 0;
        if ($3 & 3 | 0) {
         continue label$11
        }
        break label$11;
       };
      }
      if ($2 >>> 0 <= 3 >>> 0) {
       break label$9
      }
      label$12 : while (1) {
       $2 = $2 + -4 | 0;
       HEAP32[($0 + $2 | 0) >> 2] = HEAP32[($1 + $2 | 0) >> 2] | 0;
       if ($2 >>> 0 > 3 >>> 0) {
        continue label$12
       }
       break label$12;
      };
     }
     if (!$2) {
      break label$1
     }
     label$13 : while (1) {
      $2 = $2 + -1 | 0;
      HEAP8[($0 + $2 | 0) >> 0] = HEAPU8[($1 + $2 | 0) >> 0] | 0;
      if ($2) {
       continue label$13
      }
      break label$1;
     };
    }
    if ($2 >>> 0 <= 3 >>> 0) {
     break label$3
    }
    label$14 : while (1) {
     HEAP32[$3 >> 2] = HEAP32[$1 >> 2] | 0;
     $1 = $1 + 4 | 0;
     $3 = $3 + 4 | 0;
     $2 = $2 + -4 | 0;
     if ($2 >>> 0 > 3 >>> 0) {
      continue label$14
     }
     break label$14;
    };
   }
   if (!$2) {
    break label$1
   }
   label$15 : while (1) {
    HEAP8[$3 >> 0] = HEAPU8[$1 >> 0] | 0;
    $3 = $3 + 1 | 0;
    $1 = $1 + 1 | 0;
    $2 = $2 + -1 | 0;
    if ($2) {
     continue label$15
    }
    break label$15;
   };
  }
  return $0 | 0;
 }
 
 function FLAC__bitreader_new() {
  return dlcalloc(1 | 0, 44 | 0) | 0 | 0;
 }
 
 function FLAC__bitreader_delete($0) {
  $0 = $0 | 0;
  var $1 = 0;
  label$1 : {
   $1 = HEAP32[$0 >> 2] | 0;
   if (!$1) {
    break label$1
   }
   dlfree($1 | 0);
  }
  dlfree($0 | 0);
 }
 
 function FLAC__bitreader_free($0) {
  $0 = $0 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $1 = 0;
  label$1 : {
   $1 = HEAP32[$0 >> 2] | 0;
   if (!$1) {
    break label$1
   }
   dlfree($1 | 0);
  }
  i64toi32_i32$1 = $0;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 36 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 40 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = i64toi32_i32$1 + 8 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 16 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
 }
 
 function FLAC__bitreader_init($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $3 = 0;
  i64toi32_i32$1 = $0;
  i64toi32_i32$0 = 0;
  HEAP32[($0 + 8 | 0) >> 2] = 0;
  HEAP32[($0 + 12 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0 + 4 | 0) >> 2] = 2048;
  i64toi32_i32$1 = $0 + 16 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $3 = dlmalloc(8192 | 0) | 0;
  HEAP32[$0 >> 2] = $3;
  label$1 : {
   if ($3) {
    break label$1
   }
   return 0 | 0;
  }
  HEAP32[($0 + 40 | 0) >> 2] = $2;
  HEAP32[($0 + 36 | 0) >> 2] = $1;
  return 1 | 0;
 }
 
 function FLAC__bitreader_clear($0) {
  $0 = $0 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0;
  i64toi32_i32$1 = $0;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = i64toi32_i32$1 + 16 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  return 1 | 0;
 }
 
 function FLAC__bitreader_reset_read_crc16($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var i64toi32_i32$1 = 0;
  HEAP32[($0 + 24 | 0) >> 2] = $1;
  i64toi32_i32$1 = HEAP32[($0 + 20 | 0) >> 2] | 0;
  HEAP32[($0 + 28 | 0) >> 2] = HEAP32[($0 + 16 | 0) >> 2] | 0;
  HEAP32[($0 + 32 | 0) >> 2] = i64toi32_i32$1;
 }
 
 function FLAC__bitreader_get_read_crc16($0) {
  $0 = $0 | 0;
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $1 = 0, $54 = 0, $73 = 0;
  label$1 : {
   label$2 : {
    $1 = HEAP32[($0 + 16 | 0) >> 2] | 0;
    $2 = HEAP32[($0 + 28 | 0) >> 2] | 0;
    if ($1 >>> 0 > $2 >>> 0) {
     break label$2
    }
    $3 = $2;
    break label$1;
   }
   label$3 : {
    $4 = HEAP32[($0 + 32 | 0) >> 2] | 0;
    if ($4) {
     break label$3
    }
    $3 = $2;
    break label$1;
   }
   $3 = $2 + 1 | 0;
   HEAP32[($0 + 28 | 0) >> 2] = $3;
   $5 = HEAP32[($0 + 24 | 0) >> 2] | 0;
   label$4 : {
    if ($4 >>> 0 > 31 >>> 0) {
     break label$4
    }
    $2 = HEAP32[((HEAP32[$0 >> 2] | 0) + ($2 << 2 | 0) | 0) >> 2] | 0;
    $6 = HEAPU16[(GOT_data_internal_FLAC__crc16_table + (((($2 >>> (24 - $4 | 0) | 0) & 255 | 0) ^ ($5 >>> 8 | 0) | 0) << 1 | 0) | 0) >> 1] | 0;
    $5 = (($5 << 8 | 0) & 65280 | 0) ^ $6 | 0;
    if ($4 >>> 0 >= 24 >>> 0) {
     break label$4
    }
    $54 = ($6 << 8 | 0) & 65280 | 0;
    $6 = HEAPU16[(GOT_data_internal_FLAC__crc16_table + (((($2 >>> (16 - $4 | 0) | 0) & 255 | 0) ^ ($5 >>> 8 | 0) | 0) << 1 | 0) | 0) >> 1] | 0;
    $5 = $54 ^ $6 | 0;
    if ($4 >>> 0 > 15 >>> 0) {
     break label$4
    }
    $73 = ($6 << 8 | 0) & 65280 | 0;
    $6 = HEAPU16[(GOT_data_internal_FLAC__crc16_table + (((($2 >>> (8 - $4 | 0) | 0) & 255 | 0) ^ ($5 >>> 8 | 0) | 0) << 1 | 0) | 0) >> 1] | 0;
    $5 = $73 ^ $6 | 0;
    if ($4 >>> 0 > 7 >>> 0) {
     break label$4
    }
    $5 = (($6 << 8 | 0) & 65280 | 0) ^ (HEAPU16[(GOT_data_internal_FLAC__crc16_table + (((($2 >>> (0 - $4 | 0) | 0) & 255 | 0) ^ ($5 >>> 8 | 0) | 0) << 1 | 0) | 0) >> 1] | 0) | 0;
   }
   HEAP32[($0 + 32 | 0) >> 2] = 0;
   HEAP32[($0 + 24 | 0) >> 2] = $5;
  }
  $3 = FLAC__crc16_update_words32((HEAP32[$0 >> 2] | 0) + ($3 << 2 | 0) | 0 | 0, $1 - $3 | 0 | 0, HEAPU16[($0 + 24 | 0) >> 1] | 0 | 0) | 0;
  HEAP32[($0 + 28 | 0) >> 2] = 0;
  HEAP32[($0 + 24 | 0) >> 2] = $3;
  label$5 : {
   $1 = HEAP32[($0 + 20 | 0) >> 2] | 0;
   if (!$1) {
    break label$5
   }
   $2 = HEAP32[($0 + 32 | 0) >> 2] | 0;
   if ($2 >>> 0 >= $1 >>> 0) {
    break label$5
   }
   $4 = HEAP32[((HEAP32[$0 >> 2] | 0) + ((HEAP32[($0 + 16 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
   label$6 : while (1) {
    $3 = (($3 << 8 | 0) & 65280 | 0) ^ (HEAPU16[(GOT_data_internal_FLAC__crc16_table + ((($3 >>> 8 | 0) ^ (($4 >>> (24 - $2 | 0) | 0) & 255 | 0) | 0) << 1 | 0) | 0) >> 1] | 0) | 0;
    $2 = $2 + 8 | 0;
    if ($2 >>> 0 < $1 >>> 0) {
     continue label$6
    }
    break label$6;
   };
   HEAP32[($0 + 32 | 0) >> 2] = $2;
   HEAP32[($0 + 24 | 0) >> 2] = $3;
  }
  return $3 | 0;
 }
 
 function FLAC__bitreader_is_consumed_byte_aligned($0) {
  $0 = $0 | 0;
  return !((HEAPU8[($0 + 20 | 0) >> 0] | 0) & 7 | 0) | 0;
 }
 
 function FLAC__bitreader_bits_left_for_byte_alignment($0) {
  $0 = $0 | 0;
  return 8 - ((HEAP32[($0 + 20 | 0) >> 2] | 0) & 7 | 0) | 0 | 0;
 }
 
 function FLAC__bitreader_get_input_bits_unconsumed($0) {
  $0 = $0 | 0;
  return ((((HEAP32[($0 + 8 | 0) >> 2] | 0) - (HEAP32[($0 + 16 | 0) >> 2] | 0) | 0) << 5 | 0) + ((HEAP32[($0 + 12 | 0) >> 2] | 0) << 3 | 0) | 0) - (HEAP32[($0 + 20 | 0) >> 2] | 0) | 0 | 0;
 }
 
 function FLAC__bitreader_read_raw_uint32($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $5 = 0, $4 = 0, $3 = 0, $6 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     if (!$2) {
      break label$3
     }
     label$4 : {
      label$5 : while (1) {
       $3 = HEAP32[($0 + 8 | 0) >> 2] | 0;
       $4 = HEAP32[($0 + 16 | 0) >> 2] | 0;
       $5 = HEAP32[($0 + 20 | 0) >> 2] | 0;
       if ((((($3 - $4 | 0) << 5 | 0) + ((HEAP32[($0 + 12 | 0) >> 2] | 0) << 3 | 0) | 0) - $5 | 0) >>> 0 >= $2 >>> 0) {
        break label$4
       }
       if (bitreader_read_from_client_($0 | 0) | 0) {
        continue label$5
       }
       break label$5;
      };
      return 0 | 0;
     }
     label$6 : {
      if ($3 >>> 0 <= $4 >>> 0) {
       break label$6
      }
      label$7 : {
       if (!$5) {
        break label$7
       }
       $6 = HEAP32[$0 >> 2] | 0;
       $4 = (HEAP32[($6 + ($4 << 2 | 0) | 0) >> 2] | 0) & (-1 >>> $5 | 0) | 0;
       label$8 : {
        $3 = 32 - $5 | 0;
        if ($3 >>> 0 <= $2 >>> 0) {
         break label$8
        }
        HEAP32[$1 >> 2] = $4 >>> ($3 - $2 | 0) | 0;
        HEAP32[($0 + 20 | 0) >> 2] = (HEAP32[($0 + 20 | 0) >> 2] | 0) + $2 | 0;
        break label$2;
       }
       HEAP32[$1 >> 2] = $4;
       HEAP32[($0 + 20 | 0) >> 2] = 0;
       $5 = 1;
       HEAP32[($0 + 16 | 0) >> 2] = (HEAP32[($0 + 16 | 0) >> 2] | 0) + 1 | 0;
       $2 = $2 - $3 | 0;
       if (!$2) {
        break label$1
       }
       $5 = (HEAP32[$1 >> 2] | 0) << $2 | 0;
       HEAP32[$1 >> 2] = $5;
       HEAP32[$1 >> 2] = (HEAP32[($6 + ((HEAP32[($0 + 16 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) >>> (32 - $2 | 0) | 0 | $5 | 0;
       HEAP32[($0 + 20 | 0) >> 2] = $2;
       return 1 | 0;
      }
      $5 = HEAP32[((HEAP32[$0 >> 2] | 0) + ($4 << 2 | 0) | 0) >> 2] | 0;
      label$9 : {
       if ($2 >>> 0 > 31 >>> 0) {
        break label$9
       }
       HEAP32[$1 >> 2] = $5 >>> (32 - $2 | 0) | 0;
       HEAP32[($0 + 20 | 0) >> 2] = $2;
       break label$2;
      }
      HEAP32[$1 >> 2] = $5;
      HEAP32[($0 + 16 | 0) >> 2] = (HEAP32[($0 + 16 | 0) >> 2] | 0) + 1 | 0;
      return 1 | 0;
     }
     $4 = HEAP32[((HEAP32[$0 >> 2] | 0) + ($4 << 2 | 0) | 0) >> 2] | 0;
     label$10 : {
      if (!$5) {
       break label$10
      }
      HEAP32[$1 >> 2] = ($4 & (-1 >>> $5 | 0) | 0) >>> (32 - ($5 + $2 | 0) | 0) | 0;
      HEAP32[($0 + 20 | 0) >> 2] = (HEAP32[($0 + 20 | 0) >> 2] | 0) + $2 | 0;
      break label$2;
     }
     HEAP32[$1 >> 2] = $4 >>> (32 - $2 | 0) | 0;
     HEAP32[($0 + 20 | 0) >> 2] = (HEAP32[($0 + 20 | 0) >> 2] | 0) + $2 | 0;
     break label$2;
    }
    HEAP32[$1 >> 2] = 0;
   }
   $5 = 1;
  }
  return $5 | 0;
 }
 
 function bitreader_read_from_client_($0) {
  $0 = $0 | 0;
  var $3 = 0, $4 = 0, $2 = 0, $5 = 0, $6 = 0, $7 = 0, $1 = 0, $62 = 0, $81 = 0, $8 = 0, $239 = 0, $284 = 0, $302 = 0, $320 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  label$1 : {
   label$2 : {
    $2 = HEAP32[($0 + 16 | 0) >> 2] | 0;
    if ($2) {
     break label$2
    }
    $2 = HEAP32[($0 + 8 | 0) >> 2] | 0;
    break label$1;
   }
   label$3 : {
    label$4 : {
     $3 = HEAP32[($0 + 28 | 0) >> 2] | 0;
     if ($2 >>> 0 > $3 >>> 0) {
      break label$4
     }
     $4 = $3;
     break label$3;
    }
    label$5 : {
     $5 = HEAP32[($0 + 32 | 0) >> 2] | 0;
     if ($5) {
      break label$5
     }
     $4 = $3;
     break label$3;
    }
    $4 = $3 + 1 | 0;
    HEAP32[($0 + 28 | 0) >> 2] = $4;
    $6 = HEAP32[($0 + 24 | 0) >> 2] | 0;
    label$6 : {
     if ($5 >>> 0 > 31 >>> 0) {
      break label$6
     }
     $3 = HEAP32[((HEAP32[$0 >> 2] | 0) + ($3 << 2 | 0) | 0) >> 2] | 0;
     $7 = HEAPU16[(GOT_data_internal_FLAC__crc16_table + (((($3 >>> (24 - $5 | 0) | 0) & 255 | 0) ^ ($6 >>> 8 | 0) | 0) << 1 | 0) | 0) >> 1] | 0;
     $6 = (($6 << 8 | 0) & 65280 | 0) ^ $7 | 0;
     if ($5 >>> 0 >= 24 >>> 0) {
      break label$6
     }
     $62 = ($7 << 8 | 0) & 65280 | 0;
     $7 = HEAPU16[(GOT_data_internal_FLAC__crc16_table + (((($3 >>> (16 - $5 | 0) | 0) & 255 | 0) ^ ($6 >>> 8 | 0) | 0) << 1 | 0) | 0) >> 1] | 0;
     $6 = $62 ^ $7 | 0;
     if ($5 >>> 0 > 15 >>> 0) {
      break label$6
     }
     $81 = ($7 << 8 | 0) & 65280 | 0;
     $7 = HEAPU16[(GOT_data_internal_FLAC__crc16_table + (((($3 >>> (8 - $5 | 0) | 0) & 255 | 0) ^ ($6 >>> 8 | 0) | 0) << 1 | 0) | 0) >> 1] | 0;
     $6 = $81 ^ $7 | 0;
     if ($5 >>> 0 > 7 >>> 0) {
      break label$6
     }
     $6 = (($7 << 8 | 0) & 65280 | 0) ^ (HEAPU16[(GOT_data_internal_FLAC__crc16_table + (((($3 >>> (0 - $5 | 0) | 0) & 255 | 0) ^ ($6 >>> 8 | 0) | 0) << 1 | 0) | 0) >> 1] | 0) | 0;
    }
    HEAP32[($0 + 32 | 0) >> 2] = 0;
    HEAP32[($0 + 24 | 0) >> 2] = $6;
   }
   $2 = FLAC__crc16_update_words32((HEAP32[$0 >> 2] | 0) + ($4 << 2 | 0) | 0 | 0, $2 - $4 | 0 | 0, HEAPU16[($0 + 24 | 0) >> 1] | 0 | 0) | 0;
   HEAP32[($0 + 28 | 0) >> 2] = 0;
   HEAP32[($0 + 24 | 0) >> 2] = $2;
   $4 = HEAP32[$0 >> 2] | 0;
   $2 = HEAP32[($0 + 16 | 0) >> 2] | 0;
   memmove($4 | 0, $4 + ($2 << 2 | 0) | 0 | 0, (((HEAP32[($0 + 8 | 0) >> 2] | 0) - $2 | 0) + ((HEAP32[($0 + 12 | 0) >> 2] | 0 | 0) != (0 | 0)) | 0) << 2 | 0 | 0) | 0;
   HEAP32[($0 + 16 | 0) >> 2] = 0;
   $2 = (HEAP32[($0 + 8 | 0) >> 2] | 0) - $2 | 0;
   HEAP32[($0 + 8 | 0) >> 2] = $2;
  }
  $3 = HEAP32[($0 + 12 | 0) >> 2] | 0;
  $5 = (((HEAP32[($0 + 4 | 0) >> 2] | 0) - $2 | 0) << 2 | 0) - $3 | 0;
  HEAP32[($1 + 12 | 0) >> 2] = $5;
  $4 = 0;
  label$7 : {
   if (!$5) {
    break label$7
   }
   $5 = (HEAP32[$0 >> 2] | 0) + ($2 << 2 | 0) | 0;
   $6 = $5 + $3 | 0;
   label$8 : {
    if (!$3) {
     break label$8
    }
    $2 = HEAP32[$5 >> 2] | 0;
    HEAP32[$5 >> 2] = $2 << 24 | 0 | (($2 << 8 | 0) & 16711680 | 0) | 0 | (($2 >>> 8 | 0) & 65280 | 0 | ($2 >>> 24 | 0) | 0) | 0;
   }
   if (!(FUNCTION_TABLE[HEAP32[($0 + 36 | 0) >> 2] | 0 | 0]($6, $1 + 12 | 0, HEAP32[($0 + 40 | 0) >> 2] | 0) | 0)) {
    break label$7
   }
   label$9 : {
    $4 = HEAP32[($0 + 12 | 0) >> 2] | 0;
    $2 = HEAP32[($0 + 8 | 0) >> 2] | 0;
    $3 = $2 << 2 | 0;
    $7 = HEAP32[($1 + 12 | 0) >> 2] | 0;
    $6 = ((($4 + $3 | 0) + $7 | 0) + 3 | 0) >>> 2 | 0;
    if ($6 >>> 0 <= $2 >>> 0) {
     break label$9
    }
    $8 = $6 + ($2 ^ -1 | 0) | 0;
    $5 = HEAP32[$0 >> 2] | 0;
    label$10 : {
     $3 = ($6 - $2 | 0) & 3 | 0;
     if (!$3) {
      break label$10
     }
     label$11 : while (1) {
      $4 = $5 + ($2 << 2 | 0) | 0;
      $239 = $4;
      $4 = HEAP32[$4 >> 2] | 0;
      HEAP32[$239 >> 2] = $4 << 24 | 0 | (($4 << 8 | 0) & 16711680 | 0) | 0 | (($4 >>> 8 | 0) & 65280 | 0 | ($4 >>> 24 | 0) | 0) | 0;
      $2 = $2 + 1 | 0;
      $3 = $3 + -1 | 0;
      if ($3) {
       continue label$11
      }
      break label$11;
     };
    }
    label$12 : {
     if ($8 >>> 0 < 3 >>> 0) {
      break label$12
     }
     label$13 : while (1) {
      $4 = $5 + ($2 << 2 | 0) | 0;
      $3 = HEAP32[$4 >> 2] | 0;
      HEAP32[$4 >> 2] = $3 << 24 | 0 | (($3 << 8 | 0) & 16711680 | 0) | 0 | (($3 >>> 8 | 0) & 65280 | 0 | ($3 >>> 24 | 0) | 0) | 0;
      $3 = $4 + 4 | 0;
      $284 = $3;
      $3 = HEAP32[$3 >> 2] | 0;
      HEAP32[$284 >> 2] = $3 << 24 | 0 | (($3 << 8 | 0) & 16711680 | 0) | 0 | (($3 >>> 8 | 0) & 65280 | 0 | ($3 >>> 24 | 0) | 0) | 0;
      $3 = $4 + 8 | 0;
      $302 = $3;
      $3 = HEAP32[$3 >> 2] | 0;
      HEAP32[$302 >> 2] = $3 << 24 | 0 | (($3 << 8 | 0) & 16711680 | 0) | 0 | (($3 >>> 8 | 0) & 65280 | 0 | ($3 >>> 24 | 0) | 0) | 0;
      $4 = $4 + 12 | 0;
      $320 = $4;
      $4 = HEAP32[$4 >> 2] | 0;
      HEAP32[$320 >> 2] = $4 << 24 | 0 | (($4 << 8 | 0) & 16711680 | 0) | 0 | (($4 >>> 8 | 0) & 65280 | 0 | ($4 >>> 24 | 0) | 0) | 0;
      $2 = $2 + 4 | 0;
      if (($2 | 0) != ($6 | 0)) {
       continue label$13
      }
      break label$13;
     };
    }
    $3 = (HEAP32[($0 + 8 | 0) >> 2] | 0) << 2 | 0;
    $4 = HEAP32[($0 + 12 | 0) >> 2] | 0;
   }
   $2 = ($4 + $7 | 0) + $3 | 0;
   HEAP32[($0 + 12 | 0) >> 2] = $2 & 3 | 0;
   HEAP32[($0 + 8 | 0) >> 2] = $2 >>> 2 | 0;
   $4 = 1;
  }
  __stack_pointer = $1 + 16 | 0;
  return $4 | 0;
 }
 
 function FLAC__bitreader_read_raw_int32($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  label$1 : {
   label$2 : {
    if (FLAC__bitreader_read_raw_uint32($0 | 0, $3 + 12 | 0 | 0, $2 | 0) | 0) {
     break label$2
    }
    $0 = 0;
    break label$1;
   }
   $0 = 1;
   $2 = 1 << ($2 + -1 | 0) | 0;
   HEAP32[$1 >> 2] = ((HEAP32[($3 + 12 | 0) >> 2] | 0) ^ $2 | 0) - $2 | 0;
  }
  __stack_pointer = $3 + 16 | 0;
  return $0 | 0;
 }
 
 function FLAC__bitreader_read_raw_uint64($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var i64toi32_i32$0 = 0, $3 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $4 = 0, $15 = 0, $5 = 0, $5$hi = 0, $25$hi = 0, $27 = 0, $27$hi = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  label$1 : {
   label$2 : {
    label$3 : {
     if ($2 >>> 0 < 33 >>> 0) {
      break label$3
     }
     $4 = 0;
     if (!(FLAC__bitreader_read_raw_uint32($0 | 0, $3 + 12 | 0 | 0, $2 + -32 | 0 | 0) | 0)) {
      break label$1
     }
     if (!(FLAC__bitreader_read_raw_uint32($0 | 0, $3 + 8 | 0 | 0, 32 | 0) | 0)) {
      break label$1
     }
     i64toi32_i32$2 = $3;
     i64toi32_i32$0 = HEAP32[($3 + 12 | 0) >> 2] | 0;
     i64toi32_i32$1 = 0;
     i64toi32_i32$2 = i64toi32_i32$0;
     i64toi32_i32$0 = 0;
     i64toi32_i32$3 = 32;
     i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
      $15 = 0;
     } else {
      i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
      $15 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
     }
     $25$hi = i64toi32_i32$0;
     i64toi32_i32$1 = $3;
     i64toi32_i32$0 = HEAP32[($3 + 8 | 0) >> 2] | 0;
     i64toi32_i32$2 = 0;
     $27 = i64toi32_i32$0;
     $27$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $25$hi;
     i64toi32_i32$1 = $15;
     i64toi32_i32$0 = $27$hi;
     i64toi32_i32$3 = $27;
     i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
     $5 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
     $5$hi = i64toi32_i32$0;
     break label$2;
    }
    label$4 : {
     if (FLAC__bitreader_read_raw_uint32($0 | 0, $3 + 8 | 0 | 0, $2 | 0) | 0) {
      break label$4
     }
     $4 = 0;
     break label$1;
    }
    i64toi32_i32$2 = $3;
    i64toi32_i32$0 = HEAP32[($3 + 8 | 0) >> 2] | 0;
    i64toi32_i32$1 = 0;
    $5 = i64toi32_i32$0;
    $5$hi = i64toi32_i32$1;
   }
   i64toi32_i32$1 = $5$hi;
   i64toi32_i32$0 = $1;
   HEAP32[i64toi32_i32$0 >> 2] = $5;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   $4 = 1;
  }
  __stack_pointer = $3 + 16 | 0;
  return $4 | 0;
 }
 
 function FLAC__bitreader_read_uint32_little_endian($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  $3 = 0;
  HEAP32[($2 + 8 | 0) >> 2] = 0;
  label$1 : {
   if (!(FLAC__bitreader_read_raw_uint32($0 | 0, $2 + 8 | 0 | 0, 8 | 0) | 0)) {
    break label$1
   }
   if (!(FLAC__bitreader_read_raw_uint32($0 | 0, $2 + 12 | 0 | 0, 8 | 0) | 0)) {
    break label$1
   }
   $4 = HEAP32[($2 + 8 | 0) >> 2] | 0;
   $5 = HEAP32[($2 + 12 | 0) >> 2] | 0;
   if (!(FLAC__bitreader_read_raw_uint32($0 | 0, $2 + 12 | 0 | 0, 8 | 0) | 0)) {
    break label$1
   }
   $6 = HEAP32[($2 + 12 | 0) >> 2] | 0;
   if (!(FLAC__bitreader_read_raw_uint32($0 | 0, $2 + 12 | 0 | 0, 8 | 0) | 0)) {
    break label$1
   }
   HEAP32[$1 >> 2] = (HEAP32[($2 + 12 | 0) >> 2] | 0) << 24 | 0 | ($6 << 16 | 0 | ($4 | ($5 << 8 | 0) | 0) | 0) | 0;
   $3 = 1;
  }
  __stack_pointer = $2 + 16 | 0;
  return $3 | 0;
 }
 
 function FLAC__bitreader_skip_bits_no_crc($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $2 = 0, $3 = 0, $5 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  $3 = 1;
  label$1 : {
   if (!$1) {
    break label$1
   }
   label$2 : {
    label$3 : {
     $4 = (HEAP32[($0 + 20 | 0) >> 2] | 0) & 7 | 0;
     if (!$4) {
      break label$3
     }
     $4 = 8 - $4 | 0;
     $4 = $4 >>> 0 < $1 >>> 0 ? $4 : $1;
     if (!(FLAC__bitreader_read_raw_uint32($0 | 0, $2 + 8 | 0 | 0, $4 | 0) | 0)) {
      break label$2
     }
     $1 = $1 - $4 | 0;
    }
    label$4 : {
     if ($1 >>> 0 < 8 >>> 0) {
      break label$4
     }
     $4 = $1 >>> 3 | 0;
     label$5 : {
      label$6 : while (1) {
       label$7 : {
        if (HEAP32[($0 + 20 | 0) >> 2] | 0) {
         break label$7
        }
        label$8 : {
         if ($4 >>> 0 <= 3 >>> 0) {
          break label$8
         }
         label$9 : while (1) {
          label$10 : {
           label$11 : {
            $5 = HEAP32[($0 + 16 | 0) >> 2] | 0;
            if ($5 >>> 0 >= (HEAP32[($0 + 8 | 0) >> 2] | 0) >>> 0) {
             break label$11
            }
            HEAP32[($0 + 16 | 0) >> 2] = $5 + 1 | 0;
            $4 = $4 + -4 | 0;
            break label$10;
           }
           if (!(bitreader_read_from_client_($0 | 0) | 0)) {
            break label$2
           }
          }
          if ($4 >>> 0 > 3 >>> 0) {
           continue label$9
          }
          break label$9;
         };
         if (!$4) {
          break label$5
         }
        }
        label$12 : while (1) {
         if (!(FLAC__bitreader_read_raw_uint32($0 | 0, $2 + 12 | 0 | 0, 8 | 0) | 0)) {
          break label$2
         }
         $4 = $4 + -1 | 0;
         if (!$4) {
          break label$5
         }
         continue label$12;
        };
       }
       if (!(FLAC__bitreader_read_raw_uint32($0 | 0, $2 + 12 | 0 | 0, 8 | 0) | 0)) {
        break label$2
       }
       $4 = $4 + -1 | 0;
       if ($4) {
        continue label$6
       }
       break label$6;
      };
     }
     $1 = $1 & 7 | 0;
    }
    if (!$1) {
     break label$1
    }
    if (FLAC__bitreader_read_raw_uint32($0 | 0, $2 + 8 | 0 | 0, $1 | 0) | 0) {
     break label$1
    }
   }
   $3 = 0;
  }
  __stack_pointer = $2 + 16 | 0;
  return $3 | 0;
 }
 
 function FLAC__bitreader_skip_byte_block_aligned_no_crc($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  $3 = 1;
  label$1 : {
   if (!$1) {
    break label$1
   }
   label$2 : {
    label$3 : while (1) {
     label$4 : {
      if (HEAP32[($0 + 20 | 0) >> 2] | 0) {
       break label$4
      }
      label$5 : {
       if ($1 >>> 0 <= 3 >>> 0) {
        break label$5
       }
       label$6 : while (1) {
        label$7 : {
         label$8 : {
          $4 = HEAP32[($0 + 16 | 0) >> 2] | 0;
          if ($4 >>> 0 >= (HEAP32[($0 + 8 | 0) >> 2] | 0) >>> 0) {
           break label$8
          }
          HEAP32[($0 + 16 | 0) >> 2] = $4 + 1 | 0;
          $1 = $1 + -4 | 0;
          break label$7;
         }
         if (!(bitreader_read_from_client_($0 | 0) | 0)) {
          break label$2
         }
        }
        if ($1 >>> 0 > 3 >>> 0) {
         continue label$6
        }
        break label$6;
       };
       if ($1) {
        break label$5
       }
       $3 = 1;
       break label$1;
      }
      label$9 : while (1) {
       if (!(FLAC__bitreader_read_raw_uint32($0 | 0, $2 + 12 | 0 | 0, 8 | 0) | 0)) {
        break label$2
       }
       $1 = $1 + -1 | 0;
       if ($1) {
        continue label$9
       }
       break label$1;
      };
     }
     if (!(FLAC__bitreader_read_raw_uint32($0 | 0, $2 + 12 | 0 | 0, 8 | 0) | 0)) {
      break label$2
     }
     $1 = $1 + -1 | 0;
     if ($1) {
      continue label$3
     }
     break label$1;
    };
   }
   $3 = 0;
  }
  __stack_pointer = $2 + 16 | 0;
  return $3 | 0;
 }
 
 function FLAC__bitreader_read_byte_block_aligned_no_crc($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $4 = 0, $3 = 0, $5 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  label$1 : {
   label$2 : {
    if ($2) {
     break label$2
    }
    $4 = 1;
    break label$1;
   }
   label$3 : while (1) {
    label$4 : {
     if (HEAP32[($0 + 20 | 0) >> 2] | 0) {
      break label$4
     }
     label$5 : {
      if ($2 >>> 0 <= 3 >>> 0) {
       break label$5
      }
      label$6 : while (1) {
       label$7 : {
        label$8 : {
         $4 = HEAP32[($0 + 16 | 0) >> 2] | 0;
         if ($4 >>> 0 >= (HEAP32[($0 + 8 | 0) >> 2] | 0) >>> 0) {
          break label$8
         }
         HEAP32[($0 + 16 | 0) >> 2] = $4 + 1 | 0;
         $4 = HEAP32[((HEAP32[$0 >> 2] | 0) + ($4 << 2 | 0) | 0) >> 2] | 0;
         $5 = $4 << 24 | 0 | (($4 << 8 | 0) & 16711680 | 0) | 0 | (($4 >>> 8 | 0) & 65280 | 0 | ($4 >>> 24 | 0) | 0) | 0;
         HEAP8[$1 >> 0] = $5;
         HEAP8[($1 + 1 | 0) >> 0] = $5 >>> 8 | 0;
         HEAP8[($1 + 2 | 0) >> 0] = $5 >>> 16 | 0;
         HEAP8[($1 + 3 | 0) >> 0] = $5 >>> 24 | 0;
         $2 = $2 + -4 | 0;
         $1 = $1 + 4 | 0;
         break label$7;
        }
        if (bitreader_read_from_client_($0 | 0) | 0) {
         break label$7
        }
        $4 = 0;
        break label$1;
       }
       if ($2 >>> 0 > 3 >>> 0) {
        continue label$6
       }
       break label$6;
      };
      if ($2) {
       break label$5
      }
      $4 = 1;
      break label$1;
     }
     label$9 : while (1) {
      label$10 : {
       if (FLAC__bitreader_read_raw_uint32($0 | 0, $3 + 12 | 0 | 0, 8 | 0) | 0) {
        break label$10
       }
       $4 = 0;
       break label$1;
      }
      HEAP8[$1 >> 0] = HEAP32[($3 + 12 | 0) >> 2] | 0;
      $4 = 1;
      $1 = $1 + 1 | 0;
      $2 = $2 + -1 | 0;
      if ($2) {
       continue label$9
      }
      break label$1;
     };
    }
    label$11 : {
     if (FLAC__bitreader_read_raw_uint32($0 | 0, $3 + 12 | 0 | 0, 8 | 0) | 0) {
      break label$11
     }
     $4 = 0;
     break label$1;
    }
    HEAP8[$1 >> 0] = HEAP32[($3 + 12 | 0) >> 2] | 0;
    $4 = 1;
    $1 = $1 + 1 | 0;
    $2 = $2 + -1 | 0;
    if ($2) {
     continue label$3
    }
    break label$3;
   };
  }
  __stack_pointer = $3 + 16 | 0;
  return $4 | 0;
 }
 
 function FLAC__bitreader_read_unary_unsigned($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0;
  HEAP32[$1 >> 2] = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : while (1) {
      label$5 : {
       label$6 : {
        $2 = HEAP32[($0 + 16 | 0) >> 2] | 0;
        if ($2 >>> 0 < (HEAP32[($0 + 8 | 0) >> 2] | 0) >>> 0) {
         break label$6
        }
        $3 = HEAP32[($0 + 20 | 0) >> 2] | 0;
        break label$5;
       }
       $3 = HEAP32[($0 + 20 | 0) >> 2] | 0;
       $4 = HEAP32[$0 >> 2] | 0;
       label$7 : while (1) {
        label$8 : {
         $2 = (HEAP32[($4 + ($2 << 2 | 0) | 0) >> 2] | 0) << $3 | 0;
         if (!$2) {
          break label$8
         }
         $2 = Math_clz32($2);
         HEAP32[$1 >> 2] = (HEAP32[$1 >> 2] | 0) + $2 | 0;
         $3 = 1;
         $2 = ($2 + (HEAP32[($0 + 20 | 0) >> 2] | 0) | 0) + 1 | 0;
         HEAP32[($0 + 20 | 0) >> 2] = $2;
         if ($2 >>> 0 < 32 >>> 0) {
          break label$1
         }
         HEAP32[($0 + 16 | 0) >> 2] = (HEAP32[($0 + 16 | 0) >> 2] | 0) + 1 | 0;
         $3 = 0;
         break label$2;
        }
        HEAP32[$1 >> 2] = ((HEAP32[$1 >> 2] | 0) - $3 | 0) + 32 | 0;
        $3 = 0;
        HEAP32[($0 + 20 | 0) >> 2] = 0;
        $2 = (HEAP32[($0 + 16 | 0) >> 2] | 0) + 1 | 0;
        HEAP32[($0 + 16 | 0) >> 2] = $2;
        if ($2 >>> 0 < (HEAP32[($0 + 8 | 0) >> 2] | 0) >>> 0) {
         continue label$7
        }
        break label$7;
       };
      }
      label$9 : {
       $4 = (HEAP32[($0 + 12 | 0) >> 2] | 0) << 3 | 0;
       if ($4 >>> 0 <= $3 >>> 0) {
        break label$9
       }
       $2 = ((HEAP32[((HEAP32[$0 >> 2] | 0) + ($2 << 2 | 0) | 0) >> 2] | 0) & (-1 << (32 - $4 | 0) | 0) | 0) << $3 | 0;
       if ($2) {
        break label$3
       }
       HEAP32[$1 >> 2] = ($4 - $3 | 0) + (HEAP32[$1 >> 2] | 0) | 0;
       HEAP32[($0 + 20 | 0) >> 2] = $4;
      }
      if (bitreader_read_from_client_($0 | 0) | 0) {
       continue label$4
      }
      break label$4;
     };
     return 0 | 0;
    }
    $3 = Math_clz32($2);
    HEAP32[$1 >> 2] = (HEAP32[$1 >> 2] | 0) + $3 | 0;
    $3 = ($3 + (HEAP32[($0 + 20 | 0) >> 2] | 0) | 0) + 1 | 0;
   }
   HEAP32[($0 + 20 | 0) >> 2] = $3;
   $3 = 1;
  }
  return $3 | 0;
 }
 
 function FLAC__bitreader_read_rice_signed_block($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $7 = 0, $12 = 0, $13 = 0, $9 = 0, $4 = 0, $15 = 0, $8 = 0, $6 = 0, $10 = 0, $5 = 0, $11 = 0, $14 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  $5 = $1 + ($2 << 2 | 0) | 0;
  label$1 : {
   label$2 : {
    if ($3) {
     break label$2
    }
    $6 = 1;
    if (($2 | 0) < (1 | 0)) {
     break label$1
    }
    label$3 : while (1) {
     label$4 : {
      if (FLAC__bitreader_read_unary_unsigned($0 | 0, $4 + 8 | 0 | 0) | 0) {
       break label$4
      }
      $6 = 0;
      break label$1;
     }
     $6 = 1;
     $2 = HEAP32[($4 + 8 | 0) >> 2] | 0;
     HEAP32[$1 >> 2] = ($2 >>> 1 | 0) ^ (0 - ($2 & 1 | 0) | 0) | 0;
     $1 = $1 + 4 | 0;
     if ($1 >>> 0 < $5 >>> 0) {
      continue label$3
     }
     break label$1;
    };
   }
   $6 = 0;
   label$5 : {
    label$6 : {
     label$7 : {
      $7 = HEAP32[($0 + 16 | 0) >> 2] | 0;
      $8 = HEAP32[($0 + 8 | 0) >> 2] | 0;
      if ($7 >>> 0 < $8 >>> 0) {
       break label$7
      }
      $9 = 0;
      break label$6;
     }
     $10 = HEAP32[$0 >> 2] | 0;
     $11 = HEAP32[($0 + 20 | 0) >> 2] | 0;
     $12 = (HEAP32[($10 + ($7 << 2 | 0) | 0) >> 2] | 0) << $11 | 0;
     $2 = 0;
     break label$5;
    }
    $2 = 1;
   }
   label$8 : while (1) {
    label$9 : {
     label$10 : {
      label$11 : {
       label$12 : {
        label$13 : {
         switch ($2 | 0) {
         case 0:
          $13 = 32 - $11 | 0;
          label$15 : {
           label$16 : {
            if ($1 >>> 0 >= $5 >>> 0) {
             break label$16
            }
            $14 = 32 - $3 | 0;
            label$17 : while (1) {
             $2 = $7;
             $9 = $13;
             label$18 : {
              label$19 : {
               if (!$12) {
                break label$19
               }
               $2 = $7;
               $9 = Math_clz32($12);
               $15 = $9;
               break label$18;
              }
              label$20 : while (1) {
               $2 = $2 + 1 | 0;
               if ($2 >>> 0 >= $8 >>> 0) {
                break label$15
               }
               $12 = HEAP32[($10 + ($2 << 2 | 0) | 0) >> 2] | 0;
               $15 = Math_clz32($12);
               $9 = $15 + $9 | 0;
               if (!$12) {
                continue label$20
               }
               break label$20;
              };
             }
             $12 = ($12 << $15 | 0) << 1 | 0;
             $15 = $12 >>> $14 | 0;
             HEAP32[($4 + 8 | 0) >> 2] = $9;
             label$21 : {
              label$22 : {
               $13 = ($13 + ($9 ^ -1 | 0) | 0) & 31 | 0;
               if ($13 >>> 0 < $3 >>> 0) {
                break label$22
               }
               $12 = $12 << $3 | 0;
               $13 = $13 - $3 | 0;
               $7 = $2;
               break label$21;
              }
              $7 = $2 + 1 | 0;
              if ($7 >>> 0 >= $8 >>> 0) {
               break label$12
              }
              $2 = HEAP32[($10 + ($7 << 2 | 0) | 0) >> 2] | 0;
              $13 = $13 + $14 | 0;
              $12 = $2 << (32 - $13 | 0) | 0;
              $15 = $2 >>> $13 | 0 | $15 | 0;
             }
             HEAP32[($4 + 12 | 0) >> 2] = $15;
             $2 = $15 | ($9 << $3 | 0) | 0;
             HEAP32[$1 >> 2] = ($2 >>> 1 | 0) ^ (0 - ($2 & 1 | 0) | 0) | 0;
             $1 = $1 + 4 | 0;
             if ($1 >>> 0 < $5 >>> 0) {
              continue label$17
             }
             break label$17;
            };
           }
           $2 = $7 >>> 0 < $8 >>> 0;
           HEAP32[($0 + 16 | 0) >> 2] = $7 + (!$13 & $2 | 0) | 0;
           HEAP32[($0 + 20 | 0) >> 2] = 32 - ($13 ? $13 : $2 << 5 | 0) | 0;
           $6 = 1;
           break label$1;
          }
          HEAP32[($0 + 20 | 0) >> 2] = 0;
          $2 = $7 + 1 | 0;
          HEAP32[($0 + 16 | 0) >> 2] = $8 >>> 0 > $2 >>> 0 ? $8 : $2;
          break label$10;
         default:
          break label$13;
         };
        }
        if (!(FLAC__bitreader_read_unary_unsigned($0 | 0, $4 + 8 | 0 | 0) | 0)) {
         break label$1
        }
        $9 = (HEAP32[($4 + 8 | 0) >> 2] | 0) + $9 | 0;
        HEAP32[($4 + 8 | 0) >> 2] = $9;
        $15 = 0;
        $13 = 0;
        break label$11;
       }
       HEAP32[($0 + 16 | 0) >> 2] = $7;
       HEAP32[($0 + 20 | 0) >> 2] = 0;
      }
      if (!(FLAC__bitreader_read_raw_uint32($0 | 0, $4 + 12 | 0 | 0, $3 - $13 | 0 | 0) | 0)) {
       break label$1
      }
      $2 = $9 << $3 | 0;
      $12 = HEAP32[($4 + 12 | 0) >> 2] | 0 | $15 | 0;
      HEAP32[($4 + 12 | 0) >> 2] = $12;
      $9 = 0;
      $2 = $2 | $12 | 0;
      HEAP32[$1 >> 2] = ($2 >>> 1 | 0) ^ (0 - ($2 & 1 | 0) | 0) | 0;
      $1 = $1 + 4 | 0;
      $10 = HEAP32[$0 >> 2] | 0;
      $7 = HEAP32[($0 + 16 | 0) >> 2] | 0;
      $11 = HEAP32[($0 + 20 | 0) >> 2] | 0;
      $12 = (HEAP32[($10 + ($7 << 2 | 0) | 0) >> 2] | 0) << $11 | 0;
      $8 = HEAP32[($0 + 8 | 0) >> 2] | 0;
      if ($7 >>> 0 < $8 >>> 0) {
       break label$9
      }
      if ($1 >>> 0 >= $5 >>> 0) {
       break label$9
      }
     }
     $2 = 1;
     continue label$8;
    }
    $2 = 0;
    continue label$8;
   };
  }
  __stack_pointer = $4 + 16 | 0;
  return $6 | 0;
 }
 
 function FLAC__bitreader_read_utf8_uint32($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $6 = 0, $7 = 0, $8 = 0, $4 = 0, $5 = 0, $9 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  $5 = 0;
  label$1 : {
   if (!(FLAC__bitreader_read_raw_uint32($0 | 0, $4 + 12 | 0 | 0, 8 | 0) | 0)) {
    break label$1
   }
   $6 = HEAP32[($4 + 12 | 0) >> 2] | 0;
   label$2 : {
    if (!$2) {
     break label$2
    }
    $7 = HEAP32[$3 >> 2] | 0;
    HEAP32[$3 >> 2] = $7 + 1 | 0;
    HEAP8[($2 + $7 | 0) >> 0] = $6;
   }
   label$3 : {
    label$4 : {
     if ($6 & 128 | 0) {
      break label$4
     }
     $7 = $6;
     break label$3;
    }
    label$5 : {
     label$6 : {
      if (!($6 & 192 | 0)) {
       break label$6
      }
      if ($6 & 32 | 0) {
       break label$6
      }
      $8 = 1;
      $7 = 31;
      break label$5;
     }
     label$7 : {
      if (!($6 & 224 | 0)) {
       break label$7
      }
      if ($6 & 16 | 0) {
       break label$7
      }
      $8 = 2;
      $7 = 15;
      break label$5;
     }
     label$8 : {
      if (!($6 & 240 | 0)) {
       break label$8
      }
      if ($6 & 8 | 0) {
       break label$8
      }
      $8 = 3;
      $7 = 7;
      break label$5;
     }
     label$9 : {
      if (!($6 & 248 | 0)) {
       break label$9
      }
      $8 = 4;
      $7 = 3;
      if (!($6 & 4 | 0)) {
       break label$5
      }
     }
     $7 = -1;
     if (!($6 & 252 | 0)) {
      break label$3
     }
     if ($6 & 2 | 0) {
      break label$3
     }
     $8 = 5;
     $7 = 1;
    }
    $7 = $6 & $7 | 0;
    label$10 : {
     if ($2) {
      break label$10
     }
     label$11 : while (1) {
      if (!(FLAC__bitreader_read_raw_uint32($0 | 0, $4 + 12 | 0 | 0, 8 | 0) | 0)) {
       break label$1
      }
      label$12 : {
       $6 = HEAP32[($4 + 12 | 0) >> 2] | 0;
       if (($6 & 192 | 0 | 0) == (128 | 0)) {
        break label$12
       }
       $7 = -1;
       break label$3;
      }
      $7 = $6 & 63 | 0 | ($7 << 6 | 0) | 0;
      $8 = $8 + -1 | 0;
      if ($8) {
       continue label$11
      }
      break label$3;
     };
    }
    label$13 : while (1) {
     if (!(FLAC__bitreader_read_raw_uint32($0 | 0, $4 + 12 | 0 | 0, 8 | 0) | 0)) {
      break label$1
     }
     $6 = HEAP32[($4 + 12 | 0) >> 2] | 0;
     $9 = HEAP32[$3 >> 2] | 0;
     HEAP32[$3 >> 2] = $9 + 1 | 0;
     HEAP8[($2 + $9 | 0) >> 0] = $6;
     label$14 : {
      if (($6 & 192 | 0 | 0) == (128 | 0)) {
       break label$14
      }
      $7 = -1;
      break label$3;
     }
     $7 = $6 & 63 | 0 | ($7 << 6 | 0) | 0;
     $8 = $8 + -1 | 0;
     if ($8) {
      continue label$13
     }
     break label$13;
    };
   }
   HEAP32[$1 >> 2] = $7;
   $5 = 1;
  }
  __stack_pointer = $4 + 16 | 0;
  return $5 | 0;
 }
 
 function FLAC__bitreader_read_utf8_uint64($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $6 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, $7 = 0, i64toi32_i32$4 = 0, $8 = 0, $8$hi = 0, i64toi32_i32$3 = 0, $4 = 0, $5 = 0, $20 = 0, $9 = 0, $21 = 0, $88$hi = 0, $91$hi = 0, $116$hi = 0, $119$hi = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  $5 = 0;
  label$1 : {
   if (!(FLAC__bitreader_read_raw_uint32($0 | 0, $4 + 12 | 0 | 0, 8 | 0) | 0)) {
    break label$1
   }
   $6 = HEAP32[($4 + 12 | 0) >> 2] | 0;
   label$2 : {
    if (!$2) {
     break label$2
    }
    $7 = HEAP32[$3 >> 2] | 0;
    HEAP32[$3 >> 2] = $7 + 1 | 0;
    HEAP8[($2 + $7 | 0) >> 0] = $6;
   }
   label$3 : {
    label$4 : {
     if (!($6 & 128 | 0)) {
      break label$4
     }
     label$5 : {
      label$6 : {
       if (!($6 & 192 | 0)) {
        break label$6
       }
       if ($6 & 32 | 0) {
        break label$6
       }
       $6 = $6 & 31 | 0;
       $7 = 1;
       break label$5;
      }
      label$7 : {
       if (!($6 & 224 | 0)) {
        break label$7
       }
       if ($6 & 16 | 0) {
        break label$7
       }
       $6 = $6 & 15 | 0;
       $7 = 2;
       break label$5;
      }
      label$8 : {
       if (!($6 & 240 | 0)) {
        break label$8
       }
       if ($6 & 8 | 0) {
        break label$8
       }
       $6 = $6 & 7 | 0;
       $7 = 3;
       break label$5;
      }
      label$9 : {
       if (!($6 & 248 | 0)) {
        break label$9
       }
       if ($6 & 4 | 0) {
        break label$9
       }
       $6 = $6 & 3 | 0;
       $7 = 4;
       break label$5;
      }
      label$10 : {
       if (!($6 & 252 | 0)) {
        break label$10
       }
       if ($6 & 2 | 0) {
        break label$10
       }
       $6 = $6 & 1 | 0;
       $7 = 5;
       break label$5;
      }
      i64toi32_i32$0 = -1;
      $8 = -1;
      $8$hi = i64toi32_i32$0;
      if (!($6 & 254 | 0)) {
       break label$3
      }
      if ($6 & 1 | 0) {
       break label$3
      }
      $7 = 6;
      $6 = 0;
     }
     i64toi32_i32$0 = 0;
     $8 = $6;
     $8$hi = i64toi32_i32$0;
     label$11 : {
      if ($2) {
       break label$11
      }
      label$12 : while (1) {
       if (!(FLAC__bitreader_read_raw_uint32($0 | 0, $4 + 12 | 0 | 0, 8 | 0) | 0)) {
        break label$1
       }
       label$13 : {
        $6 = HEAP32[($4 + 12 | 0) >> 2] | 0;
        if (($6 & 192 | 0 | 0) == (128 | 0)) {
         break label$13
        }
        i64toi32_i32$0 = -1;
        $8 = -1;
        $8$hi = i64toi32_i32$0;
        break label$3;
       }
       i64toi32_i32$0 = $8$hi;
       i64toi32_i32$2 = $8;
       i64toi32_i32$1 = 0;
       i64toi32_i32$3 = 6;
       i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
        i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
        $20 = 0;
       } else {
        i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
        $20 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
       }
       $88$hi = i64toi32_i32$1;
       i64toi32_i32$1 = 0;
       $91$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $88$hi;
       i64toi32_i32$0 = $20;
       i64toi32_i32$2 = $91$hi;
       i64toi32_i32$3 = $6 & 63 | 0;
       i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
       $8 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
       $8$hi = i64toi32_i32$2;
       $7 = $7 + -1 | 0;
       if ($7) {
        continue label$12
       }
       break label$3;
      };
     }
     label$14 : while (1) {
      if (!(FLAC__bitreader_read_raw_uint32($0 | 0, $4 + 12 | 0 | 0, 8 | 0) | 0)) {
       break label$1
      }
      $6 = HEAP32[($4 + 12 | 0) >> 2] | 0;
      $9 = HEAP32[$3 >> 2] | 0;
      HEAP32[$3 >> 2] = $9 + 1 | 0;
      HEAP8[($2 + $9 | 0) >> 0] = $6;
      label$15 : {
       if (($6 & 192 | 0 | 0) == (128 | 0)) {
        break label$15
       }
       i64toi32_i32$2 = -1;
       $8 = -1;
       $8$hi = i64toi32_i32$2;
       break label$3;
      }
      i64toi32_i32$2 = $8$hi;
      i64toi32_i32$1 = $8;
      i64toi32_i32$0 = 0;
      i64toi32_i32$3 = 6;
      i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
       $21 = 0;
      } else {
       i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
       $21 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
      }
      $116$hi = i64toi32_i32$0;
      i64toi32_i32$0 = 0;
      $119$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $116$hi;
      i64toi32_i32$2 = $21;
      i64toi32_i32$1 = $119$hi;
      i64toi32_i32$3 = $6 & 63 | 0;
      i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
      $8 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
      $8$hi = i64toi32_i32$1;
      $7 = $7 + -1 | 0;
      if ($7) {
       continue label$14
      }
      break label$3;
     };
    }
    i64toi32_i32$1 = 0;
    $8 = $6;
    $8$hi = i64toi32_i32$1;
   }
   i64toi32_i32$1 = $8$hi;
   i64toi32_i32$2 = $1;
   HEAP32[i64toi32_i32$2 >> 2] = $8;
   HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$1;
   $5 = 1;
  }
  __stack_pointer = $4 + 16 | 0;
  return $5 | 0;
 }
 
 function qsort($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $8 = 0, $7 = 0, $5 = 0, $6 = 0, $34 = 0, $126 = 0;
  $4 = __stack_pointer - 208 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 8 | 0) >> 2] = 1;
  HEAP32[($4 + 12 | 0) >> 2] = 0;
  label$1 : {
   $5 = Math_imul($2, $1);
   if (!$5) {
    break label$1
   }
   HEAP32[($4 + 16 | 0) >> 2] = $2;
   HEAP32[($4 + 20 | 0) >> 2] = $2;
   $6 = $5 - $2 | 0;
   $1 = $2;
   $7 = $1;
   $8 = 2;
   label$2 : while (1) {
    $34 = $7 + $2 | 0;
    $7 = $1;
    $1 = $34 + $1 | 0;
    HEAP32[(($4 + 16 | 0) + ($8 << 2 | 0) | 0) >> 2] = $1;
    $8 = $8 + 1 | 0;
    if ($1 >>> 0 < $5 >>> 0) {
     continue label$2
    }
    break label$2;
   };
   label$3 : {
    label$4 : {
     if (($6 | 0) >= (1 | 0)) {
      break label$4
     }
     $8 = 1;
     $1 = 1;
     break label$3;
    }
    $7 = $0 + $6 | 0;
    $8 = 1;
    $1 = 1;
    label$5 : while (1) {
     label$6 : {
      label$7 : {
       if (($8 & 3 | 0 | 0) != (3 | 0)) {
        break label$7
       }
       sift($0 | 0, $2 | 0, $3 | 0, $1 | 0, $4 + 16 | 0 | 0);
       shr($4 + 8 | 0 | 0, 2 | 0);
       $1 = $1 + 2 | 0;
       break label$6;
      }
      label$8 : {
       label$9 : {
        $8 = $1 + -1 | 0;
        if ((HEAP32[(($4 + 16 | 0) + ($8 << 2 | 0) | 0) >> 2] | 0) >>> 0 < ($7 - $0 | 0) >>> 0) {
         break label$9
        }
        trinkle($0 | 0, $2 | 0, $3 | 0, $4 + 8 | 0 | 0, $1 | 0, 0 | 0, $4 + 16 | 0 | 0);
        break label$8;
       }
       sift($0 | 0, $2 | 0, $3 | 0, $1 | 0, $4 + 16 | 0 | 0);
      }
      label$10 : {
       if (($1 | 0) != (1 | 0)) {
        break label$10
       }
       shl($4 + 8 | 0 | 0, 1 | 0);
       $1 = 0;
       break label$6;
      }
      shl($4 + 8 | 0 | 0, $8 | 0);
      $1 = 1;
     }
     $8 = HEAP32[($4 + 8 | 0) >> 2] | 0 | 1 | 0;
     HEAP32[($4 + 8 | 0) >> 2] = $8;
     $0 = $0 + $2 | 0;
     if ($0 >>> 0 < $7 >>> 0) {
      continue label$5
     }
     break label$5;
    };
   }
   $7 = 0 - $2 | 0;
   trinkle($0 | 0, $2 | 0, $3 | 0, $4 + 8 | 0 | 0, $1 | 0, 0 | 0, $4 + 16 | 0 | 0);
   label$11 : while (1) {
    label$12 : {
     label$13 : {
      label$14 : {
       label$15 : {
        if (($1 | 0) != (1 | 0)) {
         break label$15
        }
        if (($8 | 0) != (1 | 0)) {
         break label$15
        }
        if (HEAP32[($4 + 12 | 0) >> 2] | 0) {
         break label$14
        }
        break label$1;
       }
       if (($1 | 0) > (1 | 0)) {
        break label$13
       }
      }
      $126 = $4 + 8 | 0;
      $8 = pntz($4 + 8 | 0 | 0) | 0;
      shr($126 | 0, $8 | 0);
      $1 = $8 + $1 | 0;
      $8 = HEAP32[($4 + 8 | 0) >> 2] | 0;
      break label$12;
     }
     shl($4 + 8 | 0 | 0, 2 | 0);
     HEAP32[($4 + 8 | 0) >> 2] = (HEAP32[($4 + 8 | 0) >> 2] | 0) ^ 7 | 0;
     shr($4 + 8 | 0 | 0, 1 | 0);
     $8 = $1 + -1 | 0;
     $1 = $1 + -2 | 0;
     trinkle($0 - ((HEAP32[(($4 + 16 | 0) + ($1 << 2 | 0) | 0) >> 2] | 0) + $2 | 0) | 0 | 0, $2 | 0, $3 | 0, $4 + 8 | 0 | 0, $8 | 0, 1 | 0, $4 + 16 | 0 | 0);
     shl($4 + 8 | 0 | 0, 1 | 0);
     $8 = HEAP32[($4 + 8 | 0) >> 2] | 0 | 1 | 0;
     HEAP32[($4 + 8 | 0) >> 2] = $8;
     trinkle($0 + $7 | 0 | 0, $2 | 0, $3 | 0, $4 + 8 | 0 | 0, $1 | 0, 1 | 0, $4 + 16 | 0 | 0);
    }
    $0 = $0 + $7 | 0;
    continue label$11;
   };
  }
  __stack_pointer = $4 + 208 | 0;
 }
 
 function sift($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $8 = 0, $5 = 0, $6 = 0, $10 = 0, $9 = 0, $11 = 0, $7 = 0;
  $5 = __stack_pointer - 240 | 0;
  __stack_pointer = $5;
  HEAP32[$5 >> 2] = $0;
  $6 = 1;
  label$1 : {
   if (($3 | 0) < (2 | 0)) {
    break label$1
   }
   $7 = 0 - $1 | 0;
   $8 = $0;
   label$2 : while (1) {
    label$3 : {
     $8 = $8 + $7 | 0;
     $9 = $3 + -2 | 0;
     $10 = $8 - (HEAP32[($4 + ($9 << 2 | 0) | 0) >> 2] | 0) | 0;
     if ((FUNCTION_TABLE[$2 | 0]($0, $10) | 0 | 0) < (0 | 0)) {
      break label$3
     }
     if ((FUNCTION_TABLE[$2 | 0]($0, $8) | 0 | 0) > (-1 | 0)) {
      break label$1
     }
    }
    $11 = (FUNCTION_TABLE[$2 | 0]($10, $8) | 0 | 0) > (-1 | 0);
    $8 = $11 ? $10 : $8;
    HEAP32[($5 + ($6 << 2 | 0) | 0) >> 2] = $8;
    $6 = $6 + 1 | 0;
    $3 = $11 ? $3 + -1 | 0 : $9;
    if (($3 | 0) > (1 | 0)) {
     continue label$2
    }
    break label$2;
   };
  }
  cycle($1 | 0, $5 | 0, $6 | 0);
  __stack_pointer = $5 + 240 | 0;
 }
 
 function shr($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $3 = 0, $2 = 0;
  label$1 : {
   label$2 : {
    if ($1 >>> 0 > 31 >>> 0) {
     break label$2
    }
    $2 = HEAP32[($0 + 4 | 0) >> 2] | 0;
    $3 = $0;
    break label$1;
   }
   $3 = $0 + 4 | 0;
   $1 = $1 + -32 | 0;
   $2 = 0;
  }
  $3 = HEAP32[$3 >> 2] | 0;
  HEAP32[($0 + 4 | 0) >> 2] = $2 >>> $1 | 0;
  HEAP32[$0 >> 2] = $2 << (32 - $1 | 0) | 0 | ($3 >>> $1 | 0) | 0;
 }
 
 function trinkle($0, $1, $2, $3, $4, $5, $6) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  var $7 = 0, $10 = 0, $8 = 0, $11 = 0, $9 = 0, $76 = 0;
  $7 = __stack_pointer - 240 | 0;
  __stack_pointer = $7;
  $8 = HEAP32[$3 >> 2] | 0;
  HEAP32[($7 + 232 | 0) >> 2] = $8;
  $3 = HEAP32[($3 + 4 | 0) >> 2] | 0;
  HEAP32[$7 >> 2] = $0;
  HEAP32[($7 + 236 | 0) >> 2] = $3;
  $9 = 0 - $1 | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       if (($8 | 0) == (1 | 0)) {
        break label$5
       }
       $10 = $0;
       $8 = 1;
       break label$4;
      }
      $10 = $0;
      $8 = 1;
      if ($3) {
       break label$4
      }
      $8 = 1;
      $3 = $0;
      break label$3;
     }
     label$6 : while (1) {
      label$7 : {
       $3 = $10 - (HEAP32[($6 + ($4 << 2 | 0) | 0) >> 2] | 0) | 0;
       if ((FUNCTION_TABLE[$2 | 0]($3, $0) | 0 | 0) >= (1 | 0)) {
        break label$7
       }
       $3 = $10;
       break label$3;
      }
      label$8 : {
       label$9 : {
        if ($5) {
         break label$9
        }
        if (($4 | 0) < (2 | 0)) {
         break label$9
        }
        $5 = HEAP32[((($4 << 2 | 0) + $6 | 0) + -8 | 0) >> 2] | 0;
        $11 = $10 + $9 | 0;
        if ((FUNCTION_TABLE[$2 | 0]($11, $3) | 0 | 0) > (-1 | 0)) {
         break label$8
        }
        if ((FUNCTION_TABLE[$2 | 0]($11 - $5 | 0, $3) | 0 | 0) > (-1 | 0)) {
         break label$8
        }
       }
       HEAP32[($7 + ($8 << 2 | 0) | 0) >> 2] = $3;
       $76 = $7 + 232 | 0;
       $10 = pntz($7 + 232 | 0 | 0) | 0;
       shr($76 | 0, $10 | 0);
       $8 = $8 + 1 | 0;
       $4 = $10 + $4 | 0;
       $5 = 0;
       $10 = $3;
       if ((HEAP32[($7 + 232 | 0) >> 2] | 0 | 0) != (1 | 0)) {
        continue label$6
       }
       $10 = $3;
       if (HEAP32[($7 + 236 | 0) >> 2] | 0) {
        continue label$6
       }
       break label$2;
      }
      break label$6;
     };
     $3 = $10;
     break label$2;
    }
    if ($5) {
     break label$1
    }
   }
   cycle($1 | 0, $7 | 0, $8 | 0);
   sift($3 | 0, $1 | 0, $2 | 0, $4 | 0, $6 | 0);
  }
  __stack_pointer = $7 + 240 | 0;
 }
 
 function shl($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0;
  label$1 : {
   label$2 : {
    if ($1 >>> 0 > 31 >>> 0) {
     break label$2
    }
    $2 = $0 + 4 | 0;
    $3 = HEAP32[$0 >> 2] | 0;
    break label$1;
   }
   $1 = $1 + -32 | 0;
   $3 = 0;
   $2 = $0;
  }
  $2 = HEAP32[$2 >> 2] | 0;
  HEAP32[$0 >> 2] = $3 << $1 | 0;
  HEAP32[($0 + 4 | 0) >> 2] = $3 >>> (32 - $1 | 0) | 0 | ($2 << $1 | 0) | 0;
 }
 
 function pntz($0) {
  $0 = $0 | 0;
  var $1 = 0;
  label$1 : {
   $1 = __wasm_ctz_i32((HEAP32[$0 >> 2] | 0) + -1 | 0 | 0) | 0;
   if ($1) {
    break label$1
   }
   $0 = __wasm_ctz_i32(HEAP32[($0 + 4 | 0) >> 2] | 0 | 0) | 0;
   $1 = $0 ? $0 + 32 | 0 : 0;
  }
  return $1 | 0;
 }
 
 function cycle($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $5 = 0, $3 = 0, $6 = 0, $7 = 0, $4 = 0;
  $3 = __stack_pointer - 256 | 0;
  __stack_pointer = $3;
  label$1 : {
   if (($2 | 0) < (2 | 0)) {
    break label$1
   }
   $4 = $1 + ($2 << 2 | 0) | 0;
   HEAP32[$4 >> 2] = $3;
   if (!$0) {
    break label$1
   }
   $5 = $3;
   label$2 : while (1) {
    $6 = $0 >>> 0 < 256 >>> 0 ? $0 : 256;
    __memcpy($5 | 0, HEAP32[$1 >> 2] | 0 | 0, $6 | 0) | 0;
    $5 = 0;
    label$3 : while (1) {
     $7 = $1 + ($5 << 2 | 0) | 0;
     $5 = $5 + 1 | 0;
     __memcpy(HEAP32[$7 >> 2] | 0 | 0, HEAP32[($1 + ($5 << 2 | 0) | 0) >> 2] | 0 | 0, $6 | 0) | 0;
     HEAP32[$7 >> 2] = (HEAP32[$7 >> 2] | 0) + $6 | 0;
     if (($5 | 0) != ($2 | 0)) {
      continue label$3
     }
     break label$3;
    };
    $0 = $0 - $6 | 0;
    if (!$0) {
     break label$1
    }
    $5 = HEAP32[$4 >> 2] | 0;
    continue label$2;
   };
  }
  __stack_pointer = $3 + 256 | 0;
 }
 
 function FLAC__format_sample_rate_is_valid($0) {
  $0 = $0 | 0;
  return ($0 + -1 | 0) >>> 0 < 655350 >>> 0 | 0;
 }
 
 function FLAC__format_blocksize_is_subset($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  return $0 >>> 0 < 16385 >>> 0 & ($1 >>> 0 > 48e3 >>> 0 | $0 >>> 0 < 4609 >>> 0 | 0) | 0 | 0;
 }
 
 function FLAC__format_sample_rate_is_subset($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = 0;
  label$1 : {
   if (($0 + -1 | 0) >>> 0 > 655349 >>> 0) {
    break label$1
   }
   $1 = !(($0 >>> 0) % (10 >>> 0) | 0) | ($0 >>> 0 < 65536 >>> 0 | !(($0 >>> 0) % (1e3 >>> 0) | 0) | 0) | 0;
  }
  return $1 | 0;
 }
 
 function FLAC__format_seektable_is_legal($0) {
  $0 = $0 | 0;
  var i64toi32_i32$0 = 0, $3$hi = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, $3 = 0, $1 = 0, $4 = 0, $5$hi = 0, $2 = 0, $5 = 0;
  label$1 : {
   $1 = HEAP32[$0 >> 2] | 0;
   if ($1) {
    break label$1
   }
   return 1 | 0;
  }
  $2 = HEAP32[($0 + 4 | 0) >> 2] | 0;
  $0 = 0;
  i64toi32_i32$0 = 0;
  $3 = 0;
  $3$hi = i64toi32_i32$0;
  $4 = 1;
  label$2 : while (1) {
   i64toi32_i32$0 = $3$hi;
   $5 = $3;
   $5$hi = i64toi32_i32$0;
   i64toi32_i32$2 = $2 + Math_imul($0, 24) | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $3 = i64toi32_i32$0;
   $3$hi = i64toi32_i32$1;
   label$3 : {
    if ($4 & 1 | 0) {
     break label$3
    }
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$2 = $3;
    i64toi32_i32$0 = -1;
    if ((i64toi32_i32$2 | 0) == (-1 | 0) & ($3$hi | 0) == (i64toi32_i32$0 | 0) | 0) {
     break label$3
    }
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$2 = $5$hi;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$1 = $5$hi;
    i64toi32_i32$0 = $5;
    if ($3$hi >>> 0 > i64toi32_i32$1 >>> 0 | (($3$hi | 0) == (i64toi32_i32$1 | 0) & $3 >>> 0 > i64toi32_i32$0 >>> 0 | 0) | 0) {
     break label$3
    }
    return 0 | 0;
   }
   $4 = 0;
   $0 = $0 + 1 | 0;
   if (($0 | 0) != ($1 | 0)) {
    continue label$2
   }
   break label$2;
  };
  return 1 | 0;
 }
 
 function FLAC__format_seektable_sort($0) {
  $0 = $0 | 0;
  var i64toi32_i32$3 = 0, i64toi32_i32$1 = 0, $2 = 0, $3 = 0, i64toi32_i32$0 = 0, $4 = 0, $1 = 0, $5 = 0, i64toi32_i32$2 = 0, $6$hi = 0, $6 = 0, $41 = 0, $41$hi = 0, $49 = 0, $54 = 0, $59 = 0, $7 = 0;
  $1 = 0;
  label$1 : {
   $2 = HEAP32[$0 >> 2] | 0;
   if (!$2) {
    break label$1
   }
   $3 = GOT_data_internal___table_base;
   qsort(HEAP32[($0 + 4 | 0) >> 2] | 0 | 0, $2 | 0, 24 | 0, $3 + 0 | 0 | 0);
   if (!(HEAP32[$0 >> 2] | 0)) {
    break label$1
   }
   $1 = 1;
   label$2 : {
    $4 = HEAP32[$0 >> 2] | 0;
    if ($4 >>> 0 <= 1 >>> 0) {
     break label$2
    }
    $3 = 1;
    label$3 : while (1) {
     label$4 : {
      label$5 : {
       $5 = HEAP32[($0 + 4 | 0) >> 2] | 0;
       $2 = $5 + Math_imul($3, 24) | 0;
       i64toi32_i32$2 = $2;
       i64toi32_i32$0 = HEAP32[$2 >> 2] | 0;
       i64toi32_i32$1 = HEAP32[($2 + 4 | 0) >> 2] | 0;
       $6 = i64toi32_i32$0;
       $6$hi = i64toi32_i32$1;
       i64toi32_i32$2 = i64toi32_i32$0;
       i64toi32_i32$0 = -1;
       i64toi32_i32$3 = -1;
       if ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) | 0) {
        break label$5
       }
       i64toi32_i32$2 = $6$hi;
       i64toi32_i32$3 = (Math_imul($1, 24) + $5 | 0) + -24 | 0;
       i64toi32_i32$2 = HEAP32[i64toi32_i32$3 >> 2] | 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
       $41 = i64toi32_i32$2;
       $41$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $6$hi;
       i64toi32_i32$3 = $6;
       i64toi32_i32$2 = $41$hi;
       i64toi32_i32$0 = $41;
       if ((i64toi32_i32$3 | 0) == (i64toi32_i32$0 | 0) & (i64toi32_i32$1 | 0) == (i64toi32_i32$2 | 0) | 0) {
        break label$4
       }
      }
      $4 = $5 + Math_imul($1, 24) | 0;
      i64toi32_i32$0 = $2;
      i64toi32_i32$3 = HEAP32[$2 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[($2 + 4 | 0) >> 2] | 0;
      $49 = i64toi32_i32$3;
      i64toi32_i32$3 = $4;
      HEAP32[i64toi32_i32$3 >> 2] = $49;
      HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] = i64toi32_i32$1;
      i64toi32_i32$0 = $2 + 16 | 0;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$0 >> 2] | 0;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
      $54 = i64toi32_i32$1;
      i64toi32_i32$1 = $4 + 16 | 0;
      HEAP32[i64toi32_i32$1 >> 2] = $54;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$3;
      i64toi32_i32$0 = $2 + 8 | 0;
      i64toi32_i32$3 = HEAP32[i64toi32_i32$0 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
      $59 = i64toi32_i32$3;
      i64toi32_i32$3 = $4 + 8 | 0;
      HEAP32[i64toi32_i32$3 >> 2] = $59;
      HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] = i64toi32_i32$1;
      $1 = $1 + 1 | 0;
      $4 = HEAP32[$0 >> 2] | 0;
     }
     $3 = $3 + 1 | 0;
     if ($3 >>> 0 < $4 >>> 0) {
      continue label$3
     }
     break label$3;
    };
   }
   if ($4 >>> 0 <= $1 >>> 0) {
    break label$1
   }
   $7 = $4 + ($1 ^ -1 | 0) | 0;
   $0 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   $3 = $1;
   label$6 : {
    $5 = ($4 - $3 | 0) & 3 | 0;
    if (!$5) {
     break label$6
    }
    $3 = $1;
    label$7 : while (1) {
     $2 = $0 + Math_imul($3, 24) | 0;
     HEAP32[($2 + 16 | 0) >> 2] = 0;
     i64toi32_i32$3 = $2;
     i64toi32_i32$1 = 0;
     HEAP32[(i64toi32_i32$3 + 8 | 0) >> 2] = 0;
     HEAP32[(i64toi32_i32$3 + 12 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$1 = -1;
     HEAP32[i64toi32_i32$3 >> 2] = -1;
     HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] = i64toi32_i32$1;
     $3 = $3 + 1 | 0;
     $5 = $5 + -1 | 0;
     if ($5) {
      continue label$7
     }
     break label$7;
    };
   }
   if ($7 >>> 0 < 3 >>> 0) {
    break label$1
   }
   label$8 : while (1) {
    $2 = $0 + Math_imul($3, 24) | 0;
    HEAP32[($2 + 16 | 0) >> 2] = 0;
    i64toi32_i32$3 = $2;
    i64toi32_i32$1 = 0;
    HEAP32[(i64toi32_i32$3 + 8 | 0) >> 2] = 0;
    HEAP32[(i64toi32_i32$3 + 12 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$1 = -1;
    HEAP32[i64toi32_i32$3 >> 2] = -1;
    HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$3 = i64toi32_i32$3 + 24 | 0;
    i64toi32_i32$1 = -1;
    HEAP32[i64toi32_i32$3 >> 2] = -1;
    HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] = i64toi32_i32$1;
    HEAP32[($2 + 40 | 0) >> 2] = 0;
    i64toi32_i32$3 = $2 + 32 | 0;
    i64toi32_i32$1 = 0;
    HEAP32[i64toi32_i32$3 >> 2] = 0;
    HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] = i64toi32_i32$1;
    HEAP32[($2 + 64 | 0) >> 2] = 0;
    i64toi32_i32$3 = $2 + 56 | 0;
    i64toi32_i32$1 = 0;
    HEAP32[i64toi32_i32$3 >> 2] = 0;
    HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$3 = $2 + 48 | 0;
    i64toi32_i32$1 = -1;
    HEAP32[i64toi32_i32$3 >> 2] = -1;
    HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] = i64toi32_i32$1;
    HEAP32[($2 + 88 | 0) >> 2] = 0;
    i64toi32_i32$3 = $2 + 80 | 0;
    i64toi32_i32$1 = 0;
    HEAP32[i64toi32_i32$3 >> 2] = 0;
    HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$3 = $2 + 72 | 0;
    i64toi32_i32$1 = -1;
    HEAP32[i64toi32_i32$3 >> 2] = -1;
    HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] = i64toi32_i32$1;
    $3 = $3 + 4 | 0;
    if (($3 | 0) != ($4 | 0)) {
     continue label$8
    }
    break label$8;
   };
  }
  return $1 | 0;
 }
 
 function seekpoint_compare_($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $2 = 0, $3 = 0, $2$hi = 0, $3$hi = 0, $11 = 0;
  i64toi32_i32$2 = $0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $2 = i64toi32_i32$0;
  $2$hi = i64toi32_i32$1;
  i64toi32_i32$2 = $1;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $3 = i64toi32_i32$1;
  $3$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $2$hi;
  i64toi32_i32$2 = $2;
  i64toi32_i32$1 = $3$hi;
  $11 = i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 < $3 >>> 0 | 0) | 0 ? -1 : 1;
  i64toi32_i32$2 = i64toi32_i32$0;
  i64toi32_i32$2 = i64toi32_i32$1;
  i64toi32_i32$2 = i64toi32_i32$0;
  i64toi32_i32$0 = i64toi32_i32$1;
  i64toi32_i32$1 = $3;
  return (($2 | 0) == (i64toi32_i32$1 | 0) & (i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) | 0 ? 0 : $11) | 0;
 }
 
 function utf8len_($0) {
  $0 = $0 | 0;
  var $2 = 0, $1 = 0, $3 = 0, $4 = 0;
  $1 = 1;
  label$1 : {
   $2 = HEAPU8[$0 >> 0] | 0;
   if (!($2 & 128 | 0)) {
    break label$1
   }
   label$2 : {
    if (($2 & 224 | 0 | 0) != (192 | 0)) {
     break label$2
    }
    if (((HEAPU8[($0 + 1 | 0) >> 0] | 0) & 192 | 0 | 0) != (128 | 0)) {
     break label$2
    }
    return (($2 & 254 | 0 | 0) != (192 | 0)) << 1 | 0 | 0;
   }
   label$3 : {
    if (($2 & 240 | 0 | 0) != (224 | 0)) {
     break label$3
    }
    $3 = HEAPU8[($0 + 1 | 0) >> 0] | 0;
    if (($3 & 192 | 0 | 0) != (128 | 0)) {
     break label$3
    }
    $4 = HEAPU8[($0 + 2 | 0) >> 0] | 0;
    if (($4 & 192 | 0 | 0) != (128 | 0)) {
     break label$3
    }
    $1 = 0;
    label$4 : {
     if (($2 | 0) != (224 | 0)) {
      break label$4
     }
     if (($3 & 224 | 0 | 0) == (128 | 0)) {
      break label$1
     }
    }
    label$5 : {
     label$6 : {
      switch ($2 + -237 | 0 | 0) {
      case 0:
       if (($3 & 224 | 0 | 0) != (160 | 0)) {
        break label$5
       }
       break label$1;
      case 2:
       break label$6;
      default:
       break label$5;
      };
     }
     if (($3 | 0) != (191 | 0)) {
      break label$5
     }
     if (($4 & 254 | 0 | 0) == (190 | 0)) {
      break label$1
     }
    }
    return 3 | 0;
   }
   label$8 : {
    if (($2 & 248 | 0 | 0) != (240 | 0)) {
     break label$8
    }
    $1 = HEAPU8[($0 + 1 | 0) >> 0] | 0;
    if (($1 & 192 | 0 | 0) != (128 | 0)) {
     break label$8
    }
    if (((HEAPU8[($0 + 2 | 0) >> 0] | 0) & 192 | 0 | 0) != (128 | 0)) {
     break label$8
    }
    if (((HEAPU8[($0 + 3 | 0) >> 0] | 0) & 192 | 0 | 0) != (128 | 0)) {
     break label$8
    }
    return (($2 | 0) == (240 | 0) ? (($1 & 240 | 0 | 0) != (128 | 0)) << 2 | 0 : 4) | 0;
   }
   label$9 : {
    if (($2 & 252 | 0 | 0) != (248 | 0)) {
     break label$9
    }
    $1 = HEAPU8[($0 + 1 | 0) >> 0] | 0;
    if (($1 & 192 | 0 | 0) != (128 | 0)) {
     break label$9
    }
    if (((HEAPU8[($0 + 2 | 0) >> 0] | 0) & 192 | 0 | 0) != (128 | 0)) {
     break label$9
    }
    if (((HEAPU8[($0 + 3 | 0) >> 0] | 0) & 192 | 0 | 0) != (128 | 0)) {
     break label$9
    }
    if (((HEAPU8[($0 + 4 | 0) >> 0] | 0) & 192 | 0 | 0) != (128 | 0)) {
     break label$9
    }
    return (($2 | 0) == (248 | 0) ? (($1 & 248 | 0 | 0) == (128 | 0) ? 0 : 5) : 5) | 0;
   }
   $1 = 0;
   if (($2 & 254 | 0 | 0) != (252 | 0)) {
    break label$1
   }
   $3 = HEAPU8[($0 + 1 | 0) >> 0] | 0;
   if (($3 & 192 | 0 | 0) != (128 | 0)) {
    break label$1
   }
   if (((HEAPU8[($0 + 2 | 0) >> 0] | 0) & 192 | 0 | 0) != (128 | 0)) {
    break label$1
   }
   if (((HEAPU8[($0 + 3 | 0) >> 0] | 0) & 192 | 0 | 0) != (128 | 0)) {
    break label$1
   }
   if (((HEAPU8[($0 + 4 | 0) >> 0] | 0) & 192 | 0 | 0) != (128 | 0)) {
    break label$1
   }
   if (((HEAPU8[($0 + 5 | 0) >> 0] | 0) & 192 | 0 | 0) != (128 | 0)) {
    break label$1
   }
   $1 = ($2 | 0) == (252 | 0) ? (($3 & 252 | 0 | 0) == (128 | 0) ? 0 : 6) : 6;
  }
  return $1 | 0;
 }
 
 function FLAC__format_cuesheet_is_legal($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $6 = 0, $4 = 0, $8 = 0, i64toi32_i32$0 = 0, $5 = 0, $7 = 0, $9 = 0, $3 = 0, $3$hi = 0, $14 = 0, $15 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        label$7 : {
         label$8 : {
          label$9 : {
           label$10 : {
            if (!$1) {
             break label$10
            }
            label$11 : {
             i64toi32_i32$2 = $0;
             i64toi32_i32$0 = HEAP32[($0 + 136 | 0) >> 2] | 0;
             i64toi32_i32$1 = HEAP32[($0 + 140 | 0) >> 2] | 0;
             $3 = i64toi32_i32$0;
             $3$hi = i64toi32_i32$1;
             i64toi32_i32$2 = i64toi32_i32$0;
             i64toi32_i32$0 = 0;
             if (i64toi32_i32$1 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$2 >>> 0 > 88199 >>> 0 | 0) | 0) {
              break label$11
             }
             $0 = GOT_data_internal___memory_base;
             if (!$2) {
              break label$1
             }
             $0 = $0 + 5739 | 0;
             break label$2;
            }
            label$12 : {
             i64toi32_i32$2 = $3$hi;
             i64toi32_i32$1 = 0;
             i64toi32_i32$1 = __wasm_i64_urem($3 | 0, i64toi32_i32$2 | 0, 588 | 0, i64toi32_i32$1 | 0) | 0;
             i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
             if (!(i64toi32_i32$1 | i64toi32_i32$2 | 0)) {
              break label$12
             }
             $0 = GOT_data_internal___memory_base;
             if (!$2) {
              break label$1
             }
             $0 = $0 + 5668 | 0;
             break label$2;
            }
            $4 = HEAP32[($0 + 148 | 0) >> 2] | 0;
            if (!$4) {
             break label$3
            }
            $5 = $4 + -1 | 0;
            if ((HEAPU8[(((HEAP32[($0 + 152 | 0) >> 2] | 0) + ($5 << 5 | 0) | 0) + 8 | 0) >> 0] | 0 | 0) == (170 | 0)) {
             break label$9
            }
            $0 = GOT_data_internal___memory_base;
            if (!$2) {
             break label$1
            }
            $0 = $0 + 6330 | 0;
            break label$2;
           }
           $6 = HEAP32[($0 + 148 | 0) >> 2] | 0;
           if (!$6) {
            break label$3
           }
           $7 = $6 + -1 | 0;
           $5 = HEAP32[($0 + 152 | 0) >> 2] | 0;
           $4 = 0;
           label$13 : while (1) {
            $0 = $5 + ($4 << 5 | 0) | 0;
            if (!(HEAPU8[($0 + 8 | 0) >> 0] | 0)) {
             break label$4
            }
            $8 = HEAPU8[($0 + 23 | 0) >> 0] | 0;
            label$14 : {
             label$15 : {
              label$16 : {
               if ($4 >>> 0 >= $7 >>> 0) {
                break label$16
               }
               if (!$8) {
                break label$5
               }
               if ((HEAPU8[((HEAP32[($0 + 24 | 0) >> 2] | 0) + 8 | 0) >> 0] | 0) >>> 0 <= 1 >>> 0) {
                break label$15
               }
               break label$6;
              }
              if (!$8) {
               break label$14
              }
             }
             $9 = $0 + 24 | 0;
             $0 = 0;
             label$17 : while (1) {
              label$18 : {
               if (!$0) {
                break label$18
               }
               $1 = (HEAP32[$9 >> 2] | 0) + ($0 << 4 | 0) | 0;
               if (((HEAPU8[($1 + -8 | 0) >> 0] | 0) + 1 | 0 | 0) != (HEAPU8[($1 + 8 | 0) >> 0] | 0 | 0)) {
                break label$7
               }
              }
              $0 = $0 + 1 | 0;
              if (($0 | 0) != ($8 | 0)) {
               continue label$17
              }
              break label$17;
             };
            }
            $0 = 1;
            $4 = $4 + 1 | 0;
            if (($4 | 0) != ($6 | 0)) {
             continue label$13
            }
            break label$8;
           };
          }
          $7 = HEAP32[($0 + 152 | 0) >> 2] | 0;
          $6 = 0;
          label$19 : while (1) {
           $0 = $7 + ($6 << 5 | 0) | 0;
           $1 = HEAPU8[($0 + 8 | 0) >> 0] | 0;
           if (!$1) {
            break label$4
           }
           label$20 : {
            if ($1 >>> 0 < 100 >>> 0) {
             break label$20
            }
            if (($1 | 0) == (170 | 0)) {
             break label$20
            }
            $0 = GOT_data_internal___memory_base;
            if (!$2) {
             break label$1
            }
            $0 = $0 + 6113 | 0;
            break label$2;
           }
           label$21 : {
            i64toi32_i32$2 = HEAP32[$0 >> 2] | 0;
            i64toi32_i32$1 = HEAP32[($0 + 4 | 0) >> 2] | 0;
            $14 = i64toi32_i32$2;
            i64toi32_i32$2 = 0;
            i64toi32_i32$2 = __wasm_i64_urem($14 | 0, i64toi32_i32$1 | 0, 588 | 0, i64toi32_i32$2 | 0) | 0;
            i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
            if (!(i64toi32_i32$2 | i64toi32_i32$1 | 0)) {
             break label$21
            }
            if (!$2) {
             break label$1
            }
            $0 = GOT_data_internal___memory_base + (($6 | 0) == ($5 | 0) ? 5527 : 5599) | 0;
            break label$2;
           }
           $8 = HEAPU8[($0 + 23 | 0) >> 0] | 0;
           label$22 : {
            label$23 : {
             label$24 : {
              if ($6 >>> 0 >= $5 >>> 0) {
               break label$24
              }
              if (!$8) {
               break label$5
              }
              if ((HEAPU8[((HEAP32[($0 + 24 | 0) >> 2] | 0) + 8 | 0) >> 0] | 0) >>> 0 < 2 >>> 0) {
               break label$23
              }
              break label$6;
             }
             if (!$8) {
              break label$22
             }
            }
            $9 = HEAP32[($0 + 24 | 0) >> 2] | 0;
            $0 = 0;
            label$25 : while (1) {
             label$26 : {
              $1 = $9 + ($0 << 4 | 0) | 0;
              i64toi32_i32$1 = HEAP32[$1 >> 2] | 0;
              i64toi32_i32$2 = HEAP32[($1 + 4 | 0) >> 2] | 0;
              $15 = i64toi32_i32$1;
              i64toi32_i32$1 = 0;
              i64toi32_i32$1 = __wasm_i64_urem($15 | 0, i64toi32_i32$2 | 0, 588 | 0, i64toi32_i32$1 | 0) | 0;
              i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
              if (!(i64toi32_i32$1 | i64toi32_i32$2 | 0)) {
               break label$26
              }
              $0 = GOT_data_internal___memory_base;
              if (!$2) {
               break label$1
              }
              $0 = $0 + 5452 | 0;
              break label$2;
             }
             label$27 : {
              if (!$0) {
               break label$27
              }
              if (((HEAPU8[($1 + -8 | 0) >> 0] | 0) + 1 | 0 | 0) != (HEAPU8[($1 + 8 | 0) >> 0] | 0 | 0)) {
               break label$7
              }
             }
             $0 = $0 + 1 | 0;
             if (($0 | 0) != ($8 | 0)) {
              continue label$25
             }
             break label$25;
            };
           }
           $0 = 1;
           $6 = $6 + 1 | 0;
           if (($6 | 0) != ($4 | 0)) {
            continue label$19
           }
           break label$19;
          };
         }
         return $0 | 0;
        }
        $0 = GOT_data_internal___memory_base;
        if (!$2) {
         break label$1
        }
        $0 = $0 + 6012 | 0;
        break label$2;
       }
       $0 = GOT_data_internal___memory_base;
       if (!$2) {
        break label$1
       }
       $0 = $0 + 6061 | 0;
       break label$2;
      }
      $0 = GOT_data_internal___memory_base;
      if (!$2) {
       break label$1
      }
      $0 = $0 + 5394 | 0;
      break label$2;
     }
     $0 = GOT_data_internal___memory_base;
     if (!$2) {
      break label$1
     }
     $0 = $0 + 6162 | 0;
     break label$2;
    }
    $0 = GOT_data_internal___memory_base;
    if (!$2) {
     break label$1
    }
    $0 = $0 + 6202 | 0;
   }
   HEAP32[$2 >> 2] = $0;
  }
  return 0 | 0;
 }
 
 function FLAC__format_picture_is_legal($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $3 = 0, $2 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     $2 = HEAP32[($0 + 4 | 0) >> 2] | 0;
     $3 = HEAPU8[$2 >> 0] | 0;
     if (!$3) {
      break label$3
     }
     label$4 : {
      label$5 : while (1) {
       if ((($3 + -32 | 0) & 255 | 0) >>> 0 >= 95 >>> 0) {
        break label$4
       }
       $2 = $2 + 1 | 0;
       $3 = HEAPU8[$2 >> 0] | 0;
       if (!$3) {
        break label$3
       }
       continue label$5;
      };
     }
     $3 = GOT_data_internal___memory_base;
     if (!$1) {
      break label$1
     }
     $3 = $3 + 6256 | 0;
     break label$2;
    }
    label$6 : {
     $3 = HEAP32[($0 + 8 | 0) >> 2] | 0;
     if (!(HEAPU8[$3 >> 0] | 0)) {
      break label$6
     }
     label$7 : while (1) {
      label$8 : {
       $2 = utf8len_($3 | 0) | 0;
       if ($2) {
        break label$8
       }
       $3 = GOT_data_internal___memory_base;
       if (!$1) {
        break label$1
       }
       $3 = $3 + 5940 | 0;
       break label$2;
      }
      $3 = $3 + $2 | 0;
      if (HEAPU8[$3 >> 0] | 0) {
       continue label$7
      }
      break label$7;
     };
    }
    return 1 | 0;
   }
   HEAP32[$1 >> 2] = $3;
  }
  return 0 | 0;
 }
 
 function FLAC__format_get_max_rice_partition_order_from_blocksize_limited_max_and_predictor_order($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  label$1 : {
   label$2 : while (1) {
    $3 = $0;
    if (!$3) {
     break label$1
    }
    $0 = $3 + -1 | 0;
    if (($1 >>> $3 | 0) >>> 0 <= $2 >>> 0) {
     continue label$2
    }
    break label$2;
   };
  }
  return $3 | 0;
 }
 
 function FLAC__format_get_max_rice_partition_order_from_blocksize($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  $1 = 0;
  label$1 : {
   label$2 : {
    if ($0 & 1 | 0) {
     break label$2
    }
    label$3 : while (1) {
     $1 = $1 + 1 | 0;
     $2 = $0 & 2 | 0;
     $0 = $0 >>> 1 | 0;
     if (!$2) {
      continue label$3
     }
     break label$3;
    };
    $0 = 15;
    if ($1 >>> 0 > 14 >>> 0) {
     break label$1
    }
   }
   $0 = $1;
  }
  return $0 | 0;
 }
 
 function FLAC__format_entropy_coding_method_partitioned_rice_contents_init($0) {
  $0 = $0 | 0;
  HEAP32[($0 + 8 | 0) >> 2] = 0;
  HEAP32[$0 >> 2] = 0;
  HEAP32[($0 + 4 | 0) >> 2] = 0;
 }
 
 function FLAC__format_entropy_coding_method_partitioned_rice_contents_clear($0) {
  $0 = $0 | 0;
  var $1 = 0;
  label$1 : {
   $1 = HEAP32[$0 >> 2] | 0;
   if (!$1) {
    break label$1
   }
   dlfree($1 | 0);
  }
  label$2 : {
   $1 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   if (!$1) {
    break label$2
   }
   dlfree($1 | 0);
  }
  HEAP32[($0 + 8 | 0) >> 2] = 0;
  HEAP32[$0 >> 2] = 0;
  HEAP32[($0 + 4 | 0) >> 2] = 0;
 }
 
 function FLAC__format_entropy_coding_method_partitioned_rice_contents_ensure_size($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $2 = 0, $3 = 0, $5 = 0;
  $2 = 1;
  label$1 : {
   if ((HEAP32[($0 + 8 | 0) >> 2] | 0) >>> 0 >= $1 >>> 0) {
    break label$1
   }
   $2 = HEAP32[$0 >> 2] | 0;
   $3 = 4 << $1 | 0;
   $4 = dlrealloc($2 | 0, $3 | 0) | 0;
   label$2 : {
    if ($1 >>> 0 > 29 >>> 0) {
     break label$2
    }
    if ($4) {
     break label$2
    }
    dlfree($2 | 0);
   }
   HEAP32[$0 >> 2] = $4;
   $2 = 0;
   if (!$4) {
    break label$1
   }
   $5 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   $4 = dlrealloc($5 | 0, $3 | 0) | 0;
   label$3 : {
    if ($1 >>> 0 > 29 >>> 0) {
     break label$3
    }
    if ($4) {
     break label$3
    }
    dlfree($5 | 0);
   }
   HEAP32[($0 + 4 | 0) >> 2] = $4;
   if (!$4) {
    break label$1
   }
   memset($4 | 0, 0 | 0, $3 | 0) | 0;
   HEAP32[($0 + 8 | 0) >> 2] = $1;
   $2 = 1;
  }
  return $2 | 0;
 }
 
 function ogg_page_serialno($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = HEAP32[$0 >> 2] | 0;
  return HEAPU8[($1 + 14 | 0) >> 0] | 0 | ((HEAPU8[($1 + 15 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($1 + 16 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($1 + 17 | 0) >> 0] | 0) << 24 | 0) | 0) | 0 | 0;
 }
 
 function ogg_stream_init($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $4 = 0, $3 = 0;
  $2 = -1;
  label$1 : {
   if (!$0) {
    break label$1
   }
   memset($0 + 8 | 0 | 0, 0 | 0, 352 | 0) | 0;
   HEAP32[($0 + 24 | 0) >> 2] = 1024;
   HEAP32[($0 + 4 | 0) >> 2] = 16384;
   $3 = dlmalloc(16384 | 0) | 0;
   HEAP32[$0 >> 2] = $3;
   $4 = dlmalloc(4096 | 0) | 0;
   HEAP32[($0 + 16 | 0) >> 2] = $4;
   $2 = dlmalloc(8192 | 0) | 0;
   HEAP32[($0 + 20 | 0) >> 2] = $2;
   label$2 : {
    label$3 : {
     if (!$3) {
      break label$3
     }
     label$4 : {
      if (!$2) {
       break label$4
      }
      if ($4) {
       break label$2
      }
     }
     dlfree($3 | 0);
    }
    label$5 : {
     if (!$4) {
      break label$5
     }
     dlfree($4 | 0);
    }
    label$6 : {
     if (!$2) {
      break label$6
     }
     dlfree($2 | 0);
    }
    memset($0 | 0, 0 | 0, 360 | 0) | 0;
    return -1 | 0;
   }
   HEAP32[($0 + 336 | 0) >> 2] = $1;
   $2 = 0;
  }
  return $2 | 0;
 }
 
 function ogg_stream_clear($0) {
  $0 = $0 | 0;
  var $1 = 0;
  label$1 : {
   if (!$0) {
    break label$1
   }
   label$2 : {
    $1 = HEAP32[$0 >> 2] | 0;
    if (!$1) {
     break label$2
    }
    dlfree($1 | 0);
   }
   label$3 : {
    $1 = HEAP32[($0 + 16 | 0) >> 2] | 0;
    if (!$1) {
     break label$3
    }
    dlfree($1 | 0);
   }
   label$4 : {
    $1 = HEAP32[($0 + 20 | 0) >> 2] | 0;
    if (!$1) {
     break label$4
    }
    dlfree($1 | 0);
   }
   memset($0 | 0, 0 | 0, 360 | 0) | 0;
  }
  return 0 | 0;
 }
 
 function ogg_page_checksum_set($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $4 = 0, $5 = 0, $3 = 0;
  label$1 : {
   if (!$0) {
    break label$1
   }
   $1 = 0;
   HEAP8[((HEAP32[$0 >> 2] | 0) + 22 | 0) >> 0] = 0;
   HEAP8[((HEAP32[$0 >> 2] | 0) + 23 | 0) >> 0] = 0;
   HEAP8[((HEAP32[$0 >> 2] | 0) + 24 | 0) >> 0] = 0;
   HEAP8[((HEAP32[$0 >> 2] | 0) + 25 | 0) >> 0] = 0;
   label$2 : {
    $2 = HEAP32[($0 + 4 | 0) >> 2] | 0;
    if (($2 | 0) < (1 | 0)) {
     break label$2
    }
    $3 = $2 & 1 | 0;
    $4 = HEAP32[$0 >> 2] | 0;
    label$3 : {
     label$4 : {
      if (($2 | 0) != (1 | 0)) {
       break label$4
      }
      $2 = 0;
      $1 = 0;
      break label$3;
     }
     $5 = $2 & -2 | 0;
     $2 = 0;
     $1 = 0;
     label$5 : while (1) {
      $1 = (HEAP32[(((($1 >>> 24 | 0) ^ (HEAPU8[($4 + $2 | 0) >> 0] | 0) | 0) << 2 | 0) + 6800 | 0) >> 2] | 0) ^ ($1 << 8 | 0) | 0;
      $1 = (HEAP32[(((($1 >>> 24 | 0) ^ (HEAPU8[($4 + ($2 | 1 | 0) | 0) >> 0] | 0) | 0) << 2 | 0) + 6800 | 0) >> 2] | 0) ^ ($1 << 8 | 0) | 0;
      $2 = $2 + 2 | 0;
      $5 = $5 + -2 | 0;
      if ($5) {
       continue label$5
      }
      break label$5;
     };
    }
    if (!$3) {
     break label$2
    }
    $1 = (HEAP32[(((($1 >>> 24 | 0) ^ (HEAPU8[($4 + $2 | 0) >> 0] | 0) | 0) << 2 | 0) + 6800 | 0) >> 2] | 0) ^ ($1 << 8 | 0) | 0;
   }
   label$6 : {
    $2 = HEAP32[($0 + 12 | 0) >> 2] | 0;
    if (($2 | 0) < (1 | 0)) {
     break label$6
    }
    $3 = $2 & 1 | 0;
    $4 = HEAP32[($0 + 8 | 0) >> 2] | 0;
    label$7 : {
     label$8 : {
      if (($2 | 0) != (1 | 0)) {
       break label$8
      }
      $2 = 0;
      break label$7;
     }
     $5 = $2 & -2 | 0;
     $2 = 0;
     label$9 : while (1) {
      $1 = (HEAP32[(((($1 >>> 24 | 0) ^ (HEAPU8[($4 + $2 | 0) >> 0] | 0) | 0) << 2 | 0) + 6800 | 0) >> 2] | 0) ^ ($1 << 8 | 0) | 0;
      $1 = (HEAP32[(((($1 >>> 24 | 0) ^ (HEAPU8[($4 + ($2 | 1 | 0) | 0) >> 0] | 0) | 0) << 2 | 0) + 6800 | 0) >> 2] | 0) ^ ($1 << 8 | 0) | 0;
      $2 = $2 + 2 | 0;
      $5 = $5 + -2 | 0;
      if ($5) {
       continue label$9
      }
      break label$9;
     };
    }
    if (!$3) {
     break label$6
    }
    $1 = (HEAP32[(((($1 >>> 24 | 0) ^ (HEAPU8[($4 + $2 | 0) >> 0] | 0) | 0) << 2 | 0) + 6800 | 0) >> 2] | 0) ^ ($1 << 8 | 0) | 0;
   }
   HEAP8[((HEAP32[$0 >> 2] | 0) + 22 | 0) >> 0] = $1;
   HEAP8[((HEAP32[$0 >> 2] | 0) + 23 | 0) >> 0] = $1 >>> 8 | 0;
   HEAP8[((HEAP32[$0 >> 2] | 0) + 24 | 0) >> 0] = $1 >>> 16 | 0;
   HEAP8[((HEAP32[$0 >> 2] | 0) + 25 | 0) >> 0] = $1 >>> 24 | 0;
  }
 }
 
 function ogg_stream_iovecin($0, $1, $2, $3, $4, $4$hi) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $4$hi = $4$hi | 0;
  var $7 = 0, $9 = 0, i64toi32_i32$0 = 0, $8 = 0, i64toi32_i32$1 = 0, $12 = 0, $6 = 0, i64toi32_i32$2 = 0, $5 = 0, $10 = 0, i64toi32_i32$5 = 0, $11 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, $123 = 0, $178 = 0, $192 = 0, $206 = 0, $220 = 0, $240 = 0, $277 = 0;
  $5 = -1;
  label$1 : {
   if (!$0) {
    break label$1
   }
   $6 = HEAP32[$0 >> 2] | 0;
   if (!$6) {
    break label$1
   }
   label$2 : {
    if ($1) {
     break label$2
    }
    return 0 | 0;
   }
   $7 = 0;
   label$3 : {
    label$4 : {
     if (($2 | 0) >= (1 | 0)) {
      break label$4
     }
     $8 = 0;
     break label$3;
    }
    $8 = 0;
    label$5 : while (1) {
     $9 = HEAP32[(($1 + ($7 << 3 | 0) | 0) + 4 | 0) >> 2] | 0;
     if (($9 | 0) < (0 | 0)) {
      break label$1
     }
     if (($8 | 0) > (2147483647 - $9 | 0 | 0)) {
      break label$1
     }
     $8 = $9 + $8 | 0;
     $7 = $7 + 1 | 0;
     if (($7 | 0) != ($2 | 0)) {
      continue label$5
     }
     break label$5;
    };
   }
   $10 = ($8 | 0) / (255 | 0) | 0;
   label$6 : {
    $7 = HEAP32[($0 + 12 | 0) >> 2] | 0;
    if (!$7) {
     break label$6
    }
    $9 = (HEAP32[($0 + 8 | 0) >> 2] | 0) - $7 | 0;
    HEAP32[($0 + 8 | 0) >> 2] = $9;
    label$7 : {
     if (!$9) {
      break label$7
     }
     memmove($6 | 0, $6 + $7 | 0 | 0, $9 | 0) | 0;
    }
    HEAP32[($0 + 12 | 0) >> 2] = 0;
   }
   label$8 : {
    $7 = HEAP32[($0 + 4 | 0) >> 2] | 0;
    if (($7 - $8 | 0 | 0) > (HEAP32[($0 + 8 | 0) >> 2] | 0 | 0)) {
     break label$8
    }
    label$9 : {
     if (($7 | 0) <= (2147483647 - $8 | 0 | 0)) {
      break label$9
     }
     label$10 : {
      $8 = HEAP32[$0 >> 2] | 0;
      if (!$8) {
       break label$10
      }
      dlfree($8 | 0);
     }
     label$11 : {
      $8 = HEAP32[($0 + 16 | 0) >> 2] | 0;
      if (!$8) {
       break label$11
      }
      dlfree($8 | 0);
     }
     label$12 : {
      $8 = HEAP32[($0 + 20 | 0) >> 2] | 0;
      if (!$8) {
       break label$12
      }
      dlfree($8 | 0);
     }
     memset($0 | 0, 0 | 0, 360 | 0) | 0;
     return -1 | 0;
    }
    label$13 : {
     $7 = $7 + $8 | 0;
     $7 = ($7 | 0) < (2147482623 | 0) ? $7 + 1024 | 0 : $7;
     $9 = dlrealloc(HEAP32[$0 >> 2] | 0 | 0, $7 | 0) | 0;
     if ($9) {
      break label$13
     }
     ogg_stream_clear($0 | 0) | 0;
     return -1 | 0;
    }
    HEAP32[$0 >> 2] = $9;
    HEAP32[($0 + 4 | 0) >> 2] = $7;
   }
   $11 = $10 + 1 | 0;
   if (_os_lacing_expand($0 | 0, $11 | 0) | 0) {
    break label$1
   }
   label$14 : {
    if (($2 | 0) < (1 | 0)) {
     break label$14
    }
    $9 = HEAP32[($0 + 8 | 0) >> 2] | 0;
    $7 = 0;
    label$15 : while (1) {
     $123 = (HEAP32[$0 >> 2] | 0) + $9 | 0;
     $9 = $1 + ($7 << 3 | 0) | 0;
     __memcpy($123 | 0, HEAP32[$9 >> 2] | 0 | 0, HEAP32[($9 + 4 | 0) >> 2] | 0 | 0) | 0;
     $9 = (HEAP32[($0 + 8 | 0) >> 2] | 0) + (HEAP32[($9 + 4 | 0) >> 2] | 0) | 0;
     HEAP32[($0 + 8 | 0) >> 2] = $9;
     $7 = $7 + 1 | 0;
     if (($7 | 0) != ($2 | 0)) {
      continue label$15
     }
     break label$15;
    };
   }
   label$16 : {
    label$17 : {
     if (($8 | 0) > (254 | 0)) {
      break label$17
     }
     $2 = HEAP32[($0 + 20 | 0) >> 2] | 0;
     $9 = HEAP32[($0 + 28 | 0) >> 2] | 0;
     $1 = HEAP32[($0 + 16 | 0) >> 2] | 0;
     $7 = 0;
     break label$16;
    }
    $5 = $10 & 3 | 0;
    $2 = HEAP32[($0 + 20 | 0) >> 2] | 0;
    $9 = HEAP32[($0 + 28 | 0) >> 2] | 0;
    $1 = HEAP32[($0 + 16 | 0) >> 2] | 0;
    $7 = 0;
    label$18 : {
     if (($10 + -1 | 0) >>> 0 < 3 >>> 0) {
      break label$18
     }
     $6 = $10 & -4 | 0;
     $7 = 0;
     label$19 : while (1) {
      $12 = $9 + $7 | 0;
      HEAP32[($1 + ($12 << 2 | 0) | 0) >> 2] = 255;
      i64toi32_i32$2 = $0;
      i64toi32_i32$0 = HEAP32[($0 + 352 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[($0 + 356 | 0) >> 2] | 0;
      $178 = i64toi32_i32$0;
      i64toi32_i32$0 = $2 + ($12 << 3 | 0) | 0;
      HEAP32[i64toi32_i32$0 >> 2] = $178;
      HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
      $12 = $9 + ($7 | 1 | 0) | 0;
      HEAP32[($1 + ($12 << 2 | 0) | 0) >> 2] = 255;
      i64toi32_i32$2 = $0;
      i64toi32_i32$1 = HEAP32[($0 + 352 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[($0 + 356 | 0) >> 2] | 0;
      $192 = i64toi32_i32$1;
      i64toi32_i32$1 = $2 + ($12 << 3 | 0) | 0;
      HEAP32[i64toi32_i32$1 >> 2] = $192;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      $12 = $9 + ($7 | 2 | 0) | 0;
      HEAP32[($1 + ($12 << 2 | 0) | 0) >> 2] = 255;
      i64toi32_i32$2 = $0;
      i64toi32_i32$0 = HEAP32[($0 + 352 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[($0 + 356 | 0) >> 2] | 0;
      $206 = i64toi32_i32$0;
      i64toi32_i32$0 = $2 + ($12 << 3 | 0) | 0;
      HEAP32[i64toi32_i32$0 >> 2] = $206;
      HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
      $12 = $9 + ($7 | 3 | 0) | 0;
      HEAP32[($1 + ($12 << 2 | 0) | 0) >> 2] = 255;
      i64toi32_i32$2 = $0;
      i64toi32_i32$1 = HEAP32[($0 + 352 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[($0 + 356 | 0) >> 2] | 0;
      $220 = i64toi32_i32$1;
      i64toi32_i32$1 = $2 + ($12 << 3 | 0) | 0;
      HEAP32[i64toi32_i32$1 >> 2] = $220;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      $7 = $7 + 4 | 0;
      $6 = $6 + -4 | 0;
      if ($6) {
       continue label$19
      }
      break label$19;
     };
    }
    label$20 : {
     if (!$5) {
      break label$20
     }
     label$21 : while (1) {
      $6 = $9 + $7 | 0;
      HEAP32[($1 + ($6 << 2 | 0) | 0) >> 2] = 255;
      i64toi32_i32$2 = $0;
      i64toi32_i32$0 = HEAP32[($0 + 352 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[($0 + 356 | 0) >> 2] | 0;
      $240 = i64toi32_i32$0;
      i64toi32_i32$0 = $2 + ($6 << 3 | 0) | 0;
      HEAP32[i64toi32_i32$0 >> 2] = $240;
      HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
      $7 = $7 + 1 | 0;
      $5 = $5 + -1 | 0;
      if ($5) {
       continue label$21
      }
      break label$21;
     };
    }
    $7 = $10;
   }
   $7 = $9 + $7 | 0;
   HEAP32[($1 + ($7 << 2 | 0) | 0) >> 2] = $8 - Math_imul($10, 255) | 0;
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$0 = $2 + ($7 << 3 | 0) | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $4;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$0 = $0;
   HEAP32[($0 + 352 | 0) >> 2] = $4;
   HEAP32[($0 + 356 | 0) >> 2] = i64toi32_i32$1;
   $8 = $1 + ($9 << 2 | 0) | 0;
   HEAP32[$8 >> 2] = HEAP32[$8 >> 2] | 0 | 256 | 0;
   HEAP32[($0 + 28 | 0) >> 2] = $9 + $11 | 0;
   $277 = $0;
   i64toi32_i32$2 = $0;
   i64toi32_i32$1 = HEAP32[($0 + 344 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($0 + 348 | 0) >> 2] | 0;
   i64toi32_i32$2 = i64toi32_i32$1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 1;
   i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
   i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
   if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   i64toi32_i32$2 = $277;
   HEAP32[(i64toi32_i32$2 + 344 | 0) >> 2] = i64toi32_i32$4;
   HEAP32[(i64toi32_i32$2 + 348 | 0) >> 2] = i64toi32_i32$5;
   $5 = 0;
   if (!$3) {
    break label$1
   }
   HEAP32[($0 + 328 | 0) >> 2] = 1;
  }
  return $5 | 0;
 }
 
 function _os_lacing_expand($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  label$1 : {
   $2 = HEAP32[($0 + 24 | 0) >> 2] | 0;
   if (($2 - $1 | 0 | 0) > (HEAP32[($0 + 28 | 0) >> 2] | 0 | 0)) {
    break label$1
   }
   label$2 : {
    if (($2 | 0) <= (2147483647 - $1 | 0 | 0)) {
     break label$2
    }
    label$3 : {
     $1 = HEAP32[$0 >> 2] | 0;
     if (!$1) {
      break label$3
     }
     dlfree($1 | 0);
    }
    label$4 : {
     $1 = HEAP32[($0 + 16 | 0) >> 2] | 0;
     if (!$1) {
      break label$4
     }
     dlfree($1 | 0);
    }
    label$5 : {
     $1 = HEAP32[($0 + 20 | 0) >> 2] | 0;
     if (!$1) {
      break label$5
     }
     dlfree($1 | 0);
    }
    memset($0 | 0, 0 | 0, 360 | 0) | 0;
    return -1 | 0;
   }
   label$6 : {
    $1 = $2 + $1 | 0;
    $1 = ($1 | 0) < (2147483615 | 0) ? $1 + 32 | 0 : $1;
    $2 = dlrealloc(HEAP32[($0 + 16 | 0) >> 2] | 0 | 0, $1 << 2 | 0 | 0) | 0;
    if ($2) {
     break label$6
    }
    label$7 : {
     $1 = HEAP32[$0 >> 2] | 0;
     if (!$1) {
      break label$7
     }
     dlfree($1 | 0);
    }
    label$8 : {
     $1 = HEAP32[($0 + 16 | 0) >> 2] | 0;
     if (!$1) {
      break label$8
     }
     dlfree($1 | 0);
    }
    label$9 : {
     $1 = HEAP32[($0 + 20 | 0) >> 2] | 0;
     if (!$1) {
      break label$9
     }
     dlfree($1 | 0);
    }
    memset($0 | 0, 0 | 0, 360 | 0) | 0;
    return -1 | 0;
   }
   HEAP32[($0 + 16 | 0) >> 2] = $2;
   label$10 : {
    $2 = dlrealloc(HEAP32[($0 + 20 | 0) >> 2] | 0 | 0, $1 << 3 | 0 | 0) | 0;
    if ($2) {
     break label$10
    }
    label$11 : {
     $1 = HEAP32[$0 >> 2] | 0;
     if (!$1) {
      break label$11
     }
     dlfree($1 | 0);
    }
    label$12 : {
     $1 = HEAP32[($0 + 16 | 0) >> 2] | 0;
     if (!$1) {
      break label$12
     }
     dlfree($1 | 0);
    }
    label$13 : {
     $1 = HEAP32[($0 + 20 | 0) >> 2] | 0;
     if (!$1) {
      break label$13
     }
     dlfree($1 | 0);
    }
    memset($0 | 0, 0 | 0, 360 | 0) | 0;
    return -1 | 0;
   }
   HEAP32[($0 + 24 | 0) >> 2] = $1;
   HEAP32[($0 + 20 | 0) >> 2] = $2;
  }
  return 0 | 0;
 }
 
 function ogg_stream_packetin($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, i64toi32_i32$1 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  HEAP32[($2 + 8 | 0) >> 2] = HEAP32[$1 >> 2] | 0;
  HEAP32[($2 + 12 | 0) >> 2] = HEAP32[($1 + 4 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($1 + 20 | 0) >> 2] | 0;
  $1 = ogg_stream_iovecin($0 | 0, $2 + 8 | 0 | 0, 1 | 0, HEAP32[($1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($1 + 16 | 0) >> 2] | 0 | 0, i64toi32_i32$1 | 0) | 0;
  __stack_pointer = $2 + 16 | 0;
  return $1 | 0;
 }
 
 function ogg_stream_flush($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  return ogg_stream_flush_i($0 | 0, $1 | 0, 1 | 0, 4096 | 0) | 0 | 0;
 }
 
 function ogg_stream_flush_i($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $7 = 0, i64toi32_i32$4 = 0, i64toi32_i32$0 = 0, $12 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $11 = 0, i64toi32_i32$3 = 0, $10 = 0, $9 = 0, $9$hi = 0, $15 = 0, $6 = 0, $14 = 0, $13 = 0, $4 = 0, $31 = 0, $32 = 0, $5 = 0, $8 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $125 = 0, $129 = 0, $133 = 0, $137 = 0, $141 = 0, $145 = 0, $149 = 0, $209 = 0, $233 = 0;
  $4 = 0;
  label$1 : {
   $5 = HEAP32[$0 >> 2] | 0;
   if (!$5) {
    break label$1
   }
   $6 = HEAP32[($0 + 28 | 0) >> 2] | 0;
   $7 = ($6 | 0) < (255 | 0) ? $6 : 255;
   if (!$7) {
    break label$1
   }
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       $8 = HEAP32[($0 + 332 | 0) >> 2] | 0;
       if (!$8) {
        break label$5
       }
       if (($6 | 0) >= (1 | 0)) {
        break label$4
       }
       i64toi32_i32$0 = -1;
       $9 = -1;
       $9$hi = i64toi32_i32$0;
       $7 = 0;
       break label$3;
      }
      i64toi32_i32$0 = 0;
      $9 = 0;
      $9$hi = i64toi32_i32$0;
      label$6 : {
       if (($6 | 0) >= (1 | 0)) {
        break label$6
       }
       $7 = 0;
       break label$3;
      }
      $10 = ($7 | 0) > (1 | 0) ? $7 : 1;
      $11 = HEAP32[($0 + 16 | 0) >> 2] | 0;
      $12 = 0;
      label$7 : while (1) {
       $7 = $12 + 1 | 0;
       if ((HEAPU8[($11 + ($12 << 2 | 0) | 0) >> 0] | 0 | 0) != (255 | 0)) {
        break label$3
       }
       $12 = $7;
       if (($7 | 0) != ($10 | 0)) {
        continue label$7
       }
       break label$7;
      };
      $7 = $10;
      break label$3;
     }
     $13 = ($7 | 0) > (1 | 0) ? $7 : 1;
     i64toi32_i32$0 = -1;
     $9 = -1;
     $9$hi = i64toi32_i32$0;
     $11 = 0;
     $14 = 0;
     $12 = 0;
     $7 = 0;
     label$8 : {
      label$9 : while (1) {
       label$10 : {
        if (($12 | 0) <= ($3 | 0)) {
         break label$10
        }
        if (($11 | 0) <= (3 | 0)) {
         break label$10
        }
        $2 = 1;
        break label$8;
       }
       $11 = 0;
       label$11 : {
        $10 = HEAPU8[((HEAP32[($0 + 16 | 0) >> 2] | 0) + ($7 << 2 | 0) | 0) >> 0] | 0;
        if (($10 | 0) == (255 | 0)) {
         break label$11
        }
        i64toi32_i32$2 = (HEAP32[($0 + 20 | 0) >> 2] | 0) + ($7 << 3 | 0) | 0;
        i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
        $9 = i64toi32_i32$0;
        $9$hi = i64toi32_i32$1;
        $14 = $14 + 1 | 0;
        $11 = $14;
       }
       $12 = $10 + $12 | 0;
       $7 = $7 + 1 | 0;
       if (($7 | 0) != ($13 | 0)) {
        continue label$9
       }
       break label$9;
      };
      $7 = $13;
     }
     $15 = 255;
     if (($7 | 0) == (255 | 0)) {
      break label$2
     }
    }
    $15 = $7;
    if (!$2) {
     break label$1
    }
   }
   HEAP32[($0 + 40 | 0) >> 2] = 1399285583;
   $12 = 0;
   HEAP16[($0 + 44 | 0) >> 1] = 0;
   $11 = HEAP32[($0 + 16 | 0) >> 2] | 0;
   $7 = ((HEAPU8[($11 + 1 | 0) >> 0] | 0) ^ -1 | 0) & 1 | 0;
   $7 = $8 ? $7 : $7 | 2 | 0;
   HEAP8[($0 + 45 | 0) >> 0] = $7;
   label$12 : {
    if (!(HEAP32[($0 + 328 | 0) >> 2] | 0)) {
     break label$12
    }
    if (($6 | 0) != ($15 | 0)) {
     break label$12
    }
    HEAP8[($0 + 45 | 0) >> 0] = $7 | 4 | 0;
   }
   $4 = $0 + 40 | 0;
   HEAP32[($0 + 332 | 0) >> 2] = 1;
   $125 = $0 + 53 | 0;
   i64toi32_i32$1 = $9$hi;
   i64toi32_i32$2 = $9;
   i64toi32_i32$0 = 0;
   i64toi32_i32$3 = 56;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = 0;
    $33 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$0 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
    $33 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
   }
   HEAP8[$125 >> 0] = $33;
   $129 = $0 + 52 | 0;
   i64toi32_i32$0 = $9$hi;
   i64toi32_i32$1 = $9;
   i64toi32_i32$2 = 0;
   i64toi32_i32$3 = 48;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = 0;
    $34 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$2 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    $34 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
   }
   HEAP8[$129 >> 0] = $34;
   $133 = $0 + 51 | 0;
   i64toi32_i32$2 = $9$hi;
   i64toi32_i32$0 = $9;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 40;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = 0;
    $35 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
    $35 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
   }
   HEAP8[$133 >> 0] = $35;
   $137 = $0 + 50 | 0;
   i64toi32_i32$1 = $9$hi;
   i64toi32_i32$2 = $9;
   i64toi32_i32$0 = 0;
   i64toi32_i32$3 = 32;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = 0;
    $36 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$0 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
    $36 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
   }
   HEAP8[$137 >> 0] = $36;
   $141 = $0 + 49 | 0;
   i64toi32_i32$0 = $9$hi;
   i64toi32_i32$1 = $9;
   i64toi32_i32$2 = 0;
   i64toi32_i32$3 = 24;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = 0;
    $37 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$2 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    $37 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
   }
   HEAP8[$141 >> 0] = $37;
   $145 = $0 + 48 | 0;
   i64toi32_i32$2 = $9$hi;
   i64toi32_i32$0 = $9;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 16;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = 0;
    $38 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
    $38 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
   }
   HEAP8[$145 >> 0] = $38;
   $149 = $0 + 47 | 0;
   i64toi32_i32$1 = $9$hi;
   i64toi32_i32$2 = $9;
   i64toi32_i32$0 = 0;
   i64toi32_i32$3 = 8;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = 0;
    $39 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$0 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
    $39 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
   }
   HEAP8[$149 >> 0] = $39;
   i64toi32_i32$0 = $9$hi;
   HEAP8[($0 + 46 | 0) >> 0] = $9;
   $31 = $0 + 54 | 0;
   $32 = HEAP32[($0 + 336 | 0) >> 2] | 0;
   HEAP8[$31 >> 0] = $32;
   HEAP8[($31 + 1 | 0) >> 0] = $32 >>> 8 | 0;
   HEAP8[($31 + 2 | 0) >> 0] = $32 >>> 16 | 0;
   HEAP8[($31 + 3 | 0) >> 0] = $32 >>> 24 | 0;
   HEAP8[($0 + 66 | 0) >> 0] = $15;
   $40 = $0 + 62 | 0;
   $41 = 0;
   HEAP16[$40 >> 1] = $41;
   HEAP16[($40 + 2 | 0) >> 1] = $41 >>> 16 | 0;
   $7 = HEAP32[($0 + 340 | 0) >> 2] | 0;
   $7 = ($7 | 0) == (-1 | 0) ? 0 : $7;
   HEAP8[($0 + 58 | 0) >> 0] = $7;
   HEAP32[($0 + 340 | 0) >> 2] = $7 + 1 | 0;
   HEAP8[($0 + 61 | 0) >> 0] = $7 >>> 24 | 0;
   HEAP8[($0 + 60 | 0) >> 0] = $7 >>> 16 | 0;
   HEAP8[($0 + 59 | 0) >> 0] = $7 >>> 8 | 0;
   label$13 : {
    if (($15 | 0) < (1 | 0)) {
     break label$13
    }
    $2 = $15 & 1 | 0;
    label$14 : {
     label$15 : {
      if (($15 | 0) != (1 | 0)) {
       break label$15
      }
      $12 = 0;
      $7 = 0;
      break label$14;
     }
     $10 = $15 & -2 | 0;
     $12 = 0;
     $7 = 0;
     label$16 : while (1) {
      $3 = $0 + $7 | 0;
      $13 = $7 << 2 | 0;
      $14 = HEAP32[($11 + $13 | 0) >> 2] | 0;
      HEAP8[($3 + 67 | 0) >> 0] = $14;
      $209 = $3 + 68 | 0;
      $3 = HEAP32[($11 + ($13 | 4 | 0) | 0) >> 2] | 0;
      HEAP8[$209 >> 0] = $3;
      $12 = ($3 & 255 | 0) + (($14 & 255 | 0) + $12 | 0) | 0;
      $7 = $7 + 2 | 0;
      $10 = $10 + -2 | 0;
      if ($10) {
       continue label$16
      }
      break label$16;
     };
    }
    if (!$2) {
     break label$13
    }
    $233 = ($7 + $0 | 0) + 67 | 0;
    $7 = HEAP32[($11 + ($7 << 2 | 0) | 0) >> 2] | 0;
    HEAP8[$233 >> 0] = $7;
    $12 = ($7 & 255 | 0) + $12 | 0;
   }
   HEAP32[$1 >> 2] = $4;
   $7 = $15 + 27 | 0;
   HEAP32[($0 + 324 | 0) >> 2] = $7;
   HEAP32[($1 + 4 | 0) >> 2] = $7;
   $7 = HEAP32[($0 + 12 | 0) >> 2] | 0;
   HEAP32[($1 + 12 | 0) >> 2] = $12;
   HEAP32[($1 + 8 | 0) >> 2] = $5 + $7 | 0;
   $7 = $6 - $15 | 0;
   HEAP32[($0 + 28 | 0) >> 2] = $7;
   memmove($11 | 0, $11 + ($15 << 2 | 0) | 0 | 0, $7 << 2 | 0 | 0) | 0;
   $7 = HEAP32[($0 + 20 | 0) >> 2] | 0;
   memmove($7 | 0, $7 + ($15 << 3 | 0) | 0 | 0, (HEAP32[($0 + 28 | 0) >> 2] | 0) << 3 | 0 | 0) | 0;
   HEAP32[($0 + 12 | 0) >> 2] = (HEAP32[($0 + 12 | 0) >> 2] | 0) + $12 | 0;
   $0 = 0;
   HEAP8[((HEAP32[$1 >> 2] | 0) + 22 | 0) >> 0] = 0;
   HEAP8[((HEAP32[$1 >> 2] | 0) + 23 | 0) >> 0] = 0;
   HEAP8[((HEAP32[$1 >> 2] | 0) + 24 | 0) >> 0] = 0;
   HEAP8[((HEAP32[$1 >> 2] | 0) + 25 | 0) >> 0] = 0;
   label$17 : {
    $7 = HEAP32[($1 + 4 | 0) >> 2] | 0;
    if (($7 | 0) < (1 | 0)) {
     break label$17
    }
    $10 = $7 & 1 | 0;
    $12 = HEAP32[$1 >> 2] | 0;
    label$18 : {
     label$19 : {
      if (($7 | 0) != (1 | 0)) {
       break label$19
      }
      $7 = 0;
      $0 = 0;
      break label$18;
     }
     $11 = $7 & -2 | 0;
     $7 = 0;
     $0 = 0;
     label$20 : while (1) {
      $0 = (HEAP32[(((($0 >>> 24 | 0) ^ (HEAPU8[($12 + $7 | 0) >> 0] | 0) | 0) << 2 | 0) + 6800 | 0) >> 2] | 0) ^ ($0 << 8 | 0) | 0;
      $0 = (HEAP32[(((($0 >>> 24 | 0) ^ (HEAPU8[($12 + ($7 | 1 | 0) | 0) >> 0] | 0) | 0) << 2 | 0) + 6800 | 0) >> 2] | 0) ^ ($0 << 8 | 0) | 0;
      $7 = $7 + 2 | 0;
      $11 = $11 + -2 | 0;
      if ($11) {
       continue label$20
      }
      break label$20;
     };
    }
    if (!$10) {
     break label$17
    }
    $0 = (HEAP32[(((($0 >>> 24 | 0) ^ (HEAPU8[($12 + $7 | 0) >> 0] | 0) | 0) << 2 | 0) + 6800 | 0) >> 2] | 0) ^ ($0 << 8 | 0) | 0;
   }
   label$21 : {
    $7 = HEAP32[($1 + 12 | 0) >> 2] | 0;
    if (($7 | 0) < (1 | 0)) {
     break label$21
    }
    $10 = $7 & 1 | 0;
    $12 = HEAP32[($1 + 8 | 0) >> 2] | 0;
    label$22 : {
     label$23 : {
      if (($7 | 0) != (1 | 0)) {
       break label$23
      }
      $7 = 0;
      break label$22;
     }
     $11 = $7 & -2 | 0;
     $7 = 0;
     label$24 : while (1) {
      $0 = (HEAP32[(((($0 >>> 24 | 0) ^ (HEAPU8[($12 + $7 | 0) >> 0] | 0) | 0) << 2 | 0) + 6800 | 0) >> 2] | 0) ^ ($0 << 8 | 0) | 0;
      $0 = (HEAP32[(((($0 >>> 24 | 0) ^ (HEAPU8[($12 + ($7 | 1 | 0) | 0) >> 0] | 0) | 0) << 2 | 0) + 6800 | 0) >> 2] | 0) ^ ($0 << 8 | 0) | 0;
      $7 = $7 + 2 | 0;
      $11 = $11 + -2 | 0;
      if ($11) {
       continue label$24
      }
      break label$24;
     };
    }
    if (!$10) {
     break label$21
    }
    $0 = (HEAP32[(((($0 >>> 24 | 0) ^ (HEAPU8[($12 + $7 | 0) >> 0] | 0) | 0) << 2 | 0) + 6800 | 0) >> 2] | 0) ^ ($0 << 8 | 0) | 0;
   }
   HEAP8[((HEAP32[$1 >> 2] | 0) + 22 | 0) >> 0] = $0;
   HEAP8[((HEAP32[$1 >> 2] | 0) + 23 | 0) >> 0] = $0 >>> 8 | 0;
   HEAP8[((HEAP32[$1 >> 2] | 0) + 24 | 0) >> 0] = $0 >>> 16 | 0;
   HEAP8[((HEAP32[$1 >> 2] | 0) + 25 | 0) >> 0] = $0 >>> 24 | 0;
   $4 = 1;
  }
  return $4 | 0;
 }
 
 function ogg_stream_pageout($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0;
  $2 = 0;
  label$1 : {
   if (!$0) {
    break label$1
   }
   if (!(HEAP32[$0 >> 2] | 0)) {
    break label$1
   }
   $3 = HEAP32[($0 + 28 | 0) >> 2] | 0;
   label$2 : {
    label$3 : {
     label$4 : {
      if (!(HEAP32[($0 + 328 | 0) >> 2] | 0)) {
       break label$4
      }
      if ($3) {
       break label$3
      }
      $2 = 0;
      break label$2;
     }
     $2 = 0;
     if (!$3) {
      break label$2
     }
     if (HEAP32[($0 + 332 | 0) >> 2] | 0) {
      break label$2
     }
    }
    $2 = 1;
   }
   $2 = ogg_stream_flush_i($0 | 0, $1 | 0, $2 | 0, 4096 | 0) | 0;
  }
  return $2 | 0;
 }
 
 function ogg_sync_init($0) {
  $0 = $0 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0;
  label$1 : {
   if (!$0) {
    break label$1
   }
   i64toi32_i32$1 = $0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[(i64toi32_i32$1 + 24 | 0) >> 2] = 0;
   i64toi32_i32$1 = i64toi32_i32$1 + 16 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $0 + 8 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  }
  return 0 | 0;
 }
 
 function ogg_sync_clear($0) {
  $0 = $0 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $1 = 0;
  label$1 : {
   if (!$0) {
    break label$1
   }
   label$2 : {
    $1 = HEAP32[$0 >> 2] | 0;
    if (!$1) {
     break label$2
    }
    dlfree($1 | 0);
   }
   i64toi32_i32$1 = $0;
   i64toi32_i32$0 = 0;
   HEAP32[$0 >> 2] = 0;
   HEAP32[($0 + 4 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[($0 + 24 | 0) >> 2] = 0;
   i64toi32_i32$1 = $0 + 16 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $0 + 8 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  }
  return 0 | 0;
 }
 
 function ogg_sync_buffer($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $4 = 0;
  $2 = 0;
  label$1 : {
   $3 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   if (($3 | 0) < (0 | 0)) {
    break label$1
   }
   label$2 : {
    $2 = HEAP32[($0 + 12 | 0) >> 2] | 0;
    if (!$2) {
     break label$2
    }
    $4 = (HEAP32[($0 + 8 | 0) >> 2] | 0) - $2 | 0;
    HEAP32[($0 + 8 | 0) >> 2] = $4;
    label$3 : {
     if (($4 | 0) < (1 | 0)) {
      break label$3
     }
     $3 = HEAP32[$0 >> 2] | 0;
     memmove($3 | 0, $3 + $2 | 0 | 0, $4 | 0) | 0;
     $3 = HEAP32[($0 + 4 | 0) >> 2] | 0;
    }
    HEAP32[($0 + 12 | 0) >> 2] = 0;
   }
   label$4 : {
    label$5 : {
     $2 = HEAP32[($0 + 8 | 0) >> 2] | 0;
     if (($3 - $2 | 0 | 0) < ($1 | 0)) {
      break label$5
     }
     $1 = HEAP32[$0 >> 2] | 0;
     break label$4;
    }
    $2 = ($1 + $2 | 0) + 4096 | 0;
    label$6 : {
     label$7 : {
      $1 = HEAP32[$0 >> 2] | 0;
      if (!$1) {
       break label$7
      }
      $1 = dlrealloc($1 | 0, $2 | 0) | 0;
      break label$6;
     }
     $1 = dlmalloc($2 | 0) | 0;
    }
    label$8 : {
     if ($1) {
      break label$8
     }
     label$9 : {
      $2 = HEAP32[$0 >> 2] | 0;
      if (!$2) {
       break label$9
      }
      dlfree($2 | 0);
     }
     i64toi32_i32$1 = $0;
     i64toi32_i32$0 = 0;
     HEAP32[$0 >> 2] = 0;
     HEAP32[($0 + 4 | 0) >> 2] = i64toi32_i32$0;
     HEAP32[($0 + 24 | 0) >> 2] = 0;
     i64toi32_i32$1 = $0 + 16 | 0;
     i64toi32_i32$0 = 0;
     HEAP32[i64toi32_i32$1 >> 2] = 0;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$1 = $0 + 8 | 0;
     i64toi32_i32$0 = 0;
     HEAP32[i64toi32_i32$1 >> 2] = 0;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     return 0 | 0;
    }
    HEAP32[($0 + 4 | 0) >> 2] = $2;
    HEAP32[$0 >> 2] = $1;
    $2 = HEAP32[($0 + 8 | 0) >> 2] | 0;
   }
   $2 = $1 + $2 | 0;
  }
  return $2 | 0;
 }
 
 function ogg_sync_wrote($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0;
  $2 = -1;
  label$1 : {
   $3 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   if (($3 | 0) < (0 | 0)) {
    break label$1
   }
   $1 = (HEAP32[($0 + 8 | 0) >> 2] | 0) + $1 | 0;
   if (($1 | 0) > ($3 | 0)) {
    break label$1
   }
   HEAP32[($0 + 8 | 0) >> 2] = $1;
   $2 = 0;
  }
  return $2 | 0;
 }
 
 function ogg_sync_pageseek($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $3 = 0, $4 = 0, $7 = 0, $6 = 0, $8 = 0, $2 = 0, $5 = 0, $14 = 0, $10 = 0, $15 = 0, $11 = 0, $16 = 0, $17 = 0, $18 = 0, i64toi32_i32$0 = 0, $9 = 0, $12 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  $3 = 0;
  label$1 : {
   if ((HEAP32[($0 + 4 | 0) >> 2] | 0 | 0) < (0 | 0)) {
    break label$1
   }
   $4 = HEAP32[($0 + 12 | 0) >> 2] | 0;
   $5 = (HEAP32[($0 + 8 | 0) >> 2] | 0) - $4 | 0;
   $4 = (HEAP32[$0 >> 2] | 0) + $4 | 0;
   label$2 : {
    label$3 : {
     label$4 : {
      $6 = HEAP32[($0 + 20 | 0) >> 2] | 0;
      if ($6) {
       break label$4
      }
      if (($5 | 0) < (27 | 0)) {
       break label$1
      }
      if ((HEAPU8[$4 >> 0] | 0 | ((HEAPU8[($4 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($4 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($4 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0 | 0) != (1399285583 | 0)) {
       break label$3
      }
      $7 = HEAPU8[($4 + 26 | 0) >> 0] | 0;
      $6 = $7 + 27 | 0;
      if (($5 | 0) < ($6 | 0)) {
       break label$1
      }
      label$5 : {
       if (!$7) {
        break label$5
       }
       $8 = HEAP32[($0 + 24 | 0) >> 2] | 0;
       $7 = 0;
       label$6 : while (1) {
        $8 = $8 + (HEAPU8[(($7 + $4 | 0) + 27 | 0) >> 0] | 0) | 0;
        HEAP32[($0 + 24 | 0) >> 2] = $8;
        $7 = $7 + 1 | 0;
        if ($7 >>> 0 < (HEAPU8[($4 + 26 | 0) >> 0] | 0) >>> 0) {
         continue label$6
        }
        break label$6;
       };
      }
      HEAP32[($0 + 20 | 0) >> 2] = $6;
     }
     if (($6 + (HEAP32[($0 + 24 | 0) >> 2] | 0) | 0 | 0) > ($5 | 0)) {
      break label$1
     }
     $9 = HEAPU8[($4 + 22 | 0) >> 0] | 0 | ((HEAPU8[($4 + 23 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($4 + 24 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($4 + 25 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
     HEAP32[($2 + 12 | 0) >> 2] = $9;
     $3 = 0;
     $14 = 0;
     HEAP8[($4 + 22 | 0) >> 0] = $14;
     HEAP8[($4 + 23 | 0) >> 0] = $14 >>> 8 | 0;
     HEAP8[($4 + 24 | 0) >> 0] = $14 >>> 16 | 0;
     HEAP8[($4 + 25 | 0) >> 0] = $14 >>> 24 | 0;
     $10 = HEAP32[($0 + 24 | 0) >> 2] | 0;
     $6 = HEAP32[($0 + 20 | 0) >> 2] | 0;
     $15 = 0;
     HEAP8[($4 + 22 | 0) >> 0] = $15;
     HEAP8[($4 + 23 | 0) >> 0] = $15 >>> 8 | 0;
     HEAP8[($4 + 24 | 0) >> 0] = $15 >>> 16 | 0;
     HEAP8[($4 + 25 | 0) >> 0] = $15 >>> 24 | 0;
     label$7 : {
      if (($6 | 0) < (1 | 0)) {
       break label$7
      }
      $11 = $6 & 1 | 0;
      label$8 : {
       label$9 : {
        if (($6 | 0) != (1 | 0)) {
         break label$9
        }
        $7 = 0;
        $3 = 0;
        break label$8;
       }
       $8 = $6 & -2 | 0;
       $7 = 0;
       $3 = 0;
       label$10 : while (1) {
        $3 = (HEAP32[(((($3 >>> 24 | 0) ^ (HEAPU8[($4 + $7 | 0) >> 0] | 0) | 0) << 2 | 0) + 6800 | 0) >> 2] | 0) ^ ($3 << 8 | 0) | 0;
        $3 = (HEAP32[(((($3 >>> 24 | 0) ^ (HEAPU8[($4 + ($7 | 1 | 0) | 0) >> 0] | 0) | 0) << 2 | 0) + 6800 | 0) >> 2] | 0) ^ ($3 << 8 | 0) | 0;
        $7 = $7 + 2 | 0;
        $8 = $8 + -2 | 0;
        if ($8) {
         continue label$10
        }
        break label$10;
       };
      }
      if (!$11) {
       break label$7
      }
      $3 = (HEAP32[(((($3 >>> 24 | 0) ^ (HEAPU8[($4 + $7 | 0) >> 0] | 0) | 0) << 2 | 0) + 6800 | 0) >> 2] | 0) ^ ($3 << 8 | 0) | 0;
     }
     $11 = $4 + 22 | 0;
     label$11 : {
      if (($10 | 0) < (1 | 0)) {
       break label$11
      }
      $12 = $10 & 1 | 0;
      label$12 : {
       label$13 : {
        if (($10 | 0) != (1 | 0)) {
         break label$13
        }
        $7 = 0;
        break label$12;
       }
       $8 = $10 & -2 | 0;
       $7 = 0;
       label$14 : while (1) {
        $3 = (HEAP32[(((($3 >>> 24 | 0) ^ (HEAPU8[($4 + ($7 + $6 | 0) | 0) >> 0] | 0) | 0) << 2 | 0) + 6800 | 0) >> 2] | 0) ^ ($3 << 8 | 0) | 0;
        $3 = (HEAP32[(((($3 >>> 24 | 0) ^ (HEAPU8[($4 + (($7 | 1 | 0) + $6 | 0) | 0) >> 0] | 0) | 0) << 2 | 0) + 6800 | 0) >> 2] | 0) ^ ($3 << 8 | 0) | 0;
        $7 = $7 + 2 | 0;
        $8 = $8 + -2 | 0;
        if ($8) {
         continue label$14
        }
        break label$14;
       };
      }
      if (!$12) {
       break label$11
      }
      $3 = (HEAP32[(((($3 >>> 24 | 0) ^ (HEAPU8[($4 + ($7 + $6 | 0) | 0) >> 0] | 0) | 0) << 2 | 0) + 6800 | 0) >> 2] | 0) ^ ($3 << 8 | 0) | 0;
     }
     HEAP8[($4 + 22 | 0) >> 0] = $3;
     HEAP8[($4 + 23 | 0) >> 0] = $3 >>> 8 | 0;
     HEAP8[($4 + 24 | 0) >> 0] = $3 >>> 16 | 0;
     HEAP8[($4 + 25 | 0) >> 0] = $3 >>> 24 | 0;
     $16 = $11;
     if ((HEAP32[($2 + 12 | 0) >> 2] | 0 | 0) == (HEAPU8[$16 >> 0] | 0 | ((HEAPU8[($16 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($16 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($16 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0 | 0)) {
      break label$2
     }
     $17 = $11;
     $18 = $9;
     HEAP8[$17 >> 0] = $18;
     HEAP8[($17 + 1 | 0) >> 0] = $18 >>> 8 | 0;
     HEAP8[($17 + 2 | 0) >> 0] = $18 >>> 16 | 0;
     HEAP8[($17 + 3 | 0) >> 0] = $18 >>> 24 | 0;
    }
    i64toi32_i32$0 = 0;
    HEAP32[($0 + 20 | 0) >> 2] = 0;
    HEAP32[($0 + 24 | 0) >> 2] = i64toi32_i32$0;
    $7 = HEAP32[$0 >> 2] | 0;
    label$15 : {
     $3 = memchr($4 + 1 | 0 | 0, 79 | 0, $5 + -1 | 0 | 0) | 0;
     if ($3) {
      break label$15
     }
     $3 = $7 + (HEAP32[($0 + 8 | 0) >> 2] | 0) | 0;
    }
    HEAP32[($0 + 12 | 0) >> 2] = $3 - $7 | 0;
    $3 = $4 - $3 | 0;
    break label$1;
   }
   $4 = HEAP32[($0 + 12 | 0) >> 2] | 0;
   label$16 : {
    label$17 : {
     if ($1) {
      break label$17
     }
     $7 = HEAP32[($0 + 24 | 0) >> 2] | 0;
     $3 = HEAP32[($0 + 20 | 0) >> 2] | 0;
     break label$16;
    }
    $7 = (HEAP32[$0 >> 2] | 0) + $4 | 0;
    HEAP32[$1 >> 2] = $7;
    $3 = HEAP32[($0 + 20 | 0) >> 2] | 0;
    HEAP32[($1 + 4 | 0) >> 2] = $3;
    HEAP32[($1 + 8 | 0) >> 2] = $7 + $3 | 0;
    $7 = HEAP32[($0 + 24 | 0) >> 2] | 0;
    HEAP32[($1 + 12 | 0) >> 2] = $7;
   }
   HEAP32[($0 + 24 | 0) >> 2] = 0;
   i64toi32_i32$0 = 0;
   HEAP32[($0 + 16 | 0) >> 2] = 0;
   HEAP32[($0 + 20 | 0) >> 2] = i64toi32_i32$0;
   $3 = $7 + $3 | 0;
   HEAP32[($0 + 12 | 0) >> 2] = $3 + $4 | 0;
  }
  __stack_pointer = $2 + 16 | 0;
  return $3 | 0;
 }
 
 function ogg_sync_pageout($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = 0;
  label$1 : {
   if ((HEAP32[($0 + 4 | 0) >> 2] | 0 | 0) < (0 | 0)) {
    break label$1
   }
   label$2 : while (1) {
    label$3 : {
     $2 = ogg_sync_pageseek($0 | 0, $1 | 0) | 0;
     if (($2 | 0) <= (0 | 0)) {
      break label$3
     }
     return 1 | 0;
    }
    label$4 : {
     if ($2) {
      break label$4
     }
     return 0 | 0;
    }
    if (HEAP32[($0 + 16 | 0) >> 2] | 0) {
     continue label$2
    }
    break label$2;
   };
   HEAP32[($0 + 16 | 0) >> 2] = 1;
   $2 = -1;
  }
  return $2 | 0;
 }
 
 function ogg_stream_pagein($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $3 = 0, $13 = 0, $4 = 0, $2 = 0, $10 = 0, i64toi32_i32$0 = 0, $14 = 0, $6 = 0, $12 = 0, i64toi32_i32$1 = 0, $8 = 0, $7 = 0, $5 = 0, $15 = 0, $9 = 0, $16 = 0, $11 = 0, $11$hi = 0, $17 = 0;
  $2 = -1;
  label$1 : {
   if (!$0) {
    break label$1
   }
   $3 = HEAP32[$0 >> 2] | 0;
   if (!$3) {
    break label$1
   }
   $4 = HEAP32[$1 >> 2] | 0;
   $5 = HEAPU8[($4 + 5 | 0) >> 0] | 0;
   $6 = HEAP32[($1 + 12 | 0) >> 2] | 0;
   $7 = HEAP32[($1 + 8 | 0) >> 2] | 0;
   $8 = HEAPU8[($4 + 26 | 0) >> 0] | 0;
   $9 = HEAPU8[($4 + 18 | 0) >> 0] | 0 | ((HEAPU8[($4 + 19 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($4 + 20 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($4 + 21 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
   $10 = HEAPU8[($4 + 14 | 0) >> 0] | 0 | ((HEAPU8[($4 + 15 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($4 + 16 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($4 + 17 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
   i64toi32_i32$0 = HEAPU8[($4 + 6 | 0) >> 0] | 0 | ((HEAPU8[($4 + 7 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($4 + 8 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($4 + 9 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
   i64toi32_i32$1 = HEAPU8[($4 + 10 | 0) >> 0] | 0 | ((HEAPU8[($4 + 11 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($4 + 12 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($4 + 13 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
   $11 = i64toi32_i32$0;
   $11$hi = i64toi32_i32$1;
   $12 = HEAPU8[($4 + 4 | 0) >> 0] | 0;
   $1 = HEAP32[($0 + 36 | 0) >> 2] | 0;
   label$2 : {
    $13 = HEAP32[($0 + 12 | 0) >> 2] | 0;
    if (!$13) {
     break label$2
    }
    $14 = (HEAP32[($0 + 8 | 0) >> 2] | 0) - $13 | 0;
    HEAP32[($0 + 8 | 0) >> 2] = $14;
    label$3 : {
     if (!$14) {
      break label$3
     }
     memmove($3 | 0, $3 + $13 | 0 | 0, $14 | 0) | 0;
    }
    HEAP32[($0 + 12 | 0) >> 2] = 0;
   }
   label$4 : {
    if (!$1) {
     break label$4
    }
    $3 = 0;
    label$5 : {
     $13 = (HEAP32[($0 + 28 | 0) >> 2] | 0) - $1 | 0;
     if (!$13) {
      break label$5
     }
     $3 = HEAP32[($0 + 16 | 0) >> 2] | 0;
     memmove($3 | 0, $3 + ($1 << 2 | 0) | 0 | 0, $13 << 2 | 0 | 0) | 0;
     $3 = HEAP32[($0 + 20 | 0) >> 2] | 0;
     memmove($3 | 0, $3 + ($1 << 3 | 0) | 0 | 0, ((HEAP32[($0 + 28 | 0) >> 2] | 0) - $1 | 0) << 3 | 0 | 0) | 0;
     $3 = (HEAP32[($0 + 28 | 0) >> 2] | 0) - $1 | 0;
    }
    HEAP32[($0 + 28 | 0) >> 2] = $3;
    HEAP32[($0 + 36 | 0) >> 2] = 0;
    HEAP32[($0 + 32 | 0) >> 2] = (HEAP32[($0 + 32 | 0) >> 2] | 0) - $1 | 0;
   }
   if (($10 | 0) != (HEAP32[($0 + 336 | 0) >> 2] | 0 | 0)) {
    break label$1
   }
   if ($12 & 255 | 0) {
    break label$1
   }
   if (_os_lacing_expand($0 | 0, $8 + 1 | 0 | 0) | 0) {
    break label$1
   }
   $15 = $5 & 1 | 0;
   label$6 : {
    $16 = HEAP32[($0 + 340 | 0) >> 2] | 0;
    if (($9 | 0) == ($16 | 0)) {
     break label$6
    }
    label$7 : {
     $12 = HEAP32[($0 + 28 | 0) >> 2] | 0;
     $14 = HEAP32[($0 + 32 | 0) >> 2] | 0;
     if (($12 | 0) <= ($14 | 0)) {
      break label$7
     }
     $17 = $12 + ($14 ^ -1 | 0) | 0;
     $1 = HEAP32[($0 + 8 | 0) >> 2] | 0;
     $10 = HEAP32[($0 + 16 | 0) >> 2] | 0;
     label$8 : {
      label$9 : {
       $13 = ($12 - $14 | 0) & 3 | 0;
       if ($13) {
        break label$9
       }
       $2 = $14;
       break label$8;
      }
      $3 = $14;
      label$10 : while (1) {
       $1 = $1 - (HEAPU8[($10 + ($3 << 2 | 0) | 0) >> 0] | 0) | 0;
       $2 = $3 + 1 | 0;
       $3 = $2;
       $13 = $13 + -1 | 0;
       if ($13) {
        continue label$10
       }
       break label$10;
      };
     }
     label$11 : {
      if ($17 >>> 0 < 3 >>> 0) {
       break label$11
      }
      label$12 : while (1) {
       $3 = $10 + ($2 << 2 | 0) | 0;
       $1 = $1 - ((((HEAPU8[$3 >> 0] | 0) + (HEAPU8[($3 + 4 | 0) >> 0] | 0) | 0) + (HEAPU8[($3 + 8 | 0) >> 0] | 0) | 0) + (HEAPU8[($3 + 12 | 0) >> 0] | 0) | 0) | 0;
       $2 = $2 + 4 | 0;
       if (($2 | 0) != ($12 | 0)) {
        continue label$12
       }
       break label$12;
      };
     }
     HEAP32[($0 + 8 | 0) >> 2] = $1;
    }
    HEAP32[($0 + 28 | 0) >> 2] = $14;
    if (($16 | 0) == (-1 | 0)) {
     break label$6
    }
    $1 = $14 + 1 | 0;
    HEAP32[($0 + 28 | 0) >> 2] = $1;
    HEAP32[((HEAP32[($0 + 16 | 0) >> 2] | 0) + ($14 << 2 | 0) | 0) >> 2] = 1024;
    HEAP32[($0 + 32 | 0) >> 2] = $1;
   }
   $1 = $5 & 2 | 0;
   $2 = 0;
   label$13 : {
    if (!$15) {
     break label$13
    }
    label$14 : {
     $3 = HEAP32[($0 + 28 | 0) >> 2] | 0;
     if (($3 | 0) < (1 | 0)) {
      break label$14
     }
     if ((HEAP32[((($3 << 2 | 0) + (HEAP32[($0 + 16 | 0) >> 2] | 0) | 0) + -4 | 0) >> 2] | 0 | 0) != (1024 | 0)) {
      break label$13
     }
    }
    $1 = 0;
    label$15 : {
     if ($8) {
      break label$15
     }
     $2 = 0;
     break label$13;
    }
    label$16 : while (1) {
     $2 = $1 + 1 | 0;
     $1 = HEAPU8[(($1 + $4 | 0) + 27 | 0) >> 0] | 0;
     $6 = $6 - $1 | 0;
     $7 = $7 + $1 | 0;
     label$17 : {
      if (($1 | 0) == (255 | 0)) {
       break label$17
      }
      $1 = 0;
      break label$13;
     }
     $1 = $2;
     if (($1 | 0) != ($8 | 0)) {
      continue label$16
     }
     break label$16;
    };
    $1 = 0;
    $2 = $8;
   }
   label$18 : {
    if (!$6) {
     break label$18
    }
    label$19 : {
     label$20 : {
      $13 = HEAP32[($0 + 4 | 0) >> 2] | 0;
      $3 = HEAP32[($0 + 8 | 0) >> 2] | 0;
      if (($13 - $6 | 0 | 0) <= ($3 | 0)) {
       break label$20
      }
      $13 = HEAP32[$0 >> 2] | 0;
      break label$19;
     }
     label$21 : {
      if (($13 | 0) <= (2147483647 - $6 | 0 | 0)) {
       break label$21
      }
      ogg_stream_clear($0 | 0) | 0;
      return -1 | 0;
     }
     label$22 : {
      $3 = $13 + $6 | 0;
      $3 = ($3 | 0) < (2147482623 | 0) ? $3 + 1024 | 0 : $3;
      $13 = dlrealloc(HEAP32[$0 >> 2] | 0 | 0, $3 | 0) | 0;
      if ($13) {
       break label$22
      }
      ogg_stream_clear($0 | 0) | 0;
      return -1 | 0;
     }
     HEAP32[$0 >> 2] = $13;
     HEAP32[($0 + 4 | 0) >> 2] = $3;
     $3 = HEAP32[($0 + 8 | 0) >> 2] | 0;
    }
    __memcpy($13 + $3 | 0 | 0, $7 | 0, $6 | 0) | 0;
    HEAP32[($0 + 8 | 0) >> 2] = (HEAP32[($0 + 8 | 0) >> 2] | 0) + $6 | 0;
   }
   $14 = $5 & 4 | 0;
   label$23 : {
    if (($2 | 0) >= ($8 | 0)) {
     break label$23
    }
    $6 = HEAP32[($0 + 20 | 0) >> 2] | 0;
    $7 = HEAP32[($0 + 16 | 0) >> 2] | 0;
    $13 = HEAP32[($0 + 28 | 0) >> 2] | 0;
    $10 = $7 + ($13 << 2 | 0) | 0;
    $5 = $2 + $4 | 0;
    $3 = HEAPU8[($5 + 27 | 0) >> 0] | 0;
    HEAP32[$10 >> 2] = $3;
    i64toi32_i32$0 = $6 + ($13 << 3 | 0) | 0;
    i64toi32_i32$1 = -1;
    HEAP32[i64toi32_i32$0 >> 2] = -1;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    label$24 : {
     if (!$1) {
      break label$24
     }
     HEAP32[$10 >> 2] = $3 | 256 | 0;
    }
    $10 = $13 + 1 | 0;
    HEAP32[($0 + 28 | 0) >> 2] = $10;
    label$25 : {
     label$26 : {
      if (($3 | 0) != (255 | 0)) {
       break label$26
      }
      $12 = -1;
      break label$25;
     }
     HEAP32[($0 + 32 | 0) >> 2] = $10;
     $12 = $13;
    }
    label$27 : {
     $3 = $2 + 1 | 0;
     if (($3 | 0) == ($8 | 0)) {
      break label$27
     }
     $15 = $8 + -2 | 0;
     label$28 : {
      label$29 : {
       if ((($2 ^ -1 | 0) + $8 | 0) & 1 | 0) {
        break label$29
       }
       $1 = $10;
       break label$28;
      }
      $3 = HEAPU8[($5 + 28 | 0) >> 0] | 0;
      HEAP32[($7 + ($10 << 2 | 0) | 0) >> 2] = $3;
      i64toi32_i32$0 = $6 + ($10 << 3 | 0) | 0;
      i64toi32_i32$1 = -1;
      HEAP32[i64toi32_i32$0 >> 2] = -1;
      HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
      $1 = $13 + 2 | 0;
      HEAP32[($0 + 28 | 0) >> 2] = $1;
      label$30 : {
       if (($3 | 0) == (255 | 0)) {
        break label$30
       }
       HEAP32[($0 + 32 | 0) >> 2] = $1;
       $12 = $10;
      }
      $3 = $2 + 2 | 0;
     }
     if (($15 | 0) == ($2 | 0)) {
      break label$27
     }
     label$31 : while (1) {
      $13 = $3 + $4 | 0;
      $10 = HEAPU8[($13 + 27 | 0) >> 0] | 0;
      HEAP32[($7 + ($1 << 2 | 0) | 0) >> 2] = $10;
      i64toi32_i32$0 = $6 + ($1 << 3 | 0) | 0;
      i64toi32_i32$1 = -1;
      HEAP32[i64toi32_i32$0 >> 2] = -1;
      HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
      $2 = $1 + 1 | 0;
      HEAP32[($0 + 28 | 0) >> 2] = $2;
      label$32 : {
       if (($10 | 0) == (255 | 0)) {
        break label$32
       }
       HEAP32[($0 + 32 | 0) >> 2] = $2;
       $12 = $1;
      }
      $13 = HEAPU8[($13 + 28 | 0) >> 0] | 0;
      HEAP32[($7 + ($2 << 2 | 0) | 0) >> 2] = $13;
      i64toi32_i32$0 = $6 + ($2 << 3 | 0) | 0;
      i64toi32_i32$1 = -1;
      HEAP32[i64toi32_i32$0 >> 2] = -1;
      HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
      $1 = $1 + 2 | 0;
      HEAP32[($0 + 28 | 0) >> 2] = $1;
      label$33 : {
       if (($13 | 0) == (255 | 0)) {
        break label$33
       }
       HEAP32[($0 + 32 | 0) >> 2] = $1;
       $12 = $2;
      }
      $3 = $3 + 2 | 0;
      if (($3 | 0) != ($8 | 0)) {
       continue label$31
      }
      break label$31;
     };
    }
    if (($12 | 0) == (-1 | 0)) {
     break label$23
    }
    i64toi32_i32$1 = $11$hi;
    i64toi32_i32$0 = (HEAP32[($0 + 20 | 0) >> 2] | 0) + ($12 << 3 | 0) | 0;
    HEAP32[i64toi32_i32$0 >> 2] = $11;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   }
   label$34 : {
    if (!$14) {
     break label$34
    }
    HEAP32[($0 + 328 | 0) >> 2] = 1;
    $4 = HEAP32[($0 + 28 | 0) >> 2] | 0;
    if (($4 | 0) < (1 | 0)) {
     break label$34
    }
    $4 = (($4 << 2 | 0) + (HEAP32[($0 + 16 | 0) >> 2] | 0) | 0) + -4 | 0;
    HEAP32[$4 >> 2] = HEAP32[$4 >> 2] | 0 | 512 | 0;
   }
   HEAP32[($0 + 340 | 0) >> 2] = $9 + 1 | 0;
   $2 = 0;
  }
  return $2 | 0;
 }
 
 function ogg_sync_reset($0) {
  $0 = $0 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0;
  label$1 : {
   if ((HEAP32[($0 + 4 | 0) >> 2] | 0 | 0) >= (0 | 0)) {
    break label$1
   }
   return -1 | 0;
  }
  i64toi32_i32$1 = $0;
  i64toi32_i32$0 = 0;
  HEAP32[($0 + 8 | 0) >> 2] = 0;
  HEAP32[($0 + 12 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0 + 24 | 0) >> 2] = 0;
  i64toi32_i32$1 = $0 + 16 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  return 0 | 0;
 }
 
 function ogg_stream_reset($0) {
  $0 = $0 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $1 = 0;
  $1 = -1;
  label$1 : {
   if (!$0) {
    break label$1
   }
   if (!(HEAP32[$0 >> 2] | 0)) {
    break label$1
   }
   i64toi32_i32$1 = $0;
   i64toi32_i32$0 = 0;
   HEAP32[($0 + 344 | 0) >> 2] = 0;
   HEAP32[($0 + 348 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[($0 + 340 | 0) >> 2] = -1;
   $1 = 0;
   HEAP32[($0 + 332 | 0) >> 2] = 0;
   i64toi32_i32$1 = $0;
   i64toi32_i32$0 = 0;
   HEAP32[($0 + 324 | 0) >> 2] = 0;
   HEAP32[($0 + 328 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[($0 + 36 | 0) >> 2] = 0;
   i64toi32_i32$1 = $0;
   i64toi32_i32$0 = 0;
   HEAP32[($0 + 28 | 0) >> 2] = 0;
   HEAP32[($0 + 32 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $0;
   i64toi32_i32$0 = 0;
   HEAP32[($0 + 8 | 0) >> 2] = 0;
   HEAP32[($0 + 12 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $0 + 352 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  }
  return $1 | 0;
 }
 
 function ogg_stream_packetout($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var i64toi32_i32$0 = 0, $2 = 0, i64toi32_i32$2 = 0, $8 = 0, $4 = 0, $7 = 0, i64toi32_i32$1 = 0, $6 = 0, i64toi32_i32$5 = 0, $3 = 0, $5 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, $72 = 0, $82 = 0, $90 = 0;
  $2 = 0;
  label$1 : {
   if (!$0) {
    break label$1
   }
   $3 = HEAP32[$0 >> 2] | 0;
   if (!$3) {
    break label$1
   }
   $4 = HEAP32[($0 + 36 | 0) >> 2] | 0;
   if ((HEAP32[($0 + 32 | 0) >> 2] | 0 | 0) <= ($4 | 0)) {
    break label$1
   }
   $2 = -1;
   label$2 : {
    $5 = HEAP32[($0 + 16 | 0) >> 2] | 0;
    $6 = HEAP32[($5 + ($4 << 2 | 0) | 0) >> 2] | 0;
    if ($6 & 1024 | 0) {
     break label$2
    }
    $7 = $6 & 512 | 0;
    $2 = 255;
    label$3 : {
     label$4 : {
      $8 = $6 & 255 | 0;
      if (($8 | 0) == (255 | 0)) {
       break label$4
      }
      $2 = $8;
      break label$3;
     }
     label$5 : while (1) {
      $4 = $4 + 1 | 0;
      $8 = HEAP32[($5 + ($4 << 2 | 0) | 0) >> 2] | 0;
      $7 = $8 & 512 | 0 ? 512 : $7;
      $8 = $8 & 255 | 0;
      $2 = $8 + $2 | 0;
      if (($8 | 0) == (255 | 0)) {
       continue label$5
      }
      break label$5;
     };
    }
    label$6 : {
     label$7 : {
      if ($1) {
       break label$7
      }
      $7 = HEAP32[($0 + 12 | 0) >> 2] | 0;
      break label$6;
     }
     HEAP32[($1 + 8 | 0) >> 2] = $6 & 256 | 0;
     HEAP32[($1 + 12 | 0) >> 2] = $7;
     $7 = HEAP32[($0 + 12 | 0) >> 2] | 0;
     HEAP32[$1 >> 2] = $3 + $7 | 0;
     i64toi32_i32$2 = $0;
     i64toi32_i32$0 = HEAP32[($0 + 344 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[($0 + 348 | 0) >> 2] | 0;
     $72 = i64toi32_i32$0;
     i64toi32_i32$0 = $1;
     HEAP32[(i64toi32_i32$0 + 24 | 0) >> 2] = $72;
     HEAP32[(i64toi32_i32$0 + 28 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$2 = (HEAP32[($0 + 20 | 0) >> 2] | 0) + ($4 << 3 | 0) | 0;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     HEAP32[($1 + 4 | 0) >> 2] = $2;
     $82 = i64toi32_i32$1;
     i64toi32_i32$1 = $1;
     HEAP32[($1 + 16 | 0) >> 2] = $82;
     HEAP32[($1 + 20 | 0) >> 2] = i64toi32_i32$0;
    }
    HEAP32[($0 + 12 | 0) >> 2] = $7 + $2 | 0;
    $2 = 1;
   }
   HEAP32[($0 + 36 | 0) >> 2] = $4 + 1 | 0;
   $90 = $0;
   i64toi32_i32$2 = $0;
   i64toi32_i32$0 = HEAP32[($0 + 344 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($0 + 348 | 0) >> 2] | 0;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$3 = 1;
   i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
   i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
   if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   i64toi32_i32$2 = $90;
   HEAP32[(i64toi32_i32$2 + 344 | 0) >> 2] = i64toi32_i32$4;
   HEAP32[(i64toi32_i32$2 + 348 | 0) >> 2] = i64toi32_i32$5;
  }
  return $2 | 0;
 }
 
 function FLAC__ogg_decoder_aspect_init($0) {
  $0 = $0 | 0;
  var i64toi32_i32$0 = 0, $1 = 0;
  $1 = 0;
  label$1 : {
   if (ogg_stream_init($0 + 8 | 0 | 0, HEAP32[($0 + 4 | 0) >> 2] | 0 | 0) | 0) {
    break label$1
   }
   if (ogg_sync_init($0 + 368 | 0 | 0) | 0) {
    break label$1
   }
   i64toi32_i32$0 = -1;
   HEAP32[($0 + 396 | 0) >> 2] = -1;
   HEAP32[($0 + 400 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   HEAP32[($0 + 408 | 0) >> 2] = 0;
   HEAP32[($0 + 412 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[($0 + 404 | 0) >> 2] = HEAP32[$0 >> 2] | 0;
   $1 = 1;
  }
  return $1 | 0;
 }
 
 function FLAC__ogg_decoder_aspect_finish($0) {
  $0 = $0 | 0;
  ogg_sync_clear($0 + 368 | 0 | 0) | 0;
  ogg_stream_clear($0 + 8 | 0 | 0) | 0;
 }
 
 function FLAC__ogg_decoder_aspect_set_serial_number($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  HEAP32[($0 + 4 | 0) >> 2] = $1;
  HEAP32[$0 >> 2] = 0;
 }
 
 function FLAC__ogg_decoder_aspect_set_defaults($0) {
  $0 = $0 | 0;
  HEAP32[$0 >> 2] = 1;
 }
 
 function FLAC__ogg_decoder_aspect_flush($0) {
  $0 = $0 | 0;
  ogg_stream_reset($0 + 8 | 0 | 0) | 0;
  ogg_sync_reset($0 + 368 | 0 | 0) | 0;
  HEAP32[($0 + 408 | 0) >> 2] = 0;
  HEAP32[($0 + 412 | 0) >> 2] = 0;
 }
 
 function FLAC__ogg_decoder_aspect_reset($0) {
  $0 = $0 | 0;
  ogg_stream_reset($0 + 8 | 0 | 0) | 0;
  ogg_sync_reset($0 + 368 | 0 | 0) | 0;
  HEAP32[($0 + 408 | 0) >> 2] = 0;
  HEAP32[($0 + 412 | 0) >> 2] = 0;
  label$1 : {
   if (!(HEAP32[$0 >> 2] | 0)) {
    break label$1
   }
   HEAP32[($0 + 404 | 0) >> 2] = 1;
  }
 }
 
 function FLAC__ogg_decoder_aspect_read_callback_wrapper($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var $10 = 0, $8 = 0, $9 = 0, $6 = 0, $7 = 0, $17 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
  $6 = __stack_pointer - 16 | 0;
  __stack_pointer = $6;
  $7 = HEAP32[$2 >> 2] | 0;
  HEAP32[$2 >> 2] = 0;
  $8 = GOT_data_internal_FLAC__OGG_MAPPING_MAGIC;
  $9 = GOT_data_internal_FLAC__OGG_MAPPING_FIRST_HEADER_PACKET_TYPE;
  $10 = 0;
  label$1 : {
   label$2 : {
    if (!$7) {
     break label$2
    }
    $11 = $0 + 416 | 0;
    $12 = $0 + 368 | 0;
    $13 = $0 + 8 | 0;
    $14 = $0 + 440 | 0;
    $15 = HEAP32[$8 >> 2] | 0;
    $16 = (HEAPU8[$9 >> 0] | 0) & 255 | 0;
    $10 = 0;
    label$3 : while (1) {
     if (HEAP32[($0 + 408 | 0) >> 2] | 0) {
      break label$2
     }
     label$4 : {
      label$5 : {
       label$6 : {
        if (!(HEAP32[($0 + 412 | 0) >> 2] | 0)) {
         break label$6
        }
        label$7 : {
         if (!(HEAP32[($0 + 432 | 0) >> 2] | 0)) {
          break label$7
         }
         $9 = HEAP32[($0 + 440 | 0) >> 2] | 0;
         $8 = HEAP32[($0 + 444 | 0) >> 2] | 0;
         $10 = $7 - $10 | 0;
         if ($8 >>> 0 > $10 >>> 0) {
          break label$5
         }
         $10 = __memcpy($1 | 0, $9 | 0, $8 | 0) | 0;
         HEAP32[$2 >> 2] = (HEAP32[$2 >> 2] | 0) + $8 | 0;
         HEAP32[($0 + 432 | 0) >> 2] = 0;
         $1 = $10 + $8 | 0;
         break label$4;
        }
        label$8 : {
         $10 = ogg_stream_packetout($13 | 0, $14 | 0) | 0;
         if (($10 | 0) < (1 | 0)) {
          break label$8
         }
         HEAP32[($0 + 432 | 0) >> 2] = 1;
         $9 = HEAP32[($0 + 444 | 0) >> 2] | 0;
         if (($9 | 0) < (1 | 0)) {
          break label$4
         }
         $8 = HEAP32[$14 >> 2] | 0;
         if ((HEAPU8[$8 >> 0] | 0 | 0) != ($16 | 0)) {
          break label$4
         }
         $10 = 3;
         if (($9 | 0) < (9 | 0)) {
          break label$1
         }
         $17 = $15;
         if ((HEAPU8[($8 + 1 | 0) >> 0] | 0 | ((HEAPU8[($8 + 2 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($8 + 3 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($8 + 4 | 0) >> 0] | 0) << 24 | 0) | 0) | 0 | 0) != (HEAPU8[$17 >> 0] | 0 | ((HEAPU8[($17 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($17 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($17 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0 | 0)) {
          break label$1
         }
         $10 = HEAPU8[($8 + 5 | 0) >> 0] | 0;
         HEAP32[($0 + 396 | 0) >> 2] = $10;
         HEAP32[($0 + 400 | 0) >> 2] = HEAPU8[($8 + 6 | 0) >> 0] | 0;
         label$9 : {
          if (($10 | 0) == (1 | 0)) {
           break label$9
          }
          $10 = 4;
          break label$1;
         }
         HEAP32[($0 + 444 | 0) >> 2] = $9 + -9 | 0;
         HEAP32[($0 + 440 | 0) >> 2] = $8 + 9 | 0;
         break label$4;
        }
        label$10 : {
         if (!$10) {
          break label$10
         }
         $10 = 2;
         break label$1;
        }
        HEAP32[($0 + 412 | 0) >> 2] = 0;
        break label$4;
       }
       label$11 : {
        $10 = ogg_sync_pageout($12 | 0, $11 | 0) | 0;
        if (($10 | 0) < (1 | 0)) {
         break label$11
        }
        label$12 : {
         if (!(HEAP32[($0 + 404 | 0) >> 2] | 0)) {
          break label$12
         }
         $10 = ogg_page_serialno($11 | 0) | 0;
         HEAP32[($0 + 404 | 0) >> 2] = 0;
         HEAP32[($0 + 344 | 0) >> 2] = $10;
         HEAP32[($0 + 4 | 0) >> 2] = $10;
        }
        if (ogg_stream_pagein($13 | 0, $11 | 0) | 0) {
         break label$4
        }
        HEAP32[($0 + 432 | 0) >> 2] = 0;
        HEAP32[($0 + 412 | 0) >> 2] = 1;
        break label$4;
       }
       label$13 : {
        if (!$10) {
         break label$13
        }
        $10 = 2;
        break label$1;
       }
       label$14 : {
        $10 = $7 - (HEAP32[$2 >> 2] | 0) | 0;
        $10 = $10 >>> 0 > 8192 >>> 0 ? $10 : 8192;
        $8 = ogg_sync_buffer($12 | 0, $10 | 0) | 0;
        if ($8) {
         break label$14
        }
        $10 = 7;
        break label$1;
       }
       HEAP32[($6 + 12 | 0) >> 2] = $10;
       label$15 : {
        switch ((FUNCTION_TABLE[$3 | 0]($4, $8, $6 + 12 | 0, $5) | 0) + -1 | 0 | 0) {
        case 4:
         $10 = 5;
         break label$1;
        case 0:
         HEAP32[($0 + 408 | 0) >> 2] = 1;
         break;
        default:
         break label$15;
        };
       }
       if ((ogg_sync_wrote($12 | 0, HEAP32[($6 + 12 | 0) >> 2] | 0 | 0) | 0 | 0) >= (0 | 0)) {
        break label$4
       }
       $10 = 6;
       break label$1;
      }
      $8 = __memcpy($1 | 0, $9 | 0, $10 | 0) | 0;
      HEAP32[$2 >> 2] = (HEAP32[$2 >> 2] | 0) + $10 | 0;
      HEAP32[($0 + 440 | 0) >> 2] = (HEAP32[($0 + 440 | 0) >> 2] | 0) + $10 | 0;
      HEAP32[($0 + 444 | 0) >> 2] = (HEAP32[($0 + 444 | 0) >> 2] | 0) - $10 | 0;
      $1 = $8 + $10 | 0;
     }
     $10 = HEAP32[$2 >> 2] | 0;
     if ($7 >>> 0 > $10 >>> 0) {
      continue label$3
     }
     break label$3;
    };
   }
   $10 = (HEAP32[($0 + 408 | 0) >> 2] | 0 | 0) != (0 | 0) & !$10 | 0;
  }
  __stack_pointer = $6 + 16 | 0;
  return $10 | 0;
 }
 
 function FLAC__MD5Init($0) {
  $0 = $0 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0;
  i64toi32_i32$1 = $0;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 80 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 84 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = -271733879;
  HEAP32[(i64toi32_i32$1 + 64 | 0) >> 2] = 1732584193;
  HEAP32[(i64toi32_i32$1 + 68 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = i64toi32_i32$1 + 72 | 0;
  i64toi32_i32$0 = 271733878;
  HEAP32[i64toi32_i32$1 >> 2] = -1732584194;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 88 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
 }
 
 function FLAC__MD5Final($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $2 = 0, $3 = 0, $10 = 0, $11 = 0, $4 = 0, $49 = 0, $52 = 0;
  $2 = (HEAP32[($1 + 80 | 0) >> 2] | 0) & 63 | 0;
  $3 = $1 + $2 | 0;
  HEAP8[$3 >> 0] = 128;
  $3 = $3 + 1 | 0;
  $4 = 56;
  label$1 : {
   label$2 : {
    if ($2 >>> 0 >= 56 >>> 0) {
     break label$2
    }
    $4 = 55 - $2 | 0;
    break label$1;
   }
   memset($3 | 0, 0 | 0, $2 ^ 63 | 0 | 0) | 0;
   FLAC__MD5Transform($1 + 64 | 0 | 0, $1 | 0);
   $3 = $1;
  }
  memset($3 | 0, 0 | 0, $4 | 0) | 0;
  $2 = HEAP32[($1 + 80 | 0) >> 2] | 0;
  HEAP32[($1 + 56 | 0) >> 2] = $2 << 3 | 0;
  HEAP32[($1 + 60 | 0) >> 2] = (HEAP32[($1 + 84 | 0) >> 2] | 0) << 3 | 0 | ($2 >>> 29 | 0) | 0;
  FLAC__MD5Transform($1 + 64 | 0 | 0, $1 | 0);
  i64toi32_i32$2 = $1 + 72 | 0;
  i64toi32_i32$0 = HEAPU8[i64toi32_i32$2 >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
  i64toi32_i32$1 = HEAPU8[(i64toi32_i32$2 + 4 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 5 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 6 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 7 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
  $49 = i64toi32_i32$0;
  i64toi32_i32$0 = $0 + 8 | 0;
  $10 = $49;
  HEAP8[i64toi32_i32$0 >> 0] = $10;
  HEAP8[(i64toi32_i32$0 + 1 | 0) >> 0] = $10 >>> 8 | 0;
  HEAP8[(i64toi32_i32$0 + 2 | 0) >> 0] = $10 >>> 16 | 0;
  HEAP8[(i64toi32_i32$0 + 3 | 0) >> 0] = $10 >>> 24 | 0;
  HEAP8[(i64toi32_i32$0 + 4 | 0) >> 0] = i64toi32_i32$1;
  HEAP8[(i64toi32_i32$0 + 5 | 0) >> 0] = i64toi32_i32$1 >>> 8 | 0;
  HEAP8[(i64toi32_i32$0 + 6 | 0) >> 0] = i64toi32_i32$1 >>> 16 | 0;
  HEAP8[(i64toi32_i32$0 + 7 | 0) >> 0] = i64toi32_i32$1 >>> 24 | 0;
  i64toi32_i32$2 = $1;
  i64toi32_i32$1 = HEAPU8[($1 + 64 | 0) >> 0] | 0 | ((HEAPU8[($1 + 65 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($1 + 66 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($1 + 67 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
  i64toi32_i32$0 = HEAPU8[($1 + 68 | 0) >> 0] | 0 | ((HEAPU8[($1 + 69 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($1 + 70 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($1 + 71 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
  $52 = i64toi32_i32$1;
  i64toi32_i32$1 = $0;
  $11 = $52;
  HEAP8[i64toi32_i32$1 >> 0] = $11;
  HEAP8[(i64toi32_i32$1 + 1 | 0) >> 0] = $11 >>> 8 | 0;
  HEAP8[(i64toi32_i32$1 + 2 | 0) >> 0] = $11 >>> 16 | 0;
  HEAP8[(i64toi32_i32$1 + 3 | 0) >> 0] = $11 >>> 24 | 0;
  HEAP8[(i64toi32_i32$1 + 4 | 0) >> 0] = i64toi32_i32$0;
  HEAP8[(i64toi32_i32$1 + 5 | 0) >> 0] = i64toi32_i32$0 >>> 8 | 0;
  HEAP8[(i64toi32_i32$1 + 6 | 0) >> 0] = i64toi32_i32$0 >>> 16 | 0;
  HEAP8[(i64toi32_i32$1 + 7 | 0) >> 0] = i64toi32_i32$0 >>> 24 | 0;
  label$3 : {
   $0 = HEAP32[($1 + 88 | 0) >> 2] | 0;
   if (!$0) {
    break label$3
   }
   dlfree($0 | 0);
  }
  memset($1 | 0, 0 | 0, 96 | 0) | 0;
 }
 
 function FLAC__MD5Transform($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $14 = 0, $17 = 0, $18 = 0, $19 = 0, $13 = 0, $12 = 0, $26 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $11 = 0, $15 = 0, $16 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $10 = 0, $83 = 0, $88 = 0, $93 = 0, $146 = 0, $151 = 0, $156 = 0, $209 = 0, $214 = 0, $219 = 0, $272 = 0, $277 = 0, $282 = 0, $335 = 0, $338 = 0, $341 = 0, $394 = 0, $397 = 0, $400 = 0, $453 = 0, $456 = 0, $459 = 0, $512 = 0, $515 = 0, $546 = 0, $568 = 0, $571 = 0, $574 = 0, $597 = 0, $619 = 0, $622 = 0, $625 = 0, $648 = 0, $670 = 0, $673 = 0, $676 = 0, $699 = 0, $721 = 0, $724 = 0, $740 = 0, $773 = 0, $776 = 0, $779 = 0, $828 = 0, $831 = 0, $834 = 0, $883 = 0, $886 = 0, $889 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $2 = HEAP32[($1 + 16 | 0) >> 2] | 0;
  $3 = HEAP32[($1 + 32 | 0) >> 2] | 0;
  $4 = HEAP32[($1 + 48 | 0) >> 2] | 0;
  $5 = HEAP32[$1 >> 2] | 0;
  $6 = HEAP32[($1 + 36 | 0) >> 2] | 0;
  $7 = HEAP32[($1 + 52 | 0) >> 2] | 0;
  $8 = HEAP32[($1 + 4 | 0) >> 2] | 0;
  $9 = HEAP32[($1 + 20 | 0) >> 2] | 0;
  $10 = HEAP32[$0 >> 2] | 0;
  $11 = HEAP32[($0 + 12 | 0) >> 2] | 0;
  $12 = HEAP32[($0 + 8 | 0) >> 2] | 0;
  $13 = HEAP32[($0 + 4 | 0) >> 2] | 0;
  $14 = (__wasm_rotl_i32((($5 + $10 | 0) + ((($11 ^ $12 | 0) & $13 | 0) ^ $11 | 0) | 0) + -680876936 | 0 | 0, 7 | 0) | 0) + $13 | 0;
  $83 = $2 + $14 | 0;
  $15 = HEAP32[($1 + 12 | 0) >> 2] | 0;
  $88 = $13 + $15 | 0;
  $16 = HEAP32[($1 + 8 | 0) >> 2] | 0;
  $93 = $12 + $16 | 0;
  $17 = (__wasm_rotl_i32((($11 + $8 | 0) + (($14 & ($12 ^ $13 | 0) | 0) ^ $12 | 0) | 0) + -389564586 | 0 | 0, 12 | 0) | 0) + $14 | 0;
  $18 = (__wasm_rotl_i32(($93 + (($17 & ($14 ^ $13 | 0) | 0) ^ $13 | 0) | 0) + 606105819 | 0 | 0, 17 | 0) | 0) + $17 | 0;
  $14 = (__wasm_rotl_i32(($88 + (($18 & ($17 ^ $14 | 0) | 0) ^ $14 | 0) | 0) + -1044525330 | 0 | 0, 22 | 0) | 0) + $18 | 0;
  $19 = (__wasm_rotl_i32(($83 + (($14 & ($18 ^ $17 | 0) | 0) ^ $17 | 0) | 0) + -176418897 | 0 | 0, 7 | 0) | 0) + $14 | 0;
  $146 = $3 + $19 | 0;
  $20 = HEAP32[($1 + 28 | 0) >> 2] | 0;
  $151 = $20 + $14 | 0;
  $21 = HEAP32[($1 + 24 | 0) >> 2] | 0;
  $156 = $21 + $18 | 0;
  $17 = (__wasm_rotl_i32((($9 + $17 | 0) + (($19 & ($14 ^ $18 | 0) | 0) ^ $18 | 0) | 0) + 1200080426 | 0 | 0, 12 | 0) | 0) + $19 | 0;
  $14 = (__wasm_rotl_i32(($156 + (($17 & ($19 ^ $14 | 0) | 0) ^ $14 | 0) | 0) + -1473231341 | 0 | 0, 17 | 0) | 0) + $17 | 0;
  $18 = (__wasm_rotl_i32(($151 + (($14 & ($17 ^ $19 | 0) | 0) ^ $19 | 0) | 0) + -45705983 | 0 | 0, 22 | 0) | 0) + $14 | 0;
  $19 = (__wasm_rotl_i32(($146 + (($18 & ($14 ^ $17 | 0) | 0) ^ $17 | 0) | 0) + 1770035416 | 0 | 0, 7 | 0) | 0) + $18 | 0;
  $209 = $4 + $19 | 0;
  $22 = HEAP32[($1 + 44 | 0) >> 2] | 0;
  $214 = $22 + $18 | 0;
  $23 = HEAP32[($1 + 40 | 0) >> 2] | 0;
  $219 = $23 + $14 | 0;
  $14 = (__wasm_rotl_i32((($6 + $17 | 0) + (($19 & ($18 ^ $14 | 0) | 0) ^ $14 | 0) | 0) + -1958414417 | 0 | 0, 12 | 0) | 0) + $19 | 0;
  $17 = (__wasm_rotl_i32(($219 + (($14 & ($19 ^ $18 | 0) | 0) ^ $18 | 0) | 0) + -42063 | 0 | 0, 17 | 0) | 0) + $14 | 0;
  $18 = (__wasm_rotl_i32(($214 + (($17 & ($14 ^ $19 | 0) | 0) ^ $19 | 0) | 0) + -1990404162 | 0 | 0, 22 | 0) | 0) + $17 | 0;
  $19 = (__wasm_rotl_i32(($209 + (($18 & ($17 ^ $14 | 0) | 0) ^ $14 | 0) | 0) + 1804603682 | 0 | 0, 7 | 0) | 0) + $18 | 0;
  $272 = $8 + $19 | 0;
  $24 = HEAP32[($1 + 60 | 0) >> 2] | 0;
  $277 = $24 + $18 | 0;
  $25 = HEAP32[($1 + 56 | 0) >> 2] | 0;
  $282 = $25 + $17 | 0;
  $26 = (__wasm_rotl_i32((($7 + $14 | 0) + (($19 & ($18 ^ $17 | 0) | 0) ^ $17 | 0) | 0) + -40341101 | 0 | 0, 12 | 0) | 0) + $19 | 0;
  $1 = (__wasm_rotl_i32(($282 + (($26 & ($19 ^ $18 | 0) | 0) ^ $18 | 0) | 0) + -1502002290 | 0 | 0, 17 | 0) | 0) + $26 | 0;
  $14 = (__wasm_rotl_i32(($277 + (($1 & ($26 ^ $19 | 0) | 0) ^ $19 | 0) | 0) + 1236535329 | 0 | 0, 22 | 0) | 0) + $1 | 0;
  $17 = (__wasm_rotl_i32(($272 + ((($14 ^ $1 | 0) & $26 | 0) ^ $1 | 0) | 0) + -165796510 | 0 | 0, 5 | 0) | 0) + $14 | 0;
  $335 = $9 + $17 | 0;
  $338 = $5 + $14 | 0;
  $341 = $22 + $1 | 0;
  $1 = (__wasm_rotl_i32((($21 + $26 | 0) + ((($17 ^ $14 | 0) & $1 | 0) ^ $14 | 0) | 0) + -1069501632 | 0 | 0, 9 | 0) | 0) + $17 | 0;
  $14 = (__wasm_rotl_i32(($341 + ((($1 ^ $17 | 0) & $14 | 0) ^ $17 | 0) | 0) + 643717713 | 0 | 0, 14 | 0) | 0) + $1 | 0;
  $17 = (__wasm_rotl_i32(($338 + ((($14 ^ $1 | 0) & $17 | 0) ^ $1 | 0) | 0) + -373897302 | 0 | 0, 20 | 0) | 0) + $14 | 0;
  $18 = (__wasm_rotl_i32(($335 + ((($17 ^ $14 | 0) & $1 | 0) ^ $14 | 0) | 0) + -701558691 | 0 | 0, 5 | 0) | 0) + $17 | 0;
  $394 = $6 + $18 | 0;
  $397 = $2 + $17 | 0;
  $400 = $24 + $14 | 0;
  $1 = (__wasm_rotl_i32((($23 + $1 | 0) + ((($18 ^ $17 | 0) & $14 | 0) ^ $17 | 0) | 0) + 38016083 | 0 | 0, 9 | 0) | 0) + $18 | 0;
  $14 = (__wasm_rotl_i32(($400 + ((($1 ^ $18 | 0) & $17 | 0) ^ $18 | 0) | 0) + -660478335 | 0 | 0, 14 | 0) | 0) + $1 | 0;
  $17 = (__wasm_rotl_i32(($397 + ((($14 ^ $1 | 0) & $18 | 0) ^ $1 | 0) | 0) + -405537848 | 0 | 0, 20 | 0) | 0) + $14 | 0;
  $18 = (__wasm_rotl_i32(($394 + ((($17 ^ $14 | 0) & $1 | 0) ^ $14 | 0) | 0) + 568446438 | 0 | 0, 5 | 0) | 0) + $17 | 0;
  $453 = $7 + $18 | 0;
  $456 = $3 + $17 | 0;
  $459 = $15 + $14 | 0;
  $1 = (__wasm_rotl_i32((($25 + $1 | 0) + ((($18 ^ $17 | 0) & $14 | 0) ^ $17 | 0) | 0) + -1019803690 | 0 | 0, 9 | 0) | 0) + $18 | 0;
  $14 = (__wasm_rotl_i32(($459 + ((($1 ^ $18 | 0) & $17 | 0) ^ $18 | 0) | 0) + -187363961 | 0 | 0, 14 | 0) | 0) + $1 | 0;
  $17 = (__wasm_rotl_i32(($456 + ((($14 ^ $1 | 0) & $18 | 0) ^ $1 | 0) | 0) + 1163531501 | 0 | 0, 20 | 0) | 0) + $14 | 0;
  $18 = (__wasm_rotl_i32(($453 + ((($17 ^ $14 | 0) & $1 | 0) ^ $14 | 0) | 0) + -1444681467 | 0 | 0, 5 | 0) | 0) + $17 | 0;
  $512 = $9 + $18 | 0;
  $515 = $20 + $14 | 0;
  $1 = (__wasm_rotl_i32((($16 + $1 | 0) + ((($18 ^ $17 | 0) & $14 | 0) ^ $17 | 0) | 0) + -51403784 | 0 | 0, 9 | 0) | 0) + $18 | 0;
  $19 = (__wasm_rotl_i32(($515 + ((($1 ^ $18 | 0) & $17 | 0) ^ $18 | 0) | 0) + 1735328473 | 0 | 0, 14 | 0) | 0) + $1 | 0;
  $14 = $19 ^ $1 | 0;
  $546 = $14;
  $14 = (__wasm_rotl_i32((($4 + $17 | 0) + (($14 & $18 | 0) ^ $1 | 0) | 0) + -1926607734 | 0 | 0, 20 | 0) | 0) + $19 | 0;
  $17 = (__wasm_rotl_i32(($512 + ($546 ^ $14 | 0) | 0) + -378558 | 0 | 0, 4 | 0) | 0) + $14 | 0;
  $568 = $8 + $17 | 0;
  $571 = $22 + $19 | 0;
  $574 = $17 ^ $14 | 0;
  $1 = (__wasm_rotl_i32((($3 + $1 | 0) + (($14 ^ $19 | 0) ^ $17 | 0) | 0) + -2022574463 | 0 | 0, 11 | 0) | 0) + $17 | 0;
  $18 = (__wasm_rotl_i32(($571 + ($574 ^ $1 | 0) | 0) + 1839030562 | 0 | 0, 16 | 0) | 0) + $1 | 0;
  $597 = $18 ^ $1 | 0;
  $14 = (__wasm_rotl_i32((($25 + $14 | 0) + (($1 ^ $17 | 0) ^ $18 | 0) | 0) + -35309556 | 0 | 0, 23 | 0) | 0) + $18 | 0;
  $17 = (__wasm_rotl_i32(($568 + ($597 ^ $14 | 0) | 0) + -1530992060 | 0 | 0, 4 | 0) | 0) + $14 | 0;
  $619 = $7 + $17 | 0;
  $622 = $20 + $18 | 0;
  $625 = $17 ^ $14 | 0;
  $1 = (__wasm_rotl_i32((($2 + $1 | 0) + (($14 ^ $18 | 0) ^ $17 | 0) | 0) + 1272893353 | 0 | 0, 11 | 0) | 0) + $17 | 0;
  $18 = (__wasm_rotl_i32(($622 + ($625 ^ $1 | 0) | 0) + -155497632 | 0 | 0, 16 | 0) | 0) + $1 | 0;
  $648 = $18 ^ $1 | 0;
  $14 = (__wasm_rotl_i32((($23 + $14 | 0) + (($1 ^ $17 | 0) ^ $18 | 0) | 0) + -1094730640 | 0 | 0, 23 | 0) | 0) + $18 | 0;
  $17 = (__wasm_rotl_i32(($619 + ($648 ^ $14 | 0) | 0) + 681279174 | 0 | 0, 4 | 0) | 0) + $14 | 0;
  $670 = $6 + $17 | 0;
  $673 = $15 + $18 | 0;
  $676 = $17 ^ $14 | 0;
  $1 = (__wasm_rotl_i32((($5 + $1 | 0) + (($14 ^ $18 | 0) ^ $17 | 0) | 0) + -358537222 | 0 | 0, 11 | 0) | 0) + $17 | 0;
  $18 = (__wasm_rotl_i32(($673 + ($676 ^ $1 | 0) | 0) + -722521979 | 0 | 0, 16 | 0) | 0) + $1 | 0;
  $699 = $18 ^ $1 | 0;
  $14 = (__wasm_rotl_i32((($21 + $14 | 0) + (($1 ^ $17 | 0) ^ $18 | 0) | 0) + 76029189 | 0 | 0, 23 | 0) | 0) + $18 | 0;
  $17 = (__wasm_rotl_i32(($670 + ($699 ^ $14 | 0) | 0) + -640364487 | 0 | 0, 4 | 0) | 0) + $14 | 0;
  $721 = $5 + $17 | 0;
  $724 = $16 + $14 | 0;
  $1 = (__wasm_rotl_i32((($4 + $1 | 0) + (($14 ^ $18 | 0) ^ $17 | 0) | 0) + -421815835 | 0 | 0, 11 | 0) | 0) + $17 | 0;
  $740 = $1 ^ $17 | 0;
  $14 = (__wasm_rotl_i32((($24 + $18 | 0) + (($17 ^ $14 | 0) ^ $1 | 0) | 0) + 530742520 | 0 | 0, 16 | 0) | 0) + $1 | 0;
  $17 = (__wasm_rotl_i32(($724 + ($740 ^ $14 | 0) | 0) + -995338651 | 0 | 0, 23 | 0) | 0) + $14 | 0;
  $18 = (__wasm_rotl_i32(($721 + (($17 | ($1 ^ -1 | 0) | 0) ^ $14 | 0) | 0) + -198630844 | 0 | 0, 6 | 0) | 0) + $17 | 0;
  $773 = $4 + $18 | 0;
  $776 = $9 + $17 | 0;
  $779 = $25 + $14 | 0;
  $1 = (__wasm_rotl_i32((($20 + $1 | 0) + (($18 | ($14 ^ -1 | 0) | 0) ^ $17 | 0) | 0) + 1126891415 | 0 | 0, 10 | 0) | 0) + $18 | 0;
  $14 = (__wasm_rotl_i32(($779 + (($1 | ($17 ^ -1 | 0) | 0) ^ $18 | 0) | 0) + -1416354905 | 0 | 0, 15 | 0) | 0) + $1 | 0;
  $17 = (__wasm_rotl_i32(($776 + (($14 | ($18 ^ -1 | 0) | 0) ^ $1 | 0) | 0) + -57434055 | 0 | 0, 21 | 0) | 0) + $14 | 0;
  $18 = (__wasm_rotl_i32(($773 + (($17 | ($1 ^ -1 | 0) | 0) ^ $14 | 0) | 0) + 1700485571 | 0 | 0, 6 | 0) | 0) + $17 | 0;
  $828 = $3 + $18 | 0;
  $831 = $8 + $17 | 0;
  $834 = $23 + $14 | 0;
  $1 = (__wasm_rotl_i32((($15 + $1 | 0) + (($18 | ($14 ^ -1 | 0) | 0) ^ $17 | 0) | 0) + -1894986606 | 0 | 0, 10 | 0) | 0) + $18 | 0;
  $14 = (__wasm_rotl_i32(($834 + (($1 | ($17 ^ -1 | 0) | 0) ^ $18 | 0) | 0) + -1051523 | 0 | 0, 15 | 0) | 0) + $1 | 0;
  $17 = (__wasm_rotl_i32(($831 + (($14 | ($18 ^ -1 | 0) | 0) ^ $1 | 0) | 0) + -2054922799 | 0 | 0, 21 | 0) | 0) + $14 | 0;
  $18 = (__wasm_rotl_i32(($828 + (($17 | ($1 ^ -1 | 0) | 0) ^ $14 | 0) | 0) + 1873313359 | 0 | 0, 6 | 0) | 0) + $17 | 0;
  $883 = $2 + $18 | 0;
  $886 = $7 + $17 | 0;
  $889 = $21 + $14 | 0;
  $1 = (__wasm_rotl_i32((($24 + $1 | 0) + (($18 | ($14 ^ -1 | 0) | 0) ^ $17 | 0) | 0) + -30611744 | 0 | 0, 10 | 0) | 0) + $18 | 0;
  $14 = (__wasm_rotl_i32(($889 + (($1 | ($17 ^ -1 | 0) | 0) ^ $18 | 0) | 0) + -1560198380 | 0 | 0, 15 | 0) | 0) + $1 | 0;
  $17 = (__wasm_rotl_i32(($886 + (($14 | ($18 ^ -1 | 0) | 0) ^ $1 | 0) | 0) + 1309151649 | 0 | 0, 21 | 0) | 0) + $14 | 0;
  $18 = (__wasm_rotl_i32(($883 + (($17 | ($1 ^ -1 | 0) | 0) ^ $14 | 0) | 0) + -145523070 | 0 | 0, 6 | 0) | 0) + $17 | 0;
  HEAP32[$0 >> 2] = $18 + $10 | 0;
  $1 = (__wasm_rotl_i32((($22 + $1 | 0) + (($18 | ($14 ^ -1 | 0) | 0) ^ $17 | 0) | 0) + -1120210379 | 0 | 0, 10 | 0) | 0) + $18 | 0;
  HEAP32[($0 + 12 | 0) >> 2] = $11 + $1 | 0;
  $14 = (__wasm_rotl_i32((($16 + $14 | 0) + (($1 | ($17 ^ -1 | 0) | 0) ^ $18 | 0) | 0) + 718787259 | 0 | 0, 15 | 0) | 0) + $1 | 0;
  HEAP32[($0 + 8 | 0) >> 2] = $12 + $14 | 0;
  (wasm2js_i32$0 = $0, wasm2js_i32$1 = ($14 + $13 | 0) + (__wasm_rotl_i32((($6 + $17 | 0) + (($14 | ($18 ^ -1 | 0) | 0) ^ $1 | 0) | 0) + -343485551 | 0 | 0, 21 | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 4 | 0) >> 2] = wasm2js_i32$1;
 }
 
 function FLAC__MD5Accumulate($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = 0, i64toi32_i32$1 = 0, $6 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, $7 = 0, $9 = 0, $10 = 0, $11 = 0, i64toi32_i32$4 = 0, $12 = 0, $8 = 0, i64toi32_i32$3 = 0, $13 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $15$hi = 0, $17$hi = 0, $22$hi = 0, $27$hi = 0, $1531 = 0, $1536 = 0, $1541 = 0, $1546 = 0, $1551 = 0, $1556 = 0, $1561 = 0, $1566 = 0;
  $5 = 0;
  label$1 : {
   i64toi32_i32$0 = 0;
   $15$hi = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   $17$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $15$hi;
   i64toi32_i32$1 = $17$hi;
   i64toi32_i32$1 = __wasm_i64_mul($4 | 0, i64toi32_i32$0 | 0, $2 | 0, i64toi32_i32$1 | 0) | 0;
   i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
   i64toi32_i32$2 = i64toi32_i32$1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 32;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = 0;
    $39 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    $39 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
   }
   if ($39) {
    break label$1
   }
   i64toi32_i32$1 = 0;
   $22$hi = i64toi32_i32$1;
   $6 = Math_imul($4, $2);
   i64toi32_i32$1 = 0;
   $27$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $22$hi;
   i64toi32_i32$2 = $27$hi;
   i64toi32_i32$2 = __wasm_i64_mul($3 | 0, i64toi32_i32$1 | 0, $6 | 0, i64toi32_i32$2 | 0) | 0;
   i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
   i64toi32_i32$0 = i64toi32_i32$2;
   i64toi32_i32$2 = 0;
   i64toi32_i32$3 = 32;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = 0;
    $40 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
    $40 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
   }
   if ($40) {
    break label$1
   }
   $7 = HEAP32[($0 + 88 | 0) >> 2] | 0;
   label$2 : {
    label$3 : {
     $8 = Math_imul($6, $3);
     if ((HEAP32[($0 + 92 | 0) >> 2] | 0) >>> 0 < $8 >>> 0) {
      break label$3
     }
     $5 = $7;
     break label$2;
    }
    label$4 : {
     label$5 : {
      $5 = dlrealloc($7 | 0, $8 | 0) | 0;
      if (!$5) {
       break label$5
      }
      HEAP32[($0 + 88 | 0) >> 2] = $5;
      break label$4;
     }
     dlfree($7 | 0);
     $5 = dlmalloc($8 | 0) | 0;
     HEAP32[($0 + 88 | 0) >> 2] = $5;
     if ($5) {
      break label$4
     }
     HEAP32[($0 + 92 | 0) >> 2] = 0;
     return 0 | 0;
    }
    HEAP32[($0 + 92 | 0) >> 2] = $8;
   }
   label$6 : {
    label$7 : {
     label$8 : {
      label$9 : {
       label$10 : {
        label$11 : {
         label$12 : {
          label$13 : {
           label$14 : {
            label$15 : {
             label$16 : {
              label$17 : {
               label$18 : {
                label$19 : {
                 label$20 : {
                  label$21 : {
                   label$22 : {
                    label$23 : {
                     label$24 : {
                      label$25 : {
                       label$26 : {
                        label$27 : {
                         label$28 : {
                          label$29 : {
                           label$30 : {
                            $6 = Math_imul($4, 100) + $2 | 0;
                            if (($6 | 0) > (300 | 0)) {
                             break label$30
                            }
                            label$31 : {
                             switch ($6 + -101 | 0 | 0) {
                             case 0:
                              break label$20;
                             case 1:
                              break label$21;
                             case 3:
                              break label$22;
                             case 5:
                              break label$23;
                             case 7:
                              break label$24;
                             case 2:
                             case 4:
                             case 6:
                              break label$7;
                             default:
                              break label$31;
                             };
                            }
                            switch ($6 + -201 | 0 | 0) {
                            case 0:
                             break label$25;
                            case 1:
                             break label$26;
                            case 3:
                             break label$27;
                            case 5:
                             break label$28;
                            case 7:
                             break label$29;
                            default:
                             break label$7;
                            };
                           }
                           label$32 : {
                            label$33 : {
                             label$34 : {
                              switch ($6 + -401 | 0 | 0) {
                              default:
                               switch ($6 + -301 | 0 | 0) {
                               case 0:
                                break label$32;
                               case 1:
                                break label$33;
                               default:
                                break label$7;
                               };
                              case 7:
                               if (!$3) {
                                break label$6
                               }
                               $4 = HEAP32[($1 + 28 | 0) >> 2] | 0;
                               $6 = HEAP32[($1 + 24 | 0) >> 2] | 0;
                               $7 = HEAP32[($1 + 20 | 0) >> 2] | 0;
                               $9 = HEAP32[($1 + 16 | 0) >> 2] | 0;
                               $10 = HEAP32[($1 + 12 | 0) >> 2] | 0;
                               $11 = HEAP32[($1 + 8 | 0) >> 2] | 0;
                               $12 = HEAP32[($1 + 4 | 0) >> 2] | 0;
                               $13 = HEAP32[$1 >> 2] | 0;
                               $2 = 0;
                               label$40 : while (1) {
                                $1 = $2 << 2 | 0;
                                HEAP32[$5 >> 2] = HEAP32[($13 + $1 | 0) >> 2] | 0;
                                HEAP32[($5 + 4 | 0) >> 2] = HEAP32[($12 + $1 | 0) >> 2] | 0;
                                HEAP32[($5 + 8 | 0) >> 2] = HEAP32[($11 + $1 | 0) >> 2] | 0;
                                HEAP32[($5 + 12 | 0) >> 2] = HEAP32[($10 + $1 | 0) >> 2] | 0;
                                HEAP32[($5 + 16 | 0) >> 2] = HEAP32[($9 + $1 | 0) >> 2] | 0;
                                HEAP32[($5 + 20 | 0) >> 2] = HEAP32[($7 + $1 | 0) >> 2] | 0;
                                HEAP32[($5 + 24 | 0) >> 2] = HEAP32[($6 + $1 | 0) >> 2] | 0;
                                HEAP32[($5 + 28 | 0) >> 2] = HEAP32[($4 + $1 | 0) >> 2] | 0;
                                $5 = $5 + 32 | 0;
                                $2 = $2 + 1 | 0;
                                if (($2 | 0) != ($3 | 0)) {
                                 continue label$40
                                }
                                break label$6;
                               };
                              case 5:
                               if (!$3) {
                                break label$6
                               }
                               $4 = HEAP32[($1 + 20 | 0) >> 2] | 0;
                               $6 = HEAP32[($1 + 16 | 0) >> 2] | 0;
                               $7 = HEAP32[($1 + 12 | 0) >> 2] | 0;
                               $9 = HEAP32[($1 + 8 | 0) >> 2] | 0;
                               $10 = HEAP32[($1 + 4 | 0) >> 2] | 0;
                               $11 = HEAP32[$1 >> 2] | 0;
                               $2 = 0;
                               label$41 : while (1) {
                                $1 = $2 << 2 | 0;
                                HEAP32[$5 >> 2] = HEAP32[($11 + $1 | 0) >> 2] | 0;
                                HEAP32[($5 + 4 | 0) >> 2] = HEAP32[($10 + $1 | 0) >> 2] | 0;
                                HEAP32[($5 + 8 | 0) >> 2] = HEAP32[($9 + $1 | 0) >> 2] | 0;
                                HEAP32[($5 + 12 | 0) >> 2] = HEAP32[($7 + $1 | 0) >> 2] | 0;
                                HEAP32[($5 + 16 | 0) >> 2] = HEAP32[($6 + $1 | 0) >> 2] | 0;
                                HEAP32[($5 + 20 | 0) >> 2] = HEAP32[($4 + $1 | 0) >> 2] | 0;
                                $5 = $5 + 24 | 0;
                                $2 = $2 + 1 | 0;
                                if (($2 | 0) != ($3 | 0)) {
                                 continue label$41
                                }
                                break label$6;
                               };
                              case 3:
                               if (!$3) {
                                break label$6
                               }
                               $10 = $3 & 1 | 0;
                               $2 = HEAP32[($1 + 12 | 0) >> 2] | 0;
                               $4 = HEAP32[($1 + 8 | 0) >> 2] | 0;
                               $6 = HEAP32[($1 + 4 | 0) >> 2] | 0;
                               $7 = HEAP32[$1 >> 2] | 0;
                               if (($3 | 0) != (1 | 0)) {
                                break label$9
                               }
                               $3 = 0;
                               break label$8;
                              case 1:
                               if (!$3) {
                                break label$6
                               }
                               $6 = $3 & 3 | 0;
                               $2 = HEAP32[($1 + 4 | 0) >> 2] | 0;
                               $4 = HEAP32[$1 >> 2] | 0;
                               if (($3 + -1 | 0) >>> 0 >= 3 >>> 0) {
                                break label$11
                               }
                               $1 = 0;
                               break label$10;
                              case 0:
                               break label$34;
                              case 2:
                              case 4:
                              case 6:
                               break label$7;
                              };
                             }
                             if (!$3) {
                              break label$6
                             }
                             $4 = $3 & 3 | 0;
                             $2 = HEAP32[$1 >> 2] | 0;
                             if (($3 + -1 | 0) >>> 0 >= 3 >>> 0) {
                              break label$13
                             }
                             $1 = 0;
                             break label$12;
                            }
                            if (!$3) {
                             break label$6
                            }
                            $2 = 0;
                            label$42 : while (1) {
                             $6 = $2 << 2 | 0;
                             $4 = HEAP32[((HEAP32[$1 >> 2] | 0) + $6 | 0) >> 2] | 0;
                             HEAP8[$5 >> 0] = $4;
                             HEAP8[($5 + 2 | 0) >> 0] = $4 >>> 16 | 0;
                             HEAP8[($5 + 1 | 0) >> 0] = $4 >>> 8 | 0;
                             $4 = HEAP32[((HEAP32[($1 + 4 | 0) >> 2] | 0) + $6 | 0) >> 2] | 0;
                             HEAP8[($5 + 3 | 0) >> 0] = $4;
                             HEAP8[($5 + 5 | 0) >> 0] = $4 >>> 16 | 0;
                             HEAP8[($5 + 4 | 0) >> 0] = $4 >>> 8 | 0;
                             $5 = $5 + 6 | 0;
                             $2 = $2 + 1 | 0;
                             if (($2 | 0) != ($3 | 0)) {
                              continue label$42
                             }
                             break label$6;
                            };
                           }
                           if (!$3) {
                            break label$6
                           }
                           $7 = $3 & 1 | 0;
                           $2 = 0;
                           label$43 : {
                            if (($3 | 0) == (1 | 0)) {
                             break label$43
                            }
                            $4 = $3 & -2 | 0;
                            $2 = 0;
                            label$44 : while (1) {
                             $6 = $2 << 2 | 0;
                             $3 = HEAP32[((HEAP32[$1 >> 2] | 0) + $6 | 0) >> 2] | 0;
                             HEAP8[$5 >> 0] = $3;
                             HEAP8[($5 + 2 | 0) >> 0] = $3 >>> 16 | 0;
                             HEAP8[($5 + 1 | 0) >> 0] = $3 >>> 8 | 0;
                             $3 = HEAP32[((HEAP32[$1 >> 2] | 0) + ($6 | 4 | 0) | 0) >> 2] | 0;
                             HEAP8[($5 + 3 | 0) >> 0] = $3;
                             HEAP8[($5 + 5 | 0) >> 0] = $3 >>> 16 | 0;
                             HEAP8[($5 + 4 | 0) >> 0] = $3 >>> 8 | 0;
                             $2 = $2 + 2 | 0;
                             $5 = $5 + 6 | 0;
                             $4 = $4 + -2 | 0;
                             if ($4) {
                              continue label$44
                             }
                             break label$44;
                            };
                           }
                           if (!$7) {
                            break label$6
                           }
                           $1 = HEAP32[((HEAP32[$1 >> 2] | 0) + ($2 << 2 | 0) | 0) >> 2] | 0;
                           HEAP8[$5 >> 0] = $1;
                           HEAP8[($5 + 2 | 0) >> 0] = $1 >>> 16 | 0;
                           HEAP8[($5 + 1 | 0) >> 0] = $1 >>> 8 | 0;
                           break label$6;
                          }
                          if (!$3) {
                           break label$6
                          }
                          $4 = HEAP32[($1 + 28 | 0) >> 2] | 0;
                          $6 = HEAP32[($1 + 24 | 0) >> 2] | 0;
                          $7 = HEAP32[($1 + 20 | 0) >> 2] | 0;
                          $9 = HEAP32[($1 + 16 | 0) >> 2] | 0;
                          $10 = HEAP32[($1 + 12 | 0) >> 2] | 0;
                          $11 = HEAP32[($1 + 8 | 0) >> 2] | 0;
                          $12 = HEAP32[($1 + 4 | 0) >> 2] | 0;
                          $13 = HEAP32[$1 >> 2] | 0;
                          $2 = 0;
                          label$45 : while (1) {
                           $1 = $2 << 2 | 0;
                           HEAP16[$5 >> 1] = HEAP32[($13 + $1 | 0) >> 2] | 0;
                           HEAP16[($5 + 2 | 0) >> 1] = HEAP32[($12 + $1 | 0) >> 2] | 0;
                           HEAP16[($5 + 4 | 0) >> 1] = HEAP32[($11 + $1 | 0) >> 2] | 0;
                           HEAP16[($5 + 6 | 0) >> 1] = HEAP32[($10 + $1 | 0) >> 2] | 0;
                           HEAP16[($5 + 8 | 0) >> 1] = HEAP32[($9 + $1 | 0) >> 2] | 0;
                           HEAP16[($5 + 10 | 0) >> 1] = HEAP32[($7 + $1 | 0) >> 2] | 0;
                           HEAP16[($5 + 12 | 0) >> 1] = HEAP32[($6 + $1 | 0) >> 2] | 0;
                           HEAP16[($5 + 14 | 0) >> 1] = HEAP32[($4 + $1 | 0) >> 2] | 0;
                           $5 = $5 + 16 | 0;
                           $2 = $2 + 1 | 0;
                           if (($2 | 0) != ($3 | 0)) {
                            continue label$45
                           }
                           break label$6;
                          };
                         }
                         if (!$3) {
                          break label$6
                         }
                         $4 = HEAP32[($1 + 20 | 0) >> 2] | 0;
                         $6 = HEAP32[($1 + 16 | 0) >> 2] | 0;
                         $7 = HEAP32[($1 + 12 | 0) >> 2] | 0;
                         $9 = HEAP32[($1 + 8 | 0) >> 2] | 0;
                         $10 = HEAP32[($1 + 4 | 0) >> 2] | 0;
                         $11 = HEAP32[$1 >> 2] | 0;
                         $2 = 0;
                         label$46 : while (1) {
                          $1 = $2 << 2 | 0;
                          HEAP16[$5 >> 1] = HEAP32[($11 + $1 | 0) >> 2] | 0;
                          HEAP16[($5 + 2 | 0) >> 1] = HEAP32[($10 + $1 | 0) >> 2] | 0;
                          HEAP16[($5 + 4 | 0) >> 1] = HEAP32[($9 + $1 | 0) >> 2] | 0;
                          HEAP16[($5 + 6 | 0) >> 1] = HEAP32[($7 + $1 | 0) >> 2] | 0;
                          HEAP16[($5 + 8 | 0) >> 1] = HEAP32[($6 + $1 | 0) >> 2] | 0;
                          HEAP16[($5 + 10 | 0) >> 1] = HEAP32[($4 + $1 | 0) >> 2] | 0;
                          $5 = $5 + 12 | 0;
                          $2 = $2 + 1 | 0;
                          if (($2 | 0) != ($3 | 0)) {
                           continue label$46
                          }
                          break label$6;
                         };
                        }
                        if (!$3) {
                         break label$6
                        }
                        $10 = $3 & 1 | 0;
                        $2 = HEAP32[($1 + 12 | 0) >> 2] | 0;
                        $4 = HEAP32[($1 + 8 | 0) >> 2] | 0;
                        $6 = HEAP32[($1 + 4 | 0) >> 2] | 0;
                        $7 = HEAP32[$1 >> 2] | 0;
                        if (($3 | 0) != (1 | 0)) {
                         break label$15
                        }
                        $3 = 0;
                        break label$14;
                       }
                       if (!$3) {
                        break label$6
                       }
                       $6 = $3 & 3 | 0;
                       $2 = HEAP32[($1 + 4 | 0) >> 2] | 0;
                       $4 = HEAP32[$1 >> 2] | 0;
                       if (($3 + -1 | 0) >>> 0 >= 3 >>> 0) {
                        break label$17
                       }
                       $1 = 0;
                       break label$16;
                      }
                      if (!$3) {
                       break label$6
                      }
                      $4 = $3 & 3 | 0;
                      $2 = HEAP32[$1 >> 2] | 0;
                      if (($3 + -1 | 0) >>> 0 >= 3 >>> 0) {
                       break label$19
                      }
                      $1 = 0;
                      break label$18;
                     }
                     if (!$3) {
                      break label$6
                     }
                     $4 = 0;
                     label$47 : while (1) {
                      $2 = $4 << 2 | 0;
                      HEAP8[$5 >> 0] = HEAP32[((HEAP32[$1 >> 2] | 0) + $2 | 0) >> 2] | 0;
                      HEAP8[($5 + 1 | 0) >> 0] = HEAP32[((HEAP32[($1 + 4 | 0) >> 2] | 0) + $2 | 0) >> 2] | 0;
                      HEAP8[($5 + 2 | 0) >> 0] = HEAP32[((HEAP32[($1 + 8 | 0) >> 2] | 0) + $2 | 0) >> 2] | 0;
                      HEAP8[($5 + 3 | 0) >> 0] = HEAP32[((HEAP32[($1 + 12 | 0) >> 2] | 0) + $2 | 0) >> 2] | 0;
                      HEAP8[($5 + 4 | 0) >> 0] = HEAP32[((HEAP32[($1 + 16 | 0) >> 2] | 0) + $2 | 0) >> 2] | 0;
                      HEAP8[($5 + 5 | 0) >> 0] = HEAP32[((HEAP32[($1 + 20 | 0) >> 2] | 0) + $2 | 0) >> 2] | 0;
                      HEAP8[($5 + 6 | 0) >> 0] = HEAP32[((HEAP32[($1 + 24 | 0) >> 2] | 0) + $2 | 0) >> 2] | 0;
                      HEAP8[($5 + 7 | 0) >> 0] = HEAP32[((HEAP32[($1 + 28 | 0) >> 2] | 0) + $2 | 0) >> 2] | 0;
                      $5 = $5 + 8 | 0;
                      $4 = $4 + 1 | 0;
                      if (($4 | 0) != ($3 | 0)) {
                       continue label$47
                      }
                      break label$6;
                     };
                    }
                    if (!$3) {
                     break label$6
                    }
                    $4 = 0;
                    label$48 : while (1) {
                     $2 = $4 << 2 | 0;
                     HEAP8[$5 >> 0] = HEAP32[((HEAP32[$1 >> 2] | 0) + $2 | 0) >> 2] | 0;
                     HEAP8[($5 + 1 | 0) >> 0] = HEAP32[((HEAP32[($1 + 4 | 0) >> 2] | 0) + $2 | 0) >> 2] | 0;
                     HEAP8[($5 + 2 | 0) >> 0] = HEAP32[((HEAP32[($1 + 8 | 0) >> 2] | 0) + $2 | 0) >> 2] | 0;
                     HEAP8[($5 + 3 | 0) >> 0] = HEAP32[((HEAP32[($1 + 12 | 0) >> 2] | 0) + $2 | 0) >> 2] | 0;
                     HEAP8[($5 + 4 | 0) >> 0] = HEAP32[((HEAP32[($1 + 16 | 0) >> 2] | 0) + $2 | 0) >> 2] | 0;
                     HEAP8[($5 + 5 | 0) >> 0] = HEAP32[((HEAP32[($1 + 20 | 0) >> 2] | 0) + $2 | 0) >> 2] | 0;
                     $5 = $5 + 6 | 0;
                     $4 = $4 + 1 | 0;
                     if (($4 | 0) != ($3 | 0)) {
                      continue label$48
                     }
                     break label$6;
                    };
                   }
                   if (!$3) {
                    break label$6
                   }
                   $4 = 0;
                   label$49 : while (1) {
                    $2 = $4 << 2 | 0;
                    HEAP8[$5 >> 0] = HEAP32[((HEAP32[$1 >> 2] | 0) + $2 | 0) >> 2] | 0;
                    HEAP8[($5 + 1 | 0) >> 0] = HEAP32[((HEAP32[($1 + 4 | 0) >> 2] | 0) + $2 | 0) >> 2] | 0;
                    HEAP8[($5 + 2 | 0) >> 0] = HEAP32[((HEAP32[($1 + 8 | 0) >> 2] | 0) + $2 | 0) >> 2] | 0;
                    HEAP8[($5 + 3 | 0) >> 0] = HEAP32[((HEAP32[($1 + 12 | 0) >> 2] | 0) + $2 | 0) >> 2] | 0;
                    $5 = $5 + 4 | 0;
                    $4 = $4 + 1 | 0;
                    if (($4 | 0) != ($3 | 0)) {
                     continue label$49
                    }
                    break label$6;
                   };
                  }
                  if (!$3) {
                   break label$6
                  }
                  $6 = $3 & 1 | 0;
                  $2 = 0;
                  label$50 : {
                   if (($3 | 0) == (1 | 0)) {
                    break label$50
                   }
                   $4 = $3 & -2 | 0;
                   $2 = 0;
                   label$51 : while (1) {
                    $3 = $2 << 2 | 0;
                    HEAP8[$5 >> 0] = HEAP32[((HEAP32[$1 >> 2] | 0) + $3 | 0) >> 2] | 0;
                    HEAP8[($5 + 1 | 0) >> 0] = HEAP32[((HEAP32[($1 + 4 | 0) >> 2] | 0) + $3 | 0) >> 2] | 0;
                    $3 = $3 | 4 | 0;
                    HEAP8[($5 + 2 | 0) >> 0] = HEAP32[((HEAP32[$1 >> 2] | 0) + $3 | 0) >> 2] | 0;
                    HEAP8[($5 + 3 | 0) >> 0] = HEAP32[((HEAP32[($1 + 4 | 0) >> 2] | 0) + $3 | 0) >> 2] | 0;
                    $2 = $2 + 2 | 0;
                    $5 = $5 + 4 | 0;
                    $4 = $4 + -2 | 0;
                    if ($4) {
                     continue label$51
                    }
                    break label$51;
                   };
                  }
                  if (!$6) {
                   break label$6
                  }
                  $3 = $2 << 2 | 0;
                  HEAP8[$5 >> 0] = HEAP32[((HEAP32[$1 >> 2] | 0) + $3 | 0) >> 2] | 0;
                  HEAP8[($5 + 1 | 0) >> 0] = HEAP32[((HEAP32[($1 + 4 | 0) >> 2] | 0) + $3 | 0) >> 2] | 0;
                  break label$6;
                 }
                 if (!$3) {
                  break label$6
                 }
                 $4 = $3 & 3 | 0;
                 $2 = 0;
                 label$52 : {
                  if (($3 + -1 | 0) >>> 0 < 3 >>> 0) {
                   break label$52
                  }
                  $6 = $3 & -4 | 0;
                  $2 = 0;
                  label$53 : while (1) {
                   $3 = $2 << 2 | 0;
                   HEAP8[$5 >> 0] = HEAP32[((HEAP32[$1 >> 2] | 0) + $3 | 0) >> 2] | 0;
                   HEAP8[($5 + 1 | 0) >> 0] = HEAP32[((HEAP32[$1 >> 2] | 0) + ($3 | 4 | 0) | 0) >> 2] | 0;
                   HEAP8[($5 + 2 | 0) >> 0] = HEAP32[((HEAP32[$1 >> 2] | 0) + ($3 | 8 | 0) | 0) >> 2] | 0;
                   HEAP8[($5 + 3 | 0) >> 0] = HEAP32[((HEAP32[$1 >> 2] | 0) + ($3 | 12 | 0) | 0) >> 2] | 0;
                   $2 = $2 + 4 | 0;
                   $5 = $5 + 4 | 0;
                   $6 = $6 + -4 | 0;
                   if ($6) {
                    continue label$53
                   }
                   break label$53;
                  };
                 }
                 if (!$4) {
                  break label$6
                 }
                 label$54 : while (1) {
                  HEAP8[$5 >> 0] = HEAP32[((HEAP32[$1 >> 2] | 0) + ($2 << 2 | 0) | 0) >> 2] | 0;
                  $2 = $2 + 1 | 0;
                  $5 = $5 + 1 | 0;
                  $4 = $4 + -1 | 0;
                  if ($4) {
                   continue label$54
                  }
                  break label$6;
                 };
                }
                $6 = $3 & -4 | 0;
                $1 = 0;
                label$55 : while (1) {
                 $3 = $1 << 2 | 0;
                 HEAP16[$5 >> 1] = HEAP32[($2 + $3 | 0) >> 2] | 0;
                 HEAP16[($5 + 2 | 0) >> 1] = HEAP32[($2 + ($3 | 4 | 0) | 0) >> 2] | 0;
                 HEAP16[($5 + 4 | 0) >> 1] = HEAP32[($2 + ($3 | 8 | 0) | 0) >> 2] | 0;
                 HEAP16[($5 + 6 | 0) >> 1] = HEAP32[($2 + ($3 | 12 | 0) | 0) >> 2] | 0;
                 $1 = $1 + 4 | 0;
                 $5 = $5 + 8 | 0;
                 $6 = $6 + -4 | 0;
                 if ($6) {
                  continue label$55
                 }
                 break label$55;
                };
               }
               if (!$4) {
                break label$6
               }
               label$56 : while (1) {
                HEAP16[$5 >> 1] = HEAP32[($2 + ($1 << 2 | 0) | 0) >> 2] | 0;
                $1 = $1 + 1 | 0;
                $5 = $5 + 2 | 0;
                $4 = $4 + -1 | 0;
                if ($4) {
                 continue label$56
                }
                break label$6;
               };
              }
              $7 = $3 & -4 | 0;
              $1 = 0;
              label$57 : while (1) {
               $3 = $1 << 2 | 0;
               HEAP16[$5 >> 1] = HEAP32[($4 + $3 | 0) >> 2] | 0;
               HEAP16[($5 + 2 | 0) >> 1] = HEAP32[($2 + $3 | 0) >> 2] | 0;
               $9 = $3 | 4 | 0;
               HEAP16[($5 + 4 | 0) >> 1] = HEAP32[($4 + $9 | 0) >> 2] | 0;
               HEAP16[($5 + 6 | 0) >> 1] = HEAP32[($2 + $9 | 0) >> 2] | 0;
               $9 = $3 | 8 | 0;
               HEAP16[($5 + 8 | 0) >> 1] = HEAP32[($4 + $9 | 0) >> 2] | 0;
               HEAP16[($5 + 10 | 0) >> 1] = HEAP32[($2 + $9 | 0) >> 2] | 0;
               $3 = $3 | 12 | 0;
               HEAP16[($5 + 12 | 0) >> 1] = HEAP32[($4 + $3 | 0) >> 2] | 0;
               HEAP16[($5 + 14 | 0) >> 1] = HEAP32[($2 + $3 | 0) >> 2] | 0;
               $1 = $1 + 4 | 0;
               $5 = $5 + 16 | 0;
               $7 = $7 + -4 | 0;
               if ($7) {
                continue label$57
               }
               break label$57;
              };
             }
             if (!$6) {
              break label$6
             }
             label$58 : while (1) {
              $3 = $1 << 2 | 0;
              HEAP16[$5 >> 1] = HEAP32[($4 + $3 | 0) >> 2] | 0;
              HEAP16[($5 + 2 | 0) >> 1] = HEAP32[($2 + $3 | 0) >> 2] | 0;
              $1 = $1 + 1 | 0;
              $5 = $5 + 4 | 0;
              $6 = $6 + -1 | 0;
              if ($6) {
               continue label$58
              }
              break label$6;
             };
            }
            $9 = $3 & -2 | 0;
            $3 = 0;
            label$59 : while (1) {
             $1 = $3 << 2 | 0;
             HEAP16[$5 >> 1] = HEAP32[($7 + $1 | 0) >> 2] | 0;
             HEAP16[($5 + 2 | 0) >> 1] = HEAP32[($6 + $1 | 0) >> 2] | 0;
             HEAP16[($5 + 4 | 0) >> 1] = HEAP32[($4 + $1 | 0) >> 2] | 0;
             HEAP16[($5 + 6 | 0) >> 1] = HEAP32[($2 + $1 | 0) >> 2] | 0;
             $1 = $1 | 4 | 0;
             HEAP16[($5 + 8 | 0) >> 1] = HEAP32[($7 + $1 | 0) >> 2] | 0;
             HEAP16[($5 + 10 | 0) >> 1] = HEAP32[($6 + $1 | 0) >> 2] | 0;
             HEAP16[($5 + 12 | 0) >> 1] = HEAP32[($4 + $1 | 0) >> 2] | 0;
             HEAP16[($5 + 14 | 0) >> 1] = HEAP32[($2 + $1 | 0) >> 2] | 0;
             $3 = $3 + 2 | 0;
             $5 = $5 + 16 | 0;
             $9 = $9 + -2 | 0;
             if ($9) {
              continue label$59
             }
             break label$59;
            };
           }
           if (!$10) {
            break label$6
           }
           $1 = $3 << 2 | 0;
           HEAP16[$5 >> 1] = HEAP32[($7 + $1 | 0) >> 2] | 0;
           HEAP16[($5 + 2 | 0) >> 1] = HEAP32[($6 + $1 | 0) >> 2] | 0;
           HEAP16[($5 + 4 | 0) >> 1] = HEAP32[($4 + $1 | 0) >> 2] | 0;
           HEAP16[($5 + 6 | 0) >> 1] = HEAP32[($2 + $1 | 0) >> 2] | 0;
           break label$6;
          }
          $6 = $3 & -4 | 0;
          $1 = 0;
          label$60 : while (1) {
           $3 = $1 << 2 | 0;
           HEAP32[$5 >> 2] = HEAP32[($2 + $3 | 0) >> 2] | 0;
           HEAP32[($5 + 4 | 0) >> 2] = HEAP32[($2 + ($3 | 4 | 0) | 0) >> 2] | 0;
           HEAP32[($5 + 8 | 0) >> 2] = HEAP32[($2 + ($3 | 8 | 0) | 0) >> 2] | 0;
           HEAP32[($5 + 12 | 0) >> 2] = HEAP32[($2 + ($3 | 12 | 0) | 0) >> 2] | 0;
           $1 = $1 + 4 | 0;
           $5 = $5 + 16 | 0;
           $6 = $6 + -4 | 0;
           if ($6) {
            continue label$60
           }
           break label$60;
          };
         }
         if (!$4) {
          break label$6
         }
         label$61 : while (1) {
          HEAP32[$5 >> 2] = HEAP32[($2 + ($1 << 2 | 0) | 0) >> 2] | 0;
          $1 = $1 + 1 | 0;
          $5 = $5 + 4 | 0;
          $4 = $4 + -1 | 0;
          if ($4) {
           continue label$61
          }
          break label$6;
         };
        }
        $7 = $3 & -4 | 0;
        $1 = 0;
        label$62 : while (1) {
         $3 = $1 << 2 | 0;
         HEAP32[$5 >> 2] = HEAP32[($4 + $3 | 0) >> 2] | 0;
         HEAP32[($5 + 4 | 0) >> 2] = HEAP32[($2 + $3 | 0) >> 2] | 0;
         $9 = $3 | 4 | 0;
         HEAP32[($5 + 8 | 0) >> 2] = HEAP32[($4 + $9 | 0) >> 2] | 0;
         HEAP32[($5 + 12 | 0) >> 2] = HEAP32[($2 + $9 | 0) >> 2] | 0;
         $9 = $3 | 8 | 0;
         HEAP32[($5 + 16 | 0) >> 2] = HEAP32[($4 + $9 | 0) >> 2] | 0;
         HEAP32[($5 + 20 | 0) >> 2] = HEAP32[($2 + $9 | 0) >> 2] | 0;
         $3 = $3 | 12 | 0;
         HEAP32[($5 + 24 | 0) >> 2] = HEAP32[($4 + $3 | 0) >> 2] | 0;
         HEAP32[($5 + 28 | 0) >> 2] = HEAP32[($2 + $3 | 0) >> 2] | 0;
         $1 = $1 + 4 | 0;
         $5 = $5 + 32 | 0;
         $7 = $7 + -4 | 0;
         if ($7) {
          continue label$62
         }
         break label$62;
        };
       }
       if (!$6) {
        break label$6
       }
       label$63 : while (1) {
        $3 = $1 << 2 | 0;
        HEAP32[$5 >> 2] = HEAP32[($4 + $3 | 0) >> 2] | 0;
        HEAP32[($5 + 4 | 0) >> 2] = HEAP32[($2 + $3 | 0) >> 2] | 0;
        $1 = $1 + 1 | 0;
        $5 = $5 + 8 | 0;
        $6 = $6 + -1 | 0;
        if ($6) {
         continue label$63
        }
        break label$6;
       };
      }
      $9 = $3 & -2 | 0;
      $3 = 0;
      label$64 : while (1) {
       $1 = $3 << 2 | 0;
       HEAP32[$5 >> 2] = HEAP32[($7 + $1 | 0) >> 2] | 0;
       HEAP32[($5 + 4 | 0) >> 2] = HEAP32[($6 + $1 | 0) >> 2] | 0;
       HEAP32[($5 + 8 | 0) >> 2] = HEAP32[($4 + $1 | 0) >> 2] | 0;
       HEAP32[($5 + 12 | 0) >> 2] = HEAP32[($2 + $1 | 0) >> 2] | 0;
       $1 = $1 | 4 | 0;
       HEAP32[($5 + 16 | 0) >> 2] = HEAP32[($7 + $1 | 0) >> 2] | 0;
       HEAP32[($5 + 20 | 0) >> 2] = HEAP32[($6 + $1 | 0) >> 2] | 0;
       HEAP32[($5 + 24 | 0) >> 2] = HEAP32[($4 + $1 | 0) >> 2] | 0;
       HEAP32[($5 + 28 | 0) >> 2] = HEAP32[($2 + $1 | 0) >> 2] | 0;
       $3 = $3 + 2 | 0;
       $5 = $5 + 32 | 0;
       $9 = $9 + -2 | 0;
       if ($9) {
        continue label$64
       }
       break label$64;
      };
     }
     if (!$10) {
      break label$6
     }
     $1 = $3 << 2 | 0;
     HEAP32[$5 >> 2] = HEAP32[($7 + $1 | 0) >> 2] | 0;
     HEAP32[($5 + 4 | 0) >> 2] = HEAP32[($6 + $1 | 0) >> 2] | 0;
     HEAP32[($5 + 8 | 0) >> 2] = HEAP32[($4 + $1 | 0) >> 2] | 0;
     HEAP32[($5 + 12 | 0) >> 2] = HEAP32[($2 + $1 | 0) >> 2] | 0;
     break label$6;
    }
    label$65 : {
     switch ($4 + -1 | 0 | 0) {
     case 3:
      if (!$3) {
       break label$6
      }
      if (!$2) {
       break label$6
      }
      $11 = $2 & -4 | 0;
      $10 = $2 & 3 | 0;
      $7 = 0;
      $12 = ($2 + -1 | 0) >>> 0 < 3 >>> 0;
      label$69 : while (1) {
       $2 = 0;
       $9 = $11;
       label$70 : {
        if ($12) {
         break label$70
        }
        label$71 : while (1) {
         $4 = $2 << 2 | 0;
         $6 = $7 << 2 | 0;
         HEAP32[$5 >> 2] = HEAP32[((HEAP32[($1 + $4 | 0) >> 2] | 0) + $6 | 0) >> 2] | 0;
         HEAP32[($5 + 4 | 0) >> 2] = HEAP32[((HEAP32[($1 + ($4 | 4 | 0) | 0) >> 2] | 0) + $6 | 0) >> 2] | 0;
         HEAP32[($5 + 8 | 0) >> 2] = HEAP32[((HEAP32[($1 + ($4 | 8 | 0) | 0) >> 2] | 0) + $6 | 0) >> 2] | 0;
         HEAP32[($5 + 12 | 0) >> 2] = HEAP32[((HEAP32[($1 + ($4 | 12 | 0) | 0) >> 2] | 0) + $6 | 0) >> 2] | 0;
         $2 = $2 + 4 | 0;
         $5 = $5 + 16 | 0;
         $9 = $9 + -4 | 0;
         if ($9) {
          continue label$71
         }
         break label$71;
        };
       }
       $4 = $10;
       label$72 : {
        if (!$4) {
         break label$72
        }
        label$73 : while (1) {
         HEAP32[$5 >> 2] = HEAP32[((HEAP32[($1 + ($2 << 2 | 0) | 0) >> 2] | 0) + ($7 << 2 | 0) | 0) >> 2] | 0;
         $2 = $2 + 1 | 0;
         $5 = $5 + 4 | 0;
         $4 = $4 + -1 | 0;
         if ($4) {
          continue label$73
         }
         break label$73;
        };
       }
       $7 = $7 + 1 | 0;
       if (($7 | 0) != ($3 | 0)) {
        continue label$69
       }
       break label$6;
      };
     case 2:
      if (!$3) {
       break label$6
      }
      if (!$2) {
       break label$6
      }
      $12 = $2 & -2 | 0;
      $13 = $2 & 1 | 0;
      $11 = 0;
      label$74 : while (1) {
       $4 = 0;
       $7 = $12;
       label$75 : {
        if (($2 | 0) == (1 | 0)) {
         break label$75
        }
        label$76 : while (1) {
         $9 = $4 << 2 | 0;
         $10 = $11 << 2 | 0;
         $6 = HEAP32[((HEAP32[($1 + $9 | 0) >> 2] | 0) + $10 | 0) >> 2] | 0;
         HEAP8[$5 >> 0] = $6;
         HEAP8[($5 + 2 | 0) >> 0] = $6 >>> 16 | 0;
         HEAP8[($5 + 1 | 0) >> 0] = $6 >>> 8 | 0;
         $6 = HEAP32[((HEAP32[($1 + ($9 | 4 | 0) | 0) >> 2] | 0) + $10 | 0) >> 2] | 0;
         HEAP8[($5 + 3 | 0) >> 0] = $6;
         HEAP8[($5 + 5 | 0) >> 0] = $6 >>> 16 | 0;
         HEAP8[($5 + 4 | 0) >> 0] = $6 >>> 8 | 0;
         $4 = $4 + 2 | 0;
         $5 = $5 + 6 | 0;
         $7 = $7 + -2 | 0;
         if ($7) {
          continue label$76
         }
         break label$76;
        };
       }
       label$77 : {
        if (!$13) {
         break label$77
        }
        $4 = HEAP32[((HEAP32[($1 + ($4 << 2 | 0) | 0) >> 2] | 0) + ($11 << 2 | 0) | 0) >> 2] | 0;
        HEAP8[$5 >> 0] = $4;
        HEAP8[($5 + 2 | 0) >> 0] = $4 >>> 16 | 0;
        HEAP8[($5 + 1 | 0) >> 0] = $4 >>> 8 | 0;
        $5 = $5 + 3 | 0;
       }
       $11 = $11 + 1 | 0;
       if (($11 | 0) != ($3 | 0)) {
        continue label$74
       }
       break label$6;
      };
     case 1:
      if (!$3) {
       break label$6
      }
      if (!$2) {
       break label$6
      }
      $11 = $2 & -4 | 0;
      $10 = $2 & 3 | 0;
      $7 = 0;
      $12 = ($2 + -1 | 0) >>> 0 < 3 >>> 0;
      label$78 : while (1) {
       $2 = 0;
       $9 = $11;
       label$79 : {
        if ($12) {
         break label$79
        }
        label$80 : while (1) {
         $4 = $2 << 2 | 0;
         $6 = $7 << 2 | 0;
         HEAP16[$5 >> 1] = HEAP32[((HEAP32[($1 + $4 | 0) >> 2] | 0) + $6 | 0) >> 2] | 0;
         HEAP16[($5 + 2 | 0) >> 1] = HEAP32[((HEAP32[($1 + ($4 | 4 | 0) | 0) >> 2] | 0) + $6 | 0) >> 2] | 0;
         HEAP16[($5 + 4 | 0) >> 1] = HEAP32[((HEAP32[($1 + ($4 | 8 | 0) | 0) >> 2] | 0) + $6 | 0) >> 2] | 0;
         HEAP16[($5 + 6 | 0) >> 1] = HEAP32[((HEAP32[($1 + ($4 | 12 | 0) | 0) >> 2] | 0) + $6 | 0) >> 2] | 0;
         $2 = $2 + 4 | 0;
         $5 = $5 + 8 | 0;
         $9 = $9 + -4 | 0;
         if ($9) {
          continue label$80
         }
         break label$80;
        };
       }
       $4 = $10;
       label$81 : {
        if (!$4) {
         break label$81
        }
        label$82 : while (1) {
         HEAP16[$5 >> 1] = HEAP32[((HEAP32[($1 + ($2 << 2 | 0) | 0) >> 2] | 0) + ($7 << 2 | 0) | 0) >> 2] | 0;
         $2 = $2 + 1 | 0;
         $5 = $5 + 2 | 0;
         $4 = $4 + -1 | 0;
         if ($4) {
          continue label$82
         }
         break label$82;
        };
       }
       $7 = $7 + 1 | 0;
       if (($7 | 0) != ($3 | 0)) {
        continue label$78
       }
       break label$6;
      };
     case 0:
      break label$65;
     default:
      break label$6;
     };
    }
    if (!$3) {
     break label$6
    }
    if (!$2) {
     break label$6
    }
    $11 = $2 & -4 | 0;
    $10 = $2 & 3 | 0;
    $7 = 0;
    $12 = ($2 + -1 | 0) >>> 0 < 3 >>> 0;
    label$83 : while (1) {
     $2 = 0;
     $9 = $11;
     label$84 : {
      if ($12) {
       break label$84
      }
      label$85 : while (1) {
       $4 = $2 << 2 | 0;
       $6 = $7 << 2 | 0;
       HEAP8[$5 >> 0] = HEAP32[((HEAP32[($1 + $4 | 0) >> 2] | 0) + $6 | 0) >> 2] | 0;
       HEAP8[($5 + 1 | 0) >> 0] = HEAP32[((HEAP32[($1 + ($4 | 4 | 0) | 0) >> 2] | 0) + $6 | 0) >> 2] | 0;
       HEAP8[($5 + 2 | 0) >> 0] = HEAP32[((HEAP32[($1 + ($4 | 8 | 0) | 0) >> 2] | 0) + $6 | 0) >> 2] | 0;
       HEAP8[($5 + 3 | 0) >> 0] = HEAP32[((HEAP32[($1 + ($4 | 12 | 0) | 0) >> 2] | 0) + $6 | 0) >> 2] | 0;
       $2 = $2 + 4 | 0;
       $5 = $5 + 4 | 0;
       $9 = $9 + -4 | 0;
       if ($9) {
        continue label$85
       }
       break label$85;
      };
     }
     $4 = $10;
     label$86 : {
      if (!$4) {
       break label$86
      }
      label$87 : while (1) {
       HEAP8[$5 >> 0] = HEAP32[((HEAP32[($1 + ($2 << 2 | 0) | 0) >> 2] | 0) + ($7 << 2 | 0) | 0) >> 2] | 0;
       $2 = $2 + 1 | 0;
       $5 = $5 + 1 | 0;
       $4 = $4 + -1 | 0;
       if ($4) {
        continue label$87
       }
       break label$87;
      };
     }
     $7 = $7 + 1 | 0;
     if (($7 | 0) != ($3 | 0)) {
      continue label$83
     }
     break label$83;
    };
   }
   $5 = HEAP32[($0 + 80 | 0) >> 2] | 0;
   $1 = $5 + $8 | 0;
   HEAP32[($0 + 80 | 0) >> 2] = $1;
   label$88 : {
    if ($1 >>> 0 >= $5 >>> 0) {
     break label$88
    }
    $1 = $0 + 84 | 0;
    HEAP32[$1 >> 2] = (HEAP32[$1 >> 2] | 0) + 1 | 0;
   }
   $1 = HEAP32[($0 + 88 | 0) >> 2] | 0;
   $4 = $5 | -64 | 0;
   label$89 : {
    label$90 : {
     $2 = 64 - ($5 & 63 | 0) | 0;
     if ($8 >>> 0 >= $2 >>> 0) {
      break label$90
     }
     __memcpy(($0 + $4 | 0) + 64 | 0 | 0, $1 | 0, $8 | 0) | 0;
     break label$89;
    }
    $3 = $0 + 64 | 0;
    __memcpy($3 + $4 | 0 | 0, $1 | 0, $2 | 0) | 0;
    FLAC__MD5Transform($3 | 0, $0 | 0);
    $5 = $1 + $2 | 0;
    label$91 : {
     $1 = $8 - $2 | 0;
     if ($1 >>> 0 < 64 >>> 0) {
      break label$91
     }
     label$92 : while (1) {
      i64toi32_i32$1 = $5;
      i64toi32_i32$2 = HEAPU8[$5 >> 0] | 0 | ((HEAPU8[($5 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($5 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($5 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
      i64toi32_i32$0 = HEAPU8[($5 + 4 | 0) >> 0] | 0 | ((HEAPU8[($5 + 5 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($5 + 6 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($5 + 7 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
      $1531 = i64toi32_i32$2;
      i64toi32_i32$2 = $0;
      $31 = $1531;
      HEAP8[$0 >> 0] = $31;
      HEAP8[($0 + 1 | 0) >> 0] = $31 >>> 8 | 0;
      HEAP8[($0 + 2 | 0) >> 0] = $31 >>> 16 | 0;
      HEAP8[($0 + 3 | 0) >> 0] = $31 >>> 24 | 0;
      HEAP8[($0 + 4 | 0) >> 0] = i64toi32_i32$0;
      HEAP8[($0 + 5 | 0) >> 0] = i64toi32_i32$0 >>> 8 | 0;
      HEAP8[($0 + 6 | 0) >> 0] = i64toi32_i32$0 >>> 16 | 0;
      HEAP8[($0 + 7 | 0) >> 0] = i64toi32_i32$0 >>> 24 | 0;
      i64toi32_i32$1 = $5 + 56 | 0;
      i64toi32_i32$0 = HEAPU8[i64toi32_i32$1 >> 0] | 0 | ((HEAPU8[(i64toi32_i32$1 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$1 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$1 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
      i64toi32_i32$2 = HEAPU8[(i64toi32_i32$1 + 4 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$1 + 5 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$1 + 6 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$1 + 7 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
      $1536 = i64toi32_i32$0;
      i64toi32_i32$0 = $0 + 56 | 0;
      $32 = $1536;
      HEAP8[i64toi32_i32$0 >> 0] = $32;
      HEAP8[(i64toi32_i32$0 + 1 | 0) >> 0] = $32 >>> 8 | 0;
      HEAP8[(i64toi32_i32$0 + 2 | 0) >> 0] = $32 >>> 16 | 0;
      HEAP8[(i64toi32_i32$0 + 3 | 0) >> 0] = $32 >>> 24 | 0;
      HEAP8[(i64toi32_i32$0 + 4 | 0) >> 0] = i64toi32_i32$2;
      HEAP8[(i64toi32_i32$0 + 5 | 0) >> 0] = i64toi32_i32$2 >>> 8 | 0;
      HEAP8[(i64toi32_i32$0 + 6 | 0) >> 0] = i64toi32_i32$2 >>> 16 | 0;
      HEAP8[(i64toi32_i32$0 + 7 | 0) >> 0] = i64toi32_i32$2 >>> 24 | 0;
      i64toi32_i32$1 = $5 + 48 | 0;
      i64toi32_i32$2 = HEAPU8[i64toi32_i32$1 >> 0] | 0 | ((HEAPU8[(i64toi32_i32$1 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$1 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$1 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
      i64toi32_i32$0 = HEAPU8[(i64toi32_i32$1 + 4 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$1 + 5 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$1 + 6 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$1 + 7 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
      $1541 = i64toi32_i32$2;
      i64toi32_i32$2 = $0 + 48 | 0;
      $33 = $1541;
      HEAP8[i64toi32_i32$2 >> 0] = $33;
      HEAP8[(i64toi32_i32$2 + 1 | 0) >> 0] = $33 >>> 8 | 0;
      HEAP8[(i64toi32_i32$2 + 2 | 0) >> 0] = $33 >>> 16 | 0;
      HEAP8[(i64toi32_i32$2 + 3 | 0) >> 0] = $33 >>> 24 | 0;
      HEAP8[(i64toi32_i32$2 + 4 | 0) >> 0] = i64toi32_i32$0;
      HEAP8[(i64toi32_i32$2 + 5 | 0) >> 0] = i64toi32_i32$0 >>> 8 | 0;
      HEAP8[(i64toi32_i32$2 + 6 | 0) >> 0] = i64toi32_i32$0 >>> 16 | 0;
      HEAP8[(i64toi32_i32$2 + 7 | 0) >> 0] = i64toi32_i32$0 >>> 24 | 0;
      i64toi32_i32$1 = $5 + 40 | 0;
      i64toi32_i32$0 = HEAPU8[i64toi32_i32$1 >> 0] | 0 | ((HEAPU8[(i64toi32_i32$1 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$1 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$1 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
      i64toi32_i32$2 = HEAPU8[(i64toi32_i32$1 + 4 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$1 + 5 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$1 + 6 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$1 + 7 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
      $1546 = i64toi32_i32$0;
      i64toi32_i32$0 = $0 + 40 | 0;
      $34 = $1546;
      HEAP8[i64toi32_i32$0 >> 0] = $34;
      HEAP8[(i64toi32_i32$0 + 1 | 0) >> 0] = $34 >>> 8 | 0;
      HEAP8[(i64toi32_i32$0 + 2 | 0) >> 0] = $34 >>> 16 | 0;
      HEAP8[(i64toi32_i32$0 + 3 | 0) >> 0] = $34 >>> 24 | 0;
      HEAP8[(i64toi32_i32$0 + 4 | 0) >> 0] = i64toi32_i32$2;
      HEAP8[(i64toi32_i32$0 + 5 | 0) >> 0] = i64toi32_i32$2 >>> 8 | 0;
      HEAP8[(i64toi32_i32$0 + 6 | 0) >> 0] = i64toi32_i32$2 >>> 16 | 0;
      HEAP8[(i64toi32_i32$0 + 7 | 0) >> 0] = i64toi32_i32$2 >>> 24 | 0;
      i64toi32_i32$1 = $5 + 32 | 0;
      i64toi32_i32$2 = HEAPU8[i64toi32_i32$1 >> 0] | 0 | ((HEAPU8[(i64toi32_i32$1 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$1 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$1 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
      i64toi32_i32$0 = HEAPU8[(i64toi32_i32$1 + 4 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$1 + 5 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$1 + 6 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$1 + 7 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
      $1551 = i64toi32_i32$2;
      i64toi32_i32$2 = $0 + 32 | 0;
      $35 = $1551;
      HEAP8[i64toi32_i32$2 >> 0] = $35;
      HEAP8[(i64toi32_i32$2 + 1 | 0) >> 0] = $35 >>> 8 | 0;
      HEAP8[(i64toi32_i32$2 + 2 | 0) >> 0] = $35 >>> 16 | 0;
      HEAP8[(i64toi32_i32$2 + 3 | 0) >> 0] = $35 >>> 24 | 0;
      HEAP8[(i64toi32_i32$2 + 4 | 0) >> 0] = i64toi32_i32$0;
      HEAP8[(i64toi32_i32$2 + 5 | 0) >> 0] = i64toi32_i32$0 >>> 8 | 0;
      HEAP8[(i64toi32_i32$2 + 6 | 0) >> 0] = i64toi32_i32$0 >>> 16 | 0;
      HEAP8[(i64toi32_i32$2 + 7 | 0) >> 0] = i64toi32_i32$0 >>> 24 | 0;
      i64toi32_i32$1 = $5 + 24 | 0;
      i64toi32_i32$0 = HEAPU8[i64toi32_i32$1 >> 0] | 0 | ((HEAPU8[(i64toi32_i32$1 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$1 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$1 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
      i64toi32_i32$2 = HEAPU8[(i64toi32_i32$1 + 4 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$1 + 5 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$1 + 6 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$1 + 7 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
      $1556 = i64toi32_i32$0;
      i64toi32_i32$0 = $0 + 24 | 0;
      $36 = $1556;
      HEAP8[i64toi32_i32$0 >> 0] = $36;
      HEAP8[(i64toi32_i32$0 + 1 | 0) >> 0] = $36 >>> 8 | 0;
      HEAP8[(i64toi32_i32$0 + 2 | 0) >> 0] = $36 >>> 16 | 0;
      HEAP8[(i64toi32_i32$0 + 3 | 0) >> 0] = $36 >>> 24 | 0;
      HEAP8[(i64toi32_i32$0 + 4 | 0) >> 0] = i64toi32_i32$2;
      HEAP8[(i64toi32_i32$0 + 5 | 0) >> 0] = i64toi32_i32$2 >>> 8 | 0;
      HEAP8[(i64toi32_i32$0 + 6 | 0) >> 0] = i64toi32_i32$2 >>> 16 | 0;
      HEAP8[(i64toi32_i32$0 + 7 | 0) >> 0] = i64toi32_i32$2 >>> 24 | 0;
      i64toi32_i32$1 = $5 + 16 | 0;
      i64toi32_i32$2 = HEAPU8[i64toi32_i32$1 >> 0] | 0 | ((HEAPU8[(i64toi32_i32$1 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$1 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$1 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
      i64toi32_i32$0 = HEAPU8[(i64toi32_i32$1 + 4 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$1 + 5 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$1 + 6 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$1 + 7 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
      $1561 = i64toi32_i32$2;
      i64toi32_i32$2 = $0 + 16 | 0;
      $37 = $1561;
      HEAP8[i64toi32_i32$2 >> 0] = $37;
      HEAP8[(i64toi32_i32$2 + 1 | 0) >> 0] = $37 >>> 8 | 0;
      HEAP8[(i64toi32_i32$2 + 2 | 0) >> 0] = $37 >>> 16 | 0;
      HEAP8[(i64toi32_i32$2 + 3 | 0) >> 0] = $37 >>> 24 | 0;
      HEAP8[(i64toi32_i32$2 + 4 | 0) >> 0] = i64toi32_i32$0;
      HEAP8[(i64toi32_i32$2 + 5 | 0) >> 0] = i64toi32_i32$0 >>> 8 | 0;
      HEAP8[(i64toi32_i32$2 + 6 | 0) >> 0] = i64toi32_i32$0 >>> 16 | 0;
      HEAP8[(i64toi32_i32$2 + 7 | 0) >> 0] = i64toi32_i32$0 >>> 24 | 0;
      i64toi32_i32$1 = $5 + 8 | 0;
      i64toi32_i32$0 = HEAPU8[i64toi32_i32$1 >> 0] | 0 | ((HEAPU8[(i64toi32_i32$1 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$1 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$1 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
      i64toi32_i32$2 = HEAPU8[(i64toi32_i32$1 + 4 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$1 + 5 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$1 + 6 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$1 + 7 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
      $1566 = i64toi32_i32$0;
      i64toi32_i32$0 = $0 + 8 | 0;
      $38 = $1566;
      HEAP8[i64toi32_i32$0 >> 0] = $38;
      HEAP8[(i64toi32_i32$0 + 1 | 0) >> 0] = $38 >>> 8 | 0;
      HEAP8[(i64toi32_i32$0 + 2 | 0) >> 0] = $38 >>> 16 | 0;
      HEAP8[(i64toi32_i32$0 + 3 | 0) >> 0] = $38 >>> 24 | 0;
      HEAP8[(i64toi32_i32$0 + 4 | 0) >> 0] = i64toi32_i32$2;
      HEAP8[(i64toi32_i32$0 + 5 | 0) >> 0] = i64toi32_i32$2 >>> 8 | 0;
      HEAP8[(i64toi32_i32$0 + 6 | 0) >> 0] = i64toi32_i32$2 >>> 16 | 0;
      HEAP8[(i64toi32_i32$0 + 7 | 0) >> 0] = i64toi32_i32$2 >>> 24 | 0;
      FLAC__MD5Transform($3 | 0, $0 | 0);
      $5 = $5 + 64 | 0;
      $1 = $1 + -64 | 0;
      if ($1 >>> 0 > 63 >>> 0) {
       continue label$92
      }
      break label$92;
     };
    }
    __memcpy($0 | 0, $5 | 0, $1 | 0) | 0;
   }
   $5 = 1;
  }
  return $5 | 0;
 }
 
 function dummy($0) {
  $0 = $0 | 0;
  return $0 | 0;
 }
 
 function __stdio_close($0) {
  $0 = $0 | 0;
  return __wasi_fd_close(dummy(HEAP32[($0 + 60 | 0) >> 2] | 0 | 0) | 0 | 0) | 0 | 0;
 }
 
 function __wasi_syscall_ret($0) {
  $0 = $0 | 0;
  var wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  label$1 : {
   if ($0) {
    break label$1
   }
   return 0 | 0;
  }
  (wasm2js_i32$0 = __errno_location() | 0, wasm2js_i32$1 = $0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  return -1 | 0;
 }
 
 function __stdio_read($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0;
  $3 = __stack_pointer - 32 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 16 | 0) >> 2] = $1;
  $4 = HEAP32[($0 + 48 | 0) >> 2] | 0;
  HEAP32[($3 + 20 | 0) >> 2] = $2 - (($4 | 0) != (0 | 0)) | 0;
  $5 = HEAP32[($0 + 44 | 0) >> 2] | 0;
  HEAP32[($3 + 28 | 0) >> 2] = $4;
  HEAP32[($3 + 24 | 0) >> 2] = $5;
  $4 = -1;
  label$1 : {
   label$2 : {
    label$3 : {
     if (__wasi_syscall_ret(__wasi_fd_read(HEAP32[($0 + 60 | 0) >> 2] | 0 | 0, $3 + 16 | 0 | 0, 2 | 0, $3 + 12 | 0 | 0) | 0 | 0) | 0) {
      break label$3
     }
     $4 = HEAP32[($3 + 12 | 0) >> 2] | 0;
     if (($4 | 0) > (0 | 0)) {
      break label$2
     }
    }
    HEAP32[$0 >> 2] = ($4 & 48 | 0) ^ 16 | 0 | (HEAP32[$0 >> 2] | 0) | 0;
    break label$1;
   }
   $6 = HEAP32[($3 + 20 | 0) >> 2] | 0;
   if ($4 >>> 0 <= $6 >>> 0) {
    break label$1
   }
   $5 = HEAP32[($0 + 44 | 0) >> 2] | 0;
   HEAP32[($0 + 4 | 0) >> 2] = $5;
   HEAP32[($0 + 8 | 0) >> 2] = $5 + ($4 - $6 | 0) | 0;
   label$4 : {
    if (!(HEAP32[($0 + 48 | 0) >> 2] | 0)) {
     break label$4
    }
    HEAP32[($0 + 4 | 0) >> 2] = $5 + 1 | 0;
    HEAP8[(($2 + $1 | 0) + -1 | 0) >> 0] = HEAPU8[$5 >> 0] | 0;
   }
   $4 = $2;
  }
  __stack_pointer = $3 + 32 | 0;
  return $4 | 0;
 }
 
 function __stdio_seek($0, $1, $1$hi, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $1$hi = $1$hi | 0;
  $2 = $2 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, $3 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  i64toi32_i32$0 = $1$hi;
  $0 = __wasi_syscall_ret(legalfunc$__wasi_fd_seek(HEAP32[($0 + 60 | 0) >> 2] | 0 | 0, $1 | 0, i64toi32_i32$0 | 0, $2 & 255 | 0 | 0, $3 + 8 | 0 | 0) | 0 | 0) | 0;
  i64toi32_i32$2 = $3;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] | 0;
  $1 = i64toi32_i32$0;
  $1$hi = i64toi32_i32$1;
  __stack_pointer = i64toi32_i32$2 + 16 | 0;
  i64toi32_i32$1 = -1;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$3 = $0 ? -1 : $1;
  i64toi32_i32$2 = $0 ? i64toi32_i32$1 : i64toi32_i32$0;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$2;
  return i64toi32_i32$3 | 0;
 }
 
 function fflush($0) {
  $0 = $0 | 0;
  var $2 = 0, $1 = 0;
  label$1 : {
   label$2 : {
    if (!$0) {
     break label$2
    }
    label$3 : {
     if ((HEAP32[($0 + 76 | 0) >> 2] | 0 | 0) > (-1 | 0)) {
      break label$3
     }
     return __fflush_unlocked($0 | 0) | 0 | 0;
    }
    $1 = __lockfile($0 | 0) | 0;
    $2 = __fflush_unlocked($0 | 0) | 0;
    if (!$1) {
     break label$1
    }
    __unlockfile($0 | 0);
    return $2 | 0;
   }
   $2 = 0;
   label$4 : {
    if (!(HEAP32[(0 + 11152 | 0) >> 2] | 0)) {
     break label$4
    }
    $2 = fflush(HEAP32[(0 + 11152 | 0) >> 2] | 0 | 0) | 0;
   }
   label$5 : {
    $0 = HEAP32[(__ofl_lock() | 0) >> 2] | 0;
    if (!$0) {
     break label$5
    }
    label$6 : while (1) {
     $1 = 0;
     label$7 : {
      if ((HEAP32[($0 + 76 | 0) >> 2] | 0 | 0) < (0 | 0)) {
       break label$7
      }
      $1 = __lockfile($0 | 0) | 0;
     }
     label$8 : {
      if ((HEAP32[($0 + 20 | 0) >> 2] | 0) >>> 0 <= (HEAP32[($0 + 28 | 0) >> 2] | 0) >>> 0) {
       break label$8
      }
      $2 = __fflush_unlocked($0 | 0) | 0 | $2 | 0;
     }
     label$9 : {
      if (!$1) {
       break label$9
      }
      __unlockfile($0 | 0);
     }
     $0 = HEAP32[($0 + 56 | 0) >> 2] | 0;
     if ($0) {
      continue label$6
     }
     break label$6;
    };
   }
   __ofl_unlock();
  }
  return $2 | 0;
 }
 
 function __fflush_unlocked($0) {
  $0 = $0 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $1 = 0, $2 = 0;
  label$1 : {
   if ((HEAP32[($0 + 20 | 0) >> 2] | 0) >>> 0 <= (HEAP32[($0 + 28 | 0) >> 2] | 0) >>> 0) {
    break label$1
   }
   FUNCTION_TABLE[HEAP32[($0 + 36 | 0) >> 2] | 0 | 0]($0, 0, 0) | 0;
   if (HEAP32[($0 + 20 | 0) >> 2] | 0) {
    break label$1
   }
   return -1 | 0;
  }
  label$2 : {
   $1 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   $2 = HEAP32[($0 + 8 | 0) >> 2] | 0;
   if ($1 >>> 0 >= $2 >>> 0) {
    break label$2
   }
   i64toi32_i32$1 = $1 - $2 | 0;
   i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
   i64toi32_i32$0 = FUNCTION_TABLE[HEAP32[($0 + 40 | 0) >> 2] | 0 | 0]($0, i64toi32_i32$1, i64toi32_i32$0, 1) | 0;
   i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  }
  HEAP32[($0 + 28 | 0) >> 2] = 0;
  i64toi32_i32$0 = $0;
  i64toi32_i32$1 = 0;
  HEAP32[($0 + 16 | 0) >> 2] = 0;
  HEAP32[($0 + 20 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$0 = $0;
  i64toi32_i32$1 = 0;
  HEAP32[($0 + 4 | 0) >> 2] = 0;
  HEAP32[($0 + 8 | 0) >> 2] = i64toi32_i32$1;
  return 0 | 0;
 }
 
 function dummy_1($0) {
  $0 = $0 | 0;
 }
 
 function fclose($0) {
  $0 = $0 | 0;
  var $5 = 0, $4 = 0, $3 = 0, $1 = 0, $2 = 0;
  $1 = 0;
  label$1 : {
   if ((HEAP32[($0 + 76 | 0) >> 2] | 0 | 0) < (0 | 0)) {
    break label$1
   }
   $1 = __lockfile($0 | 0) | 0;
  }
  dummy_1($0 | 0);
  label$2 : {
   $2 = (HEAP32[$0 >> 2] | 0) & 1 | 0;
   if ($2) {
    break label$2
   }
   $3 = __ofl_lock() | 0;
   label$3 : {
    $4 = HEAP32[($0 + 52 | 0) >> 2] | 0;
    if (!$4) {
     break label$3
    }
    HEAP32[($4 + 56 | 0) >> 2] = HEAP32[($0 + 56 | 0) >> 2] | 0;
   }
   label$4 : {
    $5 = HEAP32[($0 + 56 | 0) >> 2] | 0;
    if (!$5) {
     break label$4
    }
    HEAP32[($5 + 52 | 0) >> 2] = $4;
   }
   label$5 : {
    if ((HEAP32[$3 >> 2] | 0 | 0) != ($0 | 0)) {
     break label$5
    }
    HEAP32[$3 >> 2] = $5;
   }
   __ofl_unlock();
  }
  $3 = fflush($0 | 0) | 0;
  $4 = FUNCTION_TABLE[HEAP32[($0 + 12 | 0) >> 2] | 0 | 0]($0) | 0;
  label$6 : {
   $5 = HEAP32[($0 + 96 | 0) >> 2] | 0;
   if (!$5) {
    break label$6
   }
   dlfree($5 | 0);
  }
  label$7 : {
   label$8 : {
    if ($2) {
     break label$8
    }
    dlfree($0 | 0);
    break label$7;
   }
   if (!$1) {
    break label$7
   }
   __unlockfile($0 | 0);
  }
  return $4 | $3 | 0 | 0;
 }
 
 function memcmp($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     if ($2 >>> 0 < 4 >>> 0) {
      break label$3
     }
     if (($1 | $0 | 0) & 3 | 0) {
      break label$2
     }
     label$4 : while (1) {
      if ((HEAP32[$0 >> 2] | 0 | 0) != (HEAP32[$1 >> 2] | 0 | 0)) {
       break label$2
      }
      $1 = $1 + 4 | 0;
      $0 = $0 + 4 | 0;
      $2 = $2 + -4 | 0;
      if ($2 >>> 0 > 3 >>> 0) {
       continue label$4
      }
      break label$4;
     };
    }
    if (!$2) {
     break label$1
    }
   }
   label$5 : {
    label$6 : while (1) {
     $3 = HEAPU8[$0 >> 0] | 0;
     $4 = HEAPU8[$1 >> 0] | 0;
     if (($3 | 0) != ($4 | 0)) {
      break label$5
     }
     $1 = $1 + 1 | 0;
     $0 = $0 + 1 | 0;
     $2 = $2 + -1 | 0;
     if (!$2) {
      break label$1
     }
     continue label$6;
    };
   }
   return $3 - $4 | 0 | 0;
  }
  return 0 | 0;
 }
 
 function FLAC__cpu_info($0) {
  $0 = $0 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0;
  i64toi32_i32$1 = $0;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 3;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = i64toi32_i32$1 + 56 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 48 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 40 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 32 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 24 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 16 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
 }
 
 function round($0) {
  $0 = +$0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, $3 = 0.0, $1 = 0, $1$hi = 0, $14 = 0, $2 = 0, $15 = 0, $17 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $16 = 0.0, $18 = 0.0, $42 = 0.0, $44 = 0.0;
  label$1 : {
   wasm2js_scratch_store_f64(+$0);
   i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
   $1 = wasm2js_scratch_load_i32(0 | 0) | 0;
   $1$hi = i64toi32_i32$0;
   i64toi32_i32$2 = $1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 52;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = 0;
    $14 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    $14 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
   }
   $2 = $14 & 2047 | 0;
   if ($2 >>> 0 > 1074 >>> 0) {
    break label$1
   }
   label$2 : {
    if ($2 >>> 0 > 1021 >>> 0) {
     break label$2
    }
    return +($0 * 0.0);
   }
   label$3 : {
    label$4 : {
     $16 = $0;
     $18 = -$0;
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$0 = $1;
     i64toi32_i32$2 = -1;
     i64toi32_i32$3 = -1;
     if ((i64toi32_i32$1 | 0) > (i64toi32_i32$2 | 0)) {
      $15 = 1
     } else {
      if ((i64toi32_i32$1 | 0) >= (i64toi32_i32$2 | 0)) {
       if (i64toi32_i32$0 >>> 0 <= i64toi32_i32$3 >>> 0) {
        $17 = 0
       } else {
        $17 = 1
       }
       $19 = $17;
      } else {
       $19 = 0
      }
      $15 = $19;
     }
     $0 = $15 ? $16 : $18;
     $3 = $0 + 4503599627370496.0 + -4503599627370496.0 - $0;
     if (!($3 > .5)) {
      break label$4
     }
     $0 = $0 + $3 + -1.0;
     break label$3;
    }
    $0 = $0 + $3;
    if (!($3 <= -.5)) {
     break label$3
    }
    $0 = $0 + 1.0;
   }
   $42 = $0;
   $44 = -$0;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$3 = $1;
   i64toi32_i32$1 = -1;
   i64toi32_i32$2 = -1;
   if ((i64toi32_i32$0 | 0) > (i64toi32_i32$1 | 0)) {
    $20 = 1
   } else {
    if ((i64toi32_i32$0 | 0) >= (i64toi32_i32$1 | 0)) {
     if (i64toi32_i32$3 >>> 0 <= i64toi32_i32$2 >>> 0) {
      $21 = 0
     } else {
      $21 = 1
     }
     $22 = $21;
    } else {
     $22 = 0
    }
    $20 = $22;
   }
   $0 = $20 ? $42 : $44;
  }
  return +$0;
 }
 
 function lround($0) {
  $0 = +$0;
  label$1 : {
   $0 = +round(+$0);
   if (!(Math_abs($0) < 2147483648.0)) {
    break label$1
   }
   return ~~$0 | 0;
  }
  return -2147483648 | 0;
 }
 
 function log($0) {
  $0 = +$0;
  var i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, $5 = 0.0, $1 = 0, $2 = 0, $1$hi = 0, $3 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $4 = 0, $27 = 0, $28 = 0, $6 = 0.0, $50 = 0.0, $55$hi = 0, $57 = 0, $57$hi = 0, $61 = 0.0, $63 = 0.0, $68 = 0.0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       wasm2js_scratch_store_f64(+$0);
       i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
       $1 = wasm2js_scratch_load_i32(0 | 0) | 0;
       $1$hi = i64toi32_i32$0;
       i64toi32_i32$2 = $1;
       i64toi32_i32$1 = 0;
       i64toi32_i32$3 = 32;
       i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
        i64toi32_i32$1 = 0;
        $20 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
       } else {
        i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
        $20 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
       }
       $2 = $20;
       if ($2 >>> 0 < 1048576 >>> 0) {
        break label$5
       }
       i64toi32_i32$1 = $1$hi;
       i64toi32_i32$0 = $1;
       i64toi32_i32$2 = -1;
       i64toi32_i32$3 = -1;
       if ((i64toi32_i32$1 | 0) > (i64toi32_i32$2 | 0)) {
        $21 = 1
       } else {
        if ((i64toi32_i32$1 | 0) >= (i64toi32_i32$2 | 0)) {
         if (i64toi32_i32$0 >>> 0 <= i64toi32_i32$3 >>> 0) {
          $22 = 0
         } else {
          $22 = 1
         }
         $23 = $22;
        } else {
         $23 = 0
        }
        $21 = $23;
       }
       if ($21) {
        break label$4
       }
      }
      label$6 : {
       i64toi32_i32$0 = $1$hi;
       i64toi32_i32$3 = $1;
       i64toi32_i32$1 = 2147483647;
       i64toi32_i32$2 = -1;
       i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
       i64toi32_i32$0 = i64toi32_i32$3 & i64toi32_i32$2 | 0;
       i64toi32_i32$3 = 0;
       i64toi32_i32$2 = 0;
       if ((i64toi32_i32$0 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$3 | 0) | 0) {
        break label$6
       }
       return +(-1.0 / ($0 * $0));
      }
      i64toi32_i32$0 = $1$hi;
      i64toi32_i32$2 = $1;
      i64toi32_i32$1 = -1;
      i64toi32_i32$3 = -1;
      if ((i64toi32_i32$0 | 0) > (i64toi32_i32$1 | 0)) {
       $24 = 1
      } else {
       if ((i64toi32_i32$0 | 0) >= (i64toi32_i32$1 | 0)) {
        if (i64toi32_i32$2 >>> 0 <= i64toi32_i32$3 >>> 0) {
         $25 = 0
        } else {
         $25 = 1
        }
        $26 = $25;
       } else {
        $26 = 0
       }
       $24 = $26;
      }
      if ($24) {
       break label$3
      }
      return +(($0 - $0) / 0.0);
     }
     if ($2 >>> 0 > 2146435071 >>> 0) {
      break label$1
     }
     $3 = 1072693248;
     $4 = -1023;
     label$7 : {
      if (($2 | 0) == (1072693248 | 0)) {
       break label$7
      }
      $3 = $2;
      break label$2;
     }
     i64toi32_i32$2 = $1$hi;
     if ($1) {
      break label$2
     }
     return +(0.0);
    }
    wasm2js_scratch_store_f64(+($0 * 18014398509481984.0));
    i64toi32_i32$2 = wasm2js_scratch_load_i32(1 | 0) | 0;
    $1 = wasm2js_scratch_load_i32(0 | 0) | 0;
    $1$hi = i64toi32_i32$2;
    i64toi32_i32$3 = $1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = 32;
    i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = 0;
     $27 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
     $27 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
    }
    $3 = $27;
    $4 = -1077;
   }
   $2 = $3 + 614242 | 0;
   $5 = +($4 + ($2 >>> 20 | 0) | 0 | 0);
   $50 = $5 * .6931471803691238;
   i64toi32_i32$0 = 0;
   i64toi32_i32$2 = ($2 & 1048575 | 0) + 1072079006 | 0;
   i64toi32_i32$3 = 0;
   i64toi32_i32$1 = 32;
   i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
    i64toi32_i32$3 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
    $28 = 0;
   } else {
    i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
    $28 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   }
   $55$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $1$hi;
   i64toi32_i32$0 = $1;
   i64toi32_i32$2 = 0;
   i64toi32_i32$1 = -1;
   i64toi32_i32$2 = i64toi32_i32$3 & i64toi32_i32$2 | 0;
   $57 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
   $57$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $55$hi;
   i64toi32_i32$3 = $28;
   i64toi32_i32$0 = $57$hi;
   i64toi32_i32$1 = $57;
   i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
   wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$3 | i64toi32_i32$1 | 0 | 0);
   wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$0 | 0);
   $0 = +wasm2js_scratch_load_f64() + -1.0;
   $61 = $0;
   $63 = $5 * 1.9082149292705877e-10;
   $5 = $0 / ($0 + 2.0);
   $68 = $5;
   $6 = $0 * ($0 * .5);
   $5 = $5 * $5;
   $0 = $5 * $5;
   $0 = $50 + ($61 + ($63 + $68 * ($6 + ($0 * ($0 * ($0 * .15313837699209373 + .22222198432149784) + .3999999999940942) + $5 * ($0 * ($0 * ($0 * .14798198605116586 + .1818357216161805) + .2857142874366239) + .6666666666666735))) - $6));
  }
  return +$0;
 }
 
 function FLAC__lpc_window_data($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $5 = 0, $6 = 0, $4 = 0;
  label$1 : {
   if (!$3) {
    break label$1
   }
   $4 = $3 & 1 | 0;
   $5 = 0;
   label$2 : {
    if (($3 | 0) == (1 | 0)) {
     break label$2
    }
    $6 = $3 & -2 | 0;
    $5 = 0;
    label$3 : while (1) {
     $3 = $5 << 2 | 0;
     HEAPF32[($2 + $3 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($1 + $3 | 0) >> 2]) * Math_fround(HEAP32[($0 + $3 | 0) >> 2] | 0 | 0));
     $3 = $3 | 4 | 0;
     HEAPF32[($2 + $3 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($1 + $3 | 0) >> 2]) * Math_fround(HEAP32[($0 + $3 | 0) >> 2] | 0 | 0));
     $5 = $5 + 2 | 0;
     $6 = $6 + -2 | 0;
     if ($6) {
      continue label$3
     }
     break label$3;
    };
   }
   if (!$4) {
    break label$1
   }
   $3 = $5 << 2 | 0;
   HEAPF32[($2 + $3 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($1 + $3 | 0) >> 2]) * Math_fround(HEAP32[($0 + $3 | 0) >> 2] | 0 | 0));
  }
 }
 
 function FLAC__lpc_compute_autocorrelation($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $10 = 0, $5 = 0, $11 = 0, $6 = 0, $12 = 0, $4 = 0, $9 = Math_fround(0), $13 = 0, $7 = 0, $8 = 0;
  $4 = $1 - $2 | 0;
  label$1 : {
   label$2 : {
    if ($2) {
     break label$2
    }
    $5 = 0;
    label$3 : while (1) {
     $5 = $5 + 1 | 0;
     if ($5 >>> 0 <= $4 >>> 0) {
      continue label$3
     }
     break label$1;
    };
   }
   $5 = 0;
   $6 = memset($3 | 0, 0 | 0, $2 << 2 | 0 | 0) | 0;
   $7 = $2 & -2 | 0;
   $8 = $2 & 1 | 0;
   label$4 : while (1) {
    $9 = Math_fround(HEAPF32[($0 + ($5 << 2 | 0) | 0) >> 2]);
    $10 = 0;
    $11 = $7;
    label$5 : {
     if (($2 | 0) == (1 | 0)) {
      break label$5
     }
     label$6 : while (1) {
      $12 = $6 + ($10 << 2 | 0) | 0;
      HEAPF32[$12 >> 2] = Math_fround(Math_fround(HEAPF32[$12 >> 2]) + Math_fround($9 * Math_fround(HEAPF32[($0 + (($10 + $5 | 0) << 2 | 0) | 0) >> 2])));
      $12 = $10 | 1 | 0;
      $13 = $6 + ($12 << 2 | 0) | 0;
      HEAPF32[$13 >> 2] = Math_fround(Math_fround(HEAPF32[$13 >> 2]) + Math_fround($9 * Math_fround(HEAPF32[($0 + (($12 + $5 | 0) << 2 | 0) | 0) >> 2])));
      $10 = $10 + 2 | 0;
      $11 = $11 + -2 | 0;
      if ($11) {
       continue label$6
      }
      break label$6;
     };
    }
    label$7 : {
     if (!$8) {
      break label$7
     }
     $11 = $6 + ($10 << 2 | 0) | 0;
     HEAPF32[$11 >> 2] = Math_fround(Math_fround(HEAPF32[$11 >> 2]) + Math_fround($9 * Math_fround(HEAPF32[($0 + (($10 + $5 | 0) << 2 | 0) | 0) >> 2])));
    }
    $5 = $5 + 1 | 0;
    if ($5 >>> 0 <= $4 >>> 0) {
     continue label$4
    }
    break label$4;
   };
  }
  label$8 : {
   if ($5 >>> 0 >= $1 >>> 0) {
    break label$8
   }
   $7 = ($5 ^ -1 | 0) + $1 | 0;
   $4 = 0;
   $11 = $5;
   label$9 : while (1) {
    label$10 : {
     if (($11 | 0) == ($1 | 0)) {
      break label$10
     }
     $9 = Math_fround(HEAPF32[($0 + ($11 << 2 | 0) | 0) >> 2]);
     $6 = $1 - ($5 + $4 | 0) | 0;
     $2 = $6 & 1 | 0;
     $10 = 0;
     label$11 : {
      if (($7 | 0) == ($4 | 0)) {
       break label$11
      }
      $6 = $6 & -2 | 0;
      $10 = 0;
      label$12 : while (1) {
       $12 = $3 + ($10 << 2 | 0) | 0;
       HEAPF32[$12 >> 2] = Math_fround(Math_fround(HEAPF32[$12 >> 2]) + Math_fround($9 * Math_fround(HEAPF32[($0 + (($10 + $11 | 0) << 2 | 0) | 0) >> 2])));
       $12 = $10 | 1 | 0;
       $13 = $3 + ($12 << 2 | 0) | 0;
       HEAPF32[$13 >> 2] = Math_fround(Math_fround(HEAPF32[$13 >> 2]) + Math_fround($9 * Math_fround(HEAPF32[($0 + (($12 + $11 | 0) << 2 | 0) | 0) >> 2])));
       $10 = $10 + 2 | 0;
       $6 = $6 + -2 | 0;
       if ($6) {
        continue label$12
       }
       break label$12;
      };
     }
     if (!$2) {
      break label$10
     }
     $6 = $3 + ($10 << 2 | 0) | 0;
     HEAPF32[$6 >> 2] = Math_fround(Math_fround(HEAPF32[$6 >> 2]) + Math_fround($9 * Math_fround(HEAPF32[($0 + (($10 + $11 | 0) << 2 | 0) | 0) >> 2])));
    }
    $4 = $4 + 1 | 0;
    $11 = $11 + 1 | 0;
    if (($11 | 0) != ($1 | 0)) {
     continue label$9
    }
    break label$9;
   };
  }
 }
 
 function FLAC__lpc_compute_lp_coefficients($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $11 = 0, $7 = 0, $9 = 0.0, $12 = 0, $4 = 0, $17 = 0.0, $6 = 0.0, $13 = 0, $14 = 0, $8 = 0, $10 = 0, $16 = 0, $5 = 0, $15 = 0, $129 = 0, $156 = 0;
  $4 = __stack_pointer - 256 | 0;
  __stack_pointer = $4;
  $5 = HEAP32[$1 >> 2] | 0;
  $6 = +Math_fround(HEAPF32[$0 >> 2]);
  $7 = 0;
  label$1 : {
   label$2 : while (1) {
    if (($7 | 0) == ($5 | 0)) {
     break label$1
    }
    $8 = $7 + 1 | 0;
    $9 = +Math_fround(-Math_fround(HEAPF32[($0 + ($8 << 2 | 0) | 0) >> 2]));
    label$3 : {
     label$4 : {
      if (!$7) {
       break label$4
      }
      $10 = $7 & 1 | 0;
      $11 = 0;
      label$5 : {
       if (($7 | 0) == (1 | 0)) {
        break label$5
       }
       $12 = $7 & -2 | 0;
       $11 = 0;
       label$6 : while (1) {
        $13 = $11 | 1 | 0;
        $9 = $9 - +HEAPF64[($4 + ($11 << 3 | 0) | 0) >> 3] * +Math_fround(HEAPF32[($0 + (($7 - $11 | 0) << 2 | 0) | 0) >> 2]) - +HEAPF64[($4 + ($13 << 3 | 0) | 0) >> 3] * +Math_fround(HEAPF32[($0 + (($7 - $13 | 0) << 2 | 0) | 0) >> 2]);
        $11 = $11 + 2 | 0;
        $12 = $12 + -2 | 0;
        if ($12) {
         continue label$6
        }
        break label$6;
       };
      }
      label$7 : {
       if (!$10) {
        break label$7
       }
       $9 = $9 - +HEAPF64[($4 + ($11 << 3 | 0) | 0) >> 3] * +Math_fround(HEAPF32[($0 + (($7 - $11 | 0) << 2 | 0) | 0) >> 2]);
      }
      $9 = $9 / $6;
      HEAPF64[($4 + ($7 << 3 | 0) | 0) >> 3] = $9;
      $14 = 0;
      label$8 : {
       if ($7 >>> 0 < 2 >>> 0) {
        break label$8
       }
       $11 = $7 >>> 1 | 0;
       $14 = $11 >>> 0 > 1 >>> 0 ? $11 : 1;
       $15 = $14 & 1 | 0;
       $11 = 0;
       label$9 : {
        if ($7 >>> 0 < 4 >>> 0) {
         break label$9
        }
        $13 = $14 & 2147483646 | 0;
        $11 = 0;
        label$10 : while (1) {
         $16 = $11 << 3 | 0;
         $12 = $4 + $16 | 0;
         $129 = $12;
         $17 = +HEAPF64[$12 >> 3];
         $12 = $4 + (($7 + ($11 ^ -1 | 0) | 0) << 3 | 0) | 0;
         HEAPF64[$129 >> 3] = $17 + $9 * +HEAPF64[$12 >> 3];
         HEAPF64[$12 >> 3] = $9 * $17 + +HEAPF64[$12 >> 3];
         $12 = $4 + ($16 | 8 | 0) | 0;
         $156 = $12;
         $17 = +HEAPF64[$12 >> 3];
         $12 = ((($7 - $11 | 0) << 3 | 0) + $4 | 0) + -16 | 0;
         HEAPF64[$156 >> 3] = $17 + $9 * +HEAPF64[$12 >> 3];
         HEAPF64[$12 >> 3] = $9 * $17 + +HEAPF64[$12 >> 3];
         $11 = $11 + 2 | 0;
         $13 = $13 + -2 | 0;
         if ($13) {
          continue label$10
         }
         break label$10;
        };
       }
       if (!$15) {
        break label$8
       }
       $12 = $4 + ($11 << 3 | 0) | 0;
       $17 = +HEAPF64[$12 >> 3];
       $11 = $4 + (($7 + ($11 ^ -1 | 0) | 0) << 3 | 0) | 0;
       HEAPF64[$12 >> 3] = $17 + $9 * +HEAPF64[$11 >> 3];
       HEAPF64[$11 >> 3] = $9 * $17 + +HEAPF64[$11 >> 3];
      }
      if (!$10) {
       break label$3
      }
      $11 = $4 + ($14 << 3 | 0) | 0;
      $17 = +HEAPF64[$11 >> 3];
      HEAPF64[$11 >> 3] = $17 + $9 * $17;
      break label$3;
     }
     $9 = $9 / $6;
     HEAPF64[($4 + ($7 << 3 | 0) | 0) >> 3] = $9;
    }
    $9 = 1.0 - $9 * $9;
    $11 = 0;
    label$11 : while (1) {
     HEAPF32[(($2 + ($7 << 7 | 0) | 0) + ($11 << 2 | 0) | 0) >> 2] = Math_fround(-Math_fround(+HEAPF64[($4 + ($11 << 3 | 0) | 0) >> 3]));
     $11 = $11 + 1 | 0;
     if ($11 >>> 0 <= $7 >>> 0) {
      continue label$11
     }
     break label$11;
    };
    $6 = $6 * $9;
    HEAPF64[($3 + ($7 << 3 | 0) | 0) >> 3] = $6;
    $7 = $8;
    if ($6 != 0.0) {
     continue label$2
    }
    break label$2;
   };
   HEAP32[$1 >> 2] = $8;
  }
  __stack_pointer = $4 + 256 | 0;
 }
 
 function FLAC__lpc_quantize_coefficients($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $7 = 0, $8 = 0.0, $11 = 0, $9 = 0, $10 = 0, $12 = 0.0, $5 = 0, $6 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0, $151 = 0, $17 = Math_fround(0), $198 = 0;
  $5 = __stack_pointer - 16 | 0;
  __stack_pointer = $5;
  $6 = 2;
  label$1 : {
   if (!$1) {
    break label$1
   }
   $7 = $1 & 3 | 0;
   label$2 : {
    label$3 : {
     if (($1 + -1 | 0) >>> 0 >= 3 >>> 0) {
      break label$3
     }
     $8 = 0.0;
     $9 = 0;
     break label$2;
    }
    $10 = $1 & -4 | 0;
    $8 = 0.0;
    $9 = 0;
    label$4 : while (1) {
     $11 = $9 << 2 | 0;
     $12 = +Math_fround(Math_abs(Math_fround(HEAPF32[($0 + ($11 | 12 | 0) | 0) >> 2])));
     $13 = +Math_fround(Math_abs(Math_fround(HEAPF32[($0 + ($11 | 8 | 0) | 0) >> 2])));
     $14 = +Math_fround(Math_abs(Math_fround(HEAPF32[($0 + ($11 | 4 | 0) | 0) >> 2])));
     $15 = +Math_fround(Math_abs(Math_fround(HEAPF32[($0 + $11 | 0) >> 2])));
     $8 = $8 < $15 ? $15 : $8;
     $8 = $8 < $14 ? $14 : $8;
     $8 = $8 < $13 ? $13 : $8;
     $8 = $8 < $12 ? $12 : $8;
     $9 = $9 + 4 | 0;
     $10 = $10 + -4 | 0;
     if ($10) {
      continue label$4
     }
     break label$4;
    };
   }
   label$5 : {
    if (!$7) {
     break label$5
    }
    label$6 : while (1) {
     $12 = +Math_fround(Math_abs(Math_fround(HEAPF32[($0 + ($9 << 2 | 0) | 0) >> 2])));
     $8 = $8 < $12 ? $12 : $8;
     $9 = $9 + 1 | 0;
     $7 = $7 + -1 | 0;
     if ($7) {
      continue label$6
     }
     break label$6;
    };
   }
   if ($8 <= 0.0) {
    break label$1
   }
   +frexp(+$8, $5 + 12 | 0 | 0);
   $11 = $2 + -1 | 0;
   $7 = $11 - (HEAP32[($5 + 12 | 0) >> 2] | 0) | 0;
   HEAP32[$4 >> 2] = $7;
   label$7 : {
    label$8 : {
     $10 = -1 << ((HEAP32[GOT_data_internal_FLAC__SUBFRAME_LPC_QLP_SHIFT_LEN >> 2] | 0) + -1 | 0) | 0;
     $9 = $10 ^ -1 | 0;
     if (($7 | 0) <= ($9 | 0)) {
      break label$8
     }
     HEAP32[$4 >> 2] = $9;
     $7 = $9;
     break label$7;
    }
    if (($7 | 0) >= ($10 | 0)) {
     break label$7
    }
    $6 = 1;
    break label$1;
   }
   $2 = 1 << $11 | 0;
   $16 = $2 + -1 | 0;
   $9 = 0 - $2 | 0;
   $11 = 0;
   label$9 : {
    if (($7 | 0) < (0 | 0)) {
     break label$9
    }
    $6 = 0;
    if (!$1) {
     break label$1
    }
    $8 = 0.0;
    $11 = 0;
    label$10 : while (1) {
     $10 = $11 << 2 | 0;
     $151 = $3 + $10 | 0;
     $8 = $8 + +Math_fround(Math_fround(HEAPF32[($0 + $10 | 0) >> 2]) * Math_fround(1 << $7 | 0 | 0));
     $7 = lround(+$8) | 0;
     $7 = ($7 | 0) < ($2 | 0) ? (($7 | 0) < ($9 | 0) ? $9 : $7) : $16;
     HEAP32[$151 >> 2] = $7;
     $11 = $11 + 1 | 0;
     if (($11 | 0) == ($1 | 0)) {
      break label$1
     }
     $8 = $8 - +($7 | 0);
     $7 = HEAP32[$4 >> 2] | 0;
     continue label$10;
    };
   }
   label$11 : {
    if (!$1) {
     break label$11
    }
    $17 = Math_fround(1 << (0 - $7 | 0) | 0 | 0);
    $8 = 0.0;
    label$12 : while (1) {
     $7 = $11 << 2 | 0;
     $198 = $3 + $7 | 0;
     $8 = $8 + +Math_fround(Math_fround(HEAPF32[($0 + $7 | 0) >> 2]) / $17);
     $7 = lround(+$8) | 0;
     $7 = ($7 | 0) < ($2 | 0) ? (($7 | 0) < ($9 | 0) ? $9 : $7) : $16;
     HEAP32[$198 >> 2] = $7;
     $8 = $8 - +($7 | 0);
     $11 = $11 + 1 | 0;
     if (($11 | 0) != ($1 | 0)) {
      continue label$12
     }
     break label$12;
    };
   }
   $6 = 0;
   HEAP32[$4 >> 2] = 0;
  }
  __stack_pointer = $5 + 16 | 0;
  return $6 | 0;
 }
 
 function FLAC__lpc_compute_residual_from_qlp_coefficients($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var $6 = 0, $9 = 0, $7 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $27 = 0, $8 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $113 = 0, $28 = 0, $29 = 0, $248 = 0, $371 = 0, $486 = 0, $593 = 0, $688 = 0, $771 = 0, $846 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     if ($3 >>> 0 < 13 >>> 0) {
      break label$3
     }
     $6 = 0;
     if (($1 | 0) <= (0 | 0)) {
      break label$1
     }
     $7 = $3 + -13 | 0;
     break label$2;
    }
    label$4 : {
     if ($3 >>> 0 < 9 >>> 0) {
      break label$4
     }
     label$5 : {
      if ($3 >>> 0 < 11 >>> 0) {
       break label$5
      }
      label$6 : {
       if (($3 | 0) == (12 | 0)) {
        break label$6
       }
       if (($1 | 0) < (1 | 0)) {
        break label$1
       }
       $8 = HEAP32[($0 + -4 | 0) >> 2] | 0;
       $3 = HEAP32[($0 + -8 | 0) >> 2] | 0;
       $6 = HEAP32[($0 + -12 | 0) >> 2] | 0;
       $9 = HEAP32[($0 + -16 | 0) >> 2] | 0;
       $7 = HEAP32[($0 + -20 | 0) >> 2] | 0;
       $10 = HEAP32[($0 + -24 | 0) >> 2] | 0;
       $11 = HEAP32[($0 + -28 | 0) >> 2] | 0;
       $12 = HEAP32[($0 + -32 | 0) >> 2] | 0;
       $13 = HEAP32[($0 + -36 | 0) >> 2] | 0;
       $14 = HEAP32[($0 + -40 | 0) >> 2] | 0;
       $15 = HEAP32[($0 + -44 | 0) >> 2] | 0;
       $16 = HEAP32[$2 >> 2] | 0;
       $17 = HEAP32[($2 + 4 | 0) >> 2] | 0;
       $18 = HEAP32[($2 + 8 | 0) >> 2] | 0;
       $19 = HEAP32[($2 + 12 | 0) >> 2] | 0;
       $20 = HEAP32[($2 + 16 | 0) >> 2] | 0;
       $21 = HEAP32[($2 + 20 | 0) >> 2] | 0;
       $22 = HEAP32[($2 + 24 | 0) >> 2] | 0;
       $23 = HEAP32[($2 + 28 | 0) >> 2] | 0;
       $24 = HEAP32[($2 + 32 | 0) >> 2] | 0;
       $25 = HEAP32[($2 + 36 | 0) >> 2] | 0;
       $26 = HEAP32[($2 + 40 | 0) >> 2] | 0;
       $2 = 0;
       label$7 : while (1) {
        $27 = $14;
        $14 = $13;
        $13 = $12;
        $12 = $11;
        $11 = $10;
        $10 = $7;
        $7 = $9;
        $9 = $6;
        $6 = $3;
        $3 = $8;
        $8 = $2 << 2 | 0;
        $113 = $5 + $8 | 0;
        $8 = HEAP32[($0 + $8 | 0) >> 2] | 0;
        HEAP32[$113 >> 2] = $8 - (((((((((((Math_imul($27, $25) + Math_imul($15, $26) | 0) + Math_imul($14, $24) | 0) + Math_imul($13, $23) | 0) + Math_imul($12, $22) | 0) + Math_imul($11, $21) | 0) + Math_imul($10, $20) | 0) + Math_imul($7, $19) | 0) + Math_imul($9, $18) | 0) + Math_imul($6, $17) | 0) + Math_imul($3, $16) | 0) >> $4 | 0) | 0;
        $15 = $27;
        $2 = $2 + 1 | 0;
        if (($2 | 0) != ($1 | 0)) {
         continue label$7
        }
        break label$1;
       };
      }
      if (($1 | 0) < (1 | 0)) {
       break label$1
      }
      $15 = HEAP32[($0 + -4 | 0) >> 2] | 0;
      $3 = HEAP32[($0 + -8 | 0) >> 2] | 0;
      $6 = HEAP32[($0 + -12 | 0) >> 2] | 0;
      $9 = HEAP32[($0 + -16 | 0) >> 2] | 0;
      $7 = HEAP32[($0 + -20 | 0) >> 2] | 0;
      $10 = HEAP32[($0 + -24 | 0) >> 2] | 0;
      $11 = HEAP32[($0 + -28 | 0) >> 2] | 0;
      $12 = HEAP32[($0 + -32 | 0) >> 2] | 0;
      $13 = HEAP32[($0 + -36 | 0) >> 2] | 0;
      $14 = HEAP32[($0 + -40 | 0) >> 2] | 0;
      $27 = HEAP32[($0 + -44 | 0) >> 2] | 0;
      $16 = HEAP32[($0 + -48 | 0) >> 2] | 0;
      $17 = HEAP32[$2 >> 2] | 0;
      $18 = HEAP32[($2 + 4 | 0) >> 2] | 0;
      $19 = HEAP32[($2 + 8 | 0) >> 2] | 0;
      $20 = HEAP32[($2 + 12 | 0) >> 2] | 0;
      $21 = HEAP32[($2 + 16 | 0) >> 2] | 0;
      $22 = HEAP32[($2 + 20 | 0) >> 2] | 0;
      $23 = HEAP32[($2 + 24 | 0) >> 2] | 0;
      $24 = HEAP32[($2 + 28 | 0) >> 2] | 0;
      $25 = HEAP32[($2 + 32 | 0) >> 2] | 0;
      $26 = HEAP32[($2 + 36 | 0) >> 2] | 0;
      $28 = HEAP32[($2 + 40 | 0) >> 2] | 0;
      $29 = HEAP32[($2 + 44 | 0) >> 2] | 0;
      $2 = 0;
      label$8 : while (1) {
       $8 = $27;
       $27 = $14;
       $14 = $13;
       $13 = $12;
       $12 = $11;
       $11 = $10;
       $10 = $7;
       $7 = $9;
       $9 = $6;
       $6 = $3;
       $3 = $15;
       $15 = $2 << 2 | 0;
       $248 = $5 + $15 | 0;
       $15 = HEAP32[($0 + $15 | 0) >> 2] | 0;
       HEAP32[$248 >> 2] = $15 - ((((((((((((Math_imul($8, $28) + Math_imul($16, $29) | 0) + Math_imul($27, $26) | 0) + Math_imul($14, $25) | 0) + Math_imul($13, $24) | 0) + Math_imul($12, $23) | 0) + Math_imul($11, $22) | 0) + Math_imul($10, $21) | 0) + Math_imul($7, $20) | 0) + Math_imul($9, $19) | 0) + Math_imul($6, $18) | 0) + Math_imul($3, $17) | 0) >> $4 | 0) | 0;
       $16 = $8;
       $2 = $2 + 1 | 0;
       if (($2 | 0) != ($1 | 0)) {
        continue label$8
       }
       break label$1;
      };
     }
     label$9 : {
      if (($3 | 0) == (10 | 0)) {
       break label$9
      }
      if (($1 | 0) < (1 | 0)) {
       break label$1
      }
      $14 = HEAP32[($0 + -4 | 0) >> 2] | 0;
      $3 = HEAP32[($0 + -8 | 0) >> 2] | 0;
      $6 = HEAP32[($0 + -12 | 0) >> 2] | 0;
      $9 = HEAP32[($0 + -16 | 0) >> 2] | 0;
      $7 = HEAP32[($0 + -20 | 0) >> 2] | 0;
      $10 = HEAP32[($0 + -24 | 0) >> 2] | 0;
      $11 = HEAP32[($0 + -28 | 0) >> 2] | 0;
      $12 = HEAP32[($0 + -32 | 0) >> 2] | 0;
      $27 = HEAP32[($0 + -36 | 0) >> 2] | 0;
      $8 = HEAP32[$2 >> 2] | 0;
      $15 = HEAP32[($2 + 4 | 0) >> 2] | 0;
      $16 = HEAP32[($2 + 8 | 0) >> 2] | 0;
      $17 = HEAP32[($2 + 12 | 0) >> 2] | 0;
      $18 = HEAP32[($2 + 16 | 0) >> 2] | 0;
      $19 = HEAP32[($2 + 20 | 0) >> 2] | 0;
      $20 = HEAP32[($2 + 24 | 0) >> 2] | 0;
      $21 = HEAP32[($2 + 28 | 0) >> 2] | 0;
      $22 = HEAP32[($2 + 32 | 0) >> 2] | 0;
      $2 = 0;
      label$10 : while (1) {
       $13 = $12;
       $12 = $11;
       $11 = $10;
       $10 = $7;
       $7 = $9;
       $9 = $6;
       $6 = $3;
       $3 = $14;
       $14 = $2 << 2 | 0;
       $371 = $5 + $14 | 0;
       $14 = HEAP32[($0 + $14 | 0) >> 2] | 0;
       HEAP32[$371 >> 2] = $14 - (((((((((Math_imul($13, $21) + Math_imul($27, $22) | 0) + Math_imul($12, $20) | 0) + Math_imul($11, $19) | 0) + Math_imul($10, $18) | 0) + Math_imul($7, $17) | 0) + Math_imul($9, $16) | 0) + Math_imul($6, $15) | 0) + Math_imul($3, $8) | 0) >> $4 | 0) | 0;
       $27 = $13;
       $2 = $2 + 1 | 0;
       if (($2 | 0) != ($1 | 0)) {
        continue label$10
       }
       break label$1;
      };
     }
     if (($1 | 0) < (1 | 0)) {
      break label$1
     }
     $27 = HEAP32[($0 + -4 | 0) >> 2] | 0;
     $3 = HEAP32[($0 + -8 | 0) >> 2] | 0;
     $6 = HEAP32[($0 + -12 | 0) >> 2] | 0;
     $9 = HEAP32[($0 + -16 | 0) >> 2] | 0;
     $7 = HEAP32[($0 + -20 | 0) >> 2] | 0;
     $10 = HEAP32[($0 + -24 | 0) >> 2] | 0;
     $11 = HEAP32[($0 + -28 | 0) >> 2] | 0;
     $12 = HEAP32[($0 + -32 | 0) >> 2] | 0;
     $13 = HEAP32[($0 + -36 | 0) >> 2] | 0;
     $8 = HEAP32[($0 + -40 | 0) >> 2] | 0;
     $15 = HEAP32[$2 >> 2] | 0;
     $16 = HEAP32[($2 + 4 | 0) >> 2] | 0;
     $17 = HEAP32[($2 + 8 | 0) >> 2] | 0;
     $18 = HEAP32[($2 + 12 | 0) >> 2] | 0;
     $19 = HEAP32[($2 + 16 | 0) >> 2] | 0;
     $20 = HEAP32[($2 + 20 | 0) >> 2] | 0;
     $21 = HEAP32[($2 + 24 | 0) >> 2] | 0;
     $22 = HEAP32[($2 + 28 | 0) >> 2] | 0;
     $23 = HEAP32[($2 + 32 | 0) >> 2] | 0;
     $24 = HEAP32[($2 + 36 | 0) >> 2] | 0;
     $2 = 0;
     label$11 : while (1) {
      $14 = $13;
      $13 = $12;
      $12 = $11;
      $11 = $10;
      $10 = $7;
      $7 = $9;
      $9 = $6;
      $6 = $3;
      $3 = $27;
      $27 = $2 << 2 | 0;
      $486 = $5 + $27 | 0;
      $27 = HEAP32[($0 + $27 | 0) >> 2] | 0;
      HEAP32[$486 >> 2] = $27 - ((((((((((Math_imul($14, $23) + Math_imul($8, $24) | 0) + Math_imul($13, $22) | 0) + Math_imul($12, $21) | 0) + Math_imul($11, $20) | 0) + Math_imul($10, $19) | 0) + Math_imul($7, $18) | 0) + Math_imul($9, $17) | 0) + Math_imul($6, $16) | 0) + Math_imul($3, $15) | 0) >> $4 | 0) | 0;
      $8 = $14;
      $2 = $2 + 1 | 0;
      if (($2 | 0) != ($1 | 0)) {
       continue label$11
      }
      break label$1;
     };
    }
    label$12 : {
     if ($3 >>> 0 < 5 >>> 0) {
      break label$12
     }
     label$13 : {
      if ($3 >>> 0 < 7 >>> 0) {
       break label$13
      }
      label$14 : {
       if (($3 | 0) == (8 | 0)) {
        break label$14
       }
       if (($1 | 0) < (1 | 0)) {
        break label$1
       }
       $12 = HEAP32[($0 + -4 | 0) >> 2] | 0;
       $3 = HEAP32[($0 + -8 | 0) >> 2] | 0;
       $6 = HEAP32[($0 + -12 | 0) >> 2] | 0;
       $9 = HEAP32[($0 + -16 | 0) >> 2] | 0;
       $7 = HEAP32[($0 + -20 | 0) >> 2] | 0;
       $10 = HEAP32[($0 + -24 | 0) >> 2] | 0;
       $13 = HEAP32[($0 + -28 | 0) >> 2] | 0;
       $14 = HEAP32[$2 >> 2] | 0;
       $27 = HEAP32[($2 + 4 | 0) >> 2] | 0;
       $8 = HEAP32[($2 + 8 | 0) >> 2] | 0;
       $15 = HEAP32[($2 + 12 | 0) >> 2] | 0;
       $16 = HEAP32[($2 + 16 | 0) >> 2] | 0;
       $17 = HEAP32[($2 + 20 | 0) >> 2] | 0;
       $18 = HEAP32[($2 + 24 | 0) >> 2] | 0;
       $2 = 0;
       label$15 : while (1) {
        $11 = $10;
        $10 = $7;
        $7 = $9;
        $9 = $6;
        $6 = $3;
        $3 = $12;
        $12 = $2 << 2 | 0;
        $593 = $5 + $12 | 0;
        $12 = HEAP32[($0 + $12 | 0) >> 2] | 0;
        HEAP32[$593 >> 2] = $12 - (((((((Math_imul($11, $17) + Math_imul($13, $18) | 0) + Math_imul($10, $16) | 0) + Math_imul($7, $15) | 0) + Math_imul($9, $8) | 0) + Math_imul($6, $27) | 0) + Math_imul($3, $14) | 0) >> $4 | 0) | 0;
        $13 = $11;
        $2 = $2 + 1 | 0;
        if (($2 | 0) != ($1 | 0)) {
         continue label$15
        }
        break label$1;
       };
      }
      if (($1 | 0) < (1 | 0)) {
       break label$1
      }
      $13 = HEAP32[($0 + -4 | 0) >> 2] | 0;
      $3 = HEAP32[($0 + -8 | 0) >> 2] | 0;
      $6 = HEAP32[($0 + -12 | 0) >> 2] | 0;
      $9 = HEAP32[($0 + -16 | 0) >> 2] | 0;
      $7 = HEAP32[($0 + -20 | 0) >> 2] | 0;
      $10 = HEAP32[($0 + -24 | 0) >> 2] | 0;
      $11 = HEAP32[($0 + -28 | 0) >> 2] | 0;
      $14 = HEAP32[($0 + -32 | 0) >> 2] | 0;
      $27 = HEAP32[$2 >> 2] | 0;
      $8 = HEAP32[($2 + 4 | 0) >> 2] | 0;
      $15 = HEAP32[($2 + 8 | 0) >> 2] | 0;
      $16 = HEAP32[($2 + 12 | 0) >> 2] | 0;
      $17 = HEAP32[($2 + 16 | 0) >> 2] | 0;
      $18 = HEAP32[($2 + 20 | 0) >> 2] | 0;
      $19 = HEAP32[($2 + 24 | 0) >> 2] | 0;
      $20 = HEAP32[($2 + 28 | 0) >> 2] | 0;
      $2 = 0;
      label$16 : while (1) {
       $12 = $11;
       $11 = $10;
       $10 = $7;
       $7 = $9;
       $9 = $6;
       $6 = $3;
       $3 = $13;
       $13 = $2 << 2 | 0;
       $688 = $5 + $13 | 0;
       $13 = HEAP32[($0 + $13 | 0) >> 2] | 0;
       HEAP32[$688 >> 2] = $13 - ((((((((Math_imul($12, $19) + Math_imul($14, $20) | 0) + Math_imul($11, $18) | 0) + Math_imul($10, $17) | 0) + Math_imul($7, $16) | 0) + Math_imul($9, $15) | 0) + Math_imul($6, $8) | 0) + Math_imul($3, $27) | 0) >> $4 | 0) | 0;
       $14 = $12;
       $2 = $2 + 1 | 0;
       if (($2 | 0) != ($1 | 0)) {
        continue label$16
       }
       break label$1;
      };
     }
     label$17 : {
      if (($3 | 0) == (6 | 0)) {
       break label$17
      }
      if (($1 | 0) < (1 | 0)) {
       break label$1
      }
      $10 = HEAP32[($0 + -4 | 0) >> 2] | 0;
      $3 = HEAP32[($0 + -8 | 0) >> 2] | 0;
      $6 = HEAP32[($0 + -12 | 0) >> 2] | 0;
      $9 = HEAP32[($0 + -16 | 0) >> 2] | 0;
      $11 = HEAP32[($0 + -20 | 0) >> 2] | 0;
      $12 = HEAP32[$2 >> 2] | 0;
      $13 = HEAP32[($2 + 4 | 0) >> 2] | 0;
      $14 = HEAP32[($2 + 8 | 0) >> 2] | 0;
      $27 = HEAP32[($2 + 12 | 0) >> 2] | 0;
      $8 = HEAP32[($2 + 16 | 0) >> 2] | 0;
      $2 = 0;
      label$18 : while (1) {
       $7 = $9;
       $9 = $6;
       $6 = $3;
       $3 = $10;
       $10 = $2 << 2 | 0;
       $771 = $5 + $10 | 0;
       $10 = HEAP32[($0 + $10 | 0) >> 2] | 0;
       HEAP32[$771 >> 2] = $10 - (((((Math_imul($7, $27) + Math_imul($11, $8) | 0) + Math_imul($9, $14) | 0) + Math_imul($6, $13) | 0) + Math_imul($3, $12) | 0) >> $4 | 0) | 0;
       $11 = $7;
       $2 = $2 + 1 | 0;
       if (($2 | 0) != ($1 | 0)) {
        continue label$18
       }
       break label$1;
      };
     }
     if (($1 | 0) < (1 | 0)) {
      break label$1
     }
     $11 = HEAP32[($0 + -4 | 0) >> 2] | 0;
     $3 = HEAP32[($0 + -8 | 0) >> 2] | 0;
     $6 = HEAP32[($0 + -12 | 0) >> 2] | 0;
     $9 = HEAP32[($0 + -16 | 0) >> 2] | 0;
     $7 = HEAP32[($0 + -20 | 0) >> 2] | 0;
     $12 = HEAP32[($0 + -24 | 0) >> 2] | 0;
     $13 = HEAP32[$2 >> 2] | 0;
     $14 = HEAP32[($2 + 4 | 0) >> 2] | 0;
     $27 = HEAP32[($2 + 8 | 0) >> 2] | 0;
     $8 = HEAP32[($2 + 12 | 0) >> 2] | 0;
     $15 = HEAP32[($2 + 16 | 0) >> 2] | 0;
     $16 = HEAP32[($2 + 20 | 0) >> 2] | 0;
     $2 = 0;
     label$19 : while (1) {
      $10 = $7;
      $7 = $9;
      $9 = $6;
      $6 = $3;
      $3 = $11;
      $11 = $2 << 2 | 0;
      $846 = $5 + $11 | 0;
      $11 = HEAP32[($0 + $11 | 0) >> 2] | 0;
      HEAP32[$846 >> 2] = $11 - ((((((Math_imul($10, $15) + Math_imul($12, $16) | 0) + Math_imul($7, $8) | 0) + Math_imul($9, $27) | 0) + Math_imul($6, $14) | 0) + Math_imul($3, $13) | 0) >> $4 | 0) | 0;
      $12 = $10;
      $2 = $2 + 1 | 0;
      if (($2 | 0) != ($1 | 0)) {
       continue label$19
      }
      break label$1;
     };
    }
    label$20 : {
     if ($3 >>> 0 < 3 >>> 0) {
      break label$20
     }
     label$21 : {
      label$22 : {
       label$23 : {
        if (($3 | 0) == (4 | 0)) {
         break label$23
        }
        if (($1 | 0) < (1 | 0)) {
         break label$1
        }
        $27 = $1 & 1 | 0;
        $7 = HEAP32[($0 + -4 | 0) >> 2] | 0;
        $6 = HEAP32[($0 + -8 | 0) >> 2] | 0;
        $10 = HEAP32[($0 + -12 | 0) >> 2] | 0;
        $11 = HEAP32[$2 >> 2] | 0;
        $12 = HEAP32[($2 + 4 | 0) >> 2] | 0;
        $13 = HEAP32[($2 + 8 | 0) >> 2] | 0;
        $3 = 0;
        if (($1 | 0) != (1 | 0)) {
         break label$22
        }
        $2 = $6;
        $9 = $10;
        break label$21;
       }
       if (($1 | 0) < (1 | 0)) {
        break label$1
       }
       $15 = $1 & 1 | 0;
       $10 = HEAP32[($0 + -4 | 0) >> 2] | 0;
       $6 = HEAP32[($0 + -8 | 0) >> 2] | 0;
       $9 = HEAP32[($0 + -12 | 0) >> 2] | 0;
       $11 = HEAP32[($0 + -16 | 0) >> 2] | 0;
       $12 = HEAP32[$2 >> 2] | 0;
       $13 = HEAP32[($2 + 4 | 0) >> 2] | 0;
       $14 = HEAP32[($2 + 8 | 0) >> 2] | 0;
       $27 = HEAP32[($2 + 12 | 0) >> 2] | 0;
       $2 = 0;
       label$24 : {
        label$25 : {
         if (($1 | 0) != (1 | 0)) {
          break label$25
         }
         $1 = $9;
         $3 = $11;
         break label$24;
        }
        $8 = $1 & -2 | 0;
        $2 = 0;
        label$26 : while (1) {
         $3 = $6;
         $7 = $2 << 2 | 0;
         $6 = HEAP32[($0 + $7 | 0) >> 2] | 0;
         $1 = $10;
         HEAP32[($5 + $7 | 0) >> 2] = $6 - ((((Math_imul($9, $14) + Math_imul($11, $27) | 0) + Math_imul($3, $13) | 0) + Math_imul($1, $12) | 0) >> $4 | 0) | 0;
         $7 = $7 | 4 | 0;
         $10 = HEAP32[($0 + $7 | 0) >> 2] | 0;
         HEAP32[($5 + $7 | 0) >> 2] = $10 - ((((Math_imul($3, $14) + Math_imul($9, $27) | 0) + Math_imul($1, $13) | 0) + Math_imul($6, $12) | 0) >> $4 | 0) | 0;
         $2 = $2 + 2 | 0;
         $9 = $1;
         $11 = $3;
         $8 = $8 + -2 | 0;
         if ($8) {
          continue label$26
         }
         break label$26;
        };
       }
       if (!$15) {
        break label$1
       }
       $2 = $2 << 2 | 0;
       HEAP32[($5 + $2 | 0) >> 2] = (HEAP32[($0 + $2 | 0) >> 2] | 0) - ((((Math_imul($1, $14) + Math_imul($3, $27) | 0) + Math_imul($6, $13) | 0) + Math_imul($10, $12) | 0) >> $4 | 0) | 0;
       return;
      }
      $14 = $1 & -2 | 0;
      $3 = 0;
      label$27 : while (1) {
       $1 = $3 << 2 | 0;
       $2 = HEAP32[($0 + $1 | 0) >> 2] | 0;
       $9 = $7;
       HEAP32[($5 + $1 | 0) >> 2] = $2 - (((Math_imul($6, $12) + Math_imul($10, $13) | 0) + Math_imul($9, $11) | 0) >> $4 | 0) | 0;
       $1 = $1 | 4 | 0;
       $7 = HEAP32[($0 + $1 | 0) >> 2] | 0;
       HEAP32[($5 + $1 | 0) >> 2] = $7 - (((Math_imul($9, $12) + Math_imul($6, $13) | 0) + Math_imul($2, $11) | 0) >> $4 | 0) | 0;
       $3 = $3 + 2 | 0;
       $6 = $2;
       $10 = $9;
       $14 = $14 + -2 | 0;
       if ($14) {
        continue label$27
       }
       break label$27;
      };
     }
     if (!$27) {
      break label$1
     }
     $3 = $3 << 2 | 0;
     HEAP32[($5 + $3 | 0) >> 2] = (HEAP32[($0 + $3 | 0) >> 2] | 0) - (((Math_imul($2, $12) + Math_imul($9, $13) | 0) + Math_imul($7, $11) | 0) >> $4 | 0) | 0;
     return;
    }
    label$28 : {
     if (($3 | 0) == (2 | 0)) {
      break label$28
     }
     if (($1 | 0) < (1 | 0)) {
      break label$1
     }
     $10 = $1 & 1 | 0;
     $6 = HEAP32[($0 + -4 | 0) >> 2] | 0;
     $9 = HEAP32[$2 >> 2] | 0;
     $3 = 0;
     label$29 : {
      if (($1 | 0) == (1 | 0)) {
       break label$29
      }
      $1 = $1 & -2 | 0;
      $3 = 0;
      label$30 : while (1) {
       $2 = $3 << 2 | 0;
       $7 = HEAP32[($0 + $2 | 0) >> 2] | 0;
       HEAP32[($5 + $2 | 0) >> 2] = $7 - (Math_imul($6, $9) >> $4 | 0) | 0;
       $2 = $2 | 4 | 0;
       $6 = HEAP32[($0 + $2 | 0) >> 2] | 0;
       HEAP32[($5 + $2 | 0) >> 2] = $6 - (Math_imul($7, $9) >> $4 | 0) | 0;
       $3 = $3 + 2 | 0;
       $1 = $1 + -2 | 0;
       if ($1) {
        continue label$30
       }
       break label$30;
      };
     }
     if (!$10) {
      break label$1
     }
     $3 = $3 << 2 | 0;
     HEAP32[($5 + $3 | 0) >> 2] = (HEAP32[($0 + $3 | 0) >> 2] | 0) - (Math_imul($6, $9) >> $4 | 0) | 0;
     break label$1;
    }
    if (($1 | 0) < (1 | 0)) {
     break label$1
    }
    $12 = $1 & 1 | 0;
    $6 = HEAP32[($0 + -4 | 0) >> 2] | 0;
    $9 = HEAP32[($0 + -8 | 0) >> 2] | 0;
    $7 = HEAP32[$2 >> 2] | 0;
    $10 = HEAP32[($2 + 4 | 0) >> 2] | 0;
    $3 = 0;
    label$31 : {
     if (($1 | 0) == (1 | 0)) {
      break label$31
     }
     $1 = $1 & -2 | 0;
     $3 = 0;
     label$32 : while (1) {
      $11 = Math_imul($9, $10);
      $2 = $3 << 2 | 0;
      $9 = HEAP32[($0 + $2 | 0) >> 2] | 0;
      HEAP32[($5 + $2 | 0) >> 2] = $9 - (($11 + Math_imul($6, $7) | 0) >> $4 | 0) | 0;
      $11 = Math_imul($6, $10);
      $2 = $2 | 4 | 0;
      $6 = HEAP32[($0 + $2 | 0) >> 2] | 0;
      HEAP32[($5 + $2 | 0) >> 2] = $6 - (($11 + Math_imul($9, $7) | 0) >> $4 | 0) | 0;
      $3 = $3 + 2 | 0;
      $1 = $1 + -2 | 0;
      if ($1) {
       continue label$32
      }
      break label$32;
     };
    }
    if (!$12) {
     break label$1
    }
    $3 = $3 << 2 | 0;
    HEAP32[($5 + $3 | 0) >> 2] = (HEAP32[($0 + $3 | 0) >> 2] | 0) - ((Math_imul($6, $7) + Math_imul($9, $10) | 0) >> $4 | 0) | 0;
    return;
   }
   label$33 : while (1) {
    $3 = 0;
    label$34 : {
     switch ($7 | 0) {
     case 19:
      $3 = Math_imul(HEAP32[((($6 << 2 | 0) + $0 | 0) + -128 | 0) >> 2] | 0, HEAP32[($2 + 124 | 0) >> 2] | 0);
     case 18:
      $3 = Math_imul(HEAP32[((($6 << 2 | 0) + $0 | 0) + -124 | 0) >> 2] | 0, HEAP32[($2 + 120 | 0) >> 2] | 0) + $3 | 0;
     case 17:
      $3 = Math_imul(HEAP32[((($6 << 2 | 0) + $0 | 0) + -120 | 0) >> 2] | 0, HEAP32[($2 + 116 | 0) >> 2] | 0) + $3 | 0;
     case 16:
      $3 = Math_imul(HEAP32[((($6 << 2 | 0) + $0 | 0) + -116 | 0) >> 2] | 0, HEAP32[($2 + 112 | 0) >> 2] | 0) + $3 | 0;
     case 15:
      $3 = Math_imul(HEAP32[((($6 << 2 | 0) + $0 | 0) + -112 | 0) >> 2] | 0, HEAP32[($2 + 108 | 0) >> 2] | 0) + $3 | 0;
     case 14:
      $3 = Math_imul(HEAP32[((($6 << 2 | 0) + $0 | 0) + -108 | 0) >> 2] | 0, HEAP32[($2 + 104 | 0) >> 2] | 0) + $3 | 0;
     case 13:
      $3 = Math_imul(HEAP32[((($6 << 2 | 0) + $0 | 0) + -104 | 0) >> 2] | 0, HEAP32[($2 + 100 | 0) >> 2] | 0) + $3 | 0;
     case 12:
      $3 = Math_imul(HEAP32[((($6 << 2 | 0) + $0 | 0) + -100 | 0) >> 2] | 0, HEAP32[($2 + 96 | 0) >> 2] | 0) + $3 | 0;
     case 11:
      $3 = Math_imul(HEAP32[((($6 << 2 | 0) + $0 | 0) + -96 | 0) >> 2] | 0, HEAP32[($2 + 92 | 0) >> 2] | 0) + $3 | 0;
     case 10:
      $3 = Math_imul(HEAP32[((($6 << 2 | 0) + $0 | 0) + -92 | 0) >> 2] | 0, HEAP32[($2 + 88 | 0) >> 2] | 0) + $3 | 0;
     case 9:
      $3 = Math_imul(HEAP32[((($6 << 2 | 0) + $0 | 0) + -88 | 0) >> 2] | 0, HEAP32[($2 + 84 | 0) >> 2] | 0) + $3 | 0;
     case 8:
      $3 = Math_imul(HEAP32[((($6 << 2 | 0) + $0 | 0) + -84 | 0) >> 2] | 0, HEAP32[($2 + 80 | 0) >> 2] | 0) + $3 | 0;
     case 7:
      $3 = Math_imul(HEAP32[((($6 << 2 | 0) + $0 | 0) + -80 | 0) >> 2] | 0, HEAP32[($2 + 76 | 0) >> 2] | 0) + $3 | 0;
     case 6:
      $3 = Math_imul(HEAP32[((($6 << 2 | 0) + $0 | 0) + -76 | 0) >> 2] | 0, HEAP32[($2 + 72 | 0) >> 2] | 0) + $3 | 0;
     case 5:
      $3 = Math_imul(HEAP32[((($6 << 2 | 0) + $0 | 0) + -72 | 0) >> 2] | 0, HEAP32[($2 + 68 | 0) >> 2] | 0) + $3 | 0;
     case 4:
      $3 = Math_imul(HEAP32[((($6 << 2 | 0) + $0 | 0) + -68 | 0) >> 2] | 0, HEAP32[($2 + 64 | 0) >> 2] | 0) + $3 | 0;
     case 3:
      $3 = Math_imul(HEAP32[((($6 << 2 | 0) + $0 | 0) + -64 | 0) >> 2] | 0, HEAP32[($2 + 60 | 0) >> 2] | 0) + $3 | 0;
     case 2:
      $3 = Math_imul(HEAP32[((($6 << 2 | 0) + $0 | 0) + -60 | 0) >> 2] | 0, HEAP32[($2 + 56 | 0) >> 2] | 0) + $3 | 0;
     case 1:
      $3 = Math_imul(HEAP32[((($6 << 2 | 0) + $0 | 0) + -56 | 0) >> 2] | 0, HEAP32[($2 + 52 | 0) >> 2] | 0) + $3 | 0;
     case 0:
      $9 = ($6 << 2 | 0) + $0 | 0;
      $3 = ((((((((((((Math_imul(HEAP32[($9 + -52 | 0) >> 2] | 0, HEAP32[($2 + 48 | 0) >> 2] | 0) + $3 | 0) + Math_imul(HEAP32[($9 + -48 | 0) >> 2] | 0, HEAP32[($2 + 44 | 0) >> 2] | 0) | 0) + Math_imul(HEAP32[($9 + -44 | 0) >> 2] | 0, HEAP32[($2 + 40 | 0) >> 2] | 0) | 0) + Math_imul(HEAP32[($9 + -40 | 0) >> 2] | 0, HEAP32[($2 + 36 | 0) >> 2] | 0) | 0) + Math_imul(HEAP32[($9 + -36 | 0) >> 2] | 0, HEAP32[($2 + 32 | 0) >> 2] | 0) | 0) + Math_imul(HEAP32[($9 + -32 | 0) >> 2] | 0, HEAP32[($2 + 28 | 0) >> 2] | 0) | 0) + Math_imul(HEAP32[($9 + -28 | 0) >> 2] | 0, HEAP32[($2 + 24 | 0) >> 2] | 0) | 0) + Math_imul(HEAP32[($9 + -24 | 0) >> 2] | 0, HEAP32[($2 + 20 | 0) >> 2] | 0) | 0) + Math_imul(HEAP32[($9 + -20 | 0) >> 2] | 0, HEAP32[($2 + 16 | 0) >> 2] | 0) | 0) + Math_imul(HEAP32[($9 + -16 | 0) >> 2] | 0, HEAP32[($2 + 12 | 0) >> 2] | 0) | 0) + Math_imul(HEAP32[($9 + -12 | 0) >> 2] | 0, HEAP32[($2 + 8 | 0) >> 2] | 0) | 0) + Math_imul(HEAP32[($9 + -8 | 0) >> 2] | 0, HEAP32[($2 + 4 | 0) >> 2] | 0) | 0) + Math_imul(HEAP32[($9 + -4 | 0) >> 2] | 0, HEAP32[$2 >> 2] | 0) | 0;
      break;
     default:
      break label$34;
     };
    }
    $9 = $6 << 2 | 0;
    HEAP32[($5 + $9 | 0) >> 2] = (HEAP32[($0 + $9 | 0) >> 2] | 0) - ($3 >> $4 | 0) | 0;
    $6 = $6 + 1 | 0;
    if (($6 | 0) != ($1 | 0)) {
     continue label$33
    }
    break label$33;
   };
  }
 }
 
 function FLAC__lpc_compute_residual_from_qlp_coefficients_wide($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$4 = 0, i64toi32_i32$5 = 0, i64toi32_i32$3 = 0, $8$hi = 0, $6 = 0, $8 = 0, $10 = 0, $7$hi = 0, $11 = 0, $12 = 0, $17$hi = 0, $13 = 0, $18$hi = 0, $19$hi = 0, $7 = 0, $14 = 0, $15 = 0, $17 = 0, $20$hi = 0, $18 = 0, $21$hi = 0, $19 = 0, $27 = 0, $22$hi = 0, $20 = 0, $9 = 0, $23$hi = 0, $21 = 0, $22 = 0, $24$hi = 0, $16 = 0, $23 = 0, $25$hi = 0, $24 = 0, $25 = 0, $26$hi = 0, $26 = 0, $28 = 0, $581 = 0, $29$hi = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $117 = 0, $122 = 0, $124$hi = 0, $126 = 0, $126$hi = 0, $128$hi = 0, $130 = 0, $130$hi = 0, $131$hi = 0, $133$hi = 0, $135 = 0, $135$hi = 0, $136$hi = 0, $138$hi = 0, $140 = 0, $140$hi = 0, $141$hi = 0, $143$hi = 0, $145 = 0, $145$hi = 0, $146$hi = 0, $148$hi = 0, $150 = 0, $150$hi = 0, $151$hi = 0, $153$hi = 0, $155 = 0, $155$hi = 0, $156$hi = 0, $158$hi = 0, $160 = 0, $160$hi = 0, $161$hi = 0, $163$hi = 0, $165 = 0, $165$hi = 0, $166$hi = 0, $168$hi = 0, $170 = 0, $170$hi = 0, $171$hi = 0, $173$hi = 0, $175 = 0, $175$hi = 0, $176$hi = 0, $29 = 0, $264 = 0, $269 = 0, $271$hi = 0, $273 = 0, $273$hi = 0, $275$hi = 0, $277 = 0, $277$hi = 0, $278$hi = 0, $280$hi = 0, $282 = 0, $282$hi = 0, $283$hi = 0, $285$hi = 0, $287 = 0, $287$hi = 0, $288$hi = 0, $290$hi = 0, $292 = 0, $292$hi = 0, $293$hi = 0, $295$hi = 0, $297 = 0, $297$hi = 0, $298$hi = 0, $300$hi = 0, $302 = 0, $302$hi = 0, $303$hi = 0, $305$hi = 0, $307 = 0, $307$hi = 0, $308$hi = 0, $310$hi = 0, $312 = 0, $312$hi = 0, $313$hi = 0, $315$hi = 0, $317 = 0, $317$hi = 0, $318$hi = 0, $320$hi = 0, $322 = 0, $322$hi = 0, $323$hi = 0, $325$hi = 0, $327 = 0, $327$hi = 0, $328$hi = 0, $402 = 0, $407 = 0, $409$hi = 0, $411 = 0, $411$hi = 0, $413$hi = 0, $415 = 0, $415$hi = 0, $416$hi = 0, $418$hi = 0, $420 = 0, $420$hi = 0, $421$hi = 0, $423$hi = 0, $425 = 0, $425$hi = 0, $426$hi = 0, $428$hi = 0, $430 = 0, $430$hi = 0, $431$hi = 0, $433$hi = 0, $435 = 0, $435$hi = 0, $436$hi = 0, $438$hi = 0, $440 = 0, $440$hi = 0, $441$hi = 0, $443$hi = 0, $445 = 0, $445$hi = 0, $446$hi = 0, $448$hi = 0, $450 = 0, $450$hi = 0, $451$hi = 0, $527 = 0, $532 = 0, $534$hi = 0, $536 = 0, $536$hi = 0, $538$hi = 0, $540 = 0, $540$hi = 0, $541$hi = 0, $543$hi = 0, $545 = 0, $545$hi = 0, $546$hi = 0, $548$hi = 0, $550 = 0, $550$hi = 0, $551$hi = 0, $553$hi = 0, $555 = 0, $555$hi = 0, $556$hi = 0, $558$hi = 0, $560 = 0, $560$hi = 0, $561$hi = 0, $563$hi = 0, $565 = 0, $565$hi = 0, $566$hi = 0, $568$hi = 0, $570 = 0, $570$hi = 0, $571$hi = 0, $573$hi = 0, $575 = 0, $575$hi = 0, $576$hi = 0, $578$hi = 0, $580 = 0, $580$hi = 0, $581$hi = 0, $647 = 0, $652 = 0, $654$hi = 0, $656 = 0, $656$hi = 0, $658$hi = 0, $660 = 0, $660$hi = 0, $661$hi = 0, $663$hi = 0, $665 = 0, $665$hi = 0, $666$hi = 0, $668$hi = 0, $670 = 0, $670$hi = 0, $671$hi = 0, $673$hi = 0, $675 = 0, $675$hi = 0, $676$hi = 0, $678$hi = 0, $680 = 0, $680$hi = 0, $681$hi = 0, $683$hi = 0, $685 = 0, $685$hi = 0, $686$hi = 0, $750 = 0, $755 = 0, $757$hi = 0, $759 = 0, $759$hi = 0, $761$hi = 0, $763 = 0, $763$hi = 0, $764$hi = 0, $766$hi = 0, $768 = 0, $768$hi = 0, $769$hi = 0, $771$hi = 0, $773 = 0, $773$hi = 0, $774$hi = 0, $776$hi = 0, $778 = 0, $778$hi = 0, $779$hi = 0, $781$hi = 0, $783 = 0, $783$hi = 0, $784$hi = 0, $786$hi = 0, $788 = 0, $788$hi = 0, $789$hi = 0, $791$hi = 0, $793 = 0, $793$hi = 0, $794$hi = 0, $844 = 0, $849 = 0, $851$hi = 0, $853 = 0, $853$hi = 0, $855$hi = 0, $857 = 0, $857$hi = 0, $858$hi = 0, $860$hi = 0, $862 = 0, $862$hi = 0, $863$hi = 0, $865$hi = 0, $867 = 0, $867$hi = 0, $868$hi = 0, $870$hi = 0, $872 = 0, $872$hi = 0, $873$hi = 0, $925 = 0, $930 = 0, $932$hi = 0, $934 = 0, $934$hi = 0, $936$hi = 0, $938 = 0, $938$hi = 0, $939$hi = 0, $941$hi = 0, $943 = 0, $943$hi = 0, $944$hi = 0, $946$hi = 0, $948 = 0, $948$hi = 0, $949$hi = 0, $951$hi = 0, $953 = 0, $953$hi = 0, $954$hi = 0, $956$hi = 0, $958 = 0, $958$hi = 0, $959$hi = 0, $999 = 0, $1004 = 0, $1006$hi = 0, $1008 = 0, $1008$hi = 0, $1010$hi = 0, $1012 = 0, $1012$hi = 0, $1013$hi = 0, $1015$hi = 0, $1017 = 0, $1017$hi = 0, $1018$hi = 0, $1058 = 0, $1063 = 0, $1065$hi = 0, $1067 = 0, $1067$hi = 0, $1069$hi = 0, $1071 = 0, $1071$hi = 0, $1072$hi = 0, $1074$hi = 0, $1076 = 0, $1076$hi = 0, $1077$hi = 0, $1079$hi = 0, $1081 = 0, $1081$hi = 0, $1082$hi = 0, $1114 = 0, $1119 = 0, $1121$hi = 0, $1123$hi = 0, $1132 = 0, $1137 = 0, $1139$hi = 0, $1141$hi = 0, $1157 = 0, $1161 = 0, $1163$hi = 0, $1165$hi = 0, $1194 = 0, $1199 = 0, $1204 = 0, $1204$hi = 0, $1207 = 0, $1207$hi = 0, $1208$hi = 0, $1217 = 0, $1222 = 0, $1224$hi = 0, $1226 = 0, $1226$hi = 0, $1229 = 0, $1229$hi = 0, $1230$hi = 0, $1246 = 0, $1250 = 0, $1252$hi = 0, $1254 = 0, $1254$hi = 0, $1256$hi = 0, $1258 = 0, $1258$hi = 0, $1259$hi = 0, $1270 = 0, $1270$hi = 0, $1272 = 0, $1272$hi = 0, $1279 = 0, $1279$hi = 0, $1281 = 0, $1281$hi = 0, $1282$hi = 0, $1290 = 0, $1290$hi = 0, $1292 = 0, $1292$hi = 0, $1293$hi = 0, $1301 = 0, $1301$hi = 0, $1303 = 0, $1303$hi = 0, $1304$hi = 0, $1312 = 0, $1312$hi = 0, $1314 = 0, $1314$hi = 0, $1315$hi = 0, $1323 = 0, $1323$hi = 0, $1325 = 0, $1325$hi = 0, $1326$hi = 0, $1334 = 0, $1334$hi = 0, $1336 = 0, $1336$hi = 0, $1337$hi = 0, $1345 = 0, $1345$hi = 0, $1347 = 0, $1347$hi = 0, $1348$hi = 0, $1356 = 0, $1356$hi = 0, $1358 = 0, $1358$hi = 0, $1359$hi = 0, $1367 = 0, $1367$hi = 0, $1369 = 0, $1369$hi = 0, $1370$hi = 0, $1378 = 0, $1378$hi = 0, $1380 = 0, $1380$hi = 0, $1381$hi = 0, $1389 = 0, $1389$hi = 0, $1391 = 0, $1391$hi = 0, $1392$hi = 0, $1400 = 0, $1400$hi = 0, $1402 = 0, $1402$hi = 0, $1403$hi = 0, $1411 = 0, $1411$hi = 0, $1413 = 0, $1413$hi = 0, $1414$hi = 0, $1422 = 0, $1422$hi = 0, $1424 = 0, $1424$hi = 0, $1425$hi = 0, $1433 = 0, $1433$hi = 0, $1435 = 0, $1435$hi = 0, $1436$hi = 0, $1444 = 0, $1444$hi = 0, $1446 = 0, $1446$hi = 0, $1447$hi = 0, $1455 = 0, $1455$hi = 0, $1457 = 0, $1457$hi = 0, $1458$hi = 0, $1466 = 0, $1466$hi = 0, $1468 = 0, $1468$hi = 0, $1469$hi = 0, $1478 = 0, $1478$hi = 0, $1480 = 0, $1480$hi = 0, $1481$hi = 0, $1483$hi = 0, $1486 = 0, $1486$hi = 0, $1488 = 0, $1488$hi = 0, $1489 = 0, $1489$hi = 0, $1490$hi = 0, $1493 = 0, $1493$hi = 0, $1495 = 0, $1495$hi = 0, $1496 = 0, $1496$hi = 0, $1497$hi = 0, $1500 = 0, $1500$hi = 0, $1502 = 0, $1502$hi = 0, $1503 = 0, $1503$hi = 0, $1504$hi = 0, $1507 = 0, $1507$hi = 0, $1509 = 0, $1509$hi = 0, $1510 = 0, $1510$hi = 0, $1511$hi = 0, $1514 = 0, $1514$hi = 0, $1516 = 0, $1516$hi = 0, $1517 = 0, $1517$hi = 0, $1518$hi = 0, $1521 = 0, $1521$hi = 0, $1523 = 0, $1523$hi = 0, $1524 = 0, $1524$hi = 0, $1525$hi = 0, $1528 = 0, $1528$hi = 0, $1530 = 0, $1530$hi = 0, $1531 = 0, $1531$hi = 0, $1532$hi = 0, $1535 = 0, $1535$hi = 0, $1537 = 0, $1537$hi = 0, $1538 = 0, $1538$hi = 0, $1539$hi = 0, $1542 = 0, $1542$hi = 0, $1544 = 0, $1544$hi = 0, $1545 = 0, $1545$hi = 0, $1546$hi = 0, $1549 = 0, $1549$hi = 0, $1551 = 0, $1551$hi = 0, $1552 = 0, $1552$hi = 0, $1553$hi = 0, $1556 = 0, $1556$hi = 0, $1558 = 0, $1558$hi = 0, $1559 = 0, $1559$hi = 0, $1560$hi = 0, $1563 = 0, $1563$hi = 0, $1565 = 0, $1565$hi = 0, $1566 = 0, $1566$hi = 0, $1572 = 0, $1576 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     if ($3 >>> 0 < 13 >>> 0) {
      break label$3
     }
     $6 = 0;
     if (($1 | 0) <= (0 | 0)) {
      break label$1
     }
     i64toi32_i32$0 = 0;
     $7 = $4;
     $7$hi = i64toi32_i32$0;
     $4 = $3 + -13 | 0;
     break label$2;
    }
    label$4 : {
     if ($3 >>> 0 < 9 >>> 0) {
      break label$4
     }
     label$5 : {
      if ($3 >>> 0 < 11 >>> 0) {
       break label$5
      }
      i64toi32_i32$0 = 0;
      $8 = $4;
      $8$hi = i64toi32_i32$0;
      label$6 : {
       if (($3 | 0) == (12 | 0)) {
        break label$6
       }
       if (($1 | 0) < (1 | 0)) {
        break label$1
       }
       $9 = HEAP32[($0 + -4 | 0) >> 2] | 0;
       $6 = HEAP32[($0 + -8 | 0) >> 2] | 0;
       $3 = HEAP32[($0 + -12 | 0) >> 2] | 0;
       $4 = HEAP32[($0 + -16 | 0) >> 2] | 0;
       $10 = HEAP32[($0 + -20 | 0) >> 2] | 0;
       $11 = HEAP32[($0 + -24 | 0) >> 2] | 0;
       $12 = HEAP32[($0 + -28 | 0) >> 2] | 0;
       $13 = HEAP32[($0 + -32 | 0) >> 2] | 0;
       $14 = HEAP32[($0 + -36 | 0) >> 2] | 0;
       $15 = HEAP32[($0 + -40 | 0) >> 2] | 0;
       $16 = HEAP32[($0 + -44 | 0) >> 2] | 0;
       i64toi32_i32$2 = $2;
       i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
       $7 = i64toi32_i32$0;
       $7$hi = i64toi32_i32$1;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
       i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
       $17 = i64toi32_i32$1;
       $17$hi = i64toi32_i32$0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
       i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
       $18 = i64toi32_i32$0;
       $18$hi = i64toi32_i32$1;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] | 0;
       i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
       $19 = i64toi32_i32$1;
       $19$hi = i64toi32_i32$0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 16 | 0) >> 2] | 0;
       i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
       $20 = i64toi32_i32$0;
       $20$hi = i64toi32_i32$1;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 20 | 0) >> 2] | 0;
       i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
       $21 = i64toi32_i32$1;
       $21$hi = i64toi32_i32$0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 24 | 0) >> 2] | 0;
       i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
       $22 = i64toi32_i32$0;
       $22$hi = i64toi32_i32$1;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 28 | 0) >> 2] | 0;
       i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
       $23 = i64toi32_i32$1;
       $23$hi = i64toi32_i32$0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 32 | 0) >> 2] | 0;
       i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
       $24 = i64toi32_i32$0;
       $24$hi = i64toi32_i32$1;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 36 | 0) >> 2] | 0;
       i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
       $25 = i64toi32_i32$1;
       $25$hi = i64toi32_i32$0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 40 | 0) >> 2] | 0;
       i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
       $26 = i64toi32_i32$0;
       $26$hi = i64toi32_i32$1;
       $2 = 0;
       label$7 : while (1) {
        $27 = $15;
        $15 = $14;
        $14 = $13;
        $13 = $12;
        $12 = $11;
        $11 = $10;
        $10 = $4;
        $4 = $3;
        $3 = $6;
        $6 = $9;
        $9 = $2 << 2 | 0;
        $117 = $5 + $9 | 0;
        $9 = HEAP32[($0 + $9 | 0) >> 2] | 0;
        $122 = $9;
        i64toi32_i32$0 = $27;
        i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
        $124$hi = i64toi32_i32$1;
        i64toi32_i32$1 = $25$hi;
        i64toi32_i32$1 = $124$hi;
        i64toi32_i32$0 = $25$hi;
        i64toi32_i32$0 = __wasm_i64_mul($27 | 0, i64toi32_i32$1 | 0, $25 | 0, i64toi32_i32$0 | 0) | 0;
        i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
        $126 = i64toi32_i32$0;
        $126$hi = i64toi32_i32$1;
        i64toi32_i32$0 = $16;
        i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
        $128$hi = i64toi32_i32$1;
        i64toi32_i32$1 = $26$hi;
        i64toi32_i32$1 = $128$hi;
        i64toi32_i32$0 = $26$hi;
        i64toi32_i32$0 = __wasm_i64_mul($16 | 0, i64toi32_i32$1 | 0, $26 | 0, i64toi32_i32$0 | 0) | 0;
        i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
        $130 = i64toi32_i32$0;
        $130$hi = i64toi32_i32$1;
        i64toi32_i32$1 = $126$hi;
        i64toi32_i32$2 = $126;
        i64toi32_i32$0 = $130$hi;
        i64toi32_i32$3 = $130;
        i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
        i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
        if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
         i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
        }
        $131$hi = i64toi32_i32$5;
        i64toi32_i32$2 = $15;
        i64toi32_i32$5 = i64toi32_i32$2 >> 31 | 0;
        $133$hi = i64toi32_i32$5;
        i64toi32_i32$5 = $24$hi;
        i64toi32_i32$5 = $133$hi;
        i64toi32_i32$2 = $24$hi;
        i64toi32_i32$2 = __wasm_i64_mul($15 | 0, i64toi32_i32$5 | 0, $24 | 0, i64toi32_i32$2 | 0) | 0;
        i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
        $135 = i64toi32_i32$2;
        $135$hi = i64toi32_i32$5;
        i64toi32_i32$5 = $131$hi;
        i64toi32_i32$1 = i64toi32_i32$4;
        i64toi32_i32$2 = $135$hi;
        i64toi32_i32$3 = $135;
        i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
        i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
        if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
         i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
        }
        $136$hi = i64toi32_i32$4;
        i64toi32_i32$1 = $14;
        i64toi32_i32$4 = i64toi32_i32$1 >> 31 | 0;
        $138$hi = i64toi32_i32$4;
        i64toi32_i32$4 = $23$hi;
        i64toi32_i32$4 = $138$hi;
        i64toi32_i32$1 = $23$hi;
        i64toi32_i32$1 = __wasm_i64_mul($14 | 0, i64toi32_i32$4 | 0, $23 | 0, i64toi32_i32$1 | 0) | 0;
        i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
        $140 = i64toi32_i32$1;
        $140$hi = i64toi32_i32$4;
        i64toi32_i32$4 = $136$hi;
        i64toi32_i32$5 = i64toi32_i32$0;
        i64toi32_i32$1 = $140$hi;
        i64toi32_i32$3 = $140;
        i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
        i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
        if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
         i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
        }
        $141$hi = i64toi32_i32$0;
        i64toi32_i32$5 = $13;
        i64toi32_i32$0 = i64toi32_i32$5 >> 31 | 0;
        $143$hi = i64toi32_i32$0;
        i64toi32_i32$0 = $22$hi;
        i64toi32_i32$0 = $143$hi;
        i64toi32_i32$5 = $22$hi;
        i64toi32_i32$5 = __wasm_i64_mul($13 | 0, i64toi32_i32$0 | 0, $22 | 0, i64toi32_i32$5 | 0) | 0;
        i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
        $145 = i64toi32_i32$5;
        $145$hi = i64toi32_i32$0;
        i64toi32_i32$0 = $141$hi;
        i64toi32_i32$4 = i64toi32_i32$2;
        i64toi32_i32$5 = $145$hi;
        i64toi32_i32$3 = $145;
        i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
        i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
        if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
         i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
        }
        $146$hi = i64toi32_i32$2;
        i64toi32_i32$4 = $12;
        i64toi32_i32$2 = i64toi32_i32$4 >> 31 | 0;
        $148$hi = i64toi32_i32$2;
        i64toi32_i32$2 = $21$hi;
        i64toi32_i32$2 = $148$hi;
        i64toi32_i32$4 = $21$hi;
        i64toi32_i32$4 = __wasm_i64_mul($12 | 0, i64toi32_i32$2 | 0, $21 | 0, i64toi32_i32$4 | 0) | 0;
        i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
        $150 = i64toi32_i32$4;
        $150$hi = i64toi32_i32$2;
        i64toi32_i32$2 = $146$hi;
        i64toi32_i32$0 = i64toi32_i32$1;
        i64toi32_i32$4 = $150$hi;
        i64toi32_i32$3 = $150;
        i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
        i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
        if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
         i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
        }
        $151$hi = i64toi32_i32$1;
        i64toi32_i32$0 = $11;
        i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
        $153$hi = i64toi32_i32$1;
        i64toi32_i32$1 = $20$hi;
        i64toi32_i32$1 = $153$hi;
        i64toi32_i32$0 = $20$hi;
        i64toi32_i32$0 = __wasm_i64_mul($11 | 0, i64toi32_i32$1 | 0, $20 | 0, i64toi32_i32$0 | 0) | 0;
        i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
        $155 = i64toi32_i32$0;
        $155$hi = i64toi32_i32$1;
        i64toi32_i32$1 = $151$hi;
        i64toi32_i32$2 = i64toi32_i32$5;
        i64toi32_i32$0 = $155$hi;
        i64toi32_i32$3 = $155;
        i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
        i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
        if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
         i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
        }
        $156$hi = i64toi32_i32$5;
        i64toi32_i32$2 = $10;
        i64toi32_i32$5 = i64toi32_i32$2 >> 31 | 0;
        $158$hi = i64toi32_i32$5;
        i64toi32_i32$5 = $19$hi;
        i64toi32_i32$5 = $158$hi;
        i64toi32_i32$2 = $19$hi;
        i64toi32_i32$2 = __wasm_i64_mul($10 | 0, i64toi32_i32$5 | 0, $19 | 0, i64toi32_i32$2 | 0) | 0;
        i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
        $160 = i64toi32_i32$2;
        $160$hi = i64toi32_i32$5;
        i64toi32_i32$5 = $156$hi;
        i64toi32_i32$1 = i64toi32_i32$4;
        i64toi32_i32$2 = $160$hi;
        i64toi32_i32$3 = $160;
        i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
        i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
        if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
         i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
        }
        $161$hi = i64toi32_i32$4;
        i64toi32_i32$1 = $4;
        i64toi32_i32$4 = i64toi32_i32$1 >> 31 | 0;
        $163$hi = i64toi32_i32$4;
        i64toi32_i32$4 = $18$hi;
        i64toi32_i32$4 = $163$hi;
        i64toi32_i32$1 = $18$hi;
        i64toi32_i32$1 = __wasm_i64_mul($4 | 0, i64toi32_i32$4 | 0, $18 | 0, i64toi32_i32$1 | 0) | 0;
        i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
        $165 = i64toi32_i32$1;
        $165$hi = i64toi32_i32$4;
        i64toi32_i32$4 = $161$hi;
        i64toi32_i32$5 = i64toi32_i32$0;
        i64toi32_i32$1 = $165$hi;
        i64toi32_i32$3 = $165;
        i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
        i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
        if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
         i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
        }
        $166$hi = i64toi32_i32$0;
        i64toi32_i32$5 = $3;
        i64toi32_i32$0 = i64toi32_i32$5 >> 31 | 0;
        $168$hi = i64toi32_i32$0;
        i64toi32_i32$0 = $17$hi;
        i64toi32_i32$0 = $168$hi;
        i64toi32_i32$5 = $17$hi;
        i64toi32_i32$5 = __wasm_i64_mul($3 | 0, i64toi32_i32$0 | 0, $17 | 0, i64toi32_i32$5 | 0) | 0;
        i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
        $170 = i64toi32_i32$5;
        $170$hi = i64toi32_i32$0;
        i64toi32_i32$0 = $166$hi;
        i64toi32_i32$4 = i64toi32_i32$2;
        i64toi32_i32$5 = $170$hi;
        i64toi32_i32$3 = $170;
        i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
        i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
        if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
         i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
        }
        $171$hi = i64toi32_i32$2;
        i64toi32_i32$4 = $6;
        i64toi32_i32$2 = i64toi32_i32$4 >> 31 | 0;
        $173$hi = i64toi32_i32$2;
        i64toi32_i32$2 = $7$hi;
        i64toi32_i32$2 = $173$hi;
        i64toi32_i32$4 = $7$hi;
        i64toi32_i32$4 = __wasm_i64_mul($6 | 0, i64toi32_i32$2 | 0, $7 | 0, i64toi32_i32$4 | 0) | 0;
        i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
        $175 = i64toi32_i32$4;
        $175$hi = i64toi32_i32$2;
        i64toi32_i32$2 = $171$hi;
        i64toi32_i32$0 = i64toi32_i32$1;
        i64toi32_i32$4 = $175$hi;
        i64toi32_i32$3 = $175;
        i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
        i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
        if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
         i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
        }
        $176$hi = i64toi32_i32$1;
        i64toi32_i32$1 = $8$hi;
        i64toi32_i32$1 = $176$hi;
        i64toi32_i32$2 = i64toi32_i32$5;
        i64toi32_i32$0 = $8$hi;
        i64toi32_i32$3 = $8;
        i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
         i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
         $581 = i64toi32_i32$1 >> i64toi32_i32$4 | 0;
        } else {
         i64toi32_i32$0 = i64toi32_i32$1 >> i64toi32_i32$4 | 0;
         $581 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
        }
        HEAP32[$117 >> 2] = $122 - $581 | 0;
        $16 = $27;
        $2 = $2 + 1 | 0;
        if (($2 | 0) != ($1 | 0)) {
         continue label$7
        }
        break label$1;
       };
      }
      if (($1 | 0) < (1 | 0)) {
       break label$1
      }
      $16 = HEAP32[($0 + -4 | 0) >> 2] | 0;
      $6 = HEAP32[($0 + -8 | 0) >> 2] | 0;
      $3 = HEAP32[($0 + -12 | 0) >> 2] | 0;
      $4 = HEAP32[($0 + -16 | 0) >> 2] | 0;
      $10 = HEAP32[($0 + -20 | 0) >> 2] | 0;
      $11 = HEAP32[($0 + -24 | 0) >> 2] | 0;
      $12 = HEAP32[($0 + -28 | 0) >> 2] | 0;
      $13 = HEAP32[($0 + -32 | 0) >> 2] | 0;
      $14 = HEAP32[($0 + -36 | 0) >> 2] | 0;
      $15 = HEAP32[($0 + -40 | 0) >> 2] | 0;
      $27 = HEAP32[($0 + -44 | 0) >> 2] | 0;
      $28 = HEAP32[($0 + -48 | 0) >> 2] | 0;
      i64toi32_i32$1 = $2;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$1 >> 2] | 0;
      i64toi32_i32$2 = i64toi32_i32$0 >> 31 | 0;
      $7 = i64toi32_i32$0;
      $7$hi = i64toi32_i32$2;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
      i64toi32_i32$0 = i64toi32_i32$2 >> 31 | 0;
      $17 = i64toi32_i32$2;
      $17$hi = i64toi32_i32$0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] | 0;
      i64toi32_i32$2 = i64toi32_i32$0 >> 31 | 0;
      $18 = i64toi32_i32$0;
      $18$hi = i64toi32_i32$2;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] | 0;
      i64toi32_i32$0 = i64toi32_i32$2 >> 31 | 0;
      $19 = i64toi32_i32$2;
      $19$hi = i64toi32_i32$0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 16 | 0) >> 2] | 0;
      i64toi32_i32$2 = i64toi32_i32$0 >> 31 | 0;
      $20 = i64toi32_i32$0;
      $20$hi = i64toi32_i32$2;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 20 | 0) >> 2] | 0;
      i64toi32_i32$0 = i64toi32_i32$2 >> 31 | 0;
      $21 = i64toi32_i32$2;
      $21$hi = i64toi32_i32$0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 24 | 0) >> 2] | 0;
      i64toi32_i32$2 = i64toi32_i32$0 >> 31 | 0;
      $22 = i64toi32_i32$0;
      $22$hi = i64toi32_i32$2;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 28 | 0) >> 2] | 0;
      i64toi32_i32$0 = i64toi32_i32$2 >> 31 | 0;
      $23 = i64toi32_i32$2;
      $23$hi = i64toi32_i32$0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 32 | 0) >> 2] | 0;
      i64toi32_i32$2 = i64toi32_i32$0 >> 31 | 0;
      $24 = i64toi32_i32$0;
      $24$hi = i64toi32_i32$2;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 36 | 0) >> 2] | 0;
      i64toi32_i32$0 = i64toi32_i32$2 >> 31 | 0;
      $25 = i64toi32_i32$2;
      $25$hi = i64toi32_i32$0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 40 | 0) >> 2] | 0;
      i64toi32_i32$2 = i64toi32_i32$0 >> 31 | 0;
      $26 = i64toi32_i32$0;
      $26$hi = i64toi32_i32$2;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 44 | 0) >> 2] | 0;
      i64toi32_i32$0 = i64toi32_i32$2 >> 31 | 0;
      $29 = i64toi32_i32$2;
      $29$hi = i64toi32_i32$0;
      $2 = 0;
      label$8 : while (1) {
       $9 = $27;
       $27 = $15;
       $15 = $14;
       $14 = $13;
       $13 = $12;
       $12 = $11;
       $11 = $10;
       $10 = $4;
       $4 = $3;
       $3 = $6;
       $6 = $16;
       $16 = $2 << 2 | 0;
       $264 = $5 + $16 | 0;
       $16 = HEAP32[($0 + $16 | 0) >> 2] | 0;
       $269 = $16;
       i64toi32_i32$2 = $9;
       i64toi32_i32$0 = i64toi32_i32$2 >> 31 | 0;
       $271$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $26$hi;
       i64toi32_i32$0 = $271$hi;
       i64toi32_i32$2 = $26$hi;
       i64toi32_i32$2 = __wasm_i64_mul($9 | 0, i64toi32_i32$0 | 0, $26 | 0, i64toi32_i32$2 | 0) | 0;
       i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
       $273 = i64toi32_i32$2;
       $273$hi = i64toi32_i32$0;
       i64toi32_i32$2 = $28;
       i64toi32_i32$0 = i64toi32_i32$2 >> 31 | 0;
       $275$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $29$hi;
       i64toi32_i32$0 = $275$hi;
       i64toi32_i32$2 = $29$hi;
       i64toi32_i32$2 = __wasm_i64_mul($28 | 0, i64toi32_i32$0 | 0, $29 | 0, i64toi32_i32$2 | 0) | 0;
       i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
       $277 = i64toi32_i32$2;
       $277$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $273$hi;
       i64toi32_i32$1 = $273;
       i64toi32_i32$2 = $277$hi;
       i64toi32_i32$3 = $277;
       i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
       i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
       if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
       }
       $278$hi = i64toi32_i32$5;
       i64toi32_i32$1 = $27;
       i64toi32_i32$5 = i64toi32_i32$1 >> 31 | 0;
       $280$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $25$hi;
       i64toi32_i32$5 = $280$hi;
       i64toi32_i32$1 = $25$hi;
       i64toi32_i32$1 = __wasm_i64_mul($27 | 0, i64toi32_i32$5 | 0, $25 | 0, i64toi32_i32$1 | 0) | 0;
       i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
       $282 = i64toi32_i32$1;
       $282$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $278$hi;
       i64toi32_i32$0 = i64toi32_i32$4;
       i64toi32_i32$1 = $282$hi;
       i64toi32_i32$3 = $282;
       i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
       i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
       if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
       }
       $283$hi = i64toi32_i32$4;
       i64toi32_i32$0 = $15;
       i64toi32_i32$4 = i64toi32_i32$0 >> 31 | 0;
       $285$hi = i64toi32_i32$4;
       i64toi32_i32$4 = $24$hi;
       i64toi32_i32$4 = $285$hi;
       i64toi32_i32$0 = $24$hi;
       i64toi32_i32$0 = __wasm_i64_mul($15 | 0, i64toi32_i32$4 | 0, $24 | 0, i64toi32_i32$0 | 0) | 0;
       i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
       $287 = i64toi32_i32$0;
       $287$hi = i64toi32_i32$4;
       i64toi32_i32$4 = $283$hi;
       i64toi32_i32$5 = i64toi32_i32$2;
       i64toi32_i32$0 = $287$hi;
       i64toi32_i32$3 = $287;
       i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
       i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
       if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
       }
       $288$hi = i64toi32_i32$2;
       i64toi32_i32$5 = $14;
       i64toi32_i32$2 = i64toi32_i32$5 >> 31 | 0;
       $290$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $23$hi;
       i64toi32_i32$2 = $290$hi;
       i64toi32_i32$5 = $23$hi;
       i64toi32_i32$5 = __wasm_i64_mul($14 | 0, i64toi32_i32$2 | 0, $23 | 0, i64toi32_i32$5 | 0) | 0;
       i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
       $292 = i64toi32_i32$5;
       $292$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $288$hi;
       i64toi32_i32$4 = i64toi32_i32$1;
       i64toi32_i32$5 = $292$hi;
       i64toi32_i32$3 = $292;
       i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
       i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
       if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
       }
       $293$hi = i64toi32_i32$1;
       i64toi32_i32$4 = $13;
       i64toi32_i32$1 = i64toi32_i32$4 >> 31 | 0;
       $295$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $22$hi;
       i64toi32_i32$1 = $295$hi;
       i64toi32_i32$4 = $22$hi;
       i64toi32_i32$4 = __wasm_i64_mul($13 | 0, i64toi32_i32$1 | 0, $22 | 0, i64toi32_i32$4 | 0) | 0;
       i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
       $297 = i64toi32_i32$4;
       $297$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $293$hi;
       i64toi32_i32$2 = i64toi32_i32$0;
       i64toi32_i32$4 = $297$hi;
       i64toi32_i32$3 = $297;
       i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
       i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
       if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
       }
       $298$hi = i64toi32_i32$0;
       i64toi32_i32$2 = $12;
       i64toi32_i32$0 = i64toi32_i32$2 >> 31 | 0;
       $300$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $21$hi;
       i64toi32_i32$0 = $300$hi;
       i64toi32_i32$2 = $21$hi;
       i64toi32_i32$2 = __wasm_i64_mul($12 | 0, i64toi32_i32$0 | 0, $21 | 0, i64toi32_i32$2 | 0) | 0;
       i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
       $302 = i64toi32_i32$2;
       $302$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $298$hi;
       i64toi32_i32$1 = i64toi32_i32$5;
       i64toi32_i32$2 = $302$hi;
       i64toi32_i32$3 = $302;
       i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
       i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
       if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
       }
       $303$hi = i64toi32_i32$5;
       i64toi32_i32$1 = $11;
       i64toi32_i32$5 = i64toi32_i32$1 >> 31 | 0;
       $305$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $20$hi;
       i64toi32_i32$5 = $305$hi;
       i64toi32_i32$1 = $20$hi;
       i64toi32_i32$1 = __wasm_i64_mul($11 | 0, i64toi32_i32$5 | 0, $20 | 0, i64toi32_i32$1 | 0) | 0;
       i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
       $307 = i64toi32_i32$1;
       $307$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $303$hi;
       i64toi32_i32$0 = i64toi32_i32$4;
       i64toi32_i32$1 = $307$hi;
       i64toi32_i32$3 = $307;
       i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
       i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
       if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
       }
       $308$hi = i64toi32_i32$4;
       i64toi32_i32$0 = $10;
       i64toi32_i32$4 = i64toi32_i32$0 >> 31 | 0;
       $310$hi = i64toi32_i32$4;
       i64toi32_i32$4 = $19$hi;
       i64toi32_i32$4 = $310$hi;
       i64toi32_i32$0 = $19$hi;
       i64toi32_i32$0 = __wasm_i64_mul($10 | 0, i64toi32_i32$4 | 0, $19 | 0, i64toi32_i32$0 | 0) | 0;
       i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
       $312 = i64toi32_i32$0;
       $312$hi = i64toi32_i32$4;
       i64toi32_i32$4 = $308$hi;
       i64toi32_i32$5 = i64toi32_i32$2;
       i64toi32_i32$0 = $312$hi;
       i64toi32_i32$3 = $312;
       i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
       i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
       if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
       }
       $313$hi = i64toi32_i32$2;
       i64toi32_i32$5 = $4;
       i64toi32_i32$2 = i64toi32_i32$5 >> 31 | 0;
       $315$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $18$hi;
       i64toi32_i32$2 = $315$hi;
       i64toi32_i32$5 = $18$hi;
       i64toi32_i32$5 = __wasm_i64_mul($4 | 0, i64toi32_i32$2 | 0, $18 | 0, i64toi32_i32$5 | 0) | 0;
       i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
       $317 = i64toi32_i32$5;
       $317$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $313$hi;
       i64toi32_i32$4 = i64toi32_i32$1;
       i64toi32_i32$5 = $317$hi;
       i64toi32_i32$3 = $317;
       i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
       i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
       if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
       }
       $318$hi = i64toi32_i32$1;
       i64toi32_i32$4 = $3;
       i64toi32_i32$1 = i64toi32_i32$4 >> 31 | 0;
       $320$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $17$hi;
       i64toi32_i32$1 = $320$hi;
       i64toi32_i32$4 = $17$hi;
       i64toi32_i32$4 = __wasm_i64_mul($3 | 0, i64toi32_i32$1 | 0, $17 | 0, i64toi32_i32$4 | 0) | 0;
       i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
       $322 = i64toi32_i32$4;
       $322$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $318$hi;
       i64toi32_i32$2 = i64toi32_i32$0;
       i64toi32_i32$4 = $322$hi;
       i64toi32_i32$3 = $322;
       i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
       i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
       if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
       }
       $323$hi = i64toi32_i32$0;
       i64toi32_i32$2 = $6;
       i64toi32_i32$0 = i64toi32_i32$2 >> 31 | 0;
       $325$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $7$hi;
       i64toi32_i32$0 = $325$hi;
       i64toi32_i32$2 = $7$hi;
       i64toi32_i32$2 = __wasm_i64_mul($6 | 0, i64toi32_i32$0 | 0, $7 | 0, i64toi32_i32$2 | 0) | 0;
       i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
       $327 = i64toi32_i32$2;
       $327$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $323$hi;
       i64toi32_i32$1 = i64toi32_i32$5;
       i64toi32_i32$2 = $327$hi;
       i64toi32_i32$3 = $327;
       i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
       i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
       if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
       }
       $328$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $8$hi;
       i64toi32_i32$5 = $328$hi;
       i64toi32_i32$0 = i64toi32_i32$4;
       i64toi32_i32$1 = $8$hi;
       i64toi32_i32$3 = $8;
       i64toi32_i32$2 = i64toi32_i32$3 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
        i64toi32_i32$1 = i64toi32_i32$5 >> 31 | 0;
        $582 = i64toi32_i32$5 >> i64toi32_i32$2 | 0;
       } else {
        i64toi32_i32$1 = i64toi32_i32$5 >> i64toi32_i32$2 | 0;
        $582 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$2 | 0) | 0;
       }
       HEAP32[$264 >> 2] = $269 - $582 | 0;
       $28 = $9;
       $2 = $2 + 1 | 0;
       if (($2 | 0) != ($1 | 0)) {
        continue label$8
       }
       break label$1;
      };
     }
     i64toi32_i32$1 = 0;
     $8 = $4;
     $8$hi = i64toi32_i32$1;
     label$9 : {
      if (($3 | 0) == (10 | 0)) {
       break label$9
      }
      if (($1 | 0) < (1 | 0)) {
       break label$1
      }
      $15 = HEAP32[($0 + -4 | 0) >> 2] | 0;
      $6 = HEAP32[($0 + -8 | 0) >> 2] | 0;
      $3 = HEAP32[($0 + -12 | 0) >> 2] | 0;
      $4 = HEAP32[($0 + -16 | 0) >> 2] | 0;
      $10 = HEAP32[($0 + -20 | 0) >> 2] | 0;
      $11 = HEAP32[($0 + -24 | 0) >> 2] | 0;
      $12 = HEAP32[($0 + -28 | 0) >> 2] | 0;
      $13 = HEAP32[($0 + -32 | 0) >> 2] | 0;
      $27 = HEAP32[($0 + -36 | 0) >> 2] | 0;
      i64toi32_i32$5 = $2;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$5 >> 2] | 0;
      i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
      $7 = i64toi32_i32$1;
      $7$hi = i64toi32_i32$0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
      i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
      $17 = i64toi32_i32$0;
      $17$hi = i64toi32_i32$1;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 8 | 0) >> 2] | 0;
      i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
      $18 = i64toi32_i32$1;
      $18$hi = i64toi32_i32$0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 12 | 0) >> 2] | 0;
      i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
      $19 = i64toi32_i32$0;
      $19$hi = i64toi32_i32$1;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 16 | 0) >> 2] | 0;
      i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
      $20 = i64toi32_i32$1;
      $20$hi = i64toi32_i32$0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 20 | 0) >> 2] | 0;
      i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
      $21 = i64toi32_i32$0;
      $21$hi = i64toi32_i32$1;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 24 | 0) >> 2] | 0;
      i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
      $22 = i64toi32_i32$1;
      $22$hi = i64toi32_i32$0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 28 | 0) >> 2] | 0;
      i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
      $23 = i64toi32_i32$0;
      $23$hi = i64toi32_i32$1;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 32 | 0) >> 2] | 0;
      i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
      $24 = i64toi32_i32$1;
      $24$hi = i64toi32_i32$0;
      $2 = 0;
      label$10 : while (1) {
       $14 = $13;
       $13 = $12;
       $12 = $11;
       $11 = $10;
       $10 = $4;
       $4 = $3;
       $3 = $6;
       $6 = $15;
       $15 = $2 << 2 | 0;
       $402 = $5 + $15 | 0;
       $15 = HEAP32[($0 + $15 | 0) >> 2] | 0;
       $407 = $15;
       i64toi32_i32$1 = $14;
       i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
       $409$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $23$hi;
       i64toi32_i32$0 = $409$hi;
       i64toi32_i32$1 = $23$hi;
       i64toi32_i32$1 = __wasm_i64_mul($14 | 0, i64toi32_i32$0 | 0, $23 | 0, i64toi32_i32$1 | 0) | 0;
       i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
       $411 = i64toi32_i32$1;
       $411$hi = i64toi32_i32$0;
       i64toi32_i32$1 = $27;
       i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
       $413$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $24$hi;
       i64toi32_i32$0 = $413$hi;
       i64toi32_i32$1 = $24$hi;
       i64toi32_i32$1 = __wasm_i64_mul($27 | 0, i64toi32_i32$0 | 0, $24 | 0, i64toi32_i32$1 | 0) | 0;
       i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
       $415 = i64toi32_i32$1;
       $415$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $411$hi;
       i64toi32_i32$5 = $411;
       i64toi32_i32$1 = $415$hi;
       i64toi32_i32$3 = $415;
       i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
       i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
       if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
       }
       $416$hi = i64toi32_i32$4;
       i64toi32_i32$5 = $13;
       i64toi32_i32$4 = i64toi32_i32$5 >> 31 | 0;
       $418$hi = i64toi32_i32$4;
       i64toi32_i32$4 = $22$hi;
       i64toi32_i32$4 = $418$hi;
       i64toi32_i32$5 = $22$hi;
       i64toi32_i32$5 = __wasm_i64_mul($13 | 0, i64toi32_i32$4 | 0, $22 | 0, i64toi32_i32$5 | 0) | 0;
       i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
       $420 = i64toi32_i32$5;
       $420$hi = i64toi32_i32$4;
       i64toi32_i32$4 = $416$hi;
       i64toi32_i32$0 = i64toi32_i32$2;
       i64toi32_i32$5 = $420$hi;
       i64toi32_i32$3 = $420;
       i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
       i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
       if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
       }
       $421$hi = i64toi32_i32$2;
       i64toi32_i32$0 = $12;
       i64toi32_i32$2 = i64toi32_i32$0 >> 31 | 0;
       $423$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $21$hi;
       i64toi32_i32$2 = $423$hi;
       i64toi32_i32$0 = $21$hi;
       i64toi32_i32$0 = __wasm_i64_mul($12 | 0, i64toi32_i32$2 | 0, $21 | 0, i64toi32_i32$0 | 0) | 0;
       i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
       $425 = i64toi32_i32$0;
       $425$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $421$hi;
       i64toi32_i32$4 = i64toi32_i32$1;
       i64toi32_i32$0 = $425$hi;
       i64toi32_i32$3 = $425;
       i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
       i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
       if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
       }
       $426$hi = i64toi32_i32$1;
       i64toi32_i32$4 = $11;
       i64toi32_i32$1 = i64toi32_i32$4 >> 31 | 0;
       $428$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $20$hi;
       i64toi32_i32$1 = $428$hi;
       i64toi32_i32$4 = $20$hi;
       i64toi32_i32$4 = __wasm_i64_mul($11 | 0, i64toi32_i32$1 | 0, $20 | 0, i64toi32_i32$4 | 0) | 0;
       i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
       $430 = i64toi32_i32$4;
       $430$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $426$hi;
       i64toi32_i32$2 = i64toi32_i32$5;
       i64toi32_i32$4 = $430$hi;
       i64toi32_i32$3 = $430;
       i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
       i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
       if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
       }
       $431$hi = i64toi32_i32$5;
       i64toi32_i32$2 = $10;
       i64toi32_i32$5 = i64toi32_i32$2 >> 31 | 0;
       $433$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $19$hi;
       i64toi32_i32$5 = $433$hi;
       i64toi32_i32$2 = $19$hi;
       i64toi32_i32$2 = __wasm_i64_mul($10 | 0, i64toi32_i32$5 | 0, $19 | 0, i64toi32_i32$2 | 0) | 0;
       i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
       $435 = i64toi32_i32$2;
       $435$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $431$hi;
       i64toi32_i32$1 = i64toi32_i32$0;
       i64toi32_i32$2 = $435$hi;
       i64toi32_i32$3 = $435;
       i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
       i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
       if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
       }
       $436$hi = i64toi32_i32$0;
       i64toi32_i32$1 = $4;
       i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
       $438$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $18$hi;
       i64toi32_i32$0 = $438$hi;
       i64toi32_i32$1 = $18$hi;
       i64toi32_i32$1 = __wasm_i64_mul($4 | 0, i64toi32_i32$0 | 0, $18 | 0, i64toi32_i32$1 | 0) | 0;
       i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
       $440 = i64toi32_i32$1;
       $440$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $436$hi;
       i64toi32_i32$5 = i64toi32_i32$4;
       i64toi32_i32$1 = $440$hi;
       i64toi32_i32$3 = $440;
       i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
       i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
       if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
       }
       $441$hi = i64toi32_i32$4;
       i64toi32_i32$5 = $3;
       i64toi32_i32$4 = i64toi32_i32$5 >> 31 | 0;
       $443$hi = i64toi32_i32$4;
       i64toi32_i32$4 = $17$hi;
       i64toi32_i32$4 = $443$hi;
       i64toi32_i32$5 = $17$hi;
       i64toi32_i32$5 = __wasm_i64_mul($3 | 0, i64toi32_i32$4 | 0, $17 | 0, i64toi32_i32$5 | 0) | 0;
       i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
       $445 = i64toi32_i32$5;
       $445$hi = i64toi32_i32$4;
       i64toi32_i32$4 = $441$hi;
       i64toi32_i32$0 = i64toi32_i32$2;
       i64toi32_i32$5 = $445$hi;
       i64toi32_i32$3 = $445;
       i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
       i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
       if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
       }
       $446$hi = i64toi32_i32$2;
       i64toi32_i32$0 = $6;
       i64toi32_i32$2 = i64toi32_i32$0 >> 31 | 0;
       $448$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $7$hi;
       i64toi32_i32$2 = $448$hi;
       i64toi32_i32$0 = $7$hi;
       i64toi32_i32$0 = __wasm_i64_mul($6 | 0, i64toi32_i32$2 | 0, $7 | 0, i64toi32_i32$0 | 0) | 0;
       i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
       $450 = i64toi32_i32$0;
       $450$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $446$hi;
       i64toi32_i32$4 = i64toi32_i32$1;
       i64toi32_i32$0 = $450$hi;
       i64toi32_i32$3 = $450;
       i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
       i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
       if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
       }
       $451$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $8$hi;
       i64toi32_i32$1 = $451$hi;
       i64toi32_i32$2 = i64toi32_i32$5;
       i64toi32_i32$4 = $8$hi;
       i64toi32_i32$3 = $8;
       i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
        i64toi32_i32$4 = i64toi32_i32$1 >> 31 | 0;
        $583 = i64toi32_i32$1 >> i64toi32_i32$0 | 0;
       } else {
        i64toi32_i32$4 = i64toi32_i32$1 >> i64toi32_i32$0 | 0;
        $583 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$0 | 0) | 0;
       }
       HEAP32[$402 >> 2] = $407 - $583 | 0;
       $27 = $14;
       $2 = $2 + 1 | 0;
       if (($2 | 0) != ($1 | 0)) {
        continue label$10
       }
       break label$1;
      };
     }
     if (($1 | 0) < (1 | 0)) {
      break label$1
     }
     $27 = HEAP32[($0 + -4 | 0) >> 2] | 0;
     $6 = HEAP32[($0 + -8 | 0) >> 2] | 0;
     $3 = HEAP32[($0 + -12 | 0) >> 2] | 0;
     $4 = HEAP32[($0 + -16 | 0) >> 2] | 0;
     $10 = HEAP32[($0 + -20 | 0) >> 2] | 0;
     $11 = HEAP32[($0 + -24 | 0) >> 2] | 0;
     $12 = HEAP32[($0 + -28 | 0) >> 2] | 0;
     $13 = HEAP32[($0 + -32 | 0) >> 2] | 0;
     $14 = HEAP32[($0 + -36 | 0) >> 2] | 0;
     $9 = HEAP32[($0 + -40 | 0) >> 2] | 0;
     i64toi32_i32$1 = $2;
     i64toi32_i32$4 = HEAP32[i64toi32_i32$1 >> 2] | 0;
     i64toi32_i32$2 = i64toi32_i32$4 >> 31 | 0;
     $7 = i64toi32_i32$4;
     $7$hi = i64toi32_i32$2;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
     i64toi32_i32$4 = i64toi32_i32$2 >> 31 | 0;
     $17 = i64toi32_i32$2;
     $17$hi = i64toi32_i32$4;
     i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] | 0;
     i64toi32_i32$2 = i64toi32_i32$4 >> 31 | 0;
     $18 = i64toi32_i32$4;
     $18$hi = i64toi32_i32$2;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] | 0;
     i64toi32_i32$4 = i64toi32_i32$2 >> 31 | 0;
     $19 = i64toi32_i32$2;
     $19$hi = i64toi32_i32$4;
     i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 16 | 0) >> 2] | 0;
     i64toi32_i32$2 = i64toi32_i32$4 >> 31 | 0;
     $20 = i64toi32_i32$4;
     $20$hi = i64toi32_i32$2;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 20 | 0) >> 2] | 0;
     i64toi32_i32$4 = i64toi32_i32$2 >> 31 | 0;
     $21 = i64toi32_i32$2;
     $21$hi = i64toi32_i32$4;
     i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 24 | 0) >> 2] | 0;
     i64toi32_i32$2 = i64toi32_i32$4 >> 31 | 0;
     $22 = i64toi32_i32$4;
     $22$hi = i64toi32_i32$2;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 28 | 0) >> 2] | 0;
     i64toi32_i32$4 = i64toi32_i32$2 >> 31 | 0;
     $23 = i64toi32_i32$2;
     $23$hi = i64toi32_i32$4;
     i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 32 | 0) >> 2] | 0;
     i64toi32_i32$2 = i64toi32_i32$4 >> 31 | 0;
     $24 = i64toi32_i32$4;
     $24$hi = i64toi32_i32$2;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 36 | 0) >> 2] | 0;
     i64toi32_i32$4 = i64toi32_i32$2 >> 31 | 0;
     $25 = i64toi32_i32$2;
     $25$hi = i64toi32_i32$4;
     $2 = 0;
     label$11 : while (1) {
      $15 = $14;
      $14 = $13;
      $13 = $12;
      $12 = $11;
      $11 = $10;
      $10 = $4;
      $4 = $3;
      $3 = $6;
      $6 = $27;
      $27 = $2 << 2 | 0;
      $527 = $5 + $27 | 0;
      $27 = HEAP32[($0 + $27 | 0) >> 2] | 0;
      $532 = $27;
      i64toi32_i32$2 = $15;
      i64toi32_i32$4 = i64toi32_i32$2 >> 31 | 0;
      $534$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $24$hi;
      i64toi32_i32$4 = $534$hi;
      i64toi32_i32$2 = $24$hi;
      i64toi32_i32$2 = __wasm_i64_mul($15 | 0, i64toi32_i32$4 | 0, $24 | 0, i64toi32_i32$2 | 0) | 0;
      i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
      $536 = i64toi32_i32$2;
      $536$hi = i64toi32_i32$4;
      i64toi32_i32$2 = $9;
      i64toi32_i32$4 = i64toi32_i32$2 >> 31 | 0;
      $538$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $25$hi;
      i64toi32_i32$4 = $538$hi;
      i64toi32_i32$2 = $25$hi;
      i64toi32_i32$2 = __wasm_i64_mul($9 | 0, i64toi32_i32$4 | 0, $25 | 0, i64toi32_i32$2 | 0) | 0;
      i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
      $540 = i64toi32_i32$2;
      $540$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $536$hi;
      i64toi32_i32$1 = $536;
      i64toi32_i32$2 = $540$hi;
      i64toi32_i32$3 = $540;
      i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
      i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $541$hi = i64toi32_i32$5;
      i64toi32_i32$1 = $14;
      i64toi32_i32$5 = i64toi32_i32$1 >> 31 | 0;
      $543$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $23$hi;
      i64toi32_i32$5 = $543$hi;
      i64toi32_i32$1 = $23$hi;
      i64toi32_i32$1 = __wasm_i64_mul($14 | 0, i64toi32_i32$5 | 0, $23 | 0, i64toi32_i32$1 | 0) | 0;
      i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
      $545 = i64toi32_i32$1;
      $545$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $541$hi;
      i64toi32_i32$4 = i64toi32_i32$0;
      i64toi32_i32$1 = $545$hi;
      i64toi32_i32$3 = $545;
      i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
      i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
      }
      $546$hi = i64toi32_i32$0;
      i64toi32_i32$4 = $13;
      i64toi32_i32$0 = i64toi32_i32$4 >> 31 | 0;
      $548$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $22$hi;
      i64toi32_i32$0 = $548$hi;
      i64toi32_i32$4 = $22$hi;
      i64toi32_i32$4 = __wasm_i64_mul($13 | 0, i64toi32_i32$0 | 0, $22 | 0, i64toi32_i32$4 | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
      $550 = i64toi32_i32$4;
      $550$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $546$hi;
      i64toi32_i32$5 = i64toi32_i32$2;
      i64toi32_i32$4 = $550$hi;
      i64toi32_i32$3 = $550;
      i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
      i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
      }
      $551$hi = i64toi32_i32$2;
      i64toi32_i32$5 = $12;
      i64toi32_i32$2 = i64toi32_i32$5 >> 31 | 0;
      $553$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $21$hi;
      i64toi32_i32$2 = $553$hi;
      i64toi32_i32$5 = $21$hi;
      i64toi32_i32$5 = __wasm_i64_mul($12 | 0, i64toi32_i32$2 | 0, $21 | 0, i64toi32_i32$5 | 0) | 0;
      i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
      $555 = i64toi32_i32$5;
      $555$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $551$hi;
      i64toi32_i32$0 = i64toi32_i32$1;
      i64toi32_i32$5 = $555$hi;
      i64toi32_i32$3 = $555;
      i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
      i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
      }
      $556$hi = i64toi32_i32$1;
      i64toi32_i32$0 = $11;
      i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
      $558$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $20$hi;
      i64toi32_i32$1 = $558$hi;
      i64toi32_i32$0 = $20$hi;
      i64toi32_i32$0 = __wasm_i64_mul($11 | 0, i64toi32_i32$1 | 0, $20 | 0, i64toi32_i32$0 | 0) | 0;
      i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
      $560 = i64toi32_i32$0;
      $560$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $556$hi;
      i64toi32_i32$2 = i64toi32_i32$4;
      i64toi32_i32$0 = $560$hi;
      i64toi32_i32$3 = $560;
      i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
      i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
      if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $561$hi = i64toi32_i32$4;
      i64toi32_i32$2 = $10;
      i64toi32_i32$4 = i64toi32_i32$2 >> 31 | 0;
      $563$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $19$hi;
      i64toi32_i32$4 = $563$hi;
      i64toi32_i32$2 = $19$hi;
      i64toi32_i32$2 = __wasm_i64_mul($10 | 0, i64toi32_i32$4 | 0, $19 | 0, i64toi32_i32$2 | 0) | 0;
      i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
      $565 = i64toi32_i32$2;
      $565$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $561$hi;
      i64toi32_i32$1 = i64toi32_i32$5;
      i64toi32_i32$2 = $565$hi;
      i64toi32_i32$3 = $565;
      i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
      i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $566$hi = i64toi32_i32$5;
      i64toi32_i32$1 = $4;
      i64toi32_i32$5 = i64toi32_i32$1 >> 31 | 0;
      $568$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $18$hi;
      i64toi32_i32$5 = $568$hi;
      i64toi32_i32$1 = $18$hi;
      i64toi32_i32$1 = __wasm_i64_mul($4 | 0, i64toi32_i32$5 | 0, $18 | 0, i64toi32_i32$1 | 0) | 0;
      i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
      $570 = i64toi32_i32$1;
      $570$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $566$hi;
      i64toi32_i32$4 = i64toi32_i32$0;
      i64toi32_i32$1 = $570$hi;
      i64toi32_i32$3 = $570;
      i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
      i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
      }
      $571$hi = i64toi32_i32$0;
      i64toi32_i32$4 = $3;
      i64toi32_i32$0 = i64toi32_i32$4 >> 31 | 0;
      $573$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $17$hi;
      i64toi32_i32$0 = $573$hi;
      i64toi32_i32$4 = $17$hi;
      i64toi32_i32$4 = __wasm_i64_mul($3 | 0, i64toi32_i32$0 | 0, $17 | 0, i64toi32_i32$4 | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
      $575 = i64toi32_i32$4;
      $575$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $571$hi;
      i64toi32_i32$5 = i64toi32_i32$2;
      i64toi32_i32$4 = $575$hi;
      i64toi32_i32$3 = $575;
      i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
      i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
      }
      $576$hi = i64toi32_i32$2;
      i64toi32_i32$5 = $6;
      i64toi32_i32$2 = i64toi32_i32$5 >> 31 | 0;
      $578$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $7$hi;
      i64toi32_i32$2 = $578$hi;
      i64toi32_i32$5 = $7$hi;
      i64toi32_i32$5 = __wasm_i64_mul($6 | 0, i64toi32_i32$2 | 0, $7 | 0, i64toi32_i32$5 | 0) | 0;
      i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
      $580 = i64toi32_i32$5;
      $580$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $576$hi;
      i64toi32_i32$0 = i64toi32_i32$1;
      i64toi32_i32$5 = $580$hi;
      i64toi32_i32$3 = $580;
      i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
      i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
      }
      $581$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $8$hi;
      i64toi32_i32$1 = $581$hi;
      i64toi32_i32$2 = i64toi32_i32$4;
      i64toi32_i32$0 = $8$hi;
      i64toi32_i32$3 = $8;
      i64toi32_i32$5 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
       $584 = i64toi32_i32$1 >> i64toi32_i32$5 | 0;
      } else {
       i64toi32_i32$0 = i64toi32_i32$1 >> i64toi32_i32$5 | 0;
       $584 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$5 | 0) | 0;
      }
      HEAP32[$527 >> 2] = $532 - $584 | 0;
      $9 = $15;
      $2 = $2 + 1 | 0;
      if (($2 | 0) != ($1 | 0)) {
       continue label$11
      }
      break label$1;
     };
    }
    label$12 : {
     if ($3 >>> 0 < 5 >>> 0) {
      break label$12
     }
     label$13 : {
      if ($3 >>> 0 < 7 >>> 0) {
       break label$13
      }
      i64toi32_i32$0 = 0;
      $8 = $4;
      $8$hi = i64toi32_i32$0;
      label$14 : {
       if (($3 | 0) == (8 | 0)) {
        break label$14
       }
       if (($1 | 0) < (1 | 0)) {
        break label$1
       }
       $13 = HEAP32[($0 + -4 | 0) >> 2] | 0;
       $6 = HEAP32[($0 + -8 | 0) >> 2] | 0;
       $3 = HEAP32[($0 + -12 | 0) >> 2] | 0;
       $4 = HEAP32[($0 + -16 | 0) >> 2] | 0;
       $10 = HEAP32[($0 + -20 | 0) >> 2] | 0;
       $11 = HEAP32[($0 + -24 | 0) >> 2] | 0;
       $14 = HEAP32[($0 + -28 | 0) >> 2] | 0;
       i64toi32_i32$1 = $2;
       i64toi32_i32$0 = HEAP32[i64toi32_i32$1 >> 2] | 0;
       i64toi32_i32$2 = i64toi32_i32$0 >> 31 | 0;
       $7 = i64toi32_i32$0;
       $7$hi = i64toi32_i32$2;
       i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
       i64toi32_i32$0 = i64toi32_i32$2 >> 31 | 0;
       $17 = i64toi32_i32$2;
       $17$hi = i64toi32_i32$0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] | 0;
       i64toi32_i32$2 = i64toi32_i32$0 >> 31 | 0;
       $18 = i64toi32_i32$0;
       $18$hi = i64toi32_i32$2;
       i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] | 0;
       i64toi32_i32$0 = i64toi32_i32$2 >> 31 | 0;
       $19 = i64toi32_i32$2;
       $19$hi = i64toi32_i32$0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 16 | 0) >> 2] | 0;
       i64toi32_i32$2 = i64toi32_i32$0 >> 31 | 0;
       $20 = i64toi32_i32$0;
       $20$hi = i64toi32_i32$2;
       i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 20 | 0) >> 2] | 0;
       i64toi32_i32$0 = i64toi32_i32$2 >> 31 | 0;
       $21 = i64toi32_i32$2;
       $21$hi = i64toi32_i32$0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 24 | 0) >> 2] | 0;
       i64toi32_i32$2 = i64toi32_i32$0 >> 31 | 0;
       $22 = i64toi32_i32$0;
       $22$hi = i64toi32_i32$2;
       $2 = 0;
       label$15 : while (1) {
        $12 = $11;
        $11 = $10;
        $10 = $4;
        $4 = $3;
        $3 = $6;
        $6 = $13;
        $13 = $2 << 2 | 0;
        $647 = $5 + $13 | 0;
        $13 = HEAP32[($0 + $13 | 0) >> 2] | 0;
        $652 = $13;
        i64toi32_i32$0 = $12;
        i64toi32_i32$2 = i64toi32_i32$0 >> 31 | 0;
        $654$hi = i64toi32_i32$2;
        i64toi32_i32$2 = $21$hi;
        i64toi32_i32$2 = $654$hi;
        i64toi32_i32$0 = $21$hi;
        i64toi32_i32$0 = __wasm_i64_mul($12 | 0, i64toi32_i32$2 | 0, $21 | 0, i64toi32_i32$0 | 0) | 0;
        i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
        $656 = i64toi32_i32$0;
        $656$hi = i64toi32_i32$2;
        i64toi32_i32$0 = $14;
        i64toi32_i32$2 = i64toi32_i32$0 >> 31 | 0;
        $658$hi = i64toi32_i32$2;
        i64toi32_i32$2 = $22$hi;
        i64toi32_i32$2 = $658$hi;
        i64toi32_i32$0 = $22$hi;
        i64toi32_i32$0 = __wasm_i64_mul($14 | 0, i64toi32_i32$2 | 0, $22 | 0, i64toi32_i32$0 | 0) | 0;
        i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
        $660 = i64toi32_i32$0;
        $660$hi = i64toi32_i32$2;
        i64toi32_i32$2 = $656$hi;
        i64toi32_i32$1 = $656;
        i64toi32_i32$0 = $660$hi;
        i64toi32_i32$3 = $660;
        i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
        i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
        if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
         i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
        }
        $661$hi = i64toi32_i32$4;
        i64toi32_i32$1 = $11;
        i64toi32_i32$4 = i64toi32_i32$1 >> 31 | 0;
        $663$hi = i64toi32_i32$4;
        i64toi32_i32$4 = $20$hi;
        i64toi32_i32$4 = $663$hi;
        i64toi32_i32$1 = $20$hi;
        i64toi32_i32$1 = __wasm_i64_mul($11 | 0, i64toi32_i32$4 | 0, $20 | 0, i64toi32_i32$1 | 0) | 0;
        i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
        $665 = i64toi32_i32$1;
        $665$hi = i64toi32_i32$4;
        i64toi32_i32$4 = $661$hi;
        i64toi32_i32$2 = i64toi32_i32$5;
        i64toi32_i32$1 = $665$hi;
        i64toi32_i32$3 = $665;
        i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
        i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
        if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
         i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
        }
        $666$hi = i64toi32_i32$5;
        i64toi32_i32$2 = $10;
        i64toi32_i32$5 = i64toi32_i32$2 >> 31 | 0;
        $668$hi = i64toi32_i32$5;
        i64toi32_i32$5 = $19$hi;
        i64toi32_i32$5 = $668$hi;
        i64toi32_i32$2 = $19$hi;
        i64toi32_i32$2 = __wasm_i64_mul($10 | 0, i64toi32_i32$5 | 0, $19 | 0, i64toi32_i32$2 | 0) | 0;
        i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
        $670 = i64toi32_i32$2;
        $670$hi = i64toi32_i32$5;
        i64toi32_i32$5 = $666$hi;
        i64toi32_i32$4 = i64toi32_i32$0;
        i64toi32_i32$2 = $670$hi;
        i64toi32_i32$3 = $670;
        i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
        i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
        if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
         i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
        }
        $671$hi = i64toi32_i32$0;
        i64toi32_i32$4 = $4;
        i64toi32_i32$0 = i64toi32_i32$4 >> 31 | 0;
        $673$hi = i64toi32_i32$0;
        i64toi32_i32$0 = $18$hi;
        i64toi32_i32$0 = $673$hi;
        i64toi32_i32$4 = $18$hi;
        i64toi32_i32$4 = __wasm_i64_mul($4 | 0, i64toi32_i32$0 | 0, $18 | 0, i64toi32_i32$4 | 0) | 0;
        i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
        $675 = i64toi32_i32$4;
        $675$hi = i64toi32_i32$0;
        i64toi32_i32$0 = $671$hi;
        i64toi32_i32$5 = i64toi32_i32$1;
        i64toi32_i32$4 = $675$hi;
        i64toi32_i32$3 = $675;
        i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
        i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
        if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
         i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
        }
        $676$hi = i64toi32_i32$1;
        i64toi32_i32$5 = $3;
        i64toi32_i32$1 = i64toi32_i32$5 >> 31 | 0;
        $678$hi = i64toi32_i32$1;
        i64toi32_i32$1 = $17$hi;
        i64toi32_i32$1 = $678$hi;
        i64toi32_i32$5 = $17$hi;
        i64toi32_i32$5 = __wasm_i64_mul($3 | 0, i64toi32_i32$1 | 0, $17 | 0, i64toi32_i32$5 | 0) | 0;
        i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
        $680 = i64toi32_i32$5;
        $680$hi = i64toi32_i32$1;
        i64toi32_i32$1 = $676$hi;
        i64toi32_i32$0 = i64toi32_i32$2;
        i64toi32_i32$5 = $680$hi;
        i64toi32_i32$3 = $680;
        i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
        i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
        if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
         i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
        }
        $681$hi = i64toi32_i32$2;
        i64toi32_i32$0 = $6;
        i64toi32_i32$2 = i64toi32_i32$0 >> 31 | 0;
        $683$hi = i64toi32_i32$2;
        i64toi32_i32$2 = $7$hi;
        i64toi32_i32$2 = $683$hi;
        i64toi32_i32$0 = $7$hi;
        i64toi32_i32$0 = __wasm_i64_mul($6 | 0, i64toi32_i32$2 | 0, $7 | 0, i64toi32_i32$0 | 0) | 0;
        i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
        $685 = i64toi32_i32$0;
        $685$hi = i64toi32_i32$2;
        i64toi32_i32$2 = $681$hi;
        i64toi32_i32$1 = i64toi32_i32$4;
        i64toi32_i32$0 = $685$hi;
        i64toi32_i32$3 = $685;
        i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
        i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
        if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
         i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
        }
        $686$hi = i64toi32_i32$4;
        i64toi32_i32$4 = $8$hi;
        i64toi32_i32$4 = $686$hi;
        i64toi32_i32$2 = i64toi32_i32$5;
        i64toi32_i32$1 = $8$hi;
        i64toi32_i32$3 = $8;
        i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
         i64toi32_i32$1 = i64toi32_i32$4 >> 31 | 0;
         $585 = i64toi32_i32$4 >> i64toi32_i32$0 | 0;
        } else {
         i64toi32_i32$1 = i64toi32_i32$4 >> i64toi32_i32$0 | 0;
         $585 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$0 | 0) | 0;
        }
        HEAP32[$647 >> 2] = $652 - $585 | 0;
        $14 = $12;
        $2 = $2 + 1 | 0;
        if (($2 | 0) != ($1 | 0)) {
         continue label$15
        }
        break label$1;
       };
      }
      if (($1 | 0) < (1 | 0)) {
       break label$1
      }
      $14 = HEAP32[($0 + -4 | 0) >> 2] | 0;
      $6 = HEAP32[($0 + -8 | 0) >> 2] | 0;
      $3 = HEAP32[($0 + -12 | 0) >> 2] | 0;
      $4 = HEAP32[($0 + -16 | 0) >> 2] | 0;
      $10 = HEAP32[($0 + -20 | 0) >> 2] | 0;
      $11 = HEAP32[($0 + -24 | 0) >> 2] | 0;
      $12 = HEAP32[($0 + -28 | 0) >> 2] | 0;
      $15 = HEAP32[($0 + -32 | 0) >> 2] | 0;
      i64toi32_i32$4 = $2;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$4 >> 2] | 0;
      i64toi32_i32$2 = i64toi32_i32$1 >> 31 | 0;
      $7 = i64toi32_i32$1;
      $7$hi = i64toi32_i32$2;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
      i64toi32_i32$1 = i64toi32_i32$2 >> 31 | 0;
      $17 = i64toi32_i32$2;
      $17$hi = i64toi32_i32$1;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 8 | 0) >> 2] | 0;
      i64toi32_i32$2 = i64toi32_i32$1 >> 31 | 0;
      $18 = i64toi32_i32$1;
      $18$hi = i64toi32_i32$2;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 12 | 0) >> 2] | 0;
      i64toi32_i32$1 = i64toi32_i32$2 >> 31 | 0;
      $19 = i64toi32_i32$2;
      $19$hi = i64toi32_i32$1;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 16 | 0) >> 2] | 0;
      i64toi32_i32$2 = i64toi32_i32$1 >> 31 | 0;
      $20 = i64toi32_i32$1;
      $20$hi = i64toi32_i32$2;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 20 | 0) >> 2] | 0;
      i64toi32_i32$1 = i64toi32_i32$2 >> 31 | 0;
      $21 = i64toi32_i32$2;
      $21$hi = i64toi32_i32$1;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 24 | 0) >> 2] | 0;
      i64toi32_i32$2 = i64toi32_i32$1 >> 31 | 0;
      $22 = i64toi32_i32$1;
      $22$hi = i64toi32_i32$2;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 28 | 0) >> 2] | 0;
      i64toi32_i32$1 = i64toi32_i32$2 >> 31 | 0;
      $23 = i64toi32_i32$2;
      $23$hi = i64toi32_i32$1;
      $2 = 0;
      label$16 : while (1) {
       $13 = $12;
       $12 = $11;
       $11 = $10;
       $10 = $4;
       $4 = $3;
       $3 = $6;
       $6 = $14;
       $14 = $2 << 2 | 0;
       $750 = $5 + $14 | 0;
       $14 = HEAP32[($0 + $14 | 0) >> 2] | 0;
       $755 = $14;
       i64toi32_i32$2 = $13;
       i64toi32_i32$1 = i64toi32_i32$2 >> 31 | 0;
       $757$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $22$hi;
       i64toi32_i32$1 = $757$hi;
       i64toi32_i32$2 = $22$hi;
       i64toi32_i32$2 = __wasm_i64_mul($13 | 0, i64toi32_i32$1 | 0, $22 | 0, i64toi32_i32$2 | 0) | 0;
       i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
       $759 = i64toi32_i32$2;
       $759$hi = i64toi32_i32$1;
       i64toi32_i32$2 = $15;
       i64toi32_i32$1 = i64toi32_i32$2 >> 31 | 0;
       $761$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $23$hi;
       i64toi32_i32$1 = $761$hi;
       i64toi32_i32$2 = $23$hi;
       i64toi32_i32$2 = __wasm_i64_mul($15 | 0, i64toi32_i32$1 | 0, $23 | 0, i64toi32_i32$2 | 0) | 0;
       i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
       $763 = i64toi32_i32$2;
       $763$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $759$hi;
       i64toi32_i32$4 = $759;
       i64toi32_i32$2 = $763$hi;
       i64toi32_i32$3 = $763;
       i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
       i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
       if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
       }
       $764$hi = i64toi32_i32$5;
       i64toi32_i32$4 = $12;
       i64toi32_i32$5 = i64toi32_i32$4 >> 31 | 0;
       $766$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $21$hi;
       i64toi32_i32$5 = $766$hi;
       i64toi32_i32$4 = $21$hi;
       i64toi32_i32$4 = __wasm_i64_mul($12 | 0, i64toi32_i32$5 | 0, $21 | 0, i64toi32_i32$4 | 0) | 0;
       i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
       $768 = i64toi32_i32$4;
       $768$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $764$hi;
       i64toi32_i32$1 = i64toi32_i32$0;
       i64toi32_i32$4 = $768$hi;
       i64toi32_i32$3 = $768;
       i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
       i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
       if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
       }
       $769$hi = i64toi32_i32$0;
       i64toi32_i32$1 = $11;
       i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
       $771$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $20$hi;
       i64toi32_i32$0 = $771$hi;
       i64toi32_i32$1 = $20$hi;
       i64toi32_i32$1 = __wasm_i64_mul($11 | 0, i64toi32_i32$0 | 0, $20 | 0, i64toi32_i32$1 | 0) | 0;
       i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
       $773 = i64toi32_i32$1;
       $773$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $769$hi;
       i64toi32_i32$5 = i64toi32_i32$2;
       i64toi32_i32$1 = $773$hi;
       i64toi32_i32$3 = $773;
       i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
       i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
       if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
       }
       $774$hi = i64toi32_i32$2;
       i64toi32_i32$5 = $10;
       i64toi32_i32$2 = i64toi32_i32$5 >> 31 | 0;
       $776$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $19$hi;
       i64toi32_i32$2 = $776$hi;
       i64toi32_i32$5 = $19$hi;
       i64toi32_i32$5 = __wasm_i64_mul($10 | 0, i64toi32_i32$2 | 0, $19 | 0, i64toi32_i32$5 | 0) | 0;
       i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
       $778 = i64toi32_i32$5;
       $778$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $774$hi;
       i64toi32_i32$0 = i64toi32_i32$4;
       i64toi32_i32$5 = $778$hi;
       i64toi32_i32$3 = $778;
       i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
       i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
       if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
       }
       $779$hi = i64toi32_i32$4;
       i64toi32_i32$0 = $4;
       i64toi32_i32$4 = i64toi32_i32$0 >> 31 | 0;
       $781$hi = i64toi32_i32$4;
       i64toi32_i32$4 = $18$hi;
       i64toi32_i32$4 = $781$hi;
       i64toi32_i32$0 = $18$hi;
       i64toi32_i32$0 = __wasm_i64_mul($4 | 0, i64toi32_i32$4 | 0, $18 | 0, i64toi32_i32$0 | 0) | 0;
       i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
       $783 = i64toi32_i32$0;
       $783$hi = i64toi32_i32$4;
       i64toi32_i32$4 = $779$hi;
       i64toi32_i32$2 = i64toi32_i32$1;
       i64toi32_i32$0 = $783$hi;
       i64toi32_i32$3 = $783;
       i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
       i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
       if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
       }
       $784$hi = i64toi32_i32$1;
       i64toi32_i32$2 = $3;
       i64toi32_i32$1 = i64toi32_i32$2 >> 31 | 0;
       $786$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $17$hi;
       i64toi32_i32$1 = $786$hi;
       i64toi32_i32$2 = $17$hi;
       i64toi32_i32$2 = __wasm_i64_mul($3 | 0, i64toi32_i32$1 | 0, $17 | 0, i64toi32_i32$2 | 0) | 0;
       i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
       $788 = i64toi32_i32$2;
       $788$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $784$hi;
       i64toi32_i32$4 = i64toi32_i32$5;
       i64toi32_i32$2 = $788$hi;
       i64toi32_i32$3 = $788;
       i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
       i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
       if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
       }
       $789$hi = i64toi32_i32$5;
       i64toi32_i32$4 = $6;
       i64toi32_i32$5 = i64toi32_i32$4 >> 31 | 0;
       $791$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $7$hi;
       i64toi32_i32$5 = $791$hi;
       i64toi32_i32$4 = $7$hi;
       i64toi32_i32$4 = __wasm_i64_mul($6 | 0, i64toi32_i32$5 | 0, $7 | 0, i64toi32_i32$4 | 0) | 0;
       i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
       $793 = i64toi32_i32$4;
       $793$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $789$hi;
       i64toi32_i32$1 = i64toi32_i32$0;
       i64toi32_i32$4 = $793$hi;
       i64toi32_i32$3 = $793;
       i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
       i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
       if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
       }
       $794$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $8$hi;
       i64toi32_i32$0 = $794$hi;
       i64toi32_i32$5 = i64toi32_i32$2;
       i64toi32_i32$1 = $8$hi;
       i64toi32_i32$3 = $8;
       i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
        i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
        $586 = i64toi32_i32$0 >> i64toi32_i32$4 | 0;
       } else {
        i64toi32_i32$1 = i64toi32_i32$0 >> i64toi32_i32$4 | 0;
        $586 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$4 | 0) | 0;
       }
       HEAP32[$750 >> 2] = $755 - $586 | 0;
       $15 = $13;
       $2 = $2 + 1 | 0;
       if (($2 | 0) != ($1 | 0)) {
        continue label$16
       }
       break label$1;
      };
     }
     i64toi32_i32$1 = 0;
     $8 = $4;
     $8$hi = i64toi32_i32$1;
     label$17 : {
      if (($3 | 0) == (6 | 0)) {
       break label$17
      }
      if (($1 | 0) < (1 | 0)) {
       break label$1
      }
      $11 = HEAP32[($0 + -4 | 0) >> 2] | 0;
      $6 = HEAP32[($0 + -8 | 0) >> 2] | 0;
      $3 = HEAP32[($0 + -12 | 0) >> 2] | 0;
      $4 = HEAP32[($0 + -16 | 0) >> 2] | 0;
      $12 = HEAP32[($0 + -20 | 0) >> 2] | 0;
      i64toi32_i32$0 = $2;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$0 >> 2] | 0;
      i64toi32_i32$5 = i64toi32_i32$1 >> 31 | 0;
      $7 = i64toi32_i32$1;
      $7$hi = i64toi32_i32$5;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
      i64toi32_i32$1 = i64toi32_i32$5 >> 31 | 0;
      $17 = i64toi32_i32$5;
      $17$hi = i64toi32_i32$1;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] | 0;
      i64toi32_i32$5 = i64toi32_i32$1 >> 31 | 0;
      $18 = i64toi32_i32$1;
      $18$hi = i64toi32_i32$5;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] | 0;
      i64toi32_i32$1 = i64toi32_i32$5 >> 31 | 0;
      $19 = i64toi32_i32$5;
      $19$hi = i64toi32_i32$1;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 16 | 0) >> 2] | 0;
      i64toi32_i32$5 = i64toi32_i32$1 >> 31 | 0;
      $20 = i64toi32_i32$1;
      $20$hi = i64toi32_i32$5;
      $2 = 0;
      label$18 : while (1) {
       $10 = $4;
       $4 = $3;
       $3 = $6;
       $6 = $11;
       $11 = $2 << 2 | 0;
       $844 = $5 + $11 | 0;
       $11 = HEAP32[($0 + $11 | 0) >> 2] | 0;
       $849 = $11;
       i64toi32_i32$1 = $10;
       i64toi32_i32$5 = i64toi32_i32$1 >> 31 | 0;
       $851$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $19$hi;
       i64toi32_i32$5 = $851$hi;
       i64toi32_i32$1 = $19$hi;
       i64toi32_i32$1 = __wasm_i64_mul($10 | 0, i64toi32_i32$5 | 0, $19 | 0, i64toi32_i32$1 | 0) | 0;
       i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
       $853 = i64toi32_i32$1;
       $853$hi = i64toi32_i32$5;
       i64toi32_i32$1 = $12;
       i64toi32_i32$5 = i64toi32_i32$1 >> 31 | 0;
       $855$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $20$hi;
       i64toi32_i32$5 = $855$hi;
       i64toi32_i32$1 = $20$hi;
       i64toi32_i32$1 = __wasm_i64_mul($12 | 0, i64toi32_i32$5 | 0, $20 | 0, i64toi32_i32$1 | 0) | 0;
       i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
       $857 = i64toi32_i32$1;
       $857$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $853$hi;
       i64toi32_i32$0 = $853;
       i64toi32_i32$1 = $857$hi;
       i64toi32_i32$3 = $857;
       i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
       i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
       if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
       }
       $858$hi = i64toi32_i32$2;
       i64toi32_i32$0 = $4;
       i64toi32_i32$2 = i64toi32_i32$0 >> 31 | 0;
       $860$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $18$hi;
       i64toi32_i32$2 = $860$hi;
       i64toi32_i32$0 = $18$hi;
       i64toi32_i32$0 = __wasm_i64_mul($4 | 0, i64toi32_i32$2 | 0, $18 | 0, i64toi32_i32$0 | 0) | 0;
       i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
       $862 = i64toi32_i32$0;
       $862$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $858$hi;
       i64toi32_i32$5 = i64toi32_i32$4;
       i64toi32_i32$0 = $862$hi;
       i64toi32_i32$3 = $862;
       i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
       i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
       if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
       }
       $863$hi = i64toi32_i32$4;
       i64toi32_i32$5 = $3;
       i64toi32_i32$4 = i64toi32_i32$5 >> 31 | 0;
       $865$hi = i64toi32_i32$4;
       i64toi32_i32$4 = $17$hi;
       i64toi32_i32$4 = $865$hi;
       i64toi32_i32$5 = $17$hi;
       i64toi32_i32$5 = __wasm_i64_mul($3 | 0, i64toi32_i32$4 | 0, $17 | 0, i64toi32_i32$5 | 0) | 0;
       i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
       $867 = i64toi32_i32$5;
       $867$hi = i64toi32_i32$4;
       i64toi32_i32$4 = $863$hi;
       i64toi32_i32$2 = i64toi32_i32$1;
       i64toi32_i32$5 = $867$hi;
       i64toi32_i32$3 = $867;
       i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
       i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
       if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
       }
       $868$hi = i64toi32_i32$1;
       i64toi32_i32$2 = $6;
       i64toi32_i32$1 = i64toi32_i32$2 >> 31 | 0;
       $870$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $7$hi;
       i64toi32_i32$1 = $870$hi;
       i64toi32_i32$2 = $7$hi;
       i64toi32_i32$2 = __wasm_i64_mul($6 | 0, i64toi32_i32$1 | 0, $7 | 0, i64toi32_i32$2 | 0) | 0;
       i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
       $872 = i64toi32_i32$2;
       $872$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $868$hi;
       i64toi32_i32$4 = i64toi32_i32$0;
       i64toi32_i32$2 = $872$hi;
       i64toi32_i32$3 = $872;
       i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
       i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
       if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
       }
       $873$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $8$hi;
       i64toi32_i32$0 = $873$hi;
       i64toi32_i32$1 = i64toi32_i32$5;
       i64toi32_i32$4 = $8$hi;
       i64toi32_i32$3 = $8;
       i64toi32_i32$2 = i64toi32_i32$3 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
        i64toi32_i32$4 = i64toi32_i32$0 >> 31 | 0;
        $587 = i64toi32_i32$0 >> i64toi32_i32$2 | 0;
       } else {
        i64toi32_i32$4 = i64toi32_i32$0 >> i64toi32_i32$2 | 0;
        $587 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$2 | 0) | 0;
       }
       HEAP32[$844 >> 2] = $849 - $587 | 0;
       $12 = $10;
       $2 = $2 + 1 | 0;
       if (($2 | 0) != ($1 | 0)) {
        continue label$18
       }
       break label$1;
      };
     }
     if (($1 | 0) < (1 | 0)) {
      break label$1
     }
     $12 = HEAP32[($0 + -4 | 0) >> 2] | 0;
     $6 = HEAP32[($0 + -8 | 0) >> 2] | 0;
     $3 = HEAP32[($0 + -12 | 0) >> 2] | 0;
     $4 = HEAP32[($0 + -16 | 0) >> 2] | 0;
     $10 = HEAP32[($0 + -20 | 0) >> 2] | 0;
     $13 = HEAP32[($0 + -24 | 0) >> 2] | 0;
     i64toi32_i32$0 = $2;
     i64toi32_i32$4 = HEAP32[i64toi32_i32$0 >> 2] | 0;
     i64toi32_i32$1 = i64toi32_i32$4 >> 31 | 0;
     $7 = i64toi32_i32$4;
     $7$hi = i64toi32_i32$1;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
     i64toi32_i32$4 = i64toi32_i32$1 >> 31 | 0;
     $17 = i64toi32_i32$1;
     $17$hi = i64toi32_i32$4;
     i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] | 0;
     i64toi32_i32$1 = i64toi32_i32$4 >> 31 | 0;
     $18 = i64toi32_i32$4;
     $18$hi = i64toi32_i32$1;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] | 0;
     i64toi32_i32$4 = i64toi32_i32$1 >> 31 | 0;
     $19 = i64toi32_i32$1;
     $19$hi = i64toi32_i32$4;
     i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 16 | 0) >> 2] | 0;
     i64toi32_i32$1 = i64toi32_i32$4 >> 31 | 0;
     $20 = i64toi32_i32$4;
     $20$hi = i64toi32_i32$1;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 20 | 0) >> 2] | 0;
     i64toi32_i32$4 = i64toi32_i32$1 >> 31 | 0;
     $21 = i64toi32_i32$1;
     $21$hi = i64toi32_i32$4;
     $2 = 0;
     label$19 : while (1) {
      $11 = $10;
      $10 = $4;
      $4 = $3;
      $3 = $6;
      $6 = $12;
      $12 = $2 << 2 | 0;
      $925 = $5 + $12 | 0;
      $12 = HEAP32[($0 + $12 | 0) >> 2] | 0;
      $930 = $12;
      i64toi32_i32$1 = $11;
      i64toi32_i32$4 = i64toi32_i32$1 >> 31 | 0;
      $932$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $20$hi;
      i64toi32_i32$4 = $932$hi;
      i64toi32_i32$1 = $20$hi;
      i64toi32_i32$1 = __wasm_i64_mul($11 | 0, i64toi32_i32$4 | 0, $20 | 0, i64toi32_i32$1 | 0) | 0;
      i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
      $934 = i64toi32_i32$1;
      $934$hi = i64toi32_i32$4;
      i64toi32_i32$1 = $13;
      i64toi32_i32$4 = i64toi32_i32$1 >> 31 | 0;
      $936$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $21$hi;
      i64toi32_i32$4 = $936$hi;
      i64toi32_i32$1 = $21$hi;
      i64toi32_i32$1 = __wasm_i64_mul($13 | 0, i64toi32_i32$4 | 0, $21 | 0, i64toi32_i32$1 | 0) | 0;
      i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
      $938 = i64toi32_i32$1;
      $938$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $934$hi;
      i64toi32_i32$0 = $934;
      i64toi32_i32$1 = $938$hi;
      i64toi32_i32$3 = $938;
      i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
      i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $939$hi = i64toi32_i32$5;
      i64toi32_i32$0 = $10;
      i64toi32_i32$5 = i64toi32_i32$0 >> 31 | 0;
      $941$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $19$hi;
      i64toi32_i32$5 = $941$hi;
      i64toi32_i32$0 = $19$hi;
      i64toi32_i32$0 = __wasm_i64_mul($10 | 0, i64toi32_i32$5 | 0, $19 | 0, i64toi32_i32$0 | 0) | 0;
      i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
      $943 = i64toi32_i32$0;
      $943$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $939$hi;
      i64toi32_i32$4 = i64toi32_i32$2;
      i64toi32_i32$0 = $943$hi;
      i64toi32_i32$3 = $943;
      i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
      i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
      }
      $944$hi = i64toi32_i32$2;
      i64toi32_i32$4 = $4;
      i64toi32_i32$2 = i64toi32_i32$4 >> 31 | 0;
      $946$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $18$hi;
      i64toi32_i32$2 = $946$hi;
      i64toi32_i32$4 = $18$hi;
      i64toi32_i32$4 = __wasm_i64_mul($4 | 0, i64toi32_i32$2 | 0, $18 | 0, i64toi32_i32$4 | 0) | 0;
      i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
      $948 = i64toi32_i32$4;
      $948$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $944$hi;
      i64toi32_i32$5 = i64toi32_i32$1;
      i64toi32_i32$4 = $948$hi;
      i64toi32_i32$3 = $948;
      i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
      i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
      if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
      }
      $949$hi = i64toi32_i32$1;
      i64toi32_i32$5 = $3;
      i64toi32_i32$1 = i64toi32_i32$5 >> 31 | 0;
      $951$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $17$hi;
      i64toi32_i32$1 = $951$hi;
      i64toi32_i32$5 = $17$hi;
      i64toi32_i32$5 = __wasm_i64_mul($3 | 0, i64toi32_i32$1 | 0, $17 | 0, i64toi32_i32$5 | 0) | 0;
      i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
      $953 = i64toi32_i32$5;
      $953$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $949$hi;
      i64toi32_i32$2 = i64toi32_i32$0;
      i64toi32_i32$5 = $953$hi;
      i64toi32_i32$3 = $953;
      i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
      i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
      }
      $954$hi = i64toi32_i32$0;
      i64toi32_i32$2 = $6;
      i64toi32_i32$0 = i64toi32_i32$2 >> 31 | 0;
      $956$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $7$hi;
      i64toi32_i32$0 = $956$hi;
      i64toi32_i32$2 = $7$hi;
      i64toi32_i32$2 = __wasm_i64_mul($6 | 0, i64toi32_i32$0 | 0, $7 | 0, i64toi32_i32$2 | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
      $958 = i64toi32_i32$2;
      $958$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $954$hi;
      i64toi32_i32$1 = i64toi32_i32$4;
      i64toi32_i32$2 = $958$hi;
      i64toi32_i32$3 = $958;
      i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
      i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $959$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $8$hi;
      i64toi32_i32$4 = $959$hi;
      i64toi32_i32$0 = i64toi32_i32$5;
      i64toi32_i32$1 = $8$hi;
      i64toi32_i32$3 = $8;
      i64toi32_i32$2 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$4 >> 31 | 0;
       $588 = i64toi32_i32$4 >> i64toi32_i32$2 | 0;
      } else {
       i64toi32_i32$1 = i64toi32_i32$4 >> i64toi32_i32$2 | 0;
       $588 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$2 | 0) | 0;
      }
      HEAP32[$925 >> 2] = $930 - $588 | 0;
      $13 = $11;
      $2 = $2 + 1 | 0;
      if (($2 | 0) != ($1 | 0)) {
       continue label$19
      }
      break label$1;
     };
    }
    label$20 : {
     if ($3 >>> 0 < 3 >>> 0) {
      break label$20
     }
     i64toi32_i32$1 = 0;
     $8 = $4;
     $8$hi = i64toi32_i32$1;
     label$21 : {
      if (($3 | 0) == (4 | 0)) {
       break label$21
      }
      if (($1 | 0) < (1 | 0)) {
       break label$1
      }
      $4 = HEAP32[($0 + -4 | 0) >> 2] | 0;
      $6 = HEAP32[($0 + -8 | 0) >> 2] | 0;
      $10 = HEAP32[($0 + -12 | 0) >> 2] | 0;
      i64toi32_i32$4 = $2;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$4 >> 2] | 0;
      i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
      $7 = i64toi32_i32$1;
      $7$hi = i64toi32_i32$0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
      i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
      $17 = i64toi32_i32$0;
      $17$hi = i64toi32_i32$1;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 8 | 0) >> 2] | 0;
      i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
      $18 = i64toi32_i32$1;
      $18$hi = i64toi32_i32$0;
      $2 = 0;
      label$22 : while (1) {
       $3 = $6;
       $6 = $4;
       $4 = $2 << 2 | 0;
       $999 = $5 + $4 | 0;
       $4 = HEAP32[($0 + $4 | 0) >> 2] | 0;
       $1004 = $4;
       i64toi32_i32$1 = $3;
       i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
       $1006$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $17$hi;
       i64toi32_i32$0 = $1006$hi;
       i64toi32_i32$1 = $17$hi;
       i64toi32_i32$1 = __wasm_i64_mul($3 | 0, i64toi32_i32$0 | 0, $17 | 0, i64toi32_i32$1 | 0) | 0;
       i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
       $1008 = i64toi32_i32$1;
       $1008$hi = i64toi32_i32$0;
       i64toi32_i32$1 = $10;
       i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
       $1010$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $18$hi;
       i64toi32_i32$0 = $1010$hi;
       i64toi32_i32$1 = $18$hi;
       i64toi32_i32$1 = __wasm_i64_mul($10 | 0, i64toi32_i32$0 | 0, $18 | 0, i64toi32_i32$1 | 0) | 0;
       i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
       $1012 = i64toi32_i32$1;
       $1012$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $1008$hi;
       i64toi32_i32$4 = $1008;
       i64toi32_i32$1 = $1012$hi;
       i64toi32_i32$3 = $1012;
       i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
       i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
       if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
       }
       $1013$hi = i64toi32_i32$5;
       i64toi32_i32$4 = $6;
       i64toi32_i32$5 = i64toi32_i32$4 >> 31 | 0;
       $1015$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $7$hi;
       i64toi32_i32$5 = $1015$hi;
       i64toi32_i32$4 = $7$hi;
       i64toi32_i32$4 = __wasm_i64_mul($6 | 0, i64toi32_i32$5 | 0, $7 | 0, i64toi32_i32$4 | 0) | 0;
       i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
       $1017 = i64toi32_i32$4;
       $1017$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $1013$hi;
       i64toi32_i32$0 = i64toi32_i32$2;
       i64toi32_i32$4 = $1017$hi;
       i64toi32_i32$3 = $1017;
       i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
       i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
       if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
       }
       $1018$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $8$hi;
       i64toi32_i32$2 = $1018$hi;
       i64toi32_i32$5 = i64toi32_i32$1;
       i64toi32_i32$0 = $8$hi;
       i64toi32_i32$3 = $8;
       i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
        i64toi32_i32$0 = i64toi32_i32$2 >> 31 | 0;
        $589 = i64toi32_i32$2 >> i64toi32_i32$4 | 0;
       } else {
        i64toi32_i32$0 = i64toi32_i32$2 >> i64toi32_i32$4 | 0;
        $589 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$4 | 0) | 0;
       }
       HEAP32[$999 >> 2] = $1004 - $589 | 0;
       $10 = $3;
       $2 = $2 + 1 | 0;
       if (($2 | 0) != ($1 | 0)) {
        continue label$22
       }
       break label$1;
      };
     }
     if (($1 | 0) < (1 | 0)) {
      break label$1
     }
     $10 = HEAP32[($0 + -4 | 0) >> 2] | 0;
     $6 = HEAP32[($0 + -8 | 0) >> 2] | 0;
     $3 = HEAP32[($0 + -12 | 0) >> 2] | 0;
     $11 = HEAP32[($0 + -16 | 0) >> 2] | 0;
     i64toi32_i32$2 = $2;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$5 = i64toi32_i32$0 >> 31 | 0;
     $7 = i64toi32_i32$0;
     $7$hi = i64toi32_i32$5;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     i64toi32_i32$0 = i64toi32_i32$5 >> 31 | 0;
     $17 = i64toi32_i32$5;
     $17$hi = i64toi32_i32$0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
     i64toi32_i32$5 = i64toi32_i32$0 >> 31 | 0;
     $18 = i64toi32_i32$0;
     $18$hi = i64toi32_i32$5;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] | 0;
     i64toi32_i32$0 = i64toi32_i32$5 >> 31 | 0;
     $19 = i64toi32_i32$5;
     $19$hi = i64toi32_i32$0;
     $2 = 0;
     label$23 : while (1) {
      $4 = $3;
      $3 = $6;
      $6 = $10;
      $10 = $2 << 2 | 0;
      $1058 = $5 + $10 | 0;
      $10 = HEAP32[($0 + $10 | 0) >> 2] | 0;
      $1063 = $10;
      i64toi32_i32$5 = $4;
      i64toi32_i32$0 = i64toi32_i32$5 >> 31 | 0;
      $1065$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $18$hi;
      i64toi32_i32$0 = $1065$hi;
      i64toi32_i32$5 = $18$hi;
      i64toi32_i32$5 = __wasm_i64_mul($4 | 0, i64toi32_i32$0 | 0, $18 | 0, i64toi32_i32$5 | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
      $1067 = i64toi32_i32$5;
      $1067$hi = i64toi32_i32$0;
      i64toi32_i32$5 = $11;
      i64toi32_i32$0 = i64toi32_i32$5 >> 31 | 0;
      $1069$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $19$hi;
      i64toi32_i32$0 = $1069$hi;
      i64toi32_i32$5 = $19$hi;
      i64toi32_i32$5 = __wasm_i64_mul($11 | 0, i64toi32_i32$0 | 0, $19 | 0, i64toi32_i32$5 | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
      $1071 = i64toi32_i32$5;
      $1071$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $1067$hi;
      i64toi32_i32$2 = $1067;
      i64toi32_i32$5 = $1071$hi;
      i64toi32_i32$3 = $1071;
      i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
      i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
      }
      $1072$hi = i64toi32_i32$1;
      i64toi32_i32$2 = $3;
      i64toi32_i32$1 = i64toi32_i32$2 >> 31 | 0;
      $1074$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $17$hi;
      i64toi32_i32$1 = $1074$hi;
      i64toi32_i32$2 = $17$hi;
      i64toi32_i32$2 = __wasm_i64_mul($3 | 0, i64toi32_i32$1 | 0, $17 | 0, i64toi32_i32$2 | 0) | 0;
      i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
      $1076 = i64toi32_i32$2;
      $1076$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $1072$hi;
      i64toi32_i32$0 = i64toi32_i32$4;
      i64toi32_i32$2 = $1076$hi;
      i64toi32_i32$3 = $1076;
      i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
      i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $1077$hi = i64toi32_i32$4;
      i64toi32_i32$0 = $6;
      i64toi32_i32$4 = i64toi32_i32$0 >> 31 | 0;
      $1079$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $7$hi;
      i64toi32_i32$4 = $1079$hi;
      i64toi32_i32$0 = $7$hi;
      i64toi32_i32$0 = __wasm_i64_mul($6 | 0, i64toi32_i32$4 | 0, $7 | 0, i64toi32_i32$0 | 0) | 0;
      i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
      $1081 = i64toi32_i32$0;
      $1081$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $1077$hi;
      i64toi32_i32$1 = i64toi32_i32$5;
      i64toi32_i32$0 = $1081$hi;
      i64toi32_i32$3 = $1081;
      i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
      i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $1082$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $8$hi;
      i64toi32_i32$5 = $1082$hi;
      i64toi32_i32$4 = i64toi32_i32$2;
      i64toi32_i32$1 = $8$hi;
      i64toi32_i32$3 = $8;
      i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$5 >> 31 | 0;
       $590 = i64toi32_i32$5 >> i64toi32_i32$0 | 0;
      } else {
       i64toi32_i32$1 = i64toi32_i32$5 >> i64toi32_i32$0 | 0;
       $590 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$0 | 0) | 0;
      }
      HEAP32[$1058 >> 2] = $1063 - $590 | 0;
      $11 = $4;
      $2 = $2 + 1 | 0;
      if (($2 | 0) != ($1 | 0)) {
       continue label$23
      }
      break label$1;
     };
    }
    i64toi32_i32$1 = 0;
    $8 = $4;
    $8$hi = i64toi32_i32$1;
    label$24 : {
     if (($3 | 0) == (2 | 0)) {
      break label$24
     }
     if (($1 | 0) < (1 | 0)) {
      break label$1
     }
     $10 = $1 & 1 | 0;
     $3 = HEAP32[($0 + -4 | 0) >> 2] | 0;
     i64toi32_i32$5 = $2;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$5 >> 2] | 0;
     i64toi32_i32$4 = i64toi32_i32$1 >> 31 | 0;
     $7 = i64toi32_i32$1;
     $7$hi = i64toi32_i32$4;
     $2 = 0;
     label$25 : {
      if (($1 | 0) == (1 | 0)) {
       break label$25
      }
      $1 = $1 & -2 | 0;
      $2 = 0;
      label$26 : while (1) {
       $6 = $2 << 2 | 0;
       $1114 = $5 + $6 | 0;
       $4 = HEAP32[($0 + $6 | 0) >> 2] | 0;
       $1119 = $4;
       i64toi32_i32$1 = $3;
       i64toi32_i32$4 = i64toi32_i32$1 >> 31 | 0;
       $1121$hi = i64toi32_i32$4;
       i64toi32_i32$4 = $7$hi;
       i64toi32_i32$4 = $1121$hi;
       i64toi32_i32$1 = $7$hi;
       i64toi32_i32$1 = __wasm_i64_mul($3 | 0, i64toi32_i32$4 | 0, $7 | 0, i64toi32_i32$1 | 0) | 0;
       i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
       $1123$hi = i64toi32_i32$4;
       i64toi32_i32$4 = $8$hi;
       i64toi32_i32$4 = $1123$hi;
       i64toi32_i32$5 = i64toi32_i32$1;
       i64toi32_i32$1 = $8$hi;
       i64toi32_i32$3 = $8;
       i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
        i64toi32_i32$1 = i64toi32_i32$4 >> 31 | 0;
        $591 = i64toi32_i32$4 >> i64toi32_i32$0 | 0;
       } else {
        i64toi32_i32$1 = i64toi32_i32$4 >> i64toi32_i32$0 | 0;
        $591 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$0 | 0) | 0;
       }
       HEAP32[$1114 >> 2] = $1119 - $591 | 0;
       $6 = $6 | 4 | 0;
       $1132 = $5 + $6 | 0;
       $3 = HEAP32[($0 + $6 | 0) >> 2] | 0;
       $1137 = $3;
       i64toi32_i32$5 = $4;
       i64toi32_i32$1 = i64toi32_i32$5 >> 31 | 0;
       $1139$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $7$hi;
       i64toi32_i32$1 = $1139$hi;
       i64toi32_i32$5 = $7$hi;
       i64toi32_i32$5 = __wasm_i64_mul($4 | 0, i64toi32_i32$1 | 0, $7 | 0, i64toi32_i32$5 | 0) | 0;
       i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
       $1141$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $8$hi;
       i64toi32_i32$1 = $1141$hi;
       i64toi32_i32$4 = i64toi32_i32$5;
       i64toi32_i32$5 = $8$hi;
       i64toi32_i32$3 = $8;
       i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
        i64toi32_i32$5 = i64toi32_i32$1 >> 31 | 0;
        $592 = i64toi32_i32$1 >> i64toi32_i32$0 | 0;
       } else {
        i64toi32_i32$5 = i64toi32_i32$1 >> i64toi32_i32$0 | 0;
        $592 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$0 | 0) | 0;
       }
       HEAP32[$1132 >> 2] = $1137 - $592 | 0;
       $2 = $2 + 2 | 0;
       $1 = $1 + -2 | 0;
       if ($1) {
        continue label$26
       }
       break label$26;
      };
     }
     if (!$10) {
      break label$1
     }
     $2 = $2 << 2 | 0;
     $1157 = $5 + $2 | 0;
     $1161 = HEAP32[($0 + $2 | 0) >> 2] | 0;
     i64toi32_i32$4 = $3;
     i64toi32_i32$5 = i64toi32_i32$4 >> 31 | 0;
     $1163$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $7$hi;
     i64toi32_i32$5 = $1163$hi;
     i64toi32_i32$4 = $7$hi;
     i64toi32_i32$4 = __wasm_i64_mul($3 | 0, i64toi32_i32$5 | 0, $7 | 0, i64toi32_i32$4 | 0) | 0;
     i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
     $1165$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $8$hi;
     i64toi32_i32$5 = $1165$hi;
     i64toi32_i32$1 = i64toi32_i32$4;
     i64toi32_i32$4 = $8$hi;
     i64toi32_i32$3 = $8;
     i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$5 >> 31 | 0;
      $593 = i64toi32_i32$5 >> i64toi32_i32$0 | 0;
     } else {
      i64toi32_i32$4 = i64toi32_i32$5 >> i64toi32_i32$0 | 0;
      $593 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$0 | 0) | 0;
     }
     HEAP32[$1157 >> 2] = $1161 - $593 | 0;
     break label$1;
    }
    if (($1 | 0) < (1 | 0)) {
     break label$1
    }
    $10 = $1 & 1 | 0;
    $4 = HEAP32[($0 + -4 | 0) >> 2] | 0;
    $6 = HEAP32[($0 + -8 | 0) >> 2] | 0;
    i64toi32_i32$5 = $2;
    i64toi32_i32$4 = HEAP32[i64toi32_i32$5 >> 2] | 0;
    i64toi32_i32$1 = i64toi32_i32$4 >> 31 | 0;
    $7 = i64toi32_i32$4;
    $7$hi = i64toi32_i32$1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
    i64toi32_i32$4 = i64toi32_i32$1 >> 31 | 0;
    $17 = i64toi32_i32$1;
    $17$hi = i64toi32_i32$4;
    $2 = 0;
    label$27 : {
     if (($1 | 0) == (1 | 0)) {
      break label$27
     }
     $1 = $1 & -2 | 0;
     $2 = 0;
     label$28 : while (1) {
      i64toi32_i32$1 = $6;
      i64toi32_i32$4 = i64toi32_i32$1 >> 31 | 0;
      $18 = i64toi32_i32$1;
      $18$hi = i64toi32_i32$4;
      $3 = $2 << 2 | 0;
      $1194 = $5 + $3 | 0;
      $6 = HEAP32[($0 + $3 | 0) >> 2] | 0;
      $1199 = $6;
      i64toi32_i32$1 = $4;
      i64toi32_i32$4 = i64toi32_i32$1 >> 31 | 0;
      $19 = i64toi32_i32$1;
      $19$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $7$hi;
      i64toi32_i32$4 = $19$hi;
      i64toi32_i32$1 = $7$hi;
      i64toi32_i32$1 = __wasm_i64_mul($4 | 0, i64toi32_i32$4 | 0, $7 | 0, i64toi32_i32$1 | 0) | 0;
      i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
      $1204 = i64toi32_i32$1;
      $1204$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $18$hi;
      i64toi32_i32$4 = $17$hi;
      i64toi32_i32$4 = $18$hi;
      i64toi32_i32$1 = $17$hi;
      i64toi32_i32$1 = __wasm_i64_mul($18 | 0, i64toi32_i32$4 | 0, $17 | 0, i64toi32_i32$1 | 0) | 0;
      i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
      $1207 = i64toi32_i32$1;
      $1207$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $1204$hi;
      i64toi32_i32$5 = $1204;
      i64toi32_i32$1 = $1207$hi;
      i64toi32_i32$3 = $1207;
      i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
      i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
      }
      $1208$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $8$hi;
      i64toi32_i32$2 = $1208$hi;
      i64toi32_i32$4 = i64toi32_i32$0;
      i64toi32_i32$5 = $8$hi;
      i64toi32_i32$3 = $8;
      i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$2 >> 31 | 0;
       $594 = i64toi32_i32$2 >> i64toi32_i32$1 | 0;
      } else {
       i64toi32_i32$5 = i64toi32_i32$2 >> i64toi32_i32$1 | 0;
       $594 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$1 | 0) | 0;
      }
      HEAP32[$1194 >> 2] = $1199 - $594 | 0;
      $3 = $3 | 4 | 0;
      $1217 = $5 + $3 | 0;
      $4 = HEAP32[($0 + $3 | 0) >> 2] | 0;
      $1222 = $4;
      i64toi32_i32$4 = $6;
      i64toi32_i32$5 = i64toi32_i32$4 >> 31 | 0;
      $1224$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $7$hi;
      i64toi32_i32$5 = $1224$hi;
      i64toi32_i32$4 = $7$hi;
      i64toi32_i32$4 = __wasm_i64_mul($6 | 0, i64toi32_i32$5 | 0, $7 | 0, i64toi32_i32$4 | 0) | 0;
      i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
      $1226 = i64toi32_i32$4;
      $1226$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $19$hi;
      i64toi32_i32$5 = $17$hi;
      i64toi32_i32$5 = $19$hi;
      i64toi32_i32$4 = $17$hi;
      i64toi32_i32$4 = __wasm_i64_mul($19 | 0, i64toi32_i32$5 | 0, $17 | 0, i64toi32_i32$4 | 0) | 0;
      i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
      $1229 = i64toi32_i32$4;
      $1229$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $1226$hi;
      i64toi32_i32$2 = $1226;
      i64toi32_i32$4 = $1229$hi;
      i64toi32_i32$3 = $1229;
      i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
      i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
      }
      $1230$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $8$hi;
      i64toi32_i32$0 = $1230$hi;
      i64toi32_i32$5 = i64toi32_i32$1;
      i64toi32_i32$2 = $8$hi;
      i64toi32_i32$3 = $8;
      i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$0 >> 31 | 0;
       $595 = i64toi32_i32$0 >> i64toi32_i32$4 | 0;
      } else {
       i64toi32_i32$2 = i64toi32_i32$0 >> i64toi32_i32$4 | 0;
       $595 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$4 | 0) | 0;
      }
      HEAP32[$1217 >> 2] = $1222 - $595 | 0;
      $2 = $2 + 2 | 0;
      $1 = $1 + -2 | 0;
      if ($1) {
       continue label$28
      }
      break label$28;
     };
    }
    if (!$10) {
     break label$1
    }
    $2 = $2 << 2 | 0;
    $1246 = $5 + $2 | 0;
    $1250 = HEAP32[($0 + $2 | 0) >> 2] | 0;
    i64toi32_i32$5 = $4;
    i64toi32_i32$2 = i64toi32_i32$5 >> 31 | 0;
    $1252$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $7$hi;
    i64toi32_i32$2 = $1252$hi;
    i64toi32_i32$5 = $7$hi;
    i64toi32_i32$5 = __wasm_i64_mul($4 | 0, i64toi32_i32$2 | 0, $7 | 0, i64toi32_i32$5 | 0) | 0;
    i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
    $1254 = i64toi32_i32$5;
    $1254$hi = i64toi32_i32$2;
    i64toi32_i32$5 = $6;
    i64toi32_i32$2 = i64toi32_i32$5 >> 31 | 0;
    $1256$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $17$hi;
    i64toi32_i32$2 = $1256$hi;
    i64toi32_i32$5 = $17$hi;
    i64toi32_i32$5 = __wasm_i64_mul($6 | 0, i64toi32_i32$2 | 0, $17 | 0, i64toi32_i32$5 | 0) | 0;
    i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
    $1258 = i64toi32_i32$5;
    $1258$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $1254$hi;
    i64toi32_i32$0 = $1254;
    i64toi32_i32$5 = $1258$hi;
    i64toi32_i32$3 = $1258;
    i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
    i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
    }
    $1259$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $8$hi;
    i64toi32_i32$1 = $1259$hi;
    i64toi32_i32$2 = i64toi32_i32$4;
    i64toi32_i32$0 = $8$hi;
    i64toi32_i32$3 = $8;
    i64toi32_i32$5 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
     $596 = i64toi32_i32$1 >> i64toi32_i32$5 | 0;
    } else {
     i64toi32_i32$0 = i64toi32_i32$1 >> i64toi32_i32$5 | 0;
     $596 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$5 | 0) | 0;
    }
    HEAP32[$1246 >> 2] = $1250 - $596 | 0;
    return;
   }
   label$29 : while (1) {
    i64toi32_i32$0 = 0;
    $8 = 0;
    $8$hi = i64toi32_i32$0;
    label$30 : {
     switch ($4 | 0) {
     case 19:
      i64toi32_i32$1 = (($6 << 2 | 0) + $0 | 0) + -128 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$1 >> 2] | 0;
      i64toi32_i32$2 = i64toi32_i32$0 >> 31 | 0;
      $1270 = i64toi32_i32$0;
      $1270$hi = i64toi32_i32$2;
      i64toi32_i32$1 = $2;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 124 | 0) >> 2] | 0;
      i64toi32_i32$0 = i64toi32_i32$2 >> 31 | 0;
      $1272 = i64toi32_i32$2;
      $1272$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $1270$hi;
      i64toi32_i32$2 = $1272$hi;
      i64toi32_i32$2 = __wasm_i64_mul($1270 | 0, i64toi32_i32$0 | 0, $1272 | 0, i64toi32_i32$2 | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
      $8 = i64toi32_i32$2;
      $8$hi = i64toi32_i32$0;
     case 18:
      i64toi32_i32$1 = (($6 << 2 | 0) + $0 | 0) + -124 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$1 >> 2] | 0;
      i64toi32_i32$2 = i64toi32_i32$0 >> 31 | 0;
      $1279 = i64toi32_i32$0;
      $1279$hi = i64toi32_i32$2;
      i64toi32_i32$1 = $2;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 120 | 0) >> 2] | 0;
      i64toi32_i32$0 = i64toi32_i32$2 >> 31 | 0;
      $1281 = i64toi32_i32$2;
      $1281$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $1279$hi;
      i64toi32_i32$2 = $1281$hi;
      i64toi32_i32$2 = __wasm_i64_mul($1279 | 0, i64toi32_i32$0 | 0, $1281 | 0, i64toi32_i32$2 | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
      $1282$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $8$hi;
      i64toi32_i32$0 = $1282$hi;
      i64toi32_i32$1 = i64toi32_i32$2;
      i64toi32_i32$2 = $8$hi;
      i64toi32_i32$3 = $8;
      i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
      i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $8 = i64toi32_i32$5;
      $8$hi = i64toi32_i32$4;
     case 17:
      i64toi32_i32$0 = (($6 << 2 | 0) + $0 | 0) + -120 | 0;
      i64toi32_i32$4 = HEAP32[i64toi32_i32$0 >> 2] | 0;
      i64toi32_i32$1 = i64toi32_i32$4 >> 31 | 0;
      $1290 = i64toi32_i32$4;
      $1290$hi = i64toi32_i32$1;
      i64toi32_i32$0 = $2;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 116 | 0) >> 2] | 0;
      i64toi32_i32$4 = i64toi32_i32$1 >> 31 | 0;
      $1292 = i64toi32_i32$1;
      $1292$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $1290$hi;
      i64toi32_i32$1 = $1292$hi;
      i64toi32_i32$1 = __wasm_i64_mul($1290 | 0, i64toi32_i32$4 | 0, $1292 | 0, i64toi32_i32$1 | 0) | 0;
      i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
      $1293$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $8$hi;
      i64toi32_i32$4 = $1293$hi;
      i64toi32_i32$0 = i64toi32_i32$1;
      i64toi32_i32$1 = $8$hi;
      i64toi32_i32$3 = $8;
      i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
      i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $8 = i64toi32_i32$2;
      $8$hi = i64toi32_i32$5;
     case 16:
      i64toi32_i32$4 = (($6 << 2 | 0) + $0 | 0) + -116 | 0;
      i64toi32_i32$5 = HEAP32[i64toi32_i32$4 >> 2] | 0;
      i64toi32_i32$0 = i64toi32_i32$5 >> 31 | 0;
      $1301 = i64toi32_i32$5;
      $1301$hi = i64toi32_i32$0;
      i64toi32_i32$4 = $2;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 112 | 0) >> 2] | 0;
      i64toi32_i32$5 = i64toi32_i32$0 >> 31 | 0;
      $1303 = i64toi32_i32$0;
      $1303$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $1301$hi;
      i64toi32_i32$0 = $1303$hi;
      i64toi32_i32$0 = __wasm_i64_mul($1301 | 0, i64toi32_i32$5 | 0, $1303 | 0, i64toi32_i32$0 | 0) | 0;
      i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
      $1304$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $8$hi;
      i64toi32_i32$5 = $1304$hi;
      i64toi32_i32$4 = i64toi32_i32$0;
      i64toi32_i32$0 = $8$hi;
      i64toi32_i32$3 = $8;
      i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
      i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
      }
      $8 = i64toi32_i32$1;
      $8$hi = i64toi32_i32$2;
     case 15:
      i64toi32_i32$5 = (($6 << 2 | 0) + $0 | 0) + -112 | 0;
      i64toi32_i32$2 = HEAP32[i64toi32_i32$5 >> 2] | 0;
      i64toi32_i32$4 = i64toi32_i32$2 >> 31 | 0;
      $1312 = i64toi32_i32$2;
      $1312$hi = i64toi32_i32$4;
      i64toi32_i32$5 = $2;
      i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 108 | 0) >> 2] | 0;
      i64toi32_i32$2 = i64toi32_i32$4 >> 31 | 0;
      $1314 = i64toi32_i32$4;
      $1314$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $1312$hi;
      i64toi32_i32$4 = $1314$hi;
      i64toi32_i32$4 = __wasm_i64_mul($1312 | 0, i64toi32_i32$2 | 0, $1314 | 0, i64toi32_i32$4 | 0) | 0;
      i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
      $1315$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $8$hi;
      i64toi32_i32$2 = $1315$hi;
      i64toi32_i32$5 = i64toi32_i32$4;
      i64toi32_i32$4 = $8$hi;
      i64toi32_i32$3 = $8;
      i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
      i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
      if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
      }
      $8 = i64toi32_i32$0;
      $8$hi = i64toi32_i32$1;
     case 14:
      i64toi32_i32$2 = (($6 << 2 | 0) + $0 | 0) + -108 | 0;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$5 = i64toi32_i32$1 >> 31 | 0;
      $1323 = i64toi32_i32$1;
      $1323$hi = i64toi32_i32$5;
      i64toi32_i32$2 = $2;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$2 + 104 | 0) >> 2] | 0;
      i64toi32_i32$1 = i64toi32_i32$5 >> 31 | 0;
      $1325 = i64toi32_i32$5;
      $1325$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $1323$hi;
      i64toi32_i32$5 = $1325$hi;
      i64toi32_i32$5 = __wasm_i64_mul($1323 | 0, i64toi32_i32$1 | 0, $1325 | 0, i64toi32_i32$5 | 0) | 0;
      i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
      $1326$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $8$hi;
      i64toi32_i32$1 = $1326$hi;
      i64toi32_i32$2 = i64toi32_i32$5;
      i64toi32_i32$5 = $8$hi;
      i64toi32_i32$3 = $8;
      i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
      i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
      }
      $8 = i64toi32_i32$4;
      $8$hi = i64toi32_i32$0;
     case 13:
      i64toi32_i32$1 = (($6 << 2 | 0) + $0 | 0) + -104 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$1 >> 2] | 0;
      i64toi32_i32$2 = i64toi32_i32$0 >> 31 | 0;
      $1334 = i64toi32_i32$0;
      $1334$hi = i64toi32_i32$2;
      i64toi32_i32$1 = $2;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 100 | 0) >> 2] | 0;
      i64toi32_i32$0 = i64toi32_i32$2 >> 31 | 0;
      $1336 = i64toi32_i32$2;
      $1336$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $1334$hi;
      i64toi32_i32$2 = $1336$hi;
      i64toi32_i32$2 = __wasm_i64_mul($1334 | 0, i64toi32_i32$0 | 0, $1336 | 0, i64toi32_i32$2 | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
      $1337$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $8$hi;
      i64toi32_i32$0 = $1337$hi;
      i64toi32_i32$1 = i64toi32_i32$2;
      i64toi32_i32$2 = $8$hi;
      i64toi32_i32$3 = $8;
      i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
      i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $8 = i64toi32_i32$5;
      $8$hi = i64toi32_i32$4;
     case 12:
      i64toi32_i32$0 = (($6 << 2 | 0) + $0 | 0) + -100 | 0;
      i64toi32_i32$4 = HEAP32[i64toi32_i32$0 >> 2] | 0;
      i64toi32_i32$1 = i64toi32_i32$4 >> 31 | 0;
      $1345 = i64toi32_i32$4;
      $1345$hi = i64toi32_i32$1;
      i64toi32_i32$0 = $2;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 96 | 0) >> 2] | 0;
      i64toi32_i32$4 = i64toi32_i32$1 >> 31 | 0;
      $1347 = i64toi32_i32$1;
      $1347$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $1345$hi;
      i64toi32_i32$1 = $1347$hi;
      i64toi32_i32$1 = __wasm_i64_mul($1345 | 0, i64toi32_i32$4 | 0, $1347 | 0, i64toi32_i32$1 | 0) | 0;
      i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
      $1348$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $8$hi;
      i64toi32_i32$4 = $1348$hi;
      i64toi32_i32$0 = i64toi32_i32$1;
      i64toi32_i32$1 = $8$hi;
      i64toi32_i32$3 = $8;
      i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
      i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $8 = i64toi32_i32$2;
      $8$hi = i64toi32_i32$5;
     case 11:
      i64toi32_i32$4 = (($6 << 2 | 0) + $0 | 0) + -96 | 0;
      i64toi32_i32$5 = HEAP32[i64toi32_i32$4 >> 2] | 0;
      i64toi32_i32$0 = i64toi32_i32$5 >> 31 | 0;
      $1356 = i64toi32_i32$5;
      $1356$hi = i64toi32_i32$0;
      i64toi32_i32$4 = $2;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 92 | 0) >> 2] | 0;
      i64toi32_i32$5 = i64toi32_i32$0 >> 31 | 0;
      $1358 = i64toi32_i32$0;
      $1358$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $1356$hi;
      i64toi32_i32$0 = $1358$hi;
      i64toi32_i32$0 = __wasm_i64_mul($1356 | 0, i64toi32_i32$5 | 0, $1358 | 0, i64toi32_i32$0 | 0) | 0;
      i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
      $1359$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $8$hi;
      i64toi32_i32$5 = $1359$hi;
      i64toi32_i32$4 = i64toi32_i32$0;
      i64toi32_i32$0 = $8$hi;
      i64toi32_i32$3 = $8;
      i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
      i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
      }
      $8 = i64toi32_i32$1;
      $8$hi = i64toi32_i32$2;
     case 10:
      i64toi32_i32$5 = (($6 << 2 | 0) + $0 | 0) + -92 | 0;
      i64toi32_i32$2 = HEAP32[i64toi32_i32$5 >> 2] | 0;
      i64toi32_i32$4 = i64toi32_i32$2 >> 31 | 0;
      $1367 = i64toi32_i32$2;
      $1367$hi = i64toi32_i32$4;
      i64toi32_i32$5 = $2;
      i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 88 | 0) >> 2] | 0;
      i64toi32_i32$2 = i64toi32_i32$4 >> 31 | 0;
      $1369 = i64toi32_i32$4;
      $1369$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $1367$hi;
      i64toi32_i32$4 = $1369$hi;
      i64toi32_i32$4 = __wasm_i64_mul($1367 | 0, i64toi32_i32$2 | 0, $1369 | 0, i64toi32_i32$4 | 0) | 0;
      i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
      $1370$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $8$hi;
      i64toi32_i32$2 = $1370$hi;
      i64toi32_i32$5 = i64toi32_i32$4;
      i64toi32_i32$4 = $8$hi;
      i64toi32_i32$3 = $8;
      i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
      i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
      if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
      }
      $8 = i64toi32_i32$0;
      $8$hi = i64toi32_i32$1;
     case 9:
      i64toi32_i32$2 = (($6 << 2 | 0) + $0 | 0) + -88 | 0;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$5 = i64toi32_i32$1 >> 31 | 0;
      $1378 = i64toi32_i32$1;
      $1378$hi = i64toi32_i32$5;
      i64toi32_i32$2 = $2;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$2 + 84 | 0) >> 2] | 0;
      i64toi32_i32$1 = i64toi32_i32$5 >> 31 | 0;
      $1380 = i64toi32_i32$5;
      $1380$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $1378$hi;
      i64toi32_i32$5 = $1380$hi;
      i64toi32_i32$5 = __wasm_i64_mul($1378 | 0, i64toi32_i32$1 | 0, $1380 | 0, i64toi32_i32$5 | 0) | 0;
      i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
      $1381$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $8$hi;
      i64toi32_i32$1 = $1381$hi;
      i64toi32_i32$2 = i64toi32_i32$5;
      i64toi32_i32$5 = $8$hi;
      i64toi32_i32$3 = $8;
      i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
      i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
      }
      $8 = i64toi32_i32$4;
      $8$hi = i64toi32_i32$0;
     case 8:
      i64toi32_i32$1 = (($6 << 2 | 0) + $0 | 0) + -84 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$1 >> 2] | 0;
      i64toi32_i32$2 = i64toi32_i32$0 >> 31 | 0;
      $1389 = i64toi32_i32$0;
      $1389$hi = i64toi32_i32$2;
      i64toi32_i32$1 = $2;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 80 | 0) >> 2] | 0;
      i64toi32_i32$0 = i64toi32_i32$2 >> 31 | 0;
      $1391 = i64toi32_i32$2;
      $1391$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $1389$hi;
      i64toi32_i32$2 = $1391$hi;
      i64toi32_i32$2 = __wasm_i64_mul($1389 | 0, i64toi32_i32$0 | 0, $1391 | 0, i64toi32_i32$2 | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
      $1392$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $8$hi;
      i64toi32_i32$0 = $1392$hi;
      i64toi32_i32$1 = i64toi32_i32$2;
      i64toi32_i32$2 = $8$hi;
      i64toi32_i32$3 = $8;
      i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
      i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $8 = i64toi32_i32$5;
      $8$hi = i64toi32_i32$4;
     case 7:
      i64toi32_i32$0 = (($6 << 2 | 0) + $0 | 0) + -80 | 0;
      i64toi32_i32$4 = HEAP32[i64toi32_i32$0 >> 2] | 0;
      i64toi32_i32$1 = i64toi32_i32$4 >> 31 | 0;
      $1400 = i64toi32_i32$4;
      $1400$hi = i64toi32_i32$1;
      i64toi32_i32$0 = $2;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 76 | 0) >> 2] | 0;
      i64toi32_i32$4 = i64toi32_i32$1 >> 31 | 0;
      $1402 = i64toi32_i32$1;
      $1402$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $1400$hi;
      i64toi32_i32$1 = $1402$hi;
      i64toi32_i32$1 = __wasm_i64_mul($1400 | 0, i64toi32_i32$4 | 0, $1402 | 0, i64toi32_i32$1 | 0) | 0;
      i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
      $1403$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $8$hi;
      i64toi32_i32$4 = $1403$hi;
      i64toi32_i32$0 = i64toi32_i32$1;
      i64toi32_i32$1 = $8$hi;
      i64toi32_i32$3 = $8;
      i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
      i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $8 = i64toi32_i32$2;
      $8$hi = i64toi32_i32$5;
     case 6:
      i64toi32_i32$4 = (($6 << 2 | 0) + $0 | 0) + -76 | 0;
      i64toi32_i32$5 = HEAP32[i64toi32_i32$4 >> 2] | 0;
      i64toi32_i32$0 = i64toi32_i32$5 >> 31 | 0;
      $1411 = i64toi32_i32$5;
      $1411$hi = i64toi32_i32$0;
      i64toi32_i32$4 = $2;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 72 | 0) >> 2] | 0;
      i64toi32_i32$5 = i64toi32_i32$0 >> 31 | 0;
      $1413 = i64toi32_i32$0;
      $1413$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $1411$hi;
      i64toi32_i32$0 = $1413$hi;
      i64toi32_i32$0 = __wasm_i64_mul($1411 | 0, i64toi32_i32$5 | 0, $1413 | 0, i64toi32_i32$0 | 0) | 0;
      i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
      $1414$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $8$hi;
      i64toi32_i32$5 = $1414$hi;
      i64toi32_i32$4 = i64toi32_i32$0;
      i64toi32_i32$0 = $8$hi;
      i64toi32_i32$3 = $8;
      i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
      i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
      }
      $8 = i64toi32_i32$1;
      $8$hi = i64toi32_i32$2;
     case 5:
      i64toi32_i32$5 = (($6 << 2 | 0) + $0 | 0) + -72 | 0;
      i64toi32_i32$2 = HEAP32[i64toi32_i32$5 >> 2] | 0;
      i64toi32_i32$4 = i64toi32_i32$2 >> 31 | 0;
      $1422 = i64toi32_i32$2;
      $1422$hi = i64toi32_i32$4;
      i64toi32_i32$5 = $2;
      i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 68 | 0) >> 2] | 0;
      i64toi32_i32$2 = i64toi32_i32$4 >> 31 | 0;
      $1424 = i64toi32_i32$4;
      $1424$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $1422$hi;
      i64toi32_i32$4 = $1424$hi;
      i64toi32_i32$4 = __wasm_i64_mul($1422 | 0, i64toi32_i32$2 | 0, $1424 | 0, i64toi32_i32$4 | 0) | 0;
      i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
      $1425$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $8$hi;
      i64toi32_i32$2 = $1425$hi;
      i64toi32_i32$5 = i64toi32_i32$4;
      i64toi32_i32$4 = $8$hi;
      i64toi32_i32$3 = $8;
      i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
      i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
      if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
      }
      $8 = i64toi32_i32$0;
      $8$hi = i64toi32_i32$1;
     case 4:
      i64toi32_i32$2 = (($6 << 2 | 0) + $0 | 0) + -68 | 0;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$5 = i64toi32_i32$1 >> 31 | 0;
      $1433 = i64toi32_i32$1;
      $1433$hi = i64toi32_i32$5;
      i64toi32_i32$2 = $2;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$2 + 64 | 0) >> 2] | 0;
      i64toi32_i32$1 = i64toi32_i32$5 >> 31 | 0;
      $1435 = i64toi32_i32$5;
      $1435$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $1433$hi;
      i64toi32_i32$5 = $1435$hi;
      i64toi32_i32$5 = __wasm_i64_mul($1433 | 0, i64toi32_i32$1 | 0, $1435 | 0, i64toi32_i32$5 | 0) | 0;
      i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
      $1436$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $8$hi;
      i64toi32_i32$1 = $1436$hi;
      i64toi32_i32$2 = i64toi32_i32$5;
      i64toi32_i32$5 = $8$hi;
      i64toi32_i32$3 = $8;
      i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
      i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
      }
      $8 = i64toi32_i32$4;
      $8$hi = i64toi32_i32$0;
     case 3:
      i64toi32_i32$1 = (($6 << 2 | 0) + $0 | 0) + -64 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$1 >> 2] | 0;
      i64toi32_i32$2 = i64toi32_i32$0 >> 31 | 0;
      $1444 = i64toi32_i32$0;
      $1444$hi = i64toi32_i32$2;
      i64toi32_i32$1 = $2;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 60 | 0) >> 2] | 0;
      i64toi32_i32$0 = i64toi32_i32$2 >> 31 | 0;
      $1446 = i64toi32_i32$2;
      $1446$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $1444$hi;
      i64toi32_i32$2 = $1446$hi;
      i64toi32_i32$2 = __wasm_i64_mul($1444 | 0, i64toi32_i32$0 | 0, $1446 | 0, i64toi32_i32$2 | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
      $1447$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $8$hi;
      i64toi32_i32$0 = $1447$hi;
      i64toi32_i32$1 = i64toi32_i32$2;
      i64toi32_i32$2 = $8$hi;
      i64toi32_i32$3 = $8;
      i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
      i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $8 = i64toi32_i32$5;
      $8$hi = i64toi32_i32$4;
     case 2:
      i64toi32_i32$0 = (($6 << 2 | 0) + $0 | 0) + -60 | 0;
      i64toi32_i32$4 = HEAP32[i64toi32_i32$0 >> 2] | 0;
      i64toi32_i32$1 = i64toi32_i32$4 >> 31 | 0;
      $1455 = i64toi32_i32$4;
      $1455$hi = i64toi32_i32$1;
      i64toi32_i32$0 = $2;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 56 | 0) >> 2] | 0;
      i64toi32_i32$4 = i64toi32_i32$1 >> 31 | 0;
      $1457 = i64toi32_i32$1;
      $1457$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $1455$hi;
      i64toi32_i32$1 = $1457$hi;
      i64toi32_i32$1 = __wasm_i64_mul($1455 | 0, i64toi32_i32$4 | 0, $1457 | 0, i64toi32_i32$1 | 0) | 0;
      i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
      $1458$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $8$hi;
      i64toi32_i32$4 = $1458$hi;
      i64toi32_i32$0 = i64toi32_i32$1;
      i64toi32_i32$1 = $8$hi;
      i64toi32_i32$3 = $8;
      i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
      i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $8 = i64toi32_i32$2;
      $8$hi = i64toi32_i32$5;
     case 1:
      i64toi32_i32$4 = (($6 << 2 | 0) + $0 | 0) + -56 | 0;
      i64toi32_i32$5 = HEAP32[i64toi32_i32$4 >> 2] | 0;
      i64toi32_i32$0 = i64toi32_i32$5 >> 31 | 0;
      $1466 = i64toi32_i32$5;
      $1466$hi = i64toi32_i32$0;
      i64toi32_i32$4 = $2;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 52 | 0) >> 2] | 0;
      i64toi32_i32$5 = i64toi32_i32$0 >> 31 | 0;
      $1468 = i64toi32_i32$0;
      $1468$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $1466$hi;
      i64toi32_i32$0 = $1468$hi;
      i64toi32_i32$0 = __wasm_i64_mul($1466 | 0, i64toi32_i32$5 | 0, $1468 | 0, i64toi32_i32$0 | 0) | 0;
      i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
      $1469$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $8$hi;
      i64toi32_i32$5 = $1469$hi;
      i64toi32_i32$4 = i64toi32_i32$0;
      i64toi32_i32$0 = $8$hi;
      i64toi32_i32$3 = $8;
      i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
      i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
      }
      $8 = i64toi32_i32$1;
      $8$hi = i64toi32_i32$2;
     case 0:
      $3 = ($6 << 2 | 0) + $0 | 0;
      i64toi32_i32$5 = $3 + -52 | 0;
      i64toi32_i32$2 = HEAP32[i64toi32_i32$5 >> 2] | 0;
      i64toi32_i32$4 = i64toi32_i32$2 >> 31 | 0;
      $1478 = i64toi32_i32$2;
      $1478$hi = i64toi32_i32$4;
      i64toi32_i32$5 = $2;
      i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 48 | 0) >> 2] | 0;
      i64toi32_i32$2 = i64toi32_i32$4 >> 31 | 0;
      $1480 = i64toi32_i32$4;
      $1480$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $1478$hi;
      i64toi32_i32$4 = $1480$hi;
      i64toi32_i32$4 = __wasm_i64_mul($1478 | 0, i64toi32_i32$2 | 0, $1480 | 0, i64toi32_i32$4 | 0) | 0;
      i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
      $1481$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $8$hi;
      i64toi32_i32$2 = $1481$hi;
      i64toi32_i32$5 = i64toi32_i32$4;
      i64toi32_i32$4 = $8$hi;
      i64toi32_i32$3 = $8;
      i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
      i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
      if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
      }
      $1483$hi = i64toi32_i32$1;
      i64toi32_i32$2 = $3 + -48 | 0;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$5 = i64toi32_i32$1 >> 31 | 0;
      $1486 = i64toi32_i32$1;
      $1486$hi = i64toi32_i32$5;
      i64toi32_i32$2 = $2;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$2 + 44 | 0) >> 2] | 0;
      i64toi32_i32$1 = i64toi32_i32$5 >> 31 | 0;
      $1488 = i64toi32_i32$5;
      $1488$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $1486$hi;
      i64toi32_i32$5 = $1488$hi;
      i64toi32_i32$5 = __wasm_i64_mul($1486 | 0, i64toi32_i32$1 | 0, $1488 | 0, i64toi32_i32$5 | 0) | 0;
      i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
      $1489 = i64toi32_i32$5;
      $1489$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $1483$hi;
      i64toi32_i32$2 = i64toi32_i32$0;
      i64toi32_i32$5 = $1489$hi;
      i64toi32_i32$3 = $1489;
      i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
      i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
      }
      $1490$hi = i64toi32_i32$0;
      i64toi32_i32$1 = $3 + -44 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$1 >> 2] | 0;
      i64toi32_i32$2 = i64toi32_i32$0 >> 31 | 0;
      $1493 = i64toi32_i32$0;
      $1493$hi = i64toi32_i32$2;
      i64toi32_i32$1 = $2;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 40 | 0) >> 2] | 0;
      i64toi32_i32$0 = i64toi32_i32$2 >> 31 | 0;
      $1495 = i64toi32_i32$2;
      $1495$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $1493$hi;
      i64toi32_i32$2 = $1495$hi;
      i64toi32_i32$2 = __wasm_i64_mul($1493 | 0, i64toi32_i32$0 | 0, $1495 | 0, i64toi32_i32$2 | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
      $1496 = i64toi32_i32$2;
      $1496$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $1490$hi;
      i64toi32_i32$1 = i64toi32_i32$4;
      i64toi32_i32$2 = $1496$hi;
      i64toi32_i32$3 = $1496;
      i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
      i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $1497$hi = i64toi32_i32$4;
      i64toi32_i32$0 = $3 + -40 | 0;
      i64toi32_i32$4 = HEAP32[i64toi32_i32$0 >> 2] | 0;
      i64toi32_i32$1 = i64toi32_i32$4 >> 31 | 0;
      $1500 = i64toi32_i32$4;
      $1500$hi = i64toi32_i32$1;
      i64toi32_i32$0 = $2;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 36 | 0) >> 2] | 0;
      i64toi32_i32$4 = i64toi32_i32$1 >> 31 | 0;
      $1502 = i64toi32_i32$1;
      $1502$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $1500$hi;
      i64toi32_i32$1 = $1502$hi;
      i64toi32_i32$1 = __wasm_i64_mul($1500 | 0, i64toi32_i32$4 | 0, $1502 | 0, i64toi32_i32$1 | 0) | 0;
      i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
      $1503 = i64toi32_i32$1;
      $1503$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $1497$hi;
      i64toi32_i32$0 = i64toi32_i32$5;
      i64toi32_i32$1 = $1503$hi;
      i64toi32_i32$3 = $1503;
      i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
      i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $1504$hi = i64toi32_i32$5;
      i64toi32_i32$4 = $3 + -36 | 0;
      i64toi32_i32$5 = HEAP32[i64toi32_i32$4 >> 2] | 0;
      i64toi32_i32$0 = i64toi32_i32$5 >> 31 | 0;
      $1507 = i64toi32_i32$5;
      $1507$hi = i64toi32_i32$0;
      i64toi32_i32$4 = $2;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 32 | 0) >> 2] | 0;
      i64toi32_i32$5 = i64toi32_i32$0 >> 31 | 0;
      $1509 = i64toi32_i32$0;
      $1509$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $1507$hi;
      i64toi32_i32$0 = $1509$hi;
      i64toi32_i32$0 = __wasm_i64_mul($1507 | 0, i64toi32_i32$5 | 0, $1509 | 0, i64toi32_i32$0 | 0) | 0;
      i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
      $1510 = i64toi32_i32$0;
      $1510$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $1504$hi;
      i64toi32_i32$4 = i64toi32_i32$2;
      i64toi32_i32$0 = $1510$hi;
      i64toi32_i32$3 = $1510;
      i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
      i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
      }
      $1511$hi = i64toi32_i32$2;
      i64toi32_i32$5 = $3 + -32 | 0;
      i64toi32_i32$2 = HEAP32[i64toi32_i32$5 >> 2] | 0;
      i64toi32_i32$4 = i64toi32_i32$2 >> 31 | 0;
      $1514 = i64toi32_i32$2;
      $1514$hi = i64toi32_i32$4;
      i64toi32_i32$5 = $2;
      i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 28 | 0) >> 2] | 0;
      i64toi32_i32$2 = i64toi32_i32$4 >> 31 | 0;
      $1516 = i64toi32_i32$4;
      $1516$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $1514$hi;
      i64toi32_i32$4 = $1516$hi;
      i64toi32_i32$4 = __wasm_i64_mul($1514 | 0, i64toi32_i32$2 | 0, $1516 | 0, i64toi32_i32$4 | 0) | 0;
      i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
      $1517 = i64toi32_i32$4;
      $1517$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $1511$hi;
      i64toi32_i32$5 = i64toi32_i32$1;
      i64toi32_i32$4 = $1517$hi;
      i64toi32_i32$3 = $1517;
      i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
      i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
      if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
      }
      $1518$hi = i64toi32_i32$1;
      i64toi32_i32$2 = $3 + -28 | 0;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$5 = i64toi32_i32$1 >> 31 | 0;
      $1521 = i64toi32_i32$1;
      $1521$hi = i64toi32_i32$5;
      i64toi32_i32$2 = $2;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$2 + 24 | 0) >> 2] | 0;
      i64toi32_i32$1 = i64toi32_i32$5 >> 31 | 0;
      $1523 = i64toi32_i32$5;
      $1523$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $1521$hi;
      i64toi32_i32$5 = $1523$hi;
      i64toi32_i32$5 = __wasm_i64_mul($1521 | 0, i64toi32_i32$1 | 0, $1523 | 0, i64toi32_i32$5 | 0) | 0;
      i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
      $1524 = i64toi32_i32$5;
      $1524$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $1518$hi;
      i64toi32_i32$2 = i64toi32_i32$0;
      i64toi32_i32$5 = $1524$hi;
      i64toi32_i32$3 = $1524;
      i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
      i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
      }
      $1525$hi = i64toi32_i32$0;
      i64toi32_i32$1 = $3 + -24 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$1 >> 2] | 0;
      i64toi32_i32$2 = i64toi32_i32$0 >> 31 | 0;
      $1528 = i64toi32_i32$0;
      $1528$hi = i64toi32_i32$2;
      i64toi32_i32$1 = $2;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 20 | 0) >> 2] | 0;
      i64toi32_i32$0 = i64toi32_i32$2 >> 31 | 0;
      $1530 = i64toi32_i32$2;
      $1530$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $1528$hi;
      i64toi32_i32$2 = $1530$hi;
      i64toi32_i32$2 = __wasm_i64_mul($1528 | 0, i64toi32_i32$0 | 0, $1530 | 0, i64toi32_i32$2 | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
      $1531 = i64toi32_i32$2;
      $1531$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $1525$hi;
      i64toi32_i32$1 = i64toi32_i32$4;
      i64toi32_i32$2 = $1531$hi;
      i64toi32_i32$3 = $1531;
      i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
      i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $1532$hi = i64toi32_i32$4;
      i64toi32_i32$0 = $3 + -20 | 0;
      i64toi32_i32$4 = HEAP32[i64toi32_i32$0 >> 2] | 0;
      i64toi32_i32$1 = i64toi32_i32$4 >> 31 | 0;
      $1535 = i64toi32_i32$4;
      $1535$hi = i64toi32_i32$1;
      i64toi32_i32$0 = $2;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 16 | 0) >> 2] | 0;
      i64toi32_i32$4 = i64toi32_i32$1 >> 31 | 0;
      $1537 = i64toi32_i32$1;
      $1537$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $1535$hi;
      i64toi32_i32$1 = $1537$hi;
      i64toi32_i32$1 = __wasm_i64_mul($1535 | 0, i64toi32_i32$4 | 0, $1537 | 0, i64toi32_i32$1 | 0) | 0;
      i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
      $1538 = i64toi32_i32$1;
      $1538$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $1532$hi;
      i64toi32_i32$0 = i64toi32_i32$5;
      i64toi32_i32$1 = $1538$hi;
      i64toi32_i32$3 = $1538;
      i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
      i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $1539$hi = i64toi32_i32$5;
      i64toi32_i32$4 = $3 + -16 | 0;
      i64toi32_i32$5 = HEAP32[i64toi32_i32$4 >> 2] | 0;
      i64toi32_i32$0 = i64toi32_i32$5 >> 31 | 0;
      $1542 = i64toi32_i32$5;
      $1542$hi = i64toi32_i32$0;
      i64toi32_i32$4 = $2;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 12 | 0) >> 2] | 0;
      i64toi32_i32$5 = i64toi32_i32$0 >> 31 | 0;
      $1544 = i64toi32_i32$0;
      $1544$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $1542$hi;
      i64toi32_i32$0 = $1544$hi;
      i64toi32_i32$0 = __wasm_i64_mul($1542 | 0, i64toi32_i32$5 | 0, $1544 | 0, i64toi32_i32$0 | 0) | 0;
      i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
      $1545 = i64toi32_i32$0;
      $1545$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $1539$hi;
      i64toi32_i32$4 = i64toi32_i32$2;
      i64toi32_i32$0 = $1545$hi;
      i64toi32_i32$3 = $1545;
      i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
      i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
      }
      $1546$hi = i64toi32_i32$2;
      i64toi32_i32$5 = $3 + -12 | 0;
      i64toi32_i32$2 = HEAP32[i64toi32_i32$5 >> 2] | 0;
      i64toi32_i32$4 = i64toi32_i32$2 >> 31 | 0;
      $1549 = i64toi32_i32$2;
      $1549$hi = i64toi32_i32$4;
      i64toi32_i32$5 = $2;
      i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 8 | 0) >> 2] | 0;
      i64toi32_i32$2 = i64toi32_i32$4 >> 31 | 0;
      $1551 = i64toi32_i32$4;
      $1551$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $1549$hi;
      i64toi32_i32$4 = $1551$hi;
      i64toi32_i32$4 = __wasm_i64_mul($1549 | 0, i64toi32_i32$2 | 0, $1551 | 0, i64toi32_i32$4 | 0) | 0;
      i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
      $1552 = i64toi32_i32$4;
      $1552$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $1546$hi;
      i64toi32_i32$5 = i64toi32_i32$1;
      i64toi32_i32$4 = $1552$hi;
      i64toi32_i32$3 = $1552;
      i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
      i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
      if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
      }
      $1553$hi = i64toi32_i32$1;
      i64toi32_i32$2 = $3 + -8 | 0;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$5 = i64toi32_i32$1 >> 31 | 0;
      $1556 = i64toi32_i32$1;
      $1556$hi = i64toi32_i32$5;
      i64toi32_i32$2 = $2;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      i64toi32_i32$1 = i64toi32_i32$5 >> 31 | 0;
      $1558 = i64toi32_i32$5;
      $1558$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $1556$hi;
      i64toi32_i32$5 = $1558$hi;
      i64toi32_i32$5 = __wasm_i64_mul($1556 | 0, i64toi32_i32$1 | 0, $1558 | 0, i64toi32_i32$5 | 0) | 0;
      i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
      $1559 = i64toi32_i32$5;
      $1559$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $1553$hi;
      i64toi32_i32$2 = i64toi32_i32$0;
      i64toi32_i32$5 = $1559$hi;
      i64toi32_i32$3 = $1559;
      i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
      i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
      }
      $1560$hi = i64toi32_i32$0;
      i64toi32_i32$1 = $3 + -4 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$1 >> 2] | 0;
      i64toi32_i32$2 = i64toi32_i32$0 >> 31 | 0;
      $1563 = i64toi32_i32$0;
      $1563$hi = i64toi32_i32$2;
      i64toi32_i32$1 = $2;
      i64toi32_i32$2 = HEAP32[i64toi32_i32$1 >> 2] | 0;
      i64toi32_i32$0 = i64toi32_i32$2 >> 31 | 0;
      $1565 = i64toi32_i32$2;
      $1565$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $1563$hi;
      i64toi32_i32$2 = $1565$hi;
      i64toi32_i32$2 = __wasm_i64_mul($1563 | 0, i64toi32_i32$0 | 0, $1565 | 0, i64toi32_i32$2 | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
      $1566 = i64toi32_i32$2;
      $1566$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $1560$hi;
      i64toi32_i32$1 = i64toi32_i32$4;
      i64toi32_i32$2 = $1566$hi;
      i64toi32_i32$3 = $1566;
      i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
      i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $8 = i64toi32_i32$5;
      $8$hi = i64toi32_i32$4;
      break;
     default:
      break label$30;
     };
    }
    $3 = $6 << 2 | 0;
    $1572 = $5 + $3 | 0;
    $1576 = HEAP32[($0 + $3 | 0) >> 2] | 0;
    i64toi32_i32$4 = $8$hi;
    i64toi32_i32$4 = $7$hi;
    i64toi32_i32$4 = $8$hi;
    i64toi32_i32$0 = $8;
    i64toi32_i32$1 = $7$hi;
    i64toi32_i32$3 = $7;
    i64toi32_i32$2 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$4 >> 31 | 0;
     $597 = i64toi32_i32$4 >> i64toi32_i32$2 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$4 >> i64toi32_i32$2 | 0;
     $597 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$2 | 0) | 0;
    }
    HEAP32[$1572 >> 2] = $1576 - $597 | 0;
    $6 = $6 + 1 | 0;
    if (($6 | 0) != ($1 | 0)) {
     continue label$29
    }
    break label$29;
   };
  }
 }
 
 function FLAC__lpc_restore_signal($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var $6 = 0, $8 = 0, $7 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $28 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $29 = 0, $30 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     if ($3 >>> 0 < 13 >>> 0) {
      break label$3
     }
     $6 = 0;
     if (($1 | 0) <= (0 | 0)) {
      break label$1
     }
     $7 = $3 + -13 | 0;
     break label$2;
    }
    label$4 : {
     if ($3 >>> 0 < 9 >>> 0) {
      break label$4
     }
     label$5 : {
      if ($3 >>> 0 < 11 >>> 0) {
       break label$5
      }
      label$6 : {
       if (($3 | 0) == (12 | 0)) {
        break label$6
       }
       if (($1 | 0) < (1 | 0)) {
        break label$1
       }
       $6 = HEAP32[($5 + -4 | 0) >> 2] | 0;
       $8 = HEAP32[($5 + -8 | 0) >> 2] | 0;
       $7 = HEAP32[($5 + -12 | 0) >> 2] | 0;
       $9 = HEAP32[($5 + -16 | 0) >> 2] | 0;
       $10 = HEAP32[($5 + -20 | 0) >> 2] | 0;
       $11 = HEAP32[($5 + -24 | 0) >> 2] | 0;
       $12 = HEAP32[($5 + -28 | 0) >> 2] | 0;
       $13 = HEAP32[($5 + -32 | 0) >> 2] | 0;
       $14 = HEAP32[($5 + -36 | 0) >> 2] | 0;
       $15 = HEAP32[($5 + -40 | 0) >> 2] | 0;
       $16 = HEAP32[($5 + -44 | 0) >> 2] | 0;
       $17 = HEAP32[$2 >> 2] | 0;
       $18 = HEAP32[($2 + 4 | 0) >> 2] | 0;
       $19 = HEAP32[($2 + 8 | 0) >> 2] | 0;
       $20 = HEAP32[($2 + 12 | 0) >> 2] | 0;
       $21 = HEAP32[($2 + 16 | 0) >> 2] | 0;
       $22 = HEAP32[($2 + 20 | 0) >> 2] | 0;
       $23 = HEAP32[($2 + 24 | 0) >> 2] | 0;
       $24 = HEAP32[($2 + 28 | 0) >> 2] | 0;
       $25 = HEAP32[($2 + 32 | 0) >> 2] | 0;
       $26 = HEAP32[($2 + 36 | 0) >> 2] | 0;
       $27 = HEAP32[($2 + 40 | 0) >> 2] | 0;
       $3 = 0;
       label$7 : while (1) {
        $2 = $3 << 2 | 0;
        $28 = $15;
        $15 = $14;
        $14 = $13;
        $13 = $12;
        $12 = $11;
        $11 = $10;
        $10 = $9;
        $9 = $7;
        $7 = $8;
        $8 = $6;
        $6 = (((((((((((Math_imul($28, $26) + Math_imul($16, $27) | 0) + Math_imul($15, $25) | 0) + Math_imul($14, $24) | 0) + Math_imul($13, $23) | 0) + Math_imul($12, $22) | 0) + Math_imul($11, $21) | 0) + Math_imul($10, $20) | 0) + Math_imul($9, $19) | 0) + Math_imul($7, $18) | 0) + Math_imul($6, $17) | 0) >> $4 | 0) + (HEAP32[($0 + $2 | 0) >> 2] | 0) | 0;
        HEAP32[($5 + $2 | 0) >> 2] = $6;
        $16 = $28;
        $3 = $3 + 1 | 0;
        if (($3 | 0) != ($1 | 0)) {
         continue label$7
        }
        break label$1;
       };
      }
      if (($1 | 0) < (1 | 0)) {
       break label$1
      }
      $6 = HEAP32[($5 + -4 | 0) >> 2] | 0;
      $8 = HEAP32[($5 + -8 | 0) >> 2] | 0;
      $7 = HEAP32[($5 + -12 | 0) >> 2] | 0;
      $9 = HEAP32[($5 + -16 | 0) >> 2] | 0;
      $10 = HEAP32[($5 + -20 | 0) >> 2] | 0;
      $11 = HEAP32[($5 + -24 | 0) >> 2] | 0;
      $12 = HEAP32[($5 + -28 | 0) >> 2] | 0;
      $13 = HEAP32[($5 + -32 | 0) >> 2] | 0;
      $14 = HEAP32[($5 + -36 | 0) >> 2] | 0;
      $15 = HEAP32[($5 + -40 | 0) >> 2] | 0;
      $16 = HEAP32[($5 + -44 | 0) >> 2] | 0;
      $28 = HEAP32[($5 + -48 | 0) >> 2] | 0;
      $18 = HEAP32[$2 >> 2] | 0;
      $19 = HEAP32[($2 + 4 | 0) >> 2] | 0;
      $20 = HEAP32[($2 + 8 | 0) >> 2] | 0;
      $21 = HEAP32[($2 + 12 | 0) >> 2] | 0;
      $22 = HEAP32[($2 + 16 | 0) >> 2] | 0;
      $23 = HEAP32[($2 + 20 | 0) >> 2] | 0;
      $24 = HEAP32[($2 + 24 | 0) >> 2] | 0;
      $25 = HEAP32[($2 + 28 | 0) >> 2] | 0;
      $26 = HEAP32[($2 + 32 | 0) >> 2] | 0;
      $27 = HEAP32[($2 + 36 | 0) >> 2] | 0;
      $29 = HEAP32[($2 + 40 | 0) >> 2] | 0;
      $30 = HEAP32[($2 + 44 | 0) >> 2] | 0;
      $3 = 0;
      label$8 : while (1) {
       $2 = $3 << 2 | 0;
       $17 = $16;
       $16 = $15;
       $15 = $14;
       $14 = $13;
       $13 = $12;
       $12 = $11;
       $11 = $10;
       $10 = $9;
       $9 = $7;
       $7 = $8;
       $8 = $6;
       $6 = ((((((((((((Math_imul($17, $29) + Math_imul($28, $30) | 0) + Math_imul($16, $27) | 0) + Math_imul($15, $26) | 0) + Math_imul($14, $25) | 0) + Math_imul($13, $24) | 0) + Math_imul($12, $23) | 0) + Math_imul($11, $22) | 0) + Math_imul($10, $21) | 0) + Math_imul($9, $20) | 0) + Math_imul($7, $19) | 0) + Math_imul($6, $18) | 0) >> $4 | 0) + (HEAP32[($0 + $2 | 0) >> 2] | 0) | 0;
       HEAP32[($5 + $2 | 0) >> 2] = $6;
       $28 = $17;
       $3 = $3 + 1 | 0;
       if (($3 | 0) != ($1 | 0)) {
        continue label$8
       }
       break label$1;
      };
     }
     label$9 : {
      if (($3 | 0) == (10 | 0)) {
       break label$9
      }
      if (($1 | 0) < (1 | 0)) {
       break label$1
      }
      $6 = HEAP32[($5 + -4 | 0) >> 2] | 0;
      $8 = HEAP32[($5 + -8 | 0) >> 2] | 0;
      $7 = HEAP32[($5 + -12 | 0) >> 2] | 0;
      $9 = HEAP32[($5 + -16 | 0) >> 2] | 0;
      $10 = HEAP32[($5 + -20 | 0) >> 2] | 0;
      $11 = HEAP32[($5 + -24 | 0) >> 2] | 0;
      $12 = HEAP32[($5 + -28 | 0) >> 2] | 0;
      $13 = HEAP32[($5 + -32 | 0) >> 2] | 0;
      $14 = HEAP32[($5 + -36 | 0) >> 2] | 0;
      $16 = HEAP32[$2 >> 2] | 0;
      $28 = HEAP32[($2 + 4 | 0) >> 2] | 0;
      $17 = HEAP32[($2 + 8 | 0) >> 2] | 0;
      $18 = HEAP32[($2 + 12 | 0) >> 2] | 0;
      $19 = HEAP32[($2 + 16 | 0) >> 2] | 0;
      $20 = HEAP32[($2 + 20 | 0) >> 2] | 0;
      $21 = HEAP32[($2 + 24 | 0) >> 2] | 0;
      $22 = HEAP32[($2 + 28 | 0) >> 2] | 0;
      $23 = HEAP32[($2 + 32 | 0) >> 2] | 0;
      $3 = 0;
      label$10 : while (1) {
       $2 = $3 << 2 | 0;
       $15 = $13;
       $13 = $12;
       $12 = $11;
       $11 = $10;
       $10 = $9;
       $9 = $7;
       $7 = $8;
       $8 = $6;
       $6 = (((((((((Math_imul($15, $22) + Math_imul($14, $23) | 0) + Math_imul($13, $21) | 0) + Math_imul($12, $20) | 0) + Math_imul($11, $19) | 0) + Math_imul($10, $18) | 0) + Math_imul($9, $17) | 0) + Math_imul($7, $28) | 0) + Math_imul($6, $16) | 0) >> $4 | 0) + (HEAP32[($0 + $2 | 0) >> 2] | 0) | 0;
       HEAP32[($5 + $2 | 0) >> 2] = $6;
       $14 = $15;
       $3 = $3 + 1 | 0;
       if (($3 | 0) != ($1 | 0)) {
        continue label$10
       }
       break label$1;
      };
     }
     if (($1 | 0) < (1 | 0)) {
      break label$1
     }
     $6 = HEAP32[($5 + -4 | 0) >> 2] | 0;
     $8 = HEAP32[($5 + -8 | 0) >> 2] | 0;
     $7 = HEAP32[($5 + -12 | 0) >> 2] | 0;
     $9 = HEAP32[($5 + -16 | 0) >> 2] | 0;
     $10 = HEAP32[($5 + -20 | 0) >> 2] | 0;
     $11 = HEAP32[($5 + -24 | 0) >> 2] | 0;
     $12 = HEAP32[($5 + -28 | 0) >> 2] | 0;
     $13 = HEAP32[($5 + -32 | 0) >> 2] | 0;
     $14 = HEAP32[($5 + -36 | 0) >> 2] | 0;
     $15 = HEAP32[($5 + -40 | 0) >> 2] | 0;
     $28 = HEAP32[$2 >> 2] | 0;
     $17 = HEAP32[($2 + 4 | 0) >> 2] | 0;
     $18 = HEAP32[($2 + 8 | 0) >> 2] | 0;
     $19 = HEAP32[($2 + 12 | 0) >> 2] | 0;
     $20 = HEAP32[($2 + 16 | 0) >> 2] | 0;
     $21 = HEAP32[($2 + 20 | 0) >> 2] | 0;
     $22 = HEAP32[($2 + 24 | 0) >> 2] | 0;
     $23 = HEAP32[($2 + 28 | 0) >> 2] | 0;
     $24 = HEAP32[($2 + 32 | 0) >> 2] | 0;
     $25 = HEAP32[($2 + 36 | 0) >> 2] | 0;
     $3 = 0;
     label$11 : while (1) {
      $2 = $3 << 2 | 0;
      $16 = $14;
      $14 = $13;
      $13 = $12;
      $12 = $11;
      $11 = $10;
      $10 = $9;
      $9 = $7;
      $7 = $8;
      $8 = $6;
      $6 = ((((((((((Math_imul($16, $24) + Math_imul($15, $25) | 0) + Math_imul($14, $23) | 0) + Math_imul($13, $22) | 0) + Math_imul($12, $21) | 0) + Math_imul($11, $20) | 0) + Math_imul($10, $19) | 0) + Math_imul($9, $18) | 0) + Math_imul($7, $17) | 0) + Math_imul($6, $28) | 0) >> $4 | 0) + (HEAP32[($0 + $2 | 0) >> 2] | 0) | 0;
      HEAP32[($5 + $2 | 0) >> 2] = $6;
      $15 = $16;
      $3 = $3 + 1 | 0;
      if (($3 | 0) != ($1 | 0)) {
       continue label$11
      }
      break label$1;
     };
    }
    label$12 : {
     if ($3 >>> 0 < 5 >>> 0) {
      break label$12
     }
     label$13 : {
      if ($3 >>> 0 < 7 >>> 0) {
       break label$13
      }
      label$14 : {
       if (($3 | 0) == (8 | 0)) {
        break label$14
       }
       if (($1 | 0) < (1 | 0)) {
        break label$1
       }
       $6 = HEAP32[($5 + -4 | 0) >> 2] | 0;
       $8 = HEAP32[($5 + -8 | 0) >> 2] | 0;
       $7 = HEAP32[($5 + -12 | 0) >> 2] | 0;
       $9 = HEAP32[($5 + -16 | 0) >> 2] | 0;
       $10 = HEAP32[($5 + -20 | 0) >> 2] | 0;
       $11 = HEAP32[($5 + -24 | 0) >> 2] | 0;
       $12 = HEAP32[($5 + -28 | 0) >> 2] | 0;
       $14 = HEAP32[$2 >> 2] | 0;
       $15 = HEAP32[($2 + 4 | 0) >> 2] | 0;
       $16 = HEAP32[($2 + 8 | 0) >> 2] | 0;
       $28 = HEAP32[($2 + 12 | 0) >> 2] | 0;
       $17 = HEAP32[($2 + 16 | 0) >> 2] | 0;
       $18 = HEAP32[($2 + 20 | 0) >> 2] | 0;
       $19 = HEAP32[($2 + 24 | 0) >> 2] | 0;
       $3 = 0;
       label$15 : while (1) {
        $2 = $3 << 2 | 0;
        $13 = $11;
        $11 = $10;
        $10 = $9;
        $9 = $7;
        $7 = $8;
        $8 = $6;
        $6 = (((((((Math_imul($13, $18) + Math_imul($12, $19) | 0) + Math_imul($11, $17) | 0) + Math_imul($10, $28) | 0) + Math_imul($9, $16) | 0) + Math_imul($7, $15) | 0) + Math_imul($6, $14) | 0) >> $4 | 0) + (HEAP32[($0 + $2 | 0) >> 2] | 0) | 0;
        HEAP32[($5 + $2 | 0) >> 2] = $6;
        $12 = $13;
        $3 = $3 + 1 | 0;
        if (($3 | 0) != ($1 | 0)) {
         continue label$15
        }
        break label$1;
       };
      }
      if (($1 | 0) < (1 | 0)) {
       break label$1
      }
      $6 = HEAP32[($5 + -4 | 0) >> 2] | 0;
      $8 = HEAP32[($5 + -8 | 0) >> 2] | 0;
      $7 = HEAP32[($5 + -12 | 0) >> 2] | 0;
      $9 = HEAP32[($5 + -16 | 0) >> 2] | 0;
      $10 = HEAP32[($5 + -20 | 0) >> 2] | 0;
      $11 = HEAP32[($5 + -24 | 0) >> 2] | 0;
      $12 = HEAP32[($5 + -28 | 0) >> 2] | 0;
      $13 = HEAP32[($5 + -32 | 0) >> 2] | 0;
      $15 = HEAP32[$2 >> 2] | 0;
      $16 = HEAP32[($2 + 4 | 0) >> 2] | 0;
      $28 = HEAP32[($2 + 8 | 0) >> 2] | 0;
      $17 = HEAP32[($2 + 12 | 0) >> 2] | 0;
      $18 = HEAP32[($2 + 16 | 0) >> 2] | 0;
      $19 = HEAP32[($2 + 20 | 0) >> 2] | 0;
      $20 = HEAP32[($2 + 24 | 0) >> 2] | 0;
      $21 = HEAP32[($2 + 28 | 0) >> 2] | 0;
      $3 = 0;
      label$16 : while (1) {
       $2 = $3 << 2 | 0;
       $14 = $12;
       $12 = $11;
       $11 = $10;
       $10 = $9;
       $9 = $7;
       $7 = $8;
       $8 = $6;
       $6 = ((((((((Math_imul($14, $20) + Math_imul($13, $21) | 0) + Math_imul($12, $19) | 0) + Math_imul($11, $18) | 0) + Math_imul($10, $17) | 0) + Math_imul($9, $28) | 0) + Math_imul($7, $16) | 0) + Math_imul($6, $15) | 0) >> $4 | 0) + (HEAP32[($0 + $2 | 0) >> 2] | 0) | 0;
       HEAP32[($5 + $2 | 0) >> 2] = $6;
       $13 = $14;
       $3 = $3 + 1 | 0;
       if (($3 | 0) != ($1 | 0)) {
        continue label$16
       }
       break label$1;
      };
     }
     label$17 : {
      if (($3 | 0) == (6 | 0)) {
       break label$17
      }
      if (($1 | 0) < (1 | 0)) {
       break label$1
      }
      $6 = HEAP32[($5 + -4 | 0) >> 2] | 0;
      $8 = HEAP32[($5 + -8 | 0) >> 2] | 0;
      $7 = HEAP32[($5 + -12 | 0) >> 2] | 0;
      $9 = HEAP32[($5 + -16 | 0) >> 2] | 0;
      $10 = HEAP32[($5 + -20 | 0) >> 2] | 0;
      $12 = HEAP32[$2 >> 2] | 0;
      $13 = HEAP32[($2 + 4 | 0) >> 2] | 0;
      $14 = HEAP32[($2 + 8 | 0) >> 2] | 0;
      $15 = HEAP32[($2 + 12 | 0) >> 2] | 0;
      $16 = HEAP32[($2 + 16 | 0) >> 2] | 0;
      $3 = 0;
      label$18 : while (1) {
       $2 = $3 << 2 | 0;
       $11 = $9;
       $9 = $7;
       $7 = $8;
       $8 = $6;
       $6 = (((((Math_imul($11, $15) + Math_imul($10, $16) | 0) + Math_imul($9, $14) | 0) + Math_imul($7, $13) | 0) + Math_imul($6, $12) | 0) >> $4 | 0) + (HEAP32[($0 + $2 | 0) >> 2] | 0) | 0;
       HEAP32[($5 + $2 | 0) >> 2] = $6;
       $10 = $11;
       $3 = $3 + 1 | 0;
       if (($3 | 0) != ($1 | 0)) {
        continue label$18
       }
       break label$1;
      };
     }
     if (($1 | 0) < (1 | 0)) {
      break label$1
     }
     $6 = HEAP32[($5 + -4 | 0) >> 2] | 0;
     $8 = HEAP32[($5 + -8 | 0) >> 2] | 0;
     $7 = HEAP32[($5 + -12 | 0) >> 2] | 0;
     $9 = HEAP32[($5 + -16 | 0) >> 2] | 0;
     $10 = HEAP32[($5 + -20 | 0) >> 2] | 0;
     $11 = HEAP32[($5 + -24 | 0) >> 2] | 0;
     $13 = HEAP32[$2 >> 2] | 0;
     $14 = HEAP32[($2 + 4 | 0) >> 2] | 0;
     $15 = HEAP32[($2 + 8 | 0) >> 2] | 0;
     $16 = HEAP32[($2 + 12 | 0) >> 2] | 0;
     $28 = HEAP32[($2 + 16 | 0) >> 2] | 0;
     $17 = HEAP32[($2 + 20 | 0) >> 2] | 0;
     $3 = 0;
     label$19 : while (1) {
      $2 = $3 << 2 | 0;
      $12 = $10;
      $10 = $9;
      $9 = $7;
      $7 = $8;
      $8 = $6;
      $6 = ((((((Math_imul($12, $28) + Math_imul($11, $17) | 0) + Math_imul($10, $16) | 0) + Math_imul($9, $15) | 0) + Math_imul($7, $14) | 0) + Math_imul($6, $13) | 0) >> $4 | 0) + (HEAP32[($0 + $2 | 0) >> 2] | 0) | 0;
      HEAP32[($5 + $2 | 0) >> 2] = $6;
      $11 = $12;
      $3 = $3 + 1 | 0;
      if (($3 | 0) != ($1 | 0)) {
       continue label$19
      }
      break label$1;
     };
    }
    label$20 : {
     if ($3 >>> 0 < 3 >>> 0) {
      break label$20
     }
     label$21 : {
      label$22 : {
       label$23 : {
        if (($3 | 0) == (4 | 0)) {
         break label$23
        }
        if (($1 | 0) < (1 | 0)) {
         break label$1
        }
        $14 = $1 & 1 | 0;
        $7 = HEAP32[($5 + -4 | 0) >> 2] | 0;
        $6 = HEAP32[($5 + -8 | 0) >> 2] | 0;
        $9 = HEAP32[($5 + -12 | 0) >> 2] | 0;
        $10 = HEAP32[$2 >> 2] | 0;
        $11 = HEAP32[($2 + 4 | 0) >> 2] | 0;
        $12 = HEAP32[($2 + 8 | 0) >> 2] | 0;
        $3 = 0;
        if (($1 | 0) != (1 | 0)) {
         break label$22
        }
        $2 = $6;
        $8 = $9;
        break label$21;
       }
       if (($1 | 0) < (1 | 0)) {
        break label$1
       }
       $16 = $1 & 1 | 0;
       $9 = HEAP32[($5 + -4 | 0) >> 2] | 0;
       $6 = HEAP32[($5 + -8 | 0) >> 2] | 0;
       $8 = HEAP32[($5 + -12 | 0) >> 2] | 0;
       $10 = HEAP32[($5 + -16 | 0) >> 2] | 0;
       $11 = HEAP32[$2 >> 2] | 0;
       $12 = HEAP32[($2 + 4 | 0) >> 2] | 0;
       $13 = HEAP32[($2 + 8 | 0) >> 2] | 0;
       $14 = HEAP32[($2 + 12 | 0) >> 2] | 0;
       $3 = 0;
       label$24 : {
        label$25 : {
         if (($1 | 0) != (1 | 0)) {
          break label$25
         }
         $2 = $8;
         $1 = $10;
         break label$24;
        }
        $15 = $1 & -2 | 0;
        $3 = 0;
        label$26 : while (1) {
         $7 = $3 << 2 | 0;
         $1 = $6;
         $2 = $9;
         $6 = ((((Math_imul($8, $13) + Math_imul($10, $14) | 0) + Math_imul($6, $12) | 0) + Math_imul($2, $11) | 0) >> $4 | 0) + (HEAP32[($0 + $7 | 0) >> 2] | 0) | 0;
         HEAP32[($5 + $7 | 0) >> 2] = $6;
         $7 = $7 | 4 | 0;
         $9 = ((((Math_imul($1, $13) + Math_imul($8, $14) | 0) + Math_imul($2, $12) | 0) + Math_imul($6, $11) | 0) >> $4 | 0) + (HEAP32[($0 + $7 | 0) >> 2] | 0) | 0;
         HEAP32[($5 + $7 | 0) >> 2] = $9;
         $3 = $3 + 2 | 0;
         $8 = $2;
         $10 = $1;
         $15 = $15 + -2 | 0;
         if ($15) {
          continue label$26
         }
         break label$26;
        };
       }
       if (!$16) {
        break label$1
       }
       $3 = $3 << 2 | 0;
       HEAP32[($5 + $3 | 0) >> 2] = ((((Math_imul($2, $13) + Math_imul($1, $14) | 0) + Math_imul($6, $12) | 0) + Math_imul($9, $11) | 0) >> $4 | 0) + (HEAP32[($0 + $3 | 0) >> 2] | 0) | 0;
       return;
      }
      $13 = $1 & -2 | 0;
      $3 = 0;
      label$27 : while (1) {
       $1 = $3 << 2 | 0;
       $8 = $7;
       $2 = (((Math_imul($6, $11) + Math_imul($9, $12) | 0) + Math_imul($8, $10) | 0) >> $4 | 0) + (HEAP32[($0 + $1 | 0) >> 2] | 0) | 0;
       HEAP32[($5 + $1 | 0) >> 2] = $2;
       $1 = $1 | 4 | 0;
       $7 = (((Math_imul($8, $11) + Math_imul($6, $12) | 0) + Math_imul($2, $10) | 0) >> $4 | 0) + (HEAP32[($0 + $1 | 0) >> 2] | 0) | 0;
       HEAP32[($5 + $1 | 0) >> 2] = $7;
       $3 = $3 + 2 | 0;
       $6 = $2;
       $9 = $8;
       $13 = $13 + -2 | 0;
       if ($13) {
        continue label$27
       }
       break label$27;
      };
     }
     if (!$14) {
      break label$1
     }
     $3 = $3 << 2 | 0;
     HEAP32[($5 + $3 | 0) >> 2] = (((Math_imul($2, $11) + Math_imul($8, $12) | 0) + Math_imul($7, $10) | 0) >> $4 | 0) + (HEAP32[($0 + $3 | 0) >> 2] | 0) | 0;
     return;
    }
    label$28 : {
     if (($3 | 0) == (2 | 0)) {
      break label$28
     }
     if (($1 | 0) < (1 | 0)) {
      break label$1
     }
     $7 = $1 & 1 | 0;
     $6 = HEAP32[($5 + -4 | 0) >> 2] | 0;
     $8 = HEAP32[$2 >> 2] | 0;
     $3 = 0;
     label$29 : {
      if (($1 | 0) == (1 | 0)) {
       break label$29
      }
      $1 = $1 & -2 | 0;
      $3 = 0;
      label$30 : while (1) {
       $2 = $3 << 2 | 0;
       $6 = (Math_imul($6, $8) >> $4 | 0) + (HEAP32[($0 + $2 | 0) >> 2] | 0) | 0;
       HEAP32[($5 + $2 | 0) >> 2] = $6;
       $2 = $2 | 4 | 0;
       $6 = (Math_imul($6, $8) >> $4 | 0) + (HEAP32[($0 + $2 | 0) >> 2] | 0) | 0;
       HEAP32[($5 + $2 | 0) >> 2] = $6;
       $3 = $3 + 2 | 0;
       $1 = $1 + -2 | 0;
       if ($1) {
        continue label$30
       }
       break label$30;
      };
     }
     if (!$7) {
      break label$1
     }
     $3 = $3 << 2 | 0;
     HEAP32[($5 + $3 | 0) >> 2] = (Math_imul($6, $8) >> $4 | 0) + (HEAP32[($0 + $3 | 0) >> 2] | 0) | 0;
     break label$1;
    }
    if (($1 | 0) < (1 | 0)) {
     break label$1
    }
    $10 = $1 & 1 | 0;
    $6 = HEAP32[($5 + -4 | 0) >> 2] | 0;
    $8 = HEAP32[($5 + -8 | 0) >> 2] | 0;
    $7 = HEAP32[$2 >> 2] | 0;
    $9 = HEAP32[($2 + 4 | 0) >> 2] | 0;
    $3 = 0;
    label$31 : {
     if (($1 | 0) == (1 | 0)) {
      break label$31
     }
     $1 = $1 & -2 | 0;
     $3 = 0;
     label$32 : while (1) {
      $2 = $3 << 2 | 0;
      $8 = ((Math_imul($6, $7) + Math_imul($8, $9) | 0) >> $4 | 0) + (HEAP32[($0 + $2 | 0) >> 2] | 0) | 0;
      HEAP32[($5 + $2 | 0) >> 2] = $8;
      $2 = $2 | 4 | 0;
      $6 = ((Math_imul($8, $7) + Math_imul($6, $9) | 0) >> $4 | 0) + (HEAP32[($0 + $2 | 0) >> 2] | 0) | 0;
      HEAP32[($5 + $2 | 0) >> 2] = $6;
      $3 = $3 + 2 | 0;
      $1 = $1 + -2 | 0;
      if ($1) {
       continue label$32
      }
      break label$32;
     };
    }
    if (!$10) {
     break label$1
    }
    $3 = $3 << 2 | 0;
    HEAP32[($5 + $3 | 0) >> 2] = ((Math_imul($6, $7) + Math_imul($8, $9) | 0) >> $4 | 0) + (HEAP32[($0 + $3 | 0) >> 2] | 0) | 0;
    return;
   }
   label$33 : while (1) {
    $3 = 0;
    label$34 : {
     switch ($7 | 0) {
     case 19:
      $3 = Math_imul(HEAP32[((($6 << 2 | 0) + $5 | 0) + -128 | 0) >> 2] | 0, HEAP32[($2 + 124 | 0) >> 2] | 0);
     case 18:
      $3 = Math_imul(HEAP32[((($6 << 2 | 0) + $5 | 0) + -124 | 0) >> 2] | 0, HEAP32[($2 + 120 | 0) >> 2] | 0) + $3 | 0;
     case 17:
      $3 = Math_imul(HEAP32[((($6 << 2 | 0) + $5 | 0) + -120 | 0) >> 2] | 0, HEAP32[($2 + 116 | 0) >> 2] | 0) + $3 | 0;
     case 16:
      $3 = Math_imul(HEAP32[((($6 << 2 | 0) + $5 | 0) + -116 | 0) >> 2] | 0, HEAP32[($2 + 112 | 0) >> 2] | 0) + $3 | 0;
     case 15:
      $3 = Math_imul(HEAP32[((($6 << 2 | 0) + $5 | 0) + -112 | 0) >> 2] | 0, HEAP32[($2 + 108 | 0) >> 2] | 0) + $3 | 0;
     case 14:
      $3 = Math_imul(HEAP32[((($6 << 2 | 0) + $5 | 0) + -108 | 0) >> 2] | 0, HEAP32[($2 + 104 | 0) >> 2] | 0) + $3 | 0;
     case 13:
      $3 = Math_imul(HEAP32[((($6 << 2 | 0) + $5 | 0) + -104 | 0) >> 2] | 0, HEAP32[($2 + 100 | 0) >> 2] | 0) + $3 | 0;
     case 12:
      $3 = Math_imul(HEAP32[((($6 << 2 | 0) + $5 | 0) + -100 | 0) >> 2] | 0, HEAP32[($2 + 96 | 0) >> 2] | 0) + $3 | 0;
     case 11:
      $3 = Math_imul(HEAP32[((($6 << 2 | 0) + $5 | 0) + -96 | 0) >> 2] | 0, HEAP32[($2 + 92 | 0) >> 2] | 0) + $3 | 0;
     case 10:
      $3 = Math_imul(HEAP32[((($6 << 2 | 0) + $5 | 0) + -92 | 0) >> 2] | 0, HEAP32[($2 + 88 | 0) >> 2] | 0) + $3 | 0;
     case 9:
      $3 = Math_imul(HEAP32[((($6 << 2 | 0) + $5 | 0) + -88 | 0) >> 2] | 0, HEAP32[($2 + 84 | 0) >> 2] | 0) + $3 | 0;
     case 8:
      $3 = Math_imul(HEAP32[((($6 << 2 | 0) + $5 | 0) + -84 | 0) >> 2] | 0, HEAP32[($2 + 80 | 0) >> 2] | 0) + $3 | 0;
     case 7:
      $3 = Math_imul(HEAP32[((($6 << 2 | 0) + $5 | 0) + -80 | 0) >> 2] | 0, HEAP32[($2 + 76 | 0) >> 2] | 0) + $3 | 0;
     case 6:
      $3 = Math_imul(HEAP32[((($6 << 2 | 0) + $5 | 0) + -76 | 0) >> 2] | 0, HEAP32[($2 + 72 | 0) >> 2] | 0) + $3 | 0;
     case 5:
      $3 = Math_imul(HEAP32[((($6 << 2 | 0) + $5 | 0) + -72 | 0) >> 2] | 0, HEAP32[($2 + 68 | 0) >> 2] | 0) + $3 | 0;
     case 4:
      $3 = Math_imul(HEAP32[((($6 << 2 | 0) + $5 | 0) + -68 | 0) >> 2] | 0, HEAP32[($2 + 64 | 0) >> 2] | 0) + $3 | 0;
     case 3:
      $3 = Math_imul(HEAP32[((($6 << 2 | 0) + $5 | 0) + -64 | 0) >> 2] | 0, HEAP32[($2 + 60 | 0) >> 2] | 0) + $3 | 0;
     case 2:
      $3 = Math_imul(HEAP32[((($6 << 2 | 0) + $5 | 0) + -60 | 0) >> 2] | 0, HEAP32[($2 + 56 | 0) >> 2] | 0) + $3 | 0;
     case 1:
      $3 = Math_imul(HEAP32[((($6 << 2 | 0) + $5 | 0) + -56 | 0) >> 2] | 0, HEAP32[($2 + 52 | 0) >> 2] | 0) + $3 | 0;
     case 0:
      $8 = ($6 << 2 | 0) + $5 | 0;
      $3 = ((((((((((((Math_imul(HEAP32[($8 + -52 | 0) >> 2] | 0, HEAP32[($2 + 48 | 0) >> 2] | 0) + $3 | 0) + Math_imul(HEAP32[($8 + -48 | 0) >> 2] | 0, HEAP32[($2 + 44 | 0) >> 2] | 0) | 0) + Math_imul(HEAP32[($8 + -44 | 0) >> 2] | 0, HEAP32[($2 + 40 | 0) >> 2] | 0) | 0) + Math_imul(HEAP32[($8 + -40 | 0) >> 2] | 0, HEAP32[($2 + 36 | 0) >> 2] | 0) | 0) + Math_imul(HEAP32[($8 + -36 | 0) >> 2] | 0, HEAP32[($2 + 32 | 0) >> 2] | 0) | 0) + Math_imul(HEAP32[($8 + -32 | 0) >> 2] | 0, HEAP32[($2 + 28 | 0) >> 2] | 0) | 0) + Math_imul(HEAP32[($8 + -28 | 0) >> 2] | 0, HEAP32[($2 + 24 | 0) >> 2] | 0) | 0) + Math_imul(HEAP32[($8 + -24 | 0) >> 2] | 0, HEAP32[($2 + 20 | 0) >> 2] | 0) | 0) + Math_imul(HEAP32[($8 + -20 | 0) >> 2] | 0, HEAP32[($2 + 16 | 0) >> 2] | 0) | 0) + Math_imul(HEAP32[($8 + -16 | 0) >> 2] | 0, HEAP32[($2 + 12 | 0) >> 2] | 0) | 0) + Math_imul(HEAP32[($8 + -12 | 0) >> 2] | 0, HEAP32[($2 + 8 | 0) >> 2] | 0) | 0) + Math_imul(HEAP32[($8 + -8 | 0) >> 2] | 0, HEAP32[($2 + 4 | 0) >> 2] | 0) | 0) + Math_imul(HEAP32[($8 + -4 | 0) >> 2] | 0, HEAP32[$2 >> 2] | 0) | 0;
      break;
     default:
      break label$34;
     };
    }
    $8 = $6 << 2 | 0;
    HEAP32[($5 + $8 | 0) >> 2] = (HEAP32[($0 + $8 | 0) >> 2] | 0) + ($3 >> $4 | 0) | 0;
    $6 = $6 + 1 | 0;
    if (($6 | 0) != ($1 | 0)) {
     continue label$33
    }
    break label$33;
   };
  }
 }
 
 function FLAC__lpc_restore_signal_wide($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$4 = 0, i64toi32_i32$5 = 0, i64toi32_i32$3 = 0, $8$hi = 0, $6 = 0, $8 = 0, $9 = 0, $7$hi = 0, $10 = 0, $11 = 0, $17$hi = 0, $12 = 0, $18$hi = 0, $7 = 0, $13 = 0, $19$hi = 0, $14 = 0, $17 = 0, $20$hi = 0, $18 = 0, $21$hi = 0, $15 = 0, $19 = 0, $22$hi = 0, $20 = 0, $23$hi = 0, $16 = 0, $21 = 0, $22 = 0, $24$hi = 0, $23 = 0, $25$hi = 0, $27 = 0, $24 = 0, $25 = 0, $26$hi = 0, $29 = 0, $26 = 0, $581 = 0, $28$hi = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $107 = 0, $111 = 0, $114$hi = 0, $116 = 0, $116$hi = 0, $118$hi = 0, $120 = 0, $120$hi = 0, $121$hi = 0, $124$hi = 0, $126 = 0, $126$hi = 0, $127$hi = 0, $130$hi = 0, $132 = 0, $132$hi = 0, $133$hi = 0, $136$hi = 0, $138 = 0, $138$hi = 0, $139$hi = 0, $142$hi = 0, $144 = 0, $144$hi = 0, $145$hi = 0, $148$hi = 0, $150 = 0, $150$hi = 0, $151$hi = 0, $154$hi = 0, $156 = 0, $156$hi = 0, $157$hi = 0, $160$hi = 0, $162 = 0, $162$hi = 0, $163$hi = 0, $166$hi = 0, $168 = 0, $168$hi = 0, $169$hi = 0, $172$hi = 0, $174 = 0, $174$hi = 0, $175$hi = 0, $28 = 0, $253 = 0, $257 = 0, $260$hi = 0, $262 = 0, $262$hi = 0, $264$hi = 0, $266 = 0, $266$hi = 0, $267$hi = 0, $270$hi = 0, $272 = 0, $272$hi = 0, $273$hi = 0, $276$hi = 0, $278 = 0, $278$hi = 0, $279$hi = 0, $282$hi = 0, $284 = 0, $284$hi = 0, $285$hi = 0, $288$hi = 0, $290 = 0, $290$hi = 0, $291$hi = 0, $294$hi = 0, $296 = 0, $296$hi = 0, $297$hi = 0, $300$hi = 0, $302 = 0, $302$hi = 0, $303$hi = 0, $306$hi = 0, $308 = 0, $308$hi = 0, $309$hi = 0, $312$hi = 0, $314 = 0, $314$hi = 0, $315$hi = 0, $318$hi = 0, $320 = 0, $320$hi = 0, $321$hi = 0, $324$hi = 0, $326 = 0, $326$hi = 0, $327$hi = 0, $394 = 0, $398 = 0, $401$hi = 0, $403 = 0, $403$hi = 0, $405$hi = 0, $407 = 0, $407$hi = 0, $408$hi = 0, $411$hi = 0, $413 = 0, $413$hi = 0, $414$hi = 0, $417$hi = 0, $419 = 0, $419$hi = 0, $420$hi = 0, $423$hi = 0, $425 = 0, $425$hi = 0, $426$hi = 0, $429$hi = 0, $431 = 0, $431$hi = 0, $432$hi = 0, $435$hi = 0, $437 = 0, $437$hi = 0, $438$hi = 0, $441$hi = 0, $443 = 0, $443$hi = 0, $444$hi = 0, $447$hi = 0, $449 = 0, $449$hi = 0, $450$hi = 0, $518 = 0, $522 = 0, $525$hi = 0, $527 = 0, $527$hi = 0, $529$hi = 0, $531 = 0, $531$hi = 0, $532$hi = 0, $535$hi = 0, $537 = 0, $537$hi = 0, $538$hi = 0, $541$hi = 0, $543 = 0, $543$hi = 0, $544$hi = 0, $547$hi = 0, $549 = 0, $549$hi = 0, $550$hi = 0, $553$hi = 0, $555 = 0, $555$hi = 0, $556$hi = 0, $559$hi = 0, $561 = 0, $561$hi = 0, $562$hi = 0, $565$hi = 0, $567 = 0, $567$hi = 0, $568$hi = 0, $571$hi = 0, $573 = 0, $573$hi = 0, $574$hi = 0, $577$hi = 0, $579 = 0, $579$hi = 0, $580$hi = 0, $641 = 0, $645 = 0, $648$hi = 0, $650 = 0, $650$hi = 0, $652$hi = 0, $654 = 0, $654$hi = 0, $655$hi = 0, $658$hi = 0, $660 = 0, $660$hi = 0, $661$hi = 0, $664$hi = 0, $666 = 0, $666$hi = 0, $667$hi = 0, $670$hi = 0, $672 = 0, $672$hi = 0, $673$hi = 0, $676$hi = 0, $678 = 0, $678$hi = 0, $679$hi = 0, $682$hi = 0, $684 = 0, $684$hi = 0, $685$hi = 0, $743 = 0, $747 = 0, $750$hi = 0, $752 = 0, $752$hi = 0, $754$hi = 0, $756 = 0, $756$hi = 0, $757$hi = 0, $760$hi = 0, $762 = 0, $762$hi = 0, $763$hi = 0, $766$hi = 0, $768 = 0, $768$hi = 0, $769$hi = 0, $772$hi = 0, $774 = 0, $774$hi = 0, $775$hi = 0, $778$hi = 0, $780 = 0, $780$hi = 0, $781$hi = 0, $784$hi = 0, $786 = 0, $786$hi = 0, $787$hi = 0, $790$hi = 0, $792 = 0, $792$hi = 0, $793$hi = 0, $840 = 0, $844 = 0, $847$hi = 0, $849 = 0, $849$hi = 0, $851$hi = 0, $853 = 0, $853$hi = 0, $854$hi = 0, $857$hi = 0, $859 = 0, $859$hi = 0, $860$hi = 0, $863$hi = 0, $865 = 0, $865$hi = 0, $866$hi = 0, $869$hi = 0, $871 = 0, $871$hi = 0, $872$hi = 0, $920 = 0, $924 = 0, $927$hi = 0, $929 = 0, $929$hi = 0, $931$hi = 0, $933 = 0, $933$hi = 0, $934$hi = 0, $937$hi = 0, $939 = 0, $939$hi = 0, $940$hi = 0, $943$hi = 0, $945 = 0, $945$hi = 0, $946$hi = 0, $949$hi = 0, $951 = 0, $951$hi = 0, $952$hi = 0, $955$hi = 0, $957 = 0, $957$hi = 0, $958$hi = 0, $997 = 0, $1001 = 0, $1004$hi = 0, $1006 = 0, $1006$hi = 0, $1008$hi = 0, $1010 = 0, $1010$hi = 0, $1011$hi = 0, $1014$hi = 0, $1016 = 0, $1016$hi = 0, $1017$hi = 0, $1055 = 0, $1059 = 0, $1062$hi = 0, $1064 = 0, $1064$hi = 0, $1066$hi = 0, $1068 = 0, $1068$hi = 0, $1069$hi = 0, $1072$hi = 0, $1074 = 0, $1074$hi = 0, $1075$hi = 0, $1078$hi = 0, $1080 = 0, $1080$hi = 0, $1081$hi = 0, $1114 = 0, $1118 = 0, $1120$hi = 0, $1122$hi = 0, $1132 = 0, $1136 = 0, $1138$hi = 0, $1140$hi = 0, $1157 = 0, $1161 = 0, $1163$hi = 0, $1165$hi = 0, $1192 = 0, $1196 = 0, $1201 = 0, $1201$hi = 0, $1203$hi = 0, $1205 = 0, $1205$hi = 0, $1206$hi = 0, $1216 = 0, $1220 = 0, $1222$hi = 0, $1224 = 0, $1224$hi = 0, $1227 = 0, $1227$hi = 0, $1228$hi = 0, $1245 = 0, $1249 = 0, $1251$hi = 0, $1253 = 0, $1253$hi = 0, $1255$hi = 0, $1257 = 0, $1257$hi = 0, $1258$hi = 0, $1269 = 0, $1269$hi = 0, $1271 = 0, $1271$hi = 0, $1278 = 0, $1278$hi = 0, $1280 = 0, $1280$hi = 0, $1281$hi = 0, $1289 = 0, $1289$hi = 0, $1291 = 0, $1291$hi = 0, $1292$hi = 0, $1300 = 0, $1300$hi = 0, $1302 = 0, $1302$hi = 0, $1303$hi = 0, $1311 = 0, $1311$hi = 0, $1313 = 0, $1313$hi = 0, $1314$hi = 0, $1322 = 0, $1322$hi = 0, $1324 = 0, $1324$hi = 0, $1325$hi = 0, $1333 = 0, $1333$hi = 0, $1335 = 0, $1335$hi = 0, $1336$hi = 0, $1344 = 0, $1344$hi = 0, $1346 = 0, $1346$hi = 0, $1347$hi = 0, $1355 = 0, $1355$hi = 0, $1357 = 0, $1357$hi = 0, $1358$hi = 0, $1366 = 0, $1366$hi = 0, $1368 = 0, $1368$hi = 0, $1369$hi = 0, $1377 = 0, $1377$hi = 0, $1379 = 0, $1379$hi = 0, $1380$hi = 0, $1388 = 0, $1388$hi = 0, $1390 = 0, $1390$hi = 0, $1391$hi = 0, $1399 = 0, $1399$hi = 0, $1401 = 0, $1401$hi = 0, $1402$hi = 0, $1410 = 0, $1410$hi = 0, $1412 = 0, $1412$hi = 0, $1413$hi = 0, $1421 = 0, $1421$hi = 0, $1423 = 0, $1423$hi = 0, $1424$hi = 0, $1432 = 0, $1432$hi = 0, $1434 = 0, $1434$hi = 0, $1435$hi = 0, $1443 = 0, $1443$hi = 0, $1445 = 0, $1445$hi = 0, $1446$hi = 0, $1454 = 0, $1454$hi = 0, $1456 = 0, $1456$hi = 0, $1457$hi = 0, $1465 = 0, $1465$hi = 0, $1467 = 0, $1467$hi = 0, $1468$hi = 0, $1477 = 0, $1477$hi = 0, $1479 = 0, $1479$hi = 0, $1480$hi = 0, $1482$hi = 0, $1485 = 0, $1485$hi = 0, $1487 = 0, $1487$hi = 0, $1488 = 0, $1488$hi = 0, $1489$hi = 0, $1492 = 0, $1492$hi = 0, $1494 = 0, $1494$hi = 0, $1495 = 0, $1495$hi = 0, $1496$hi = 0, $1499 = 0, $1499$hi = 0, $1501 = 0, $1501$hi = 0, $1502 = 0, $1502$hi = 0, $1503$hi = 0, $1506 = 0, $1506$hi = 0, $1508 = 0, $1508$hi = 0, $1509 = 0, $1509$hi = 0, $1510$hi = 0, $1513 = 0, $1513$hi = 0, $1515 = 0, $1515$hi = 0, $1516 = 0, $1516$hi = 0, $1517$hi = 0, $1520 = 0, $1520$hi = 0, $1522 = 0, $1522$hi = 0, $1523 = 0, $1523$hi = 0, $1524$hi = 0, $1527 = 0, $1527$hi = 0, $1529 = 0, $1529$hi = 0, $1530 = 0, $1530$hi = 0, $1531$hi = 0, $1534 = 0, $1534$hi = 0, $1536 = 0, $1536$hi = 0, $1537 = 0, $1537$hi = 0, $1538$hi = 0, $1541 = 0, $1541$hi = 0, $1543 = 0, $1543$hi = 0, $1544 = 0, $1544$hi = 0, $1545$hi = 0, $1548 = 0, $1548$hi = 0, $1550 = 0, $1550$hi = 0, $1551 = 0, $1551$hi = 0, $1552$hi = 0, $1555 = 0, $1555$hi = 0, $1557 = 0, $1557$hi = 0, $1558 = 0, $1558$hi = 0, $1559$hi = 0, $1562 = 0, $1562$hi = 0, $1564 = 0, $1564$hi = 0, $1565 = 0, $1565$hi = 0, $1571 = 0, $1575 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     if ($3 >>> 0 < 13 >>> 0) {
      break label$3
     }
     $6 = 0;
     if (($1 | 0) <= (0 | 0)) {
      break label$1
     }
     i64toi32_i32$0 = 0;
     $7 = $4;
     $7$hi = i64toi32_i32$0;
     $4 = $3 + -13 | 0;
     break label$2;
    }
    label$4 : {
     if ($3 >>> 0 < 9 >>> 0) {
      break label$4
     }
     label$5 : {
      if ($3 >>> 0 < 11 >>> 0) {
       break label$5
      }
      i64toi32_i32$0 = 0;
      $8 = $4;
      $8$hi = i64toi32_i32$0;
      label$6 : {
       if (($3 | 0) == (12 | 0)) {
        break label$6
       }
       if (($1 | 0) < (1 | 0)) {
        break label$1
       }
       $6 = HEAP32[($5 + -4 | 0) >> 2] | 0;
       $3 = HEAP32[($5 + -8 | 0) >> 2] | 0;
       $4 = HEAP32[($5 + -12 | 0) >> 2] | 0;
       $9 = HEAP32[($5 + -16 | 0) >> 2] | 0;
       $10 = HEAP32[($5 + -20 | 0) >> 2] | 0;
       $11 = HEAP32[($5 + -24 | 0) >> 2] | 0;
       $12 = HEAP32[($5 + -28 | 0) >> 2] | 0;
       $13 = HEAP32[($5 + -32 | 0) >> 2] | 0;
       $14 = HEAP32[($5 + -36 | 0) >> 2] | 0;
       $15 = HEAP32[($5 + -40 | 0) >> 2] | 0;
       $16 = HEAP32[($5 + -44 | 0) >> 2] | 0;
       i64toi32_i32$2 = $2;
       i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
       $7 = i64toi32_i32$0;
       $7$hi = i64toi32_i32$1;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
       i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
       $17 = i64toi32_i32$1;
       $17$hi = i64toi32_i32$0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
       i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
       $18 = i64toi32_i32$0;
       $18$hi = i64toi32_i32$1;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] | 0;
       i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
       $19 = i64toi32_i32$1;
       $19$hi = i64toi32_i32$0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 16 | 0) >> 2] | 0;
       i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
       $20 = i64toi32_i32$0;
       $20$hi = i64toi32_i32$1;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 20 | 0) >> 2] | 0;
       i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
       $21 = i64toi32_i32$1;
       $21$hi = i64toi32_i32$0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 24 | 0) >> 2] | 0;
       i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
       $22 = i64toi32_i32$0;
       $22$hi = i64toi32_i32$1;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 28 | 0) >> 2] | 0;
       i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
       $23 = i64toi32_i32$1;
       $23$hi = i64toi32_i32$0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 32 | 0) >> 2] | 0;
       i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
       $24 = i64toi32_i32$0;
       $24$hi = i64toi32_i32$1;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 36 | 0) >> 2] | 0;
       i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
       $25 = i64toi32_i32$1;
       $25$hi = i64toi32_i32$0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 40 | 0) >> 2] | 0;
       i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
       $26 = i64toi32_i32$0;
       $26$hi = i64toi32_i32$1;
       $2 = 0;
       label$7 : while (1) {
        $27 = $2 << 2 | 0;
        $107 = $5 + $27 | 0;
        $111 = HEAP32[($0 + $27 | 0) >> 2] | 0;
        $27 = $15;
        i64toi32_i32$0 = $15;
        i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
        $114$hi = i64toi32_i32$1;
        i64toi32_i32$1 = $25$hi;
        i64toi32_i32$1 = $114$hi;
        i64toi32_i32$0 = $25$hi;
        i64toi32_i32$0 = __wasm_i64_mul($15 | 0, i64toi32_i32$1 | 0, $25 | 0, i64toi32_i32$0 | 0) | 0;
        i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
        $116 = i64toi32_i32$0;
        $116$hi = i64toi32_i32$1;
        i64toi32_i32$0 = $16;
        i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
        $118$hi = i64toi32_i32$1;
        i64toi32_i32$1 = $26$hi;
        i64toi32_i32$1 = $118$hi;
        i64toi32_i32$0 = $26$hi;
        i64toi32_i32$0 = __wasm_i64_mul($16 | 0, i64toi32_i32$1 | 0, $26 | 0, i64toi32_i32$0 | 0) | 0;
        i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
        $120 = i64toi32_i32$0;
        $120$hi = i64toi32_i32$1;
        i64toi32_i32$1 = $116$hi;
        i64toi32_i32$2 = $116;
        i64toi32_i32$0 = $120$hi;
        i64toi32_i32$3 = $120;
        i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
        i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
        if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
         i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
        }
        $121$hi = i64toi32_i32$5;
        $15 = $14;
        i64toi32_i32$2 = $14;
        i64toi32_i32$5 = i64toi32_i32$2 >> 31 | 0;
        $124$hi = i64toi32_i32$5;
        i64toi32_i32$5 = $24$hi;
        i64toi32_i32$5 = $124$hi;
        i64toi32_i32$2 = $24$hi;
        i64toi32_i32$2 = __wasm_i64_mul($14 | 0, i64toi32_i32$5 | 0, $24 | 0, i64toi32_i32$2 | 0) | 0;
        i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
        $126 = i64toi32_i32$2;
        $126$hi = i64toi32_i32$5;
        i64toi32_i32$5 = $121$hi;
        i64toi32_i32$1 = i64toi32_i32$4;
        i64toi32_i32$2 = $126$hi;
        i64toi32_i32$3 = $126;
        i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
        i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
        if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
         i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
        }
        $127$hi = i64toi32_i32$4;
        $14 = $13;
        i64toi32_i32$1 = $13;
        i64toi32_i32$4 = i64toi32_i32$1 >> 31 | 0;
        $130$hi = i64toi32_i32$4;
        i64toi32_i32$4 = $23$hi;
        i64toi32_i32$4 = $130$hi;
        i64toi32_i32$1 = $23$hi;
        i64toi32_i32$1 = __wasm_i64_mul($13 | 0, i64toi32_i32$4 | 0, $23 | 0, i64toi32_i32$1 | 0) | 0;
        i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
        $132 = i64toi32_i32$1;
        $132$hi = i64toi32_i32$4;
        i64toi32_i32$4 = $127$hi;
        i64toi32_i32$5 = i64toi32_i32$0;
        i64toi32_i32$1 = $132$hi;
        i64toi32_i32$3 = $132;
        i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
        i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
        if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
         i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
        }
        $133$hi = i64toi32_i32$0;
        $13 = $12;
        i64toi32_i32$5 = $12;
        i64toi32_i32$0 = i64toi32_i32$5 >> 31 | 0;
        $136$hi = i64toi32_i32$0;
        i64toi32_i32$0 = $22$hi;
        i64toi32_i32$0 = $136$hi;
        i64toi32_i32$5 = $22$hi;
        i64toi32_i32$5 = __wasm_i64_mul($12 | 0, i64toi32_i32$0 | 0, $22 | 0, i64toi32_i32$5 | 0) | 0;
        i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
        $138 = i64toi32_i32$5;
        $138$hi = i64toi32_i32$0;
        i64toi32_i32$0 = $133$hi;
        i64toi32_i32$4 = i64toi32_i32$2;
        i64toi32_i32$5 = $138$hi;
        i64toi32_i32$3 = $138;
        i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
        i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
        if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
         i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
        }
        $139$hi = i64toi32_i32$2;
        $12 = $11;
        i64toi32_i32$4 = $11;
        i64toi32_i32$2 = i64toi32_i32$4 >> 31 | 0;
        $142$hi = i64toi32_i32$2;
        i64toi32_i32$2 = $21$hi;
        i64toi32_i32$2 = $142$hi;
        i64toi32_i32$4 = $21$hi;
        i64toi32_i32$4 = __wasm_i64_mul($11 | 0, i64toi32_i32$2 | 0, $21 | 0, i64toi32_i32$4 | 0) | 0;
        i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
        $144 = i64toi32_i32$4;
        $144$hi = i64toi32_i32$2;
        i64toi32_i32$2 = $139$hi;
        i64toi32_i32$0 = i64toi32_i32$1;
        i64toi32_i32$4 = $144$hi;
        i64toi32_i32$3 = $144;
        i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
        i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
        if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
         i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
        }
        $145$hi = i64toi32_i32$1;
        $11 = $10;
        i64toi32_i32$0 = $10;
        i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
        $148$hi = i64toi32_i32$1;
        i64toi32_i32$1 = $20$hi;
        i64toi32_i32$1 = $148$hi;
        i64toi32_i32$0 = $20$hi;
        i64toi32_i32$0 = __wasm_i64_mul($10 | 0, i64toi32_i32$1 | 0, $20 | 0, i64toi32_i32$0 | 0) | 0;
        i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
        $150 = i64toi32_i32$0;
        $150$hi = i64toi32_i32$1;
        i64toi32_i32$1 = $145$hi;
        i64toi32_i32$2 = i64toi32_i32$5;
        i64toi32_i32$0 = $150$hi;
        i64toi32_i32$3 = $150;
        i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
        i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
        if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
         i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
        }
        $151$hi = i64toi32_i32$5;
        $10 = $9;
        i64toi32_i32$2 = $9;
        i64toi32_i32$5 = i64toi32_i32$2 >> 31 | 0;
        $154$hi = i64toi32_i32$5;
        i64toi32_i32$5 = $19$hi;
        i64toi32_i32$5 = $154$hi;
        i64toi32_i32$2 = $19$hi;
        i64toi32_i32$2 = __wasm_i64_mul($9 | 0, i64toi32_i32$5 | 0, $19 | 0, i64toi32_i32$2 | 0) | 0;
        i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
        $156 = i64toi32_i32$2;
        $156$hi = i64toi32_i32$5;
        i64toi32_i32$5 = $151$hi;
        i64toi32_i32$1 = i64toi32_i32$4;
        i64toi32_i32$2 = $156$hi;
        i64toi32_i32$3 = $156;
        i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
        i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
        if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
         i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
        }
        $157$hi = i64toi32_i32$4;
        $9 = $4;
        i64toi32_i32$1 = $4;
        i64toi32_i32$4 = i64toi32_i32$1 >> 31 | 0;
        $160$hi = i64toi32_i32$4;
        i64toi32_i32$4 = $18$hi;
        i64toi32_i32$4 = $160$hi;
        i64toi32_i32$1 = $18$hi;
        i64toi32_i32$1 = __wasm_i64_mul($4 | 0, i64toi32_i32$4 | 0, $18 | 0, i64toi32_i32$1 | 0) | 0;
        i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
        $162 = i64toi32_i32$1;
        $162$hi = i64toi32_i32$4;
        i64toi32_i32$4 = $157$hi;
        i64toi32_i32$5 = i64toi32_i32$0;
        i64toi32_i32$1 = $162$hi;
        i64toi32_i32$3 = $162;
        i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
        i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
        if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
         i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
        }
        $163$hi = i64toi32_i32$0;
        $4 = $3;
        i64toi32_i32$5 = $3;
        i64toi32_i32$0 = i64toi32_i32$5 >> 31 | 0;
        $166$hi = i64toi32_i32$0;
        i64toi32_i32$0 = $17$hi;
        i64toi32_i32$0 = $166$hi;
        i64toi32_i32$5 = $17$hi;
        i64toi32_i32$5 = __wasm_i64_mul($3 | 0, i64toi32_i32$0 | 0, $17 | 0, i64toi32_i32$5 | 0) | 0;
        i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
        $168 = i64toi32_i32$5;
        $168$hi = i64toi32_i32$0;
        i64toi32_i32$0 = $163$hi;
        i64toi32_i32$4 = i64toi32_i32$2;
        i64toi32_i32$5 = $168$hi;
        i64toi32_i32$3 = $168;
        i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
        i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
        if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
         i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
        }
        $169$hi = i64toi32_i32$2;
        $3 = $6;
        i64toi32_i32$4 = $3;
        i64toi32_i32$2 = i64toi32_i32$4 >> 31 | 0;
        $172$hi = i64toi32_i32$2;
        i64toi32_i32$2 = $7$hi;
        i64toi32_i32$2 = $172$hi;
        i64toi32_i32$4 = $7$hi;
        i64toi32_i32$4 = __wasm_i64_mul($3 | 0, i64toi32_i32$2 | 0, $7 | 0, i64toi32_i32$4 | 0) | 0;
        i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
        $174 = i64toi32_i32$4;
        $174$hi = i64toi32_i32$2;
        i64toi32_i32$2 = $169$hi;
        i64toi32_i32$0 = i64toi32_i32$1;
        i64toi32_i32$4 = $174$hi;
        i64toi32_i32$3 = $174;
        i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
        i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
        if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
         i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
        }
        $175$hi = i64toi32_i32$1;
        i64toi32_i32$1 = $8$hi;
        i64toi32_i32$1 = $175$hi;
        i64toi32_i32$2 = i64toi32_i32$5;
        i64toi32_i32$0 = $8$hi;
        i64toi32_i32$3 = $8;
        i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
         i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
         $581 = i64toi32_i32$1 >> i64toi32_i32$4 | 0;
        } else {
         i64toi32_i32$0 = i64toi32_i32$1 >> i64toi32_i32$4 | 0;
         $581 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
        }
        $6 = $111 + $581 | 0;
        HEAP32[$107 >> 2] = $6;
        $16 = $27;
        $2 = $2 + 1 | 0;
        if (($2 | 0) != ($1 | 0)) {
         continue label$7
        }
        break label$1;
       };
      }
      if (($1 | 0) < (1 | 0)) {
       break label$1
      }
      $6 = HEAP32[($5 + -4 | 0) >> 2] | 0;
      $3 = HEAP32[($5 + -8 | 0) >> 2] | 0;
      $4 = HEAP32[($5 + -12 | 0) >> 2] | 0;
      $9 = HEAP32[($5 + -16 | 0) >> 2] | 0;
      $10 = HEAP32[($5 + -20 | 0) >> 2] | 0;
      $11 = HEAP32[($5 + -24 | 0) >> 2] | 0;
      $12 = HEAP32[($5 + -28 | 0) >> 2] | 0;
      $13 = HEAP32[($5 + -32 | 0) >> 2] | 0;
      $14 = HEAP32[($5 + -36 | 0) >> 2] | 0;
      $15 = HEAP32[($5 + -40 | 0) >> 2] | 0;
      $16 = HEAP32[($5 + -44 | 0) >> 2] | 0;
      $27 = HEAP32[($5 + -48 | 0) >> 2] | 0;
      i64toi32_i32$1 = $2;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$1 >> 2] | 0;
      i64toi32_i32$2 = i64toi32_i32$0 >> 31 | 0;
      $7 = i64toi32_i32$0;
      $7$hi = i64toi32_i32$2;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
      i64toi32_i32$0 = i64toi32_i32$2 >> 31 | 0;
      $17 = i64toi32_i32$2;
      $17$hi = i64toi32_i32$0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] | 0;
      i64toi32_i32$2 = i64toi32_i32$0 >> 31 | 0;
      $18 = i64toi32_i32$0;
      $18$hi = i64toi32_i32$2;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] | 0;
      i64toi32_i32$0 = i64toi32_i32$2 >> 31 | 0;
      $19 = i64toi32_i32$2;
      $19$hi = i64toi32_i32$0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 16 | 0) >> 2] | 0;
      i64toi32_i32$2 = i64toi32_i32$0 >> 31 | 0;
      $20 = i64toi32_i32$0;
      $20$hi = i64toi32_i32$2;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 20 | 0) >> 2] | 0;
      i64toi32_i32$0 = i64toi32_i32$2 >> 31 | 0;
      $21 = i64toi32_i32$2;
      $21$hi = i64toi32_i32$0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 24 | 0) >> 2] | 0;
      i64toi32_i32$2 = i64toi32_i32$0 >> 31 | 0;
      $22 = i64toi32_i32$0;
      $22$hi = i64toi32_i32$2;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 28 | 0) >> 2] | 0;
      i64toi32_i32$0 = i64toi32_i32$2 >> 31 | 0;
      $23 = i64toi32_i32$2;
      $23$hi = i64toi32_i32$0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 32 | 0) >> 2] | 0;
      i64toi32_i32$2 = i64toi32_i32$0 >> 31 | 0;
      $24 = i64toi32_i32$0;
      $24$hi = i64toi32_i32$2;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 36 | 0) >> 2] | 0;
      i64toi32_i32$0 = i64toi32_i32$2 >> 31 | 0;
      $25 = i64toi32_i32$2;
      $25$hi = i64toi32_i32$0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 40 | 0) >> 2] | 0;
      i64toi32_i32$2 = i64toi32_i32$0 >> 31 | 0;
      $26 = i64toi32_i32$0;
      $26$hi = i64toi32_i32$2;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 44 | 0) >> 2] | 0;
      i64toi32_i32$0 = i64toi32_i32$2 >> 31 | 0;
      $28 = i64toi32_i32$2;
      $28$hi = i64toi32_i32$0;
      $2 = 0;
      label$8 : while (1) {
       $29 = $2 << 2 | 0;
       $253 = $5 + $29 | 0;
       $257 = HEAP32[($0 + $29 | 0) >> 2] | 0;
       $29 = $16;
       i64toi32_i32$2 = $16;
       i64toi32_i32$0 = i64toi32_i32$2 >> 31 | 0;
       $260$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $26$hi;
       i64toi32_i32$0 = $260$hi;
       i64toi32_i32$2 = $26$hi;
       i64toi32_i32$2 = __wasm_i64_mul($16 | 0, i64toi32_i32$0 | 0, $26 | 0, i64toi32_i32$2 | 0) | 0;
       i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
       $262 = i64toi32_i32$2;
       $262$hi = i64toi32_i32$0;
       i64toi32_i32$2 = $27;
       i64toi32_i32$0 = i64toi32_i32$2 >> 31 | 0;
       $264$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $28$hi;
       i64toi32_i32$0 = $264$hi;
       i64toi32_i32$2 = $28$hi;
       i64toi32_i32$2 = __wasm_i64_mul($27 | 0, i64toi32_i32$0 | 0, $28 | 0, i64toi32_i32$2 | 0) | 0;
       i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
       $266 = i64toi32_i32$2;
       $266$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $262$hi;
       i64toi32_i32$1 = $262;
       i64toi32_i32$2 = $266$hi;
       i64toi32_i32$3 = $266;
       i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
       i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
       if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
       }
       $267$hi = i64toi32_i32$5;
       $16 = $15;
       i64toi32_i32$1 = $15;
       i64toi32_i32$5 = i64toi32_i32$1 >> 31 | 0;
       $270$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $25$hi;
       i64toi32_i32$5 = $270$hi;
       i64toi32_i32$1 = $25$hi;
       i64toi32_i32$1 = __wasm_i64_mul($15 | 0, i64toi32_i32$5 | 0, $25 | 0, i64toi32_i32$1 | 0) | 0;
       i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
       $272 = i64toi32_i32$1;
       $272$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $267$hi;
       i64toi32_i32$0 = i64toi32_i32$4;
       i64toi32_i32$1 = $272$hi;
       i64toi32_i32$3 = $272;
       i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
       i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
       if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
       }
       $273$hi = i64toi32_i32$4;
       $15 = $14;
       i64toi32_i32$0 = $14;
       i64toi32_i32$4 = i64toi32_i32$0 >> 31 | 0;
       $276$hi = i64toi32_i32$4;
       i64toi32_i32$4 = $24$hi;
       i64toi32_i32$4 = $276$hi;
       i64toi32_i32$0 = $24$hi;
       i64toi32_i32$0 = __wasm_i64_mul($14 | 0, i64toi32_i32$4 | 0, $24 | 0, i64toi32_i32$0 | 0) | 0;
       i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
       $278 = i64toi32_i32$0;
       $278$hi = i64toi32_i32$4;
       i64toi32_i32$4 = $273$hi;
       i64toi32_i32$5 = i64toi32_i32$2;
       i64toi32_i32$0 = $278$hi;
       i64toi32_i32$3 = $278;
       i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
       i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
       if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
       }
       $279$hi = i64toi32_i32$2;
       $14 = $13;
       i64toi32_i32$5 = $13;
       i64toi32_i32$2 = i64toi32_i32$5 >> 31 | 0;
       $282$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $23$hi;
       i64toi32_i32$2 = $282$hi;
       i64toi32_i32$5 = $23$hi;
       i64toi32_i32$5 = __wasm_i64_mul($13 | 0, i64toi32_i32$2 | 0, $23 | 0, i64toi32_i32$5 | 0) | 0;
       i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
       $284 = i64toi32_i32$5;
       $284$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $279$hi;
       i64toi32_i32$4 = i64toi32_i32$1;
       i64toi32_i32$5 = $284$hi;
       i64toi32_i32$3 = $284;
       i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
       i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
       if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
       }
       $285$hi = i64toi32_i32$1;
       $13 = $12;
       i64toi32_i32$4 = $12;
       i64toi32_i32$1 = i64toi32_i32$4 >> 31 | 0;
       $288$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $22$hi;
       i64toi32_i32$1 = $288$hi;
       i64toi32_i32$4 = $22$hi;
       i64toi32_i32$4 = __wasm_i64_mul($12 | 0, i64toi32_i32$1 | 0, $22 | 0, i64toi32_i32$4 | 0) | 0;
       i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
       $290 = i64toi32_i32$4;
       $290$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $285$hi;
       i64toi32_i32$2 = i64toi32_i32$0;
       i64toi32_i32$4 = $290$hi;
       i64toi32_i32$3 = $290;
       i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
       i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
       if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
       }
       $291$hi = i64toi32_i32$0;
       $12 = $11;
       i64toi32_i32$2 = $11;
       i64toi32_i32$0 = i64toi32_i32$2 >> 31 | 0;
       $294$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $21$hi;
       i64toi32_i32$0 = $294$hi;
       i64toi32_i32$2 = $21$hi;
       i64toi32_i32$2 = __wasm_i64_mul($11 | 0, i64toi32_i32$0 | 0, $21 | 0, i64toi32_i32$2 | 0) | 0;
       i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
       $296 = i64toi32_i32$2;
       $296$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $291$hi;
       i64toi32_i32$1 = i64toi32_i32$5;
       i64toi32_i32$2 = $296$hi;
       i64toi32_i32$3 = $296;
       i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
       i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
       if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
       }
       $297$hi = i64toi32_i32$5;
       $11 = $10;
       i64toi32_i32$1 = $10;
       i64toi32_i32$5 = i64toi32_i32$1 >> 31 | 0;
       $300$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $20$hi;
       i64toi32_i32$5 = $300$hi;
       i64toi32_i32$1 = $20$hi;
       i64toi32_i32$1 = __wasm_i64_mul($10 | 0, i64toi32_i32$5 | 0, $20 | 0, i64toi32_i32$1 | 0) | 0;
       i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
       $302 = i64toi32_i32$1;
       $302$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $297$hi;
       i64toi32_i32$0 = i64toi32_i32$4;
       i64toi32_i32$1 = $302$hi;
       i64toi32_i32$3 = $302;
       i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
       i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
       if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
       }
       $303$hi = i64toi32_i32$4;
       $10 = $9;
       i64toi32_i32$0 = $9;
       i64toi32_i32$4 = i64toi32_i32$0 >> 31 | 0;
       $306$hi = i64toi32_i32$4;
       i64toi32_i32$4 = $19$hi;
       i64toi32_i32$4 = $306$hi;
       i64toi32_i32$0 = $19$hi;
       i64toi32_i32$0 = __wasm_i64_mul($9 | 0, i64toi32_i32$4 | 0, $19 | 0, i64toi32_i32$0 | 0) | 0;
       i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
       $308 = i64toi32_i32$0;
       $308$hi = i64toi32_i32$4;
       i64toi32_i32$4 = $303$hi;
       i64toi32_i32$5 = i64toi32_i32$2;
       i64toi32_i32$0 = $308$hi;
       i64toi32_i32$3 = $308;
       i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
       i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
       if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
       }
       $309$hi = i64toi32_i32$2;
       $9 = $4;
       i64toi32_i32$5 = $4;
       i64toi32_i32$2 = i64toi32_i32$5 >> 31 | 0;
       $312$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $18$hi;
       i64toi32_i32$2 = $312$hi;
       i64toi32_i32$5 = $18$hi;
       i64toi32_i32$5 = __wasm_i64_mul($4 | 0, i64toi32_i32$2 | 0, $18 | 0, i64toi32_i32$5 | 0) | 0;
       i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
       $314 = i64toi32_i32$5;
       $314$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $309$hi;
       i64toi32_i32$4 = i64toi32_i32$1;
       i64toi32_i32$5 = $314$hi;
       i64toi32_i32$3 = $314;
       i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
       i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
       if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
       }
       $315$hi = i64toi32_i32$1;
       $4 = $3;
       i64toi32_i32$4 = $3;
       i64toi32_i32$1 = i64toi32_i32$4 >> 31 | 0;
       $318$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $17$hi;
       i64toi32_i32$1 = $318$hi;
       i64toi32_i32$4 = $17$hi;
       i64toi32_i32$4 = __wasm_i64_mul($3 | 0, i64toi32_i32$1 | 0, $17 | 0, i64toi32_i32$4 | 0) | 0;
       i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
       $320 = i64toi32_i32$4;
       $320$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $315$hi;
       i64toi32_i32$2 = i64toi32_i32$0;
       i64toi32_i32$4 = $320$hi;
       i64toi32_i32$3 = $320;
       i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
       i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
       if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
       }
       $321$hi = i64toi32_i32$0;
       $3 = $6;
       i64toi32_i32$2 = $3;
       i64toi32_i32$0 = i64toi32_i32$2 >> 31 | 0;
       $324$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $7$hi;
       i64toi32_i32$0 = $324$hi;
       i64toi32_i32$2 = $7$hi;
       i64toi32_i32$2 = __wasm_i64_mul($3 | 0, i64toi32_i32$0 | 0, $7 | 0, i64toi32_i32$2 | 0) | 0;
       i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
       $326 = i64toi32_i32$2;
       $326$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $321$hi;
       i64toi32_i32$1 = i64toi32_i32$5;
       i64toi32_i32$2 = $326$hi;
       i64toi32_i32$3 = $326;
       i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
       i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
       if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
       }
       $327$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $8$hi;
       i64toi32_i32$5 = $327$hi;
       i64toi32_i32$0 = i64toi32_i32$4;
       i64toi32_i32$1 = $8$hi;
       i64toi32_i32$3 = $8;
       i64toi32_i32$2 = i64toi32_i32$3 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
        i64toi32_i32$1 = i64toi32_i32$5 >> 31 | 0;
        $582 = i64toi32_i32$5 >> i64toi32_i32$2 | 0;
       } else {
        i64toi32_i32$1 = i64toi32_i32$5 >> i64toi32_i32$2 | 0;
        $582 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$2 | 0) | 0;
       }
       $6 = $257 + $582 | 0;
       HEAP32[$253 >> 2] = $6;
       $27 = $29;
       $2 = $2 + 1 | 0;
       if (($2 | 0) != ($1 | 0)) {
        continue label$8
       }
       break label$1;
      };
     }
     i64toi32_i32$1 = 0;
     $8 = $4;
     $8$hi = i64toi32_i32$1;
     label$9 : {
      if (($3 | 0) == (10 | 0)) {
       break label$9
      }
      if (($1 | 0) < (1 | 0)) {
       break label$1
      }
      $6 = HEAP32[($5 + -4 | 0) >> 2] | 0;
      $3 = HEAP32[($5 + -8 | 0) >> 2] | 0;
      $4 = HEAP32[($5 + -12 | 0) >> 2] | 0;
      $9 = HEAP32[($5 + -16 | 0) >> 2] | 0;
      $10 = HEAP32[($5 + -20 | 0) >> 2] | 0;
      $11 = HEAP32[($5 + -24 | 0) >> 2] | 0;
      $12 = HEAP32[($5 + -28 | 0) >> 2] | 0;
      $13 = HEAP32[($5 + -32 | 0) >> 2] | 0;
      $14 = HEAP32[($5 + -36 | 0) >> 2] | 0;
      i64toi32_i32$5 = $2;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$5 >> 2] | 0;
      i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
      $7 = i64toi32_i32$1;
      $7$hi = i64toi32_i32$0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
      i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
      $17 = i64toi32_i32$0;
      $17$hi = i64toi32_i32$1;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 8 | 0) >> 2] | 0;
      i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
      $18 = i64toi32_i32$1;
      $18$hi = i64toi32_i32$0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 12 | 0) >> 2] | 0;
      i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
      $19 = i64toi32_i32$0;
      $19$hi = i64toi32_i32$1;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 16 | 0) >> 2] | 0;
      i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
      $20 = i64toi32_i32$1;
      $20$hi = i64toi32_i32$0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 20 | 0) >> 2] | 0;
      i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
      $21 = i64toi32_i32$0;
      $21$hi = i64toi32_i32$1;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 24 | 0) >> 2] | 0;
      i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
      $22 = i64toi32_i32$1;
      $22$hi = i64toi32_i32$0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 28 | 0) >> 2] | 0;
      i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
      $23 = i64toi32_i32$0;
      $23$hi = i64toi32_i32$1;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 32 | 0) >> 2] | 0;
      i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
      $24 = i64toi32_i32$1;
      $24$hi = i64toi32_i32$0;
      $2 = 0;
      label$10 : while (1) {
       $15 = $2 << 2 | 0;
       $394 = $5 + $15 | 0;
       $398 = HEAP32[($0 + $15 | 0) >> 2] | 0;
       $15 = $13;
       i64toi32_i32$1 = $13;
       i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
       $401$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $23$hi;
       i64toi32_i32$0 = $401$hi;
       i64toi32_i32$1 = $23$hi;
       i64toi32_i32$1 = __wasm_i64_mul($13 | 0, i64toi32_i32$0 | 0, $23 | 0, i64toi32_i32$1 | 0) | 0;
       i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
       $403 = i64toi32_i32$1;
       $403$hi = i64toi32_i32$0;
       i64toi32_i32$1 = $14;
       i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
       $405$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $24$hi;
       i64toi32_i32$0 = $405$hi;
       i64toi32_i32$1 = $24$hi;
       i64toi32_i32$1 = __wasm_i64_mul($14 | 0, i64toi32_i32$0 | 0, $24 | 0, i64toi32_i32$1 | 0) | 0;
       i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
       $407 = i64toi32_i32$1;
       $407$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $403$hi;
       i64toi32_i32$5 = $403;
       i64toi32_i32$1 = $407$hi;
       i64toi32_i32$3 = $407;
       i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
       i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
       if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
       }
       $408$hi = i64toi32_i32$4;
       $13 = $12;
       i64toi32_i32$5 = $12;
       i64toi32_i32$4 = i64toi32_i32$5 >> 31 | 0;
       $411$hi = i64toi32_i32$4;
       i64toi32_i32$4 = $22$hi;
       i64toi32_i32$4 = $411$hi;
       i64toi32_i32$5 = $22$hi;
       i64toi32_i32$5 = __wasm_i64_mul($12 | 0, i64toi32_i32$4 | 0, $22 | 0, i64toi32_i32$5 | 0) | 0;
       i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
       $413 = i64toi32_i32$5;
       $413$hi = i64toi32_i32$4;
       i64toi32_i32$4 = $408$hi;
       i64toi32_i32$0 = i64toi32_i32$2;
       i64toi32_i32$5 = $413$hi;
       i64toi32_i32$3 = $413;
       i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
       i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
       if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
       }
       $414$hi = i64toi32_i32$2;
       $12 = $11;
       i64toi32_i32$0 = $11;
       i64toi32_i32$2 = i64toi32_i32$0 >> 31 | 0;
       $417$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $21$hi;
       i64toi32_i32$2 = $417$hi;
       i64toi32_i32$0 = $21$hi;
       i64toi32_i32$0 = __wasm_i64_mul($11 | 0, i64toi32_i32$2 | 0, $21 | 0, i64toi32_i32$0 | 0) | 0;
       i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
       $419 = i64toi32_i32$0;
       $419$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $414$hi;
       i64toi32_i32$4 = i64toi32_i32$1;
       i64toi32_i32$0 = $419$hi;
       i64toi32_i32$3 = $419;
       i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
       i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
       if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
       }
       $420$hi = i64toi32_i32$1;
       $11 = $10;
       i64toi32_i32$4 = $10;
       i64toi32_i32$1 = i64toi32_i32$4 >> 31 | 0;
       $423$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $20$hi;
       i64toi32_i32$1 = $423$hi;
       i64toi32_i32$4 = $20$hi;
       i64toi32_i32$4 = __wasm_i64_mul($10 | 0, i64toi32_i32$1 | 0, $20 | 0, i64toi32_i32$4 | 0) | 0;
       i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
       $425 = i64toi32_i32$4;
       $425$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $420$hi;
       i64toi32_i32$2 = i64toi32_i32$5;
       i64toi32_i32$4 = $425$hi;
       i64toi32_i32$3 = $425;
       i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
       i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
       if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
       }
       $426$hi = i64toi32_i32$5;
       $10 = $9;
       i64toi32_i32$2 = $9;
       i64toi32_i32$5 = i64toi32_i32$2 >> 31 | 0;
       $429$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $19$hi;
       i64toi32_i32$5 = $429$hi;
       i64toi32_i32$2 = $19$hi;
       i64toi32_i32$2 = __wasm_i64_mul($9 | 0, i64toi32_i32$5 | 0, $19 | 0, i64toi32_i32$2 | 0) | 0;
       i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
       $431 = i64toi32_i32$2;
       $431$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $426$hi;
       i64toi32_i32$1 = i64toi32_i32$0;
       i64toi32_i32$2 = $431$hi;
       i64toi32_i32$3 = $431;
       i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
       i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
       if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
       }
       $432$hi = i64toi32_i32$0;
       $9 = $4;
       i64toi32_i32$1 = $4;
       i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
       $435$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $18$hi;
       i64toi32_i32$0 = $435$hi;
       i64toi32_i32$1 = $18$hi;
       i64toi32_i32$1 = __wasm_i64_mul($4 | 0, i64toi32_i32$0 | 0, $18 | 0, i64toi32_i32$1 | 0) | 0;
       i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
       $437 = i64toi32_i32$1;
       $437$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $432$hi;
       i64toi32_i32$5 = i64toi32_i32$4;
       i64toi32_i32$1 = $437$hi;
       i64toi32_i32$3 = $437;
       i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
       i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
       if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
       }
       $438$hi = i64toi32_i32$4;
       $4 = $3;
       i64toi32_i32$5 = $3;
       i64toi32_i32$4 = i64toi32_i32$5 >> 31 | 0;
       $441$hi = i64toi32_i32$4;
       i64toi32_i32$4 = $17$hi;
       i64toi32_i32$4 = $441$hi;
       i64toi32_i32$5 = $17$hi;
       i64toi32_i32$5 = __wasm_i64_mul($3 | 0, i64toi32_i32$4 | 0, $17 | 0, i64toi32_i32$5 | 0) | 0;
       i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
       $443 = i64toi32_i32$5;
       $443$hi = i64toi32_i32$4;
       i64toi32_i32$4 = $438$hi;
       i64toi32_i32$0 = i64toi32_i32$2;
       i64toi32_i32$5 = $443$hi;
       i64toi32_i32$3 = $443;
       i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
       i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
       if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
       }
       $444$hi = i64toi32_i32$2;
       $3 = $6;
       i64toi32_i32$0 = $3;
       i64toi32_i32$2 = i64toi32_i32$0 >> 31 | 0;
       $447$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $7$hi;
       i64toi32_i32$2 = $447$hi;
       i64toi32_i32$0 = $7$hi;
       i64toi32_i32$0 = __wasm_i64_mul($3 | 0, i64toi32_i32$2 | 0, $7 | 0, i64toi32_i32$0 | 0) | 0;
       i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
       $449 = i64toi32_i32$0;
       $449$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $444$hi;
       i64toi32_i32$4 = i64toi32_i32$1;
       i64toi32_i32$0 = $449$hi;
       i64toi32_i32$3 = $449;
       i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
       i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
       if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
       }
       $450$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $8$hi;
       i64toi32_i32$1 = $450$hi;
       i64toi32_i32$2 = i64toi32_i32$5;
       i64toi32_i32$4 = $8$hi;
       i64toi32_i32$3 = $8;
       i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
        i64toi32_i32$4 = i64toi32_i32$1 >> 31 | 0;
        $583 = i64toi32_i32$1 >> i64toi32_i32$0 | 0;
       } else {
        i64toi32_i32$4 = i64toi32_i32$1 >> i64toi32_i32$0 | 0;
        $583 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$0 | 0) | 0;
       }
       $6 = $398 + $583 | 0;
       HEAP32[$394 >> 2] = $6;
       $14 = $15;
       $2 = $2 + 1 | 0;
       if (($2 | 0) != ($1 | 0)) {
        continue label$10
       }
       break label$1;
      };
     }
     if (($1 | 0) < (1 | 0)) {
      break label$1
     }
     $6 = HEAP32[($5 + -4 | 0) >> 2] | 0;
     $3 = HEAP32[($5 + -8 | 0) >> 2] | 0;
     $4 = HEAP32[($5 + -12 | 0) >> 2] | 0;
     $9 = HEAP32[($5 + -16 | 0) >> 2] | 0;
     $10 = HEAP32[($5 + -20 | 0) >> 2] | 0;
     $11 = HEAP32[($5 + -24 | 0) >> 2] | 0;
     $12 = HEAP32[($5 + -28 | 0) >> 2] | 0;
     $13 = HEAP32[($5 + -32 | 0) >> 2] | 0;
     $14 = HEAP32[($5 + -36 | 0) >> 2] | 0;
     $15 = HEAP32[($5 + -40 | 0) >> 2] | 0;
     i64toi32_i32$1 = $2;
     i64toi32_i32$4 = HEAP32[i64toi32_i32$1 >> 2] | 0;
     i64toi32_i32$2 = i64toi32_i32$4 >> 31 | 0;
     $7 = i64toi32_i32$4;
     $7$hi = i64toi32_i32$2;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
     i64toi32_i32$4 = i64toi32_i32$2 >> 31 | 0;
     $17 = i64toi32_i32$2;
     $17$hi = i64toi32_i32$4;
     i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] | 0;
     i64toi32_i32$2 = i64toi32_i32$4 >> 31 | 0;
     $18 = i64toi32_i32$4;
     $18$hi = i64toi32_i32$2;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] | 0;
     i64toi32_i32$4 = i64toi32_i32$2 >> 31 | 0;
     $19 = i64toi32_i32$2;
     $19$hi = i64toi32_i32$4;
     i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 16 | 0) >> 2] | 0;
     i64toi32_i32$2 = i64toi32_i32$4 >> 31 | 0;
     $20 = i64toi32_i32$4;
     $20$hi = i64toi32_i32$2;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 20 | 0) >> 2] | 0;
     i64toi32_i32$4 = i64toi32_i32$2 >> 31 | 0;
     $21 = i64toi32_i32$2;
     $21$hi = i64toi32_i32$4;
     i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 24 | 0) >> 2] | 0;
     i64toi32_i32$2 = i64toi32_i32$4 >> 31 | 0;
     $22 = i64toi32_i32$4;
     $22$hi = i64toi32_i32$2;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 28 | 0) >> 2] | 0;
     i64toi32_i32$4 = i64toi32_i32$2 >> 31 | 0;
     $23 = i64toi32_i32$2;
     $23$hi = i64toi32_i32$4;
     i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 32 | 0) >> 2] | 0;
     i64toi32_i32$2 = i64toi32_i32$4 >> 31 | 0;
     $24 = i64toi32_i32$4;
     $24$hi = i64toi32_i32$2;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 36 | 0) >> 2] | 0;
     i64toi32_i32$4 = i64toi32_i32$2 >> 31 | 0;
     $25 = i64toi32_i32$2;
     $25$hi = i64toi32_i32$4;
     $2 = 0;
     label$11 : while (1) {
      $16 = $2 << 2 | 0;
      $518 = $5 + $16 | 0;
      $522 = HEAP32[($0 + $16 | 0) >> 2] | 0;
      $16 = $14;
      i64toi32_i32$2 = $14;
      i64toi32_i32$4 = i64toi32_i32$2 >> 31 | 0;
      $525$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $24$hi;
      i64toi32_i32$4 = $525$hi;
      i64toi32_i32$2 = $24$hi;
      i64toi32_i32$2 = __wasm_i64_mul($14 | 0, i64toi32_i32$4 | 0, $24 | 0, i64toi32_i32$2 | 0) | 0;
      i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
      $527 = i64toi32_i32$2;
      $527$hi = i64toi32_i32$4;
      i64toi32_i32$2 = $15;
      i64toi32_i32$4 = i64toi32_i32$2 >> 31 | 0;
      $529$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $25$hi;
      i64toi32_i32$4 = $529$hi;
      i64toi32_i32$2 = $25$hi;
      i64toi32_i32$2 = __wasm_i64_mul($15 | 0, i64toi32_i32$4 | 0, $25 | 0, i64toi32_i32$2 | 0) | 0;
      i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
      $531 = i64toi32_i32$2;
      $531$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $527$hi;
      i64toi32_i32$1 = $527;
      i64toi32_i32$2 = $531$hi;
      i64toi32_i32$3 = $531;
      i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
      i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $532$hi = i64toi32_i32$5;
      $14 = $13;
      i64toi32_i32$1 = $13;
      i64toi32_i32$5 = i64toi32_i32$1 >> 31 | 0;
      $535$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $23$hi;
      i64toi32_i32$5 = $535$hi;
      i64toi32_i32$1 = $23$hi;
      i64toi32_i32$1 = __wasm_i64_mul($13 | 0, i64toi32_i32$5 | 0, $23 | 0, i64toi32_i32$1 | 0) | 0;
      i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
      $537 = i64toi32_i32$1;
      $537$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $532$hi;
      i64toi32_i32$4 = i64toi32_i32$0;
      i64toi32_i32$1 = $537$hi;
      i64toi32_i32$3 = $537;
      i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
      i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
      }
      $538$hi = i64toi32_i32$0;
      $13 = $12;
      i64toi32_i32$4 = $12;
      i64toi32_i32$0 = i64toi32_i32$4 >> 31 | 0;
      $541$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $22$hi;
      i64toi32_i32$0 = $541$hi;
      i64toi32_i32$4 = $22$hi;
      i64toi32_i32$4 = __wasm_i64_mul($12 | 0, i64toi32_i32$0 | 0, $22 | 0, i64toi32_i32$4 | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
      $543 = i64toi32_i32$4;
      $543$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $538$hi;
      i64toi32_i32$5 = i64toi32_i32$2;
      i64toi32_i32$4 = $543$hi;
      i64toi32_i32$3 = $543;
      i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
      i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
      }
      $544$hi = i64toi32_i32$2;
      $12 = $11;
      i64toi32_i32$5 = $11;
      i64toi32_i32$2 = i64toi32_i32$5 >> 31 | 0;
      $547$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $21$hi;
      i64toi32_i32$2 = $547$hi;
      i64toi32_i32$5 = $21$hi;
      i64toi32_i32$5 = __wasm_i64_mul($11 | 0, i64toi32_i32$2 | 0, $21 | 0, i64toi32_i32$5 | 0) | 0;
      i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
      $549 = i64toi32_i32$5;
      $549$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $544$hi;
      i64toi32_i32$0 = i64toi32_i32$1;
      i64toi32_i32$5 = $549$hi;
      i64toi32_i32$3 = $549;
      i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
      i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
      }
      $550$hi = i64toi32_i32$1;
      $11 = $10;
      i64toi32_i32$0 = $10;
      i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
      $553$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $20$hi;
      i64toi32_i32$1 = $553$hi;
      i64toi32_i32$0 = $20$hi;
      i64toi32_i32$0 = __wasm_i64_mul($10 | 0, i64toi32_i32$1 | 0, $20 | 0, i64toi32_i32$0 | 0) | 0;
      i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
      $555 = i64toi32_i32$0;
      $555$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $550$hi;
      i64toi32_i32$2 = i64toi32_i32$4;
      i64toi32_i32$0 = $555$hi;
      i64toi32_i32$3 = $555;
      i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
      i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
      if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $556$hi = i64toi32_i32$4;
      $10 = $9;
      i64toi32_i32$2 = $9;
      i64toi32_i32$4 = i64toi32_i32$2 >> 31 | 0;
      $559$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $19$hi;
      i64toi32_i32$4 = $559$hi;
      i64toi32_i32$2 = $19$hi;
      i64toi32_i32$2 = __wasm_i64_mul($9 | 0, i64toi32_i32$4 | 0, $19 | 0, i64toi32_i32$2 | 0) | 0;
      i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
      $561 = i64toi32_i32$2;
      $561$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $556$hi;
      i64toi32_i32$1 = i64toi32_i32$5;
      i64toi32_i32$2 = $561$hi;
      i64toi32_i32$3 = $561;
      i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
      i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $562$hi = i64toi32_i32$5;
      $9 = $4;
      i64toi32_i32$1 = $4;
      i64toi32_i32$5 = i64toi32_i32$1 >> 31 | 0;
      $565$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $18$hi;
      i64toi32_i32$5 = $565$hi;
      i64toi32_i32$1 = $18$hi;
      i64toi32_i32$1 = __wasm_i64_mul($4 | 0, i64toi32_i32$5 | 0, $18 | 0, i64toi32_i32$1 | 0) | 0;
      i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
      $567 = i64toi32_i32$1;
      $567$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $562$hi;
      i64toi32_i32$4 = i64toi32_i32$0;
      i64toi32_i32$1 = $567$hi;
      i64toi32_i32$3 = $567;
      i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
      i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
      }
      $568$hi = i64toi32_i32$0;
      $4 = $3;
      i64toi32_i32$4 = $3;
      i64toi32_i32$0 = i64toi32_i32$4 >> 31 | 0;
      $571$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $17$hi;
      i64toi32_i32$0 = $571$hi;
      i64toi32_i32$4 = $17$hi;
      i64toi32_i32$4 = __wasm_i64_mul($3 | 0, i64toi32_i32$0 | 0, $17 | 0, i64toi32_i32$4 | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
      $573 = i64toi32_i32$4;
      $573$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $568$hi;
      i64toi32_i32$5 = i64toi32_i32$2;
      i64toi32_i32$4 = $573$hi;
      i64toi32_i32$3 = $573;
      i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
      i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
      }
      $574$hi = i64toi32_i32$2;
      $3 = $6;
      i64toi32_i32$5 = $3;
      i64toi32_i32$2 = i64toi32_i32$5 >> 31 | 0;
      $577$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $7$hi;
      i64toi32_i32$2 = $577$hi;
      i64toi32_i32$5 = $7$hi;
      i64toi32_i32$5 = __wasm_i64_mul($3 | 0, i64toi32_i32$2 | 0, $7 | 0, i64toi32_i32$5 | 0) | 0;
      i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
      $579 = i64toi32_i32$5;
      $579$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $574$hi;
      i64toi32_i32$0 = i64toi32_i32$1;
      i64toi32_i32$5 = $579$hi;
      i64toi32_i32$3 = $579;
      i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
      i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
      }
      $580$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $8$hi;
      i64toi32_i32$1 = $580$hi;
      i64toi32_i32$2 = i64toi32_i32$4;
      i64toi32_i32$0 = $8$hi;
      i64toi32_i32$3 = $8;
      i64toi32_i32$5 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
       $584 = i64toi32_i32$1 >> i64toi32_i32$5 | 0;
      } else {
       i64toi32_i32$0 = i64toi32_i32$1 >> i64toi32_i32$5 | 0;
       $584 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$5 | 0) | 0;
      }
      $6 = $522 + $584 | 0;
      HEAP32[$518 >> 2] = $6;
      $15 = $16;
      $2 = $2 + 1 | 0;
      if (($2 | 0) != ($1 | 0)) {
       continue label$11
      }
      break label$1;
     };
    }
    label$12 : {
     if ($3 >>> 0 < 5 >>> 0) {
      break label$12
     }
     label$13 : {
      if ($3 >>> 0 < 7 >>> 0) {
       break label$13
      }
      i64toi32_i32$0 = 0;
      $8 = $4;
      $8$hi = i64toi32_i32$0;
      label$14 : {
       if (($3 | 0) == (8 | 0)) {
        break label$14
       }
       if (($1 | 0) < (1 | 0)) {
        break label$1
       }
       $6 = HEAP32[($5 + -4 | 0) >> 2] | 0;
       $3 = HEAP32[($5 + -8 | 0) >> 2] | 0;
       $4 = HEAP32[($5 + -12 | 0) >> 2] | 0;
       $9 = HEAP32[($5 + -16 | 0) >> 2] | 0;
       $10 = HEAP32[($5 + -20 | 0) >> 2] | 0;
       $11 = HEAP32[($5 + -24 | 0) >> 2] | 0;
       $12 = HEAP32[($5 + -28 | 0) >> 2] | 0;
       i64toi32_i32$1 = $2;
       i64toi32_i32$0 = HEAP32[i64toi32_i32$1 >> 2] | 0;
       i64toi32_i32$2 = i64toi32_i32$0 >> 31 | 0;
       $7 = i64toi32_i32$0;
       $7$hi = i64toi32_i32$2;
       i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
       i64toi32_i32$0 = i64toi32_i32$2 >> 31 | 0;
       $17 = i64toi32_i32$2;
       $17$hi = i64toi32_i32$0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] | 0;
       i64toi32_i32$2 = i64toi32_i32$0 >> 31 | 0;
       $18 = i64toi32_i32$0;
       $18$hi = i64toi32_i32$2;
       i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] | 0;
       i64toi32_i32$0 = i64toi32_i32$2 >> 31 | 0;
       $19 = i64toi32_i32$2;
       $19$hi = i64toi32_i32$0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 16 | 0) >> 2] | 0;
       i64toi32_i32$2 = i64toi32_i32$0 >> 31 | 0;
       $20 = i64toi32_i32$0;
       $20$hi = i64toi32_i32$2;
       i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 20 | 0) >> 2] | 0;
       i64toi32_i32$0 = i64toi32_i32$2 >> 31 | 0;
       $21 = i64toi32_i32$2;
       $21$hi = i64toi32_i32$0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 24 | 0) >> 2] | 0;
       i64toi32_i32$2 = i64toi32_i32$0 >> 31 | 0;
       $22 = i64toi32_i32$0;
       $22$hi = i64toi32_i32$2;
       $2 = 0;
       label$15 : while (1) {
        $13 = $2 << 2 | 0;
        $641 = $5 + $13 | 0;
        $645 = HEAP32[($0 + $13 | 0) >> 2] | 0;
        $13 = $11;
        i64toi32_i32$0 = $11;
        i64toi32_i32$2 = i64toi32_i32$0 >> 31 | 0;
        $648$hi = i64toi32_i32$2;
        i64toi32_i32$2 = $21$hi;
        i64toi32_i32$2 = $648$hi;
        i64toi32_i32$0 = $21$hi;
        i64toi32_i32$0 = __wasm_i64_mul($11 | 0, i64toi32_i32$2 | 0, $21 | 0, i64toi32_i32$0 | 0) | 0;
        i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
        $650 = i64toi32_i32$0;
        $650$hi = i64toi32_i32$2;
        i64toi32_i32$0 = $12;
        i64toi32_i32$2 = i64toi32_i32$0 >> 31 | 0;
        $652$hi = i64toi32_i32$2;
        i64toi32_i32$2 = $22$hi;
        i64toi32_i32$2 = $652$hi;
        i64toi32_i32$0 = $22$hi;
        i64toi32_i32$0 = __wasm_i64_mul($12 | 0, i64toi32_i32$2 | 0, $22 | 0, i64toi32_i32$0 | 0) | 0;
        i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
        $654 = i64toi32_i32$0;
        $654$hi = i64toi32_i32$2;
        i64toi32_i32$2 = $650$hi;
        i64toi32_i32$1 = $650;
        i64toi32_i32$0 = $654$hi;
        i64toi32_i32$3 = $654;
        i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
        i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
        if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
         i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
        }
        $655$hi = i64toi32_i32$4;
        $11 = $10;
        i64toi32_i32$1 = $10;
        i64toi32_i32$4 = i64toi32_i32$1 >> 31 | 0;
        $658$hi = i64toi32_i32$4;
        i64toi32_i32$4 = $20$hi;
        i64toi32_i32$4 = $658$hi;
        i64toi32_i32$1 = $20$hi;
        i64toi32_i32$1 = __wasm_i64_mul($10 | 0, i64toi32_i32$4 | 0, $20 | 0, i64toi32_i32$1 | 0) | 0;
        i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
        $660 = i64toi32_i32$1;
        $660$hi = i64toi32_i32$4;
        i64toi32_i32$4 = $655$hi;
        i64toi32_i32$2 = i64toi32_i32$5;
        i64toi32_i32$1 = $660$hi;
        i64toi32_i32$3 = $660;
        i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
        i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
        if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
         i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
        }
        $661$hi = i64toi32_i32$5;
        $10 = $9;
        i64toi32_i32$2 = $9;
        i64toi32_i32$5 = i64toi32_i32$2 >> 31 | 0;
        $664$hi = i64toi32_i32$5;
        i64toi32_i32$5 = $19$hi;
        i64toi32_i32$5 = $664$hi;
        i64toi32_i32$2 = $19$hi;
        i64toi32_i32$2 = __wasm_i64_mul($9 | 0, i64toi32_i32$5 | 0, $19 | 0, i64toi32_i32$2 | 0) | 0;
        i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
        $666 = i64toi32_i32$2;
        $666$hi = i64toi32_i32$5;
        i64toi32_i32$5 = $661$hi;
        i64toi32_i32$4 = i64toi32_i32$0;
        i64toi32_i32$2 = $666$hi;
        i64toi32_i32$3 = $666;
        i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
        i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
        if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
         i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
        }
        $667$hi = i64toi32_i32$0;
        $9 = $4;
        i64toi32_i32$4 = $4;
        i64toi32_i32$0 = i64toi32_i32$4 >> 31 | 0;
        $670$hi = i64toi32_i32$0;
        i64toi32_i32$0 = $18$hi;
        i64toi32_i32$0 = $670$hi;
        i64toi32_i32$4 = $18$hi;
        i64toi32_i32$4 = __wasm_i64_mul($4 | 0, i64toi32_i32$0 | 0, $18 | 0, i64toi32_i32$4 | 0) | 0;
        i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
        $672 = i64toi32_i32$4;
        $672$hi = i64toi32_i32$0;
        i64toi32_i32$0 = $667$hi;
        i64toi32_i32$5 = i64toi32_i32$1;
        i64toi32_i32$4 = $672$hi;
        i64toi32_i32$3 = $672;
        i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
        i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
        if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
         i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
        }
        $673$hi = i64toi32_i32$1;
        $4 = $3;
        i64toi32_i32$5 = $3;
        i64toi32_i32$1 = i64toi32_i32$5 >> 31 | 0;
        $676$hi = i64toi32_i32$1;
        i64toi32_i32$1 = $17$hi;
        i64toi32_i32$1 = $676$hi;
        i64toi32_i32$5 = $17$hi;
        i64toi32_i32$5 = __wasm_i64_mul($3 | 0, i64toi32_i32$1 | 0, $17 | 0, i64toi32_i32$5 | 0) | 0;
        i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
        $678 = i64toi32_i32$5;
        $678$hi = i64toi32_i32$1;
        i64toi32_i32$1 = $673$hi;
        i64toi32_i32$0 = i64toi32_i32$2;
        i64toi32_i32$5 = $678$hi;
        i64toi32_i32$3 = $678;
        i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
        i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
        if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
         i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
        }
        $679$hi = i64toi32_i32$2;
        $3 = $6;
        i64toi32_i32$0 = $3;
        i64toi32_i32$2 = i64toi32_i32$0 >> 31 | 0;
        $682$hi = i64toi32_i32$2;
        i64toi32_i32$2 = $7$hi;
        i64toi32_i32$2 = $682$hi;
        i64toi32_i32$0 = $7$hi;
        i64toi32_i32$0 = __wasm_i64_mul($3 | 0, i64toi32_i32$2 | 0, $7 | 0, i64toi32_i32$0 | 0) | 0;
        i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
        $684 = i64toi32_i32$0;
        $684$hi = i64toi32_i32$2;
        i64toi32_i32$2 = $679$hi;
        i64toi32_i32$1 = i64toi32_i32$4;
        i64toi32_i32$0 = $684$hi;
        i64toi32_i32$3 = $684;
        i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
        i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
        if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
         i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
        }
        $685$hi = i64toi32_i32$4;
        i64toi32_i32$4 = $8$hi;
        i64toi32_i32$4 = $685$hi;
        i64toi32_i32$2 = i64toi32_i32$5;
        i64toi32_i32$1 = $8$hi;
        i64toi32_i32$3 = $8;
        i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
         i64toi32_i32$1 = i64toi32_i32$4 >> 31 | 0;
         $585 = i64toi32_i32$4 >> i64toi32_i32$0 | 0;
        } else {
         i64toi32_i32$1 = i64toi32_i32$4 >> i64toi32_i32$0 | 0;
         $585 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$0 | 0) | 0;
        }
        $6 = $645 + $585 | 0;
        HEAP32[$641 >> 2] = $6;
        $12 = $13;
        $2 = $2 + 1 | 0;
        if (($2 | 0) != ($1 | 0)) {
         continue label$15
        }
        break label$1;
       };
      }
      if (($1 | 0) < (1 | 0)) {
       break label$1
      }
      $6 = HEAP32[($5 + -4 | 0) >> 2] | 0;
      $3 = HEAP32[($5 + -8 | 0) >> 2] | 0;
      $4 = HEAP32[($5 + -12 | 0) >> 2] | 0;
      $9 = HEAP32[($5 + -16 | 0) >> 2] | 0;
      $10 = HEAP32[($5 + -20 | 0) >> 2] | 0;
      $11 = HEAP32[($5 + -24 | 0) >> 2] | 0;
      $12 = HEAP32[($5 + -28 | 0) >> 2] | 0;
      $13 = HEAP32[($5 + -32 | 0) >> 2] | 0;
      i64toi32_i32$4 = $2;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$4 >> 2] | 0;
      i64toi32_i32$2 = i64toi32_i32$1 >> 31 | 0;
      $7 = i64toi32_i32$1;
      $7$hi = i64toi32_i32$2;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
      i64toi32_i32$1 = i64toi32_i32$2 >> 31 | 0;
      $17 = i64toi32_i32$2;
      $17$hi = i64toi32_i32$1;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 8 | 0) >> 2] | 0;
      i64toi32_i32$2 = i64toi32_i32$1 >> 31 | 0;
      $18 = i64toi32_i32$1;
      $18$hi = i64toi32_i32$2;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 12 | 0) >> 2] | 0;
      i64toi32_i32$1 = i64toi32_i32$2 >> 31 | 0;
      $19 = i64toi32_i32$2;
      $19$hi = i64toi32_i32$1;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 16 | 0) >> 2] | 0;
      i64toi32_i32$2 = i64toi32_i32$1 >> 31 | 0;
      $20 = i64toi32_i32$1;
      $20$hi = i64toi32_i32$2;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 20 | 0) >> 2] | 0;
      i64toi32_i32$1 = i64toi32_i32$2 >> 31 | 0;
      $21 = i64toi32_i32$2;
      $21$hi = i64toi32_i32$1;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 24 | 0) >> 2] | 0;
      i64toi32_i32$2 = i64toi32_i32$1 >> 31 | 0;
      $22 = i64toi32_i32$1;
      $22$hi = i64toi32_i32$2;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 28 | 0) >> 2] | 0;
      i64toi32_i32$1 = i64toi32_i32$2 >> 31 | 0;
      $23 = i64toi32_i32$2;
      $23$hi = i64toi32_i32$1;
      $2 = 0;
      label$16 : while (1) {
       $14 = $2 << 2 | 0;
       $743 = $5 + $14 | 0;
       $747 = HEAP32[($0 + $14 | 0) >> 2] | 0;
       $14 = $12;
       i64toi32_i32$2 = $12;
       i64toi32_i32$1 = i64toi32_i32$2 >> 31 | 0;
       $750$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $22$hi;
       i64toi32_i32$1 = $750$hi;
       i64toi32_i32$2 = $22$hi;
       i64toi32_i32$2 = __wasm_i64_mul($12 | 0, i64toi32_i32$1 | 0, $22 | 0, i64toi32_i32$2 | 0) | 0;
       i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
       $752 = i64toi32_i32$2;
       $752$hi = i64toi32_i32$1;
       i64toi32_i32$2 = $13;
       i64toi32_i32$1 = i64toi32_i32$2 >> 31 | 0;
       $754$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $23$hi;
       i64toi32_i32$1 = $754$hi;
       i64toi32_i32$2 = $23$hi;
       i64toi32_i32$2 = __wasm_i64_mul($13 | 0, i64toi32_i32$1 | 0, $23 | 0, i64toi32_i32$2 | 0) | 0;
       i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
       $756 = i64toi32_i32$2;
       $756$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $752$hi;
       i64toi32_i32$4 = $752;
       i64toi32_i32$2 = $756$hi;
       i64toi32_i32$3 = $756;
       i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
       i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
       if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
       }
       $757$hi = i64toi32_i32$5;
       $12 = $11;
       i64toi32_i32$4 = $11;
       i64toi32_i32$5 = i64toi32_i32$4 >> 31 | 0;
       $760$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $21$hi;
       i64toi32_i32$5 = $760$hi;
       i64toi32_i32$4 = $21$hi;
       i64toi32_i32$4 = __wasm_i64_mul($11 | 0, i64toi32_i32$5 | 0, $21 | 0, i64toi32_i32$4 | 0) | 0;
       i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
       $762 = i64toi32_i32$4;
       $762$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $757$hi;
       i64toi32_i32$1 = i64toi32_i32$0;
       i64toi32_i32$4 = $762$hi;
       i64toi32_i32$3 = $762;
       i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
       i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
       if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
       }
       $763$hi = i64toi32_i32$0;
       $11 = $10;
       i64toi32_i32$1 = $10;
       i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
       $766$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $20$hi;
       i64toi32_i32$0 = $766$hi;
       i64toi32_i32$1 = $20$hi;
       i64toi32_i32$1 = __wasm_i64_mul($10 | 0, i64toi32_i32$0 | 0, $20 | 0, i64toi32_i32$1 | 0) | 0;
       i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
       $768 = i64toi32_i32$1;
       $768$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $763$hi;
       i64toi32_i32$5 = i64toi32_i32$2;
       i64toi32_i32$1 = $768$hi;
       i64toi32_i32$3 = $768;
       i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
       i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
       if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
       }
       $769$hi = i64toi32_i32$2;
       $10 = $9;
       i64toi32_i32$5 = $9;
       i64toi32_i32$2 = i64toi32_i32$5 >> 31 | 0;
       $772$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $19$hi;
       i64toi32_i32$2 = $772$hi;
       i64toi32_i32$5 = $19$hi;
       i64toi32_i32$5 = __wasm_i64_mul($9 | 0, i64toi32_i32$2 | 0, $19 | 0, i64toi32_i32$5 | 0) | 0;
       i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
       $774 = i64toi32_i32$5;
       $774$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $769$hi;
       i64toi32_i32$0 = i64toi32_i32$4;
       i64toi32_i32$5 = $774$hi;
       i64toi32_i32$3 = $774;
       i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
       i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
       if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
       }
       $775$hi = i64toi32_i32$4;
       $9 = $4;
       i64toi32_i32$0 = $4;
       i64toi32_i32$4 = i64toi32_i32$0 >> 31 | 0;
       $778$hi = i64toi32_i32$4;
       i64toi32_i32$4 = $18$hi;
       i64toi32_i32$4 = $778$hi;
       i64toi32_i32$0 = $18$hi;
       i64toi32_i32$0 = __wasm_i64_mul($4 | 0, i64toi32_i32$4 | 0, $18 | 0, i64toi32_i32$0 | 0) | 0;
       i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
       $780 = i64toi32_i32$0;
       $780$hi = i64toi32_i32$4;
       i64toi32_i32$4 = $775$hi;
       i64toi32_i32$2 = i64toi32_i32$1;
       i64toi32_i32$0 = $780$hi;
       i64toi32_i32$3 = $780;
       i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
       i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
       if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
       }
       $781$hi = i64toi32_i32$1;
       $4 = $3;
       i64toi32_i32$2 = $3;
       i64toi32_i32$1 = i64toi32_i32$2 >> 31 | 0;
       $784$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $17$hi;
       i64toi32_i32$1 = $784$hi;
       i64toi32_i32$2 = $17$hi;
       i64toi32_i32$2 = __wasm_i64_mul($3 | 0, i64toi32_i32$1 | 0, $17 | 0, i64toi32_i32$2 | 0) | 0;
       i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
       $786 = i64toi32_i32$2;
       $786$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $781$hi;
       i64toi32_i32$4 = i64toi32_i32$5;
       i64toi32_i32$2 = $786$hi;
       i64toi32_i32$3 = $786;
       i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
       i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
       if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
       }
       $787$hi = i64toi32_i32$5;
       $3 = $6;
       i64toi32_i32$4 = $3;
       i64toi32_i32$5 = i64toi32_i32$4 >> 31 | 0;
       $790$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $7$hi;
       i64toi32_i32$5 = $790$hi;
       i64toi32_i32$4 = $7$hi;
       i64toi32_i32$4 = __wasm_i64_mul($3 | 0, i64toi32_i32$5 | 0, $7 | 0, i64toi32_i32$4 | 0) | 0;
       i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
       $792 = i64toi32_i32$4;
       $792$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $787$hi;
       i64toi32_i32$1 = i64toi32_i32$0;
       i64toi32_i32$4 = $792$hi;
       i64toi32_i32$3 = $792;
       i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
       i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
       if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
       }
       $793$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $8$hi;
       i64toi32_i32$0 = $793$hi;
       i64toi32_i32$5 = i64toi32_i32$2;
       i64toi32_i32$1 = $8$hi;
       i64toi32_i32$3 = $8;
       i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
        i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
        $586 = i64toi32_i32$0 >> i64toi32_i32$4 | 0;
       } else {
        i64toi32_i32$1 = i64toi32_i32$0 >> i64toi32_i32$4 | 0;
        $586 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$4 | 0) | 0;
       }
       $6 = $747 + $586 | 0;
       HEAP32[$743 >> 2] = $6;
       $13 = $14;
       $2 = $2 + 1 | 0;
       if (($2 | 0) != ($1 | 0)) {
        continue label$16
       }
       break label$1;
      };
     }
     i64toi32_i32$1 = 0;
     $8 = $4;
     $8$hi = i64toi32_i32$1;
     label$17 : {
      if (($3 | 0) == (6 | 0)) {
       break label$17
      }
      if (($1 | 0) < (1 | 0)) {
       break label$1
      }
      $6 = HEAP32[($5 + -4 | 0) >> 2] | 0;
      $3 = HEAP32[($5 + -8 | 0) >> 2] | 0;
      $4 = HEAP32[($5 + -12 | 0) >> 2] | 0;
      $9 = HEAP32[($5 + -16 | 0) >> 2] | 0;
      $10 = HEAP32[($5 + -20 | 0) >> 2] | 0;
      i64toi32_i32$0 = $2;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$0 >> 2] | 0;
      i64toi32_i32$5 = i64toi32_i32$1 >> 31 | 0;
      $7 = i64toi32_i32$1;
      $7$hi = i64toi32_i32$5;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
      i64toi32_i32$1 = i64toi32_i32$5 >> 31 | 0;
      $17 = i64toi32_i32$5;
      $17$hi = i64toi32_i32$1;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] | 0;
      i64toi32_i32$5 = i64toi32_i32$1 >> 31 | 0;
      $18 = i64toi32_i32$1;
      $18$hi = i64toi32_i32$5;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] | 0;
      i64toi32_i32$1 = i64toi32_i32$5 >> 31 | 0;
      $19 = i64toi32_i32$5;
      $19$hi = i64toi32_i32$1;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 16 | 0) >> 2] | 0;
      i64toi32_i32$5 = i64toi32_i32$1 >> 31 | 0;
      $20 = i64toi32_i32$1;
      $20$hi = i64toi32_i32$5;
      $2 = 0;
      label$18 : while (1) {
       $11 = $2 << 2 | 0;
       $840 = $5 + $11 | 0;
       $844 = HEAP32[($0 + $11 | 0) >> 2] | 0;
       $11 = $9;
       i64toi32_i32$1 = $9;
       i64toi32_i32$5 = i64toi32_i32$1 >> 31 | 0;
       $847$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $19$hi;
       i64toi32_i32$5 = $847$hi;
       i64toi32_i32$1 = $19$hi;
       i64toi32_i32$1 = __wasm_i64_mul($9 | 0, i64toi32_i32$5 | 0, $19 | 0, i64toi32_i32$1 | 0) | 0;
       i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
       $849 = i64toi32_i32$1;
       $849$hi = i64toi32_i32$5;
       i64toi32_i32$1 = $10;
       i64toi32_i32$5 = i64toi32_i32$1 >> 31 | 0;
       $851$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $20$hi;
       i64toi32_i32$5 = $851$hi;
       i64toi32_i32$1 = $20$hi;
       i64toi32_i32$1 = __wasm_i64_mul($10 | 0, i64toi32_i32$5 | 0, $20 | 0, i64toi32_i32$1 | 0) | 0;
       i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
       $853 = i64toi32_i32$1;
       $853$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $849$hi;
       i64toi32_i32$0 = $849;
       i64toi32_i32$1 = $853$hi;
       i64toi32_i32$3 = $853;
       i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
       i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
       if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
       }
       $854$hi = i64toi32_i32$2;
       $9 = $4;
       i64toi32_i32$0 = $4;
       i64toi32_i32$2 = i64toi32_i32$0 >> 31 | 0;
       $857$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $18$hi;
       i64toi32_i32$2 = $857$hi;
       i64toi32_i32$0 = $18$hi;
       i64toi32_i32$0 = __wasm_i64_mul($4 | 0, i64toi32_i32$2 | 0, $18 | 0, i64toi32_i32$0 | 0) | 0;
       i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
       $859 = i64toi32_i32$0;
       $859$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $854$hi;
       i64toi32_i32$5 = i64toi32_i32$4;
       i64toi32_i32$0 = $859$hi;
       i64toi32_i32$3 = $859;
       i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
       i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
       if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
       }
       $860$hi = i64toi32_i32$4;
       $4 = $3;
       i64toi32_i32$5 = $3;
       i64toi32_i32$4 = i64toi32_i32$5 >> 31 | 0;
       $863$hi = i64toi32_i32$4;
       i64toi32_i32$4 = $17$hi;
       i64toi32_i32$4 = $863$hi;
       i64toi32_i32$5 = $17$hi;
       i64toi32_i32$5 = __wasm_i64_mul($3 | 0, i64toi32_i32$4 | 0, $17 | 0, i64toi32_i32$5 | 0) | 0;
       i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
       $865 = i64toi32_i32$5;
       $865$hi = i64toi32_i32$4;
       i64toi32_i32$4 = $860$hi;
       i64toi32_i32$2 = i64toi32_i32$1;
       i64toi32_i32$5 = $865$hi;
       i64toi32_i32$3 = $865;
       i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
       i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
       if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
       }
       $866$hi = i64toi32_i32$1;
       $3 = $6;
       i64toi32_i32$2 = $3;
       i64toi32_i32$1 = i64toi32_i32$2 >> 31 | 0;
       $869$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $7$hi;
       i64toi32_i32$1 = $869$hi;
       i64toi32_i32$2 = $7$hi;
       i64toi32_i32$2 = __wasm_i64_mul($3 | 0, i64toi32_i32$1 | 0, $7 | 0, i64toi32_i32$2 | 0) | 0;
       i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
       $871 = i64toi32_i32$2;
       $871$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $866$hi;
       i64toi32_i32$4 = i64toi32_i32$0;
       i64toi32_i32$2 = $871$hi;
       i64toi32_i32$3 = $871;
       i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
       i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
       if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
       }
       $872$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $8$hi;
       i64toi32_i32$0 = $872$hi;
       i64toi32_i32$1 = i64toi32_i32$5;
       i64toi32_i32$4 = $8$hi;
       i64toi32_i32$3 = $8;
       i64toi32_i32$2 = i64toi32_i32$3 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
        i64toi32_i32$4 = i64toi32_i32$0 >> 31 | 0;
        $587 = i64toi32_i32$0 >> i64toi32_i32$2 | 0;
       } else {
        i64toi32_i32$4 = i64toi32_i32$0 >> i64toi32_i32$2 | 0;
        $587 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$2 | 0) | 0;
       }
       $6 = $844 + $587 | 0;
       HEAP32[$840 >> 2] = $6;
       $10 = $11;
       $2 = $2 + 1 | 0;
       if (($2 | 0) != ($1 | 0)) {
        continue label$18
       }
       break label$1;
      };
     }
     if (($1 | 0) < (1 | 0)) {
      break label$1
     }
     $6 = HEAP32[($5 + -4 | 0) >> 2] | 0;
     $3 = HEAP32[($5 + -8 | 0) >> 2] | 0;
     $4 = HEAP32[($5 + -12 | 0) >> 2] | 0;
     $9 = HEAP32[($5 + -16 | 0) >> 2] | 0;
     $10 = HEAP32[($5 + -20 | 0) >> 2] | 0;
     $11 = HEAP32[($5 + -24 | 0) >> 2] | 0;
     i64toi32_i32$0 = $2;
     i64toi32_i32$4 = HEAP32[i64toi32_i32$0 >> 2] | 0;
     i64toi32_i32$1 = i64toi32_i32$4 >> 31 | 0;
     $7 = i64toi32_i32$4;
     $7$hi = i64toi32_i32$1;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
     i64toi32_i32$4 = i64toi32_i32$1 >> 31 | 0;
     $17 = i64toi32_i32$1;
     $17$hi = i64toi32_i32$4;
     i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] | 0;
     i64toi32_i32$1 = i64toi32_i32$4 >> 31 | 0;
     $18 = i64toi32_i32$4;
     $18$hi = i64toi32_i32$1;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] | 0;
     i64toi32_i32$4 = i64toi32_i32$1 >> 31 | 0;
     $19 = i64toi32_i32$1;
     $19$hi = i64toi32_i32$4;
     i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 16 | 0) >> 2] | 0;
     i64toi32_i32$1 = i64toi32_i32$4 >> 31 | 0;
     $20 = i64toi32_i32$4;
     $20$hi = i64toi32_i32$1;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 20 | 0) >> 2] | 0;
     i64toi32_i32$4 = i64toi32_i32$1 >> 31 | 0;
     $21 = i64toi32_i32$1;
     $21$hi = i64toi32_i32$4;
     $2 = 0;
     label$19 : while (1) {
      $12 = $2 << 2 | 0;
      $920 = $5 + $12 | 0;
      $924 = HEAP32[($0 + $12 | 0) >> 2] | 0;
      $12 = $10;
      i64toi32_i32$1 = $10;
      i64toi32_i32$4 = i64toi32_i32$1 >> 31 | 0;
      $927$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $20$hi;
      i64toi32_i32$4 = $927$hi;
      i64toi32_i32$1 = $20$hi;
      i64toi32_i32$1 = __wasm_i64_mul($10 | 0, i64toi32_i32$4 | 0, $20 | 0, i64toi32_i32$1 | 0) | 0;
      i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
      $929 = i64toi32_i32$1;
      $929$hi = i64toi32_i32$4;
      i64toi32_i32$1 = $11;
      i64toi32_i32$4 = i64toi32_i32$1 >> 31 | 0;
      $931$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $21$hi;
      i64toi32_i32$4 = $931$hi;
      i64toi32_i32$1 = $21$hi;
      i64toi32_i32$1 = __wasm_i64_mul($11 | 0, i64toi32_i32$4 | 0, $21 | 0, i64toi32_i32$1 | 0) | 0;
      i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
      $933 = i64toi32_i32$1;
      $933$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $929$hi;
      i64toi32_i32$0 = $929;
      i64toi32_i32$1 = $933$hi;
      i64toi32_i32$3 = $933;
      i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
      i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $934$hi = i64toi32_i32$5;
      $10 = $9;
      i64toi32_i32$0 = $9;
      i64toi32_i32$5 = i64toi32_i32$0 >> 31 | 0;
      $937$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $19$hi;
      i64toi32_i32$5 = $937$hi;
      i64toi32_i32$0 = $19$hi;
      i64toi32_i32$0 = __wasm_i64_mul($9 | 0, i64toi32_i32$5 | 0, $19 | 0, i64toi32_i32$0 | 0) | 0;
      i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
      $939 = i64toi32_i32$0;
      $939$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $934$hi;
      i64toi32_i32$4 = i64toi32_i32$2;
      i64toi32_i32$0 = $939$hi;
      i64toi32_i32$3 = $939;
      i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
      i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
      }
      $940$hi = i64toi32_i32$2;
      $9 = $4;
      i64toi32_i32$4 = $4;
      i64toi32_i32$2 = i64toi32_i32$4 >> 31 | 0;
      $943$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $18$hi;
      i64toi32_i32$2 = $943$hi;
      i64toi32_i32$4 = $18$hi;
      i64toi32_i32$4 = __wasm_i64_mul($4 | 0, i64toi32_i32$2 | 0, $18 | 0, i64toi32_i32$4 | 0) | 0;
      i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
      $945 = i64toi32_i32$4;
      $945$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $940$hi;
      i64toi32_i32$5 = i64toi32_i32$1;
      i64toi32_i32$4 = $945$hi;
      i64toi32_i32$3 = $945;
      i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
      i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
      if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
      }
      $946$hi = i64toi32_i32$1;
      $4 = $3;
      i64toi32_i32$5 = $3;
      i64toi32_i32$1 = i64toi32_i32$5 >> 31 | 0;
      $949$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $17$hi;
      i64toi32_i32$1 = $949$hi;
      i64toi32_i32$5 = $17$hi;
      i64toi32_i32$5 = __wasm_i64_mul($3 | 0, i64toi32_i32$1 | 0, $17 | 0, i64toi32_i32$5 | 0) | 0;
      i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
      $951 = i64toi32_i32$5;
      $951$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $946$hi;
      i64toi32_i32$2 = i64toi32_i32$0;
      i64toi32_i32$5 = $951$hi;
      i64toi32_i32$3 = $951;
      i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
      i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
      }
      $952$hi = i64toi32_i32$0;
      $3 = $6;
      i64toi32_i32$2 = $3;
      i64toi32_i32$0 = i64toi32_i32$2 >> 31 | 0;
      $955$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $7$hi;
      i64toi32_i32$0 = $955$hi;
      i64toi32_i32$2 = $7$hi;
      i64toi32_i32$2 = __wasm_i64_mul($3 | 0, i64toi32_i32$0 | 0, $7 | 0, i64toi32_i32$2 | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
      $957 = i64toi32_i32$2;
      $957$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $952$hi;
      i64toi32_i32$1 = i64toi32_i32$4;
      i64toi32_i32$2 = $957$hi;
      i64toi32_i32$3 = $957;
      i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
      i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $958$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $8$hi;
      i64toi32_i32$4 = $958$hi;
      i64toi32_i32$0 = i64toi32_i32$5;
      i64toi32_i32$1 = $8$hi;
      i64toi32_i32$3 = $8;
      i64toi32_i32$2 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$4 >> 31 | 0;
       $588 = i64toi32_i32$4 >> i64toi32_i32$2 | 0;
      } else {
       i64toi32_i32$1 = i64toi32_i32$4 >> i64toi32_i32$2 | 0;
       $588 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$2 | 0) | 0;
      }
      $6 = $924 + $588 | 0;
      HEAP32[$920 >> 2] = $6;
      $11 = $12;
      $2 = $2 + 1 | 0;
      if (($2 | 0) != ($1 | 0)) {
       continue label$19
      }
      break label$1;
     };
    }
    label$20 : {
     if ($3 >>> 0 < 3 >>> 0) {
      break label$20
     }
     i64toi32_i32$1 = 0;
     $8 = $4;
     $8$hi = i64toi32_i32$1;
     label$21 : {
      if (($3 | 0) == (4 | 0)) {
       break label$21
      }
      if (($1 | 0) < (1 | 0)) {
       break label$1
      }
      $6 = HEAP32[($5 + -4 | 0) >> 2] | 0;
      $3 = HEAP32[($5 + -8 | 0) >> 2] | 0;
      $4 = HEAP32[($5 + -12 | 0) >> 2] | 0;
      i64toi32_i32$4 = $2;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$4 >> 2] | 0;
      i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
      $7 = i64toi32_i32$1;
      $7$hi = i64toi32_i32$0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
      i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
      $17 = i64toi32_i32$0;
      $17$hi = i64toi32_i32$1;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 8 | 0) >> 2] | 0;
      i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
      $18 = i64toi32_i32$1;
      $18$hi = i64toi32_i32$0;
      $2 = 0;
      label$22 : while (1) {
       $9 = $2 << 2 | 0;
       $997 = $5 + $9 | 0;
       $1001 = HEAP32[($0 + $9 | 0) >> 2] | 0;
       $9 = $3;
       i64toi32_i32$1 = $3;
       i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
       $1004$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $17$hi;
       i64toi32_i32$0 = $1004$hi;
       i64toi32_i32$1 = $17$hi;
       i64toi32_i32$1 = __wasm_i64_mul($3 | 0, i64toi32_i32$0 | 0, $17 | 0, i64toi32_i32$1 | 0) | 0;
       i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
       $1006 = i64toi32_i32$1;
       $1006$hi = i64toi32_i32$0;
       i64toi32_i32$1 = $4;
       i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
       $1008$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $18$hi;
       i64toi32_i32$0 = $1008$hi;
       i64toi32_i32$1 = $18$hi;
       i64toi32_i32$1 = __wasm_i64_mul($4 | 0, i64toi32_i32$0 | 0, $18 | 0, i64toi32_i32$1 | 0) | 0;
       i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
       $1010 = i64toi32_i32$1;
       $1010$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $1006$hi;
       i64toi32_i32$4 = $1006;
       i64toi32_i32$1 = $1010$hi;
       i64toi32_i32$3 = $1010;
       i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
       i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
       if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
       }
       $1011$hi = i64toi32_i32$5;
       $3 = $6;
       i64toi32_i32$4 = $3;
       i64toi32_i32$5 = i64toi32_i32$4 >> 31 | 0;
       $1014$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $7$hi;
       i64toi32_i32$5 = $1014$hi;
       i64toi32_i32$4 = $7$hi;
       i64toi32_i32$4 = __wasm_i64_mul($3 | 0, i64toi32_i32$5 | 0, $7 | 0, i64toi32_i32$4 | 0) | 0;
       i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
       $1016 = i64toi32_i32$4;
       $1016$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $1011$hi;
       i64toi32_i32$0 = i64toi32_i32$2;
       i64toi32_i32$4 = $1016$hi;
       i64toi32_i32$3 = $1016;
       i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
       i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
       if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
       }
       $1017$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $8$hi;
       i64toi32_i32$2 = $1017$hi;
       i64toi32_i32$5 = i64toi32_i32$1;
       i64toi32_i32$0 = $8$hi;
       i64toi32_i32$3 = $8;
       i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
        i64toi32_i32$0 = i64toi32_i32$2 >> 31 | 0;
        $589 = i64toi32_i32$2 >> i64toi32_i32$4 | 0;
       } else {
        i64toi32_i32$0 = i64toi32_i32$2 >> i64toi32_i32$4 | 0;
        $589 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$4 | 0) | 0;
       }
       $6 = $1001 + $589 | 0;
       HEAP32[$997 >> 2] = $6;
       $4 = $9;
       $2 = $2 + 1 | 0;
       if (($2 | 0) != ($1 | 0)) {
        continue label$22
       }
       break label$1;
      };
     }
     if (($1 | 0) < (1 | 0)) {
      break label$1
     }
     $6 = HEAP32[($5 + -4 | 0) >> 2] | 0;
     $3 = HEAP32[($5 + -8 | 0) >> 2] | 0;
     $4 = HEAP32[($5 + -12 | 0) >> 2] | 0;
     $9 = HEAP32[($5 + -16 | 0) >> 2] | 0;
     i64toi32_i32$2 = $2;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$5 = i64toi32_i32$0 >> 31 | 0;
     $7 = i64toi32_i32$0;
     $7$hi = i64toi32_i32$5;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     i64toi32_i32$0 = i64toi32_i32$5 >> 31 | 0;
     $17 = i64toi32_i32$5;
     $17$hi = i64toi32_i32$0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
     i64toi32_i32$5 = i64toi32_i32$0 >> 31 | 0;
     $18 = i64toi32_i32$0;
     $18$hi = i64toi32_i32$5;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] | 0;
     i64toi32_i32$0 = i64toi32_i32$5 >> 31 | 0;
     $19 = i64toi32_i32$5;
     $19$hi = i64toi32_i32$0;
     $2 = 0;
     label$23 : while (1) {
      $10 = $2 << 2 | 0;
      $1055 = $5 + $10 | 0;
      $1059 = HEAP32[($0 + $10 | 0) >> 2] | 0;
      $10 = $4;
      i64toi32_i32$5 = $4;
      i64toi32_i32$0 = i64toi32_i32$5 >> 31 | 0;
      $1062$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $18$hi;
      i64toi32_i32$0 = $1062$hi;
      i64toi32_i32$5 = $18$hi;
      i64toi32_i32$5 = __wasm_i64_mul($4 | 0, i64toi32_i32$0 | 0, $18 | 0, i64toi32_i32$5 | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
      $1064 = i64toi32_i32$5;
      $1064$hi = i64toi32_i32$0;
      i64toi32_i32$5 = $9;
      i64toi32_i32$0 = i64toi32_i32$5 >> 31 | 0;
      $1066$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $19$hi;
      i64toi32_i32$0 = $1066$hi;
      i64toi32_i32$5 = $19$hi;
      i64toi32_i32$5 = __wasm_i64_mul($9 | 0, i64toi32_i32$0 | 0, $19 | 0, i64toi32_i32$5 | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
      $1068 = i64toi32_i32$5;
      $1068$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $1064$hi;
      i64toi32_i32$2 = $1064;
      i64toi32_i32$5 = $1068$hi;
      i64toi32_i32$3 = $1068;
      i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
      i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
      }
      $1069$hi = i64toi32_i32$1;
      $4 = $3;
      i64toi32_i32$2 = $3;
      i64toi32_i32$1 = i64toi32_i32$2 >> 31 | 0;
      $1072$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $17$hi;
      i64toi32_i32$1 = $1072$hi;
      i64toi32_i32$2 = $17$hi;
      i64toi32_i32$2 = __wasm_i64_mul($3 | 0, i64toi32_i32$1 | 0, $17 | 0, i64toi32_i32$2 | 0) | 0;
      i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
      $1074 = i64toi32_i32$2;
      $1074$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $1069$hi;
      i64toi32_i32$0 = i64toi32_i32$4;
      i64toi32_i32$2 = $1074$hi;
      i64toi32_i32$3 = $1074;
      i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
      i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $1075$hi = i64toi32_i32$4;
      $3 = $6;
      i64toi32_i32$0 = $3;
      i64toi32_i32$4 = i64toi32_i32$0 >> 31 | 0;
      $1078$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $7$hi;
      i64toi32_i32$4 = $1078$hi;
      i64toi32_i32$0 = $7$hi;
      i64toi32_i32$0 = __wasm_i64_mul($3 | 0, i64toi32_i32$4 | 0, $7 | 0, i64toi32_i32$0 | 0) | 0;
      i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
      $1080 = i64toi32_i32$0;
      $1080$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $1075$hi;
      i64toi32_i32$1 = i64toi32_i32$5;
      i64toi32_i32$0 = $1080$hi;
      i64toi32_i32$3 = $1080;
      i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
      i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $1081$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $8$hi;
      i64toi32_i32$5 = $1081$hi;
      i64toi32_i32$4 = i64toi32_i32$2;
      i64toi32_i32$1 = $8$hi;
      i64toi32_i32$3 = $8;
      i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$5 >> 31 | 0;
       $590 = i64toi32_i32$5 >> i64toi32_i32$0 | 0;
      } else {
       i64toi32_i32$1 = i64toi32_i32$5 >> i64toi32_i32$0 | 0;
       $590 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$0 | 0) | 0;
      }
      $6 = $1059 + $590 | 0;
      HEAP32[$1055 >> 2] = $6;
      $9 = $10;
      $2 = $2 + 1 | 0;
      if (($2 | 0) != ($1 | 0)) {
       continue label$23
      }
      break label$1;
     };
    }
    i64toi32_i32$1 = 0;
    $8 = $4;
    $8$hi = i64toi32_i32$1;
    label$24 : {
     if (($3 | 0) == (2 | 0)) {
      break label$24
     }
     if (($1 | 0) < (1 | 0)) {
      break label$1
     }
     $4 = $1 & 1 | 0;
     $3 = HEAP32[($5 + -4 | 0) >> 2] | 0;
     i64toi32_i32$5 = $2;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$5 >> 2] | 0;
     i64toi32_i32$4 = i64toi32_i32$1 >> 31 | 0;
     $7 = i64toi32_i32$1;
     $7$hi = i64toi32_i32$4;
     $2 = 0;
     label$25 : {
      if (($1 | 0) == (1 | 0)) {
       break label$25
      }
      $1 = $1 & -2 | 0;
      $2 = 0;
      label$26 : while (1) {
       $6 = $2 << 2 | 0;
       $1114 = $5 + $6 | 0;
       $1118 = HEAP32[($0 + $6 | 0) >> 2] | 0;
       i64toi32_i32$1 = $3;
       i64toi32_i32$4 = i64toi32_i32$1 >> 31 | 0;
       $1120$hi = i64toi32_i32$4;
       i64toi32_i32$4 = $7$hi;
       i64toi32_i32$4 = $1120$hi;
       i64toi32_i32$1 = $7$hi;
       i64toi32_i32$1 = __wasm_i64_mul($3 | 0, i64toi32_i32$4 | 0, $7 | 0, i64toi32_i32$1 | 0) | 0;
       i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
       $1122$hi = i64toi32_i32$4;
       i64toi32_i32$4 = $8$hi;
       i64toi32_i32$4 = $1122$hi;
       i64toi32_i32$5 = i64toi32_i32$1;
       i64toi32_i32$1 = $8$hi;
       i64toi32_i32$3 = $8;
       i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
        i64toi32_i32$1 = i64toi32_i32$4 >> 31 | 0;
        $591 = i64toi32_i32$4 >> i64toi32_i32$0 | 0;
       } else {
        i64toi32_i32$1 = i64toi32_i32$4 >> i64toi32_i32$0 | 0;
        $591 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$0 | 0) | 0;
       }
       $3 = $1118 + $591 | 0;
       HEAP32[$1114 >> 2] = $3;
       $6 = $6 | 4 | 0;
       $1132 = $5 + $6 | 0;
       $1136 = HEAP32[($0 + $6 | 0) >> 2] | 0;
       i64toi32_i32$5 = $3;
       i64toi32_i32$1 = i64toi32_i32$5 >> 31 | 0;
       $1138$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $7$hi;
       i64toi32_i32$1 = $1138$hi;
       i64toi32_i32$5 = $7$hi;
       i64toi32_i32$5 = __wasm_i64_mul($3 | 0, i64toi32_i32$1 | 0, $7 | 0, i64toi32_i32$5 | 0) | 0;
       i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
       $1140$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $8$hi;
       i64toi32_i32$1 = $1140$hi;
       i64toi32_i32$4 = i64toi32_i32$5;
       i64toi32_i32$5 = $8$hi;
       i64toi32_i32$3 = $8;
       i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
        i64toi32_i32$5 = i64toi32_i32$1 >> 31 | 0;
        $592 = i64toi32_i32$1 >> i64toi32_i32$0 | 0;
       } else {
        i64toi32_i32$5 = i64toi32_i32$1 >> i64toi32_i32$0 | 0;
        $592 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$0 | 0) | 0;
       }
       $3 = $1136 + $592 | 0;
       HEAP32[$1132 >> 2] = $3;
       $2 = $2 + 2 | 0;
       $1 = $1 + -2 | 0;
       if ($1) {
        continue label$26
       }
       break label$26;
      };
     }
     if (!$4) {
      break label$1
     }
     $2 = $2 << 2 | 0;
     $1157 = $5 + $2 | 0;
     $1161 = HEAP32[($0 + $2 | 0) >> 2] | 0;
     i64toi32_i32$4 = $3;
     i64toi32_i32$5 = i64toi32_i32$4 >> 31 | 0;
     $1163$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $7$hi;
     i64toi32_i32$5 = $1163$hi;
     i64toi32_i32$4 = $7$hi;
     i64toi32_i32$4 = __wasm_i64_mul($3 | 0, i64toi32_i32$5 | 0, $7 | 0, i64toi32_i32$4 | 0) | 0;
     i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
     $1165$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $8$hi;
     i64toi32_i32$5 = $1165$hi;
     i64toi32_i32$1 = i64toi32_i32$4;
     i64toi32_i32$4 = $8$hi;
     i64toi32_i32$3 = $8;
     i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$5 >> 31 | 0;
      $593 = i64toi32_i32$5 >> i64toi32_i32$0 | 0;
     } else {
      i64toi32_i32$4 = i64toi32_i32$5 >> i64toi32_i32$0 | 0;
      $593 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$0 | 0) | 0;
     }
     HEAP32[$1157 >> 2] = $1161 + $593 | 0;
     break label$1;
    }
    if (($1 | 0) < (1 | 0)) {
     break label$1
    }
    $9 = $1 & 1 | 0;
    $4 = HEAP32[($5 + -4 | 0) >> 2] | 0;
    $6 = HEAP32[($5 + -8 | 0) >> 2] | 0;
    i64toi32_i32$5 = $2;
    i64toi32_i32$4 = HEAP32[i64toi32_i32$5 >> 2] | 0;
    i64toi32_i32$1 = i64toi32_i32$4 >> 31 | 0;
    $7 = i64toi32_i32$4;
    $7$hi = i64toi32_i32$1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
    i64toi32_i32$4 = i64toi32_i32$1 >> 31 | 0;
    $17 = i64toi32_i32$1;
    $17$hi = i64toi32_i32$4;
    $2 = 0;
    label$27 : {
     if (($1 | 0) == (1 | 0)) {
      break label$27
     }
     $1 = $1 & -2 | 0;
     $2 = 0;
     label$28 : while (1) {
      $3 = $2 << 2 | 0;
      $1192 = $5 + $3 | 0;
      $1196 = HEAP32[($0 + $3 | 0) >> 2] | 0;
      i64toi32_i32$1 = $4;
      i64toi32_i32$4 = i64toi32_i32$1 >> 31 | 0;
      $18 = i64toi32_i32$1;
      $18$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $7$hi;
      i64toi32_i32$4 = $18$hi;
      i64toi32_i32$1 = $7$hi;
      i64toi32_i32$1 = __wasm_i64_mul($4 | 0, i64toi32_i32$4 | 0, $7 | 0, i64toi32_i32$1 | 0) | 0;
      i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
      $1201 = i64toi32_i32$1;
      $1201$hi = i64toi32_i32$4;
      i64toi32_i32$1 = $6;
      i64toi32_i32$4 = i64toi32_i32$1 >> 31 | 0;
      $1203$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $17$hi;
      i64toi32_i32$4 = $1203$hi;
      i64toi32_i32$1 = $17$hi;
      i64toi32_i32$1 = __wasm_i64_mul($6 | 0, i64toi32_i32$4 | 0, $17 | 0, i64toi32_i32$1 | 0) | 0;
      i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
      $1205 = i64toi32_i32$1;
      $1205$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $1201$hi;
      i64toi32_i32$5 = $1201;
      i64toi32_i32$1 = $1205$hi;
      i64toi32_i32$3 = $1205;
      i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
      i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
      }
      $1206$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $8$hi;
      i64toi32_i32$2 = $1206$hi;
      i64toi32_i32$4 = i64toi32_i32$0;
      i64toi32_i32$5 = $8$hi;
      i64toi32_i32$3 = $8;
      i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$2 >> 31 | 0;
       $594 = i64toi32_i32$2 >> i64toi32_i32$1 | 0;
      } else {
       i64toi32_i32$5 = i64toi32_i32$2 >> i64toi32_i32$1 | 0;
       $594 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$1 | 0) | 0;
      }
      $6 = $1196 + $594 | 0;
      HEAP32[$1192 >> 2] = $6;
      $3 = $3 | 4 | 0;
      $1216 = $5 + $3 | 0;
      $1220 = HEAP32[($0 + $3 | 0) >> 2] | 0;
      i64toi32_i32$4 = $6;
      i64toi32_i32$5 = i64toi32_i32$4 >> 31 | 0;
      $1222$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $7$hi;
      i64toi32_i32$5 = $1222$hi;
      i64toi32_i32$4 = $7$hi;
      i64toi32_i32$4 = __wasm_i64_mul($6 | 0, i64toi32_i32$5 | 0, $7 | 0, i64toi32_i32$4 | 0) | 0;
      i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
      $1224 = i64toi32_i32$4;
      $1224$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $18$hi;
      i64toi32_i32$5 = $17$hi;
      i64toi32_i32$5 = $18$hi;
      i64toi32_i32$4 = $17$hi;
      i64toi32_i32$4 = __wasm_i64_mul($18 | 0, i64toi32_i32$5 | 0, $17 | 0, i64toi32_i32$4 | 0) | 0;
      i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
      $1227 = i64toi32_i32$4;
      $1227$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $1224$hi;
      i64toi32_i32$2 = $1224;
      i64toi32_i32$4 = $1227$hi;
      i64toi32_i32$3 = $1227;
      i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
      i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
      }
      $1228$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $8$hi;
      i64toi32_i32$0 = $1228$hi;
      i64toi32_i32$5 = i64toi32_i32$1;
      i64toi32_i32$2 = $8$hi;
      i64toi32_i32$3 = $8;
      i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$0 >> 31 | 0;
       $595 = i64toi32_i32$0 >> i64toi32_i32$4 | 0;
      } else {
       i64toi32_i32$2 = i64toi32_i32$0 >> i64toi32_i32$4 | 0;
       $595 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$4 | 0) | 0;
      }
      $4 = $1220 + $595 | 0;
      HEAP32[$1216 >> 2] = $4;
      $2 = $2 + 2 | 0;
      $1 = $1 + -2 | 0;
      if ($1) {
       continue label$28
      }
      break label$28;
     };
    }
    if (!$9) {
     break label$1
    }
    $2 = $2 << 2 | 0;
    $1245 = $5 + $2 | 0;
    $1249 = HEAP32[($0 + $2 | 0) >> 2] | 0;
    i64toi32_i32$5 = $4;
    i64toi32_i32$2 = i64toi32_i32$5 >> 31 | 0;
    $1251$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $7$hi;
    i64toi32_i32$2 = $1251$hi;
    i64toi32_i32$5 = $7$hi;
    i64toi32_i32$5 = __wasm_i64_mul($4 | 0, i64toi32_i32$2 | 0, $7 | 0, i64toi32_i32$5 | 0) | 0;
    i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
    $1253 = i64toi32_i32$5;
    $1253$hi = i64toi32_i32$2;
    i64toi32_i32$5 = $6;
    i64toi32_i32$2 = i64toi32_i32$5 >> 31 | 0;
    $1255$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $17$hi;
    i64toi32_i32$2 = $1255$hi;
    i64toi32_i32$5 = $17$hi;
    i64toi32_i32$5 = __wasm_i64_mul($6 | 0, i64toi32_i32$2 | 0, $17 | 0, i64toi32_i32$5 | 0) | 0;
    i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
    $1257 = i64toi32_i32$5;
    $1257$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $1253$hi;
    i64toi32_i32$0 = $1253;
    i64toi32_i32$5 = $1257$hi;
    i64toi32_i32$3 = $1257;
    i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
    i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
    }
    $1258$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $8$hi;
    i64toi32_i32$1 = $1258$hi;
    i64toi32_i32$2 = i64toi32_i32$4;
    i64toi32_i32$0 = $8$hi;
    i64toi32_i32$3 = $8;
    i64toi32_i32$5 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
     $596 = i64toi32_i32$1 >> i64toi32_i32$5 | 0;
    } else {
     i64toi32_i32$0 = i64toi32_i32$1 >> i64toi32_i32$5 | 0;
     $596 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$5 | 0) | 0;
    }
    HEAP32[$1245 >> 2] = $1249 + $596 | 0;
    return;
   }
   label$29 : while (1) {
    i64toi32_i32$0 = 0;
    $8 = 0;
    $8$hi = i64toi32_i32$0;
    label$30 : {
     switch ($4 | 0) {
     case 19:
      i64toi32_i32$1 = (($6 << 2 | 0) + $5 | 0) + -128 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$1 >> 2] | 0;
      i64toi32_i32$2 = i64toi32_i32$0 >> 31 | 0;
      $1269 = i64toi32_i32$0;
      $1269$hi = i64toi32_i32$2;
      i64toi32_i32$1 = $2;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 124 | 0) >> 2] | 0;
      i64toi32_i32$0 = i64toi32_i32$2 >> 31 | 0;
      $1271 = i64toi32_i32$2;
      $1271$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $1269$hi;
      i64toi32_i32$2 = $1271$hi;
      i64toi32_i32$2 = __wasm_i64_mul($1269 | 0, i64toi32_i32$0 | 0, $1271 | 0, i64toi32_i32$2 | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
      $8 = i64toi32_i32$2;
      $8$hi = i64toi32_i32$0;
     case 18:
      i64toi32_i32$1 = (($6 << 2 | 0) + $5 | 0) + -124 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$1 >> 2] | 0;
      i64toi32_i32$2 = i64toi32_i32$0 >> 31 | 0;
      $1278 = i64toi32_i32$0;
      $1278$hi = i64toi32_i32$2;
      i64toi32_i32$1 = $2;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 120 | 0) >> 2] | 0;
      i64toi32_i32$0 = i64toi32_i32$2 >> 31 | 0;
      $1280 = i64toi32_i32$2;
      $1280$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $1278$hi;
      i64toi32_i32$2 = $1280$hi;
      i64toi32_i32$2 = __wasm_i64_mul($1278 | 0, i64toi32_i32$0 | 0, $1280 | 0, i64toi32_i32$2 | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
      $1281$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $8$hi;
      i64toi32_i32$0 = $1281$hi;
      i64toi32_i32$1 = i64toi32_i32$2;
      i64toi32_i32$2 = $8$hi;
      i64toi32_i32$3 = $8;
      i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
      i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $8 = i64toi32_i32$5;
      $8$hi = i64toi32_i32$4;
     case 17:
      i64toi32_i32$0 = (($6 << 2 | 0) + $5 | 0) + -120 | 0;
      i64toi32_i32$4 = HEAP32[i64toi32_i32$0 >> 2] | 0;
      i64toi32_i32$1 = i64toi32_i32$4 >> 31 | 0;
      $1289 = i64toi32_i32$4;
      $1289$hi = i64toi32_i32$1;
      i64toi32_i32$0 = $2;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 116 | 0) >> 2] | 0;
      i64toi32_i32$4 = i64toi32_i32$1 >> 31 | 0;
      $1291 = i64toi32_i32$1;
      $1291$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $1289$hi;
      i64toi32_i32$1 = $1291$hi;
      i64toi32_i32$1 = __wasm_i64_mul($1289 | 0, i64toi32_i32$4 | 0, $1291 | 0, i64toi32_i32$1 | 0) | 0;
      i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
      $1292$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $8$hi;
      i64toi32_i32$4 = $1292$hi;
      i64toi32_i32$0 = i64toi32_i32$1;
      i64toi32_i32$1 = $8$hi;
      i64toi32_i32$3 = $8;
      i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
      i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $8 = i64toi32_i32$2;
      $8$hi = i64toi32_i32$5;
     case 16:
      i64toi32_i32$4 = (($6 << 2 | 0) + $5 | 0) + -116 | 0;
      i64toi32_i32$5 = HEAP32[i64toi32_i32$4 >> 2] | 0;
      i64toi32_i32$0 = i64toi32_i32$5 >> 31 | 0;
      $1300 = i64toi32_i32$5;
      $1300$hi = i64toi32_i32$0;
      i64toi32_i32$4 = $2;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 112 | 0) >> 2] | 0;
      i64toi32_i32$5 = i64toi32_i32$0 >> 31 | 0;
      $1302 = i64toi32_i32$0;
      $1302$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $1300$hi;
      i64toi32_i32$0 = $1302$hi;
      i64toi32_i32$0 = __wasm_i64_mul($1300 | 0, i64toi32_i32$5 | 0, $1302 | 0, i64toi32_i32$0 | 0) | 0;
      i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
      $1303$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $8$hi;
      i64toi32_i32$5 = $1303$hi;
      i64toi32_i32$4 = i64toi32_i32$0;
      i64toi32_i32$0 = $8$hi;
      i64toi32_i32$3 = $8;
      i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
      i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
      }
      $8 = i64toi32_i32$1;
      $8$hi = i64toi32_i32$2;
     case 15:
      i64toi32_i32$5 = (($6 << 2 | 0) + $5 | 0) + -112 | 0;
      i64toi32_i32$2 = HEAP32[i64toi32_i32$5 >> 2] | 0;
      i64toi32_i32$4 = i64toi32_i32$2 >> 31 | 0;
      $1311 = i64toi32_i32$2;
      $1311$hi = i64toi32_i32$4;
      i64toi32_i32$5 = $2;
      i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 108 | 0) >> 2] | 0;
      i64toi32_i32$2 = i64toi32_i32$4 >> 31 | 0;
      $1313 = i64toi32_i32$4;
      $1313$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $1311$hi;
      i64toi32_i32$4 = $1313$hi;
      i64toi32_i32$4 = __wasm_i64_mul($1311 | 0, i64toi32_i32$2 | 0, $1313 | 0, i64toi32_i32$4 | 0) | 0;
      i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
      $1314$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $8$hi;
      i64toi32_i32$2 = $1314$hi;
      i64toi32_i32$5 = i64toi32_i32$4;
      i64toi32_i32$4 = $8$hi;
      i64toi32_i32$3 = $8;
      i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
      i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
      if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
      }
      $8 = i64toi32_i32$0;
      $8$hi = i64toi32_i32$1;
     case 14:
      i64toi32_i32$2 = (($6 << 2 | 0) + $5 | 0) + -108 | 0;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$5 = i64toi32_i32$1 >> 31 | 0;
      $1322 = i64toi32_i32$1;
      $1322$hi = i64toi32_i32$5;
      i64toi32_i32$2 = $2;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$2 + 104 | 0) >> 2] | 0;
      i64toi32_i32$1 = i64toi32_i32$5 >> 31 | 0;
      $1324 = i64toi32_i32$5;
      $1324$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $1322$hi;
      i64toi32_i32$5 = $1324$hi;
      i64toi32_i32$5 = __wasm_i64_mul($1322 | 0, i64toi32_i32$1 | 0, $1324 | 0, i64toi32_i32$5 | 0) | 0;
      i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
      $1325$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $8$hi;
      i64toi32_i32$1 = $1325$hi;
      i64toi32_i32$2 = i64toi32_i32$5;
      i64toi32_i32$5 = $8$hi;
      i64toi32_i32$3 = $8;
      i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
      i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
      }
      $8 = i64toi32_i32$4;
      $8$hi = i64toi32_i32$0;
     case 13:
      i64toi32_i32$1 = (($6 << 2 | 0) + $5 | 0) + -104 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$1 >> 2] | 0;
      i64toi32_i32$2 = i64toi32_i32$0 >> 31 | 0;
      $1333 = i64toi32_i32$0;
      $1333$hi = i64toi32_i32$2;
      i64toi32_i32$1 = $2;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 100 | 0) >> 2] | 0;
      i64toi32_i32$0 = i64toi32_i32$2 >> 31 | 0;
      $1335 = i64toi32_i32$2;
      $1335$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $1333$hi;
      i64toi32_i32$2 = $1335$hi;
      i64toi32_i32$2 = __wasm_i64_mul($1333 | 0, i64toi32_i32$0 | 0, $1335 | 0, i64toi32_i32$2 | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
      $1336$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $8$hi;
      i64toi32_i32$0 = $1336$hi;
      i64toi32_i32$1 = i64toi32_i32$2;
      i64toi32_i32$2 = $8$hi;
      i64toi32_i32$3 = $8;
      i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
      i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $8 = i64toi32_i32$5;
      $8$hi = i64toi32_i32$4;
     case 12:
      i64toi32_i32$0 = (($6 << 2 | 0) + $5 | 0) + -100 | 0;
      i64toi32_i32$4 = HEAP32[i64toi32_i32$0 >> 2] | 0;
      i64toi32_i32$1 = i64toi32_i32$4 >> 31 | 0;
      $1344 = i64toi32_i32$4;
      $1344$hi = i64toi32_i32$1;
      i64toi32_i32$0 = $2;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 96 | 0) >> 2] | 0;
      i64toi32_i32$4 = i64toi32_i32$1 >> 31 | 0;
      $1346 = i64toi32_i32$1;
      $1346$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $1344$hi;
      i64toi32_i32$1 = $1346$hi;
      i64toi32_i32$1 = __wasm_i64_mul($1344 | 0, i64toi32_i32$4 | 0, $1346 | 0, i64toi32_i32$1 | 0) | 0;
      i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
      $1347$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $8$hi;
      i64toi32_i32$4 = $1347$hi;
      i64toi32_i32$0 = i64toi32_i32$1;
      i64toi32_i32$1 = $8$hi;
      i64toi32_i32$3 = $8;
      i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
      i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $8 = i64toi32_i32$2;
      $8$hi = i64toi32_i32$5;
     case 11:
      i64toi32_i32$4 = (($6 << 2 | 0) + $5 | 0) + -96 | 0;
      i64toi32_i32$5 = HEAP32[i64toi32_i32$4 >> 2] | 0;
      i64toi32_i32$0 = i64toi32_i32$5 >> 31 | 0;
      $1355 = i64toi32_i32$5;
      $1355$hi = i64toi32_i32$0;
      i64toi32_i32$4 = $2;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 92 | 0) >> 2] | 0;
      i64toi32_i32$5 = i64toi32_i32$0 >> 31 | 0;
      $1357 = i64toi32_i32$0;
      $1357$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $1355$hi;
      i64toi32_i32$0 = $1357$hi;
      i64toi32_i32$0 = __wasm_i64_mul($1355 | 0, i64toi32_i32$5 | 0, $1357 | 0, i64toi32_i32$0 | 0) | 0;
      i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
      $1358$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $8$hi;
      i64toi32_i32$5 = $1358$hi;
      i64toi32_i32$4 = i64toi32_i32$0;
      i64toi32_i32$0 = $8$hi;
      i64toi32_i32$3 = $8;
      i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
      i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
      }
      $8 = i64toi32_i32$1;
      $8$hi = i64toi32_i32$2;
     case 10:
      i64toi32_i32$5 = (($6 << 2 | 0) + $5 | 0) + -92 | 0;
      i64toi32_i32$2 = HEAP32[i64toi32_i32$5 >> 2] | 0;
      i64toi32_i32$4 = i64toi32_i32$2 >> 31 | 0;
      $1366 = i64toi32_i32$2;
      $1366$hi = i64toi32_i32$4;
      i64toi32_i32$5 = $2;
      i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 88 | 0) >> 2] | 0;
      i64toi32_i32$2 = i64toi32_i32$4 >> 31 | 0;
      $1368 = i64toi32_i32$4;
      $1368$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $1366$hi;
      i64toi32_i32$4 = $1368$hi;
      i64toi32_i32$4 = __wasm_i64_mul($1366 | 0, i64toi32_i32$2 | 0, $1368 | 0, i64toi32_i32$4 | 0) | 0;
      i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
      $1369$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $8$hi;
      i64toi32_i32$2 = $1369$hi;
      i64toi32_i32$5 = i64toi32_i32$4;
      i64toi32_i32$4 = $8$hi;
      i64toi32_i32$3 = $8;
      i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
      i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
      if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
      }
      $8 = i64toi32_i32$0;
      $8$hi = i64toi32_i32$1;
     case 9:
      i64toi32_i32$2 = (($6 << 2 | 0) + $5 | 0) + -88 | 0;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$5 = i64toi32_i32$1 >> 31 | 0;
      $1377 = i64toi32_i32$1;
      $1377$hi = i64toi32_i32$5;
      i64toi32_i32$2 = $2;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$2 + 84 | 0) >> 2] | 0;
      i64toi32_i32$1 = i64toi32_i32$5 >> 31 | 0;
      $1379 = i64toi32_i32$5;
      $1379$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $1377$hi;
      i64toi32_i32$5 = $1379$hi;
      i64toi32_i32$5 = __wasm_i64_mul($1377 | 0, i64toi32_i32$1 | 0, $1379 | 0, i64toi32_i32$5 | 0) | 0;
      i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
      $1380$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $8$hi;
      i64toi32_i32$1 = $1380$hi;
      i64toi32_i32$2 = i64toi32_i32$5;
      i64toi32_i32$5 = $8$hi;
      i64toi32_i32$3 = $8;
      i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
      i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
      }
      $8 = i64toi32_i32$4;
      $8$hi = i64toi32_i32$0;
     case 8:
      i64toi32_i32$1 = (($6 << 2 | 0) + $5 | 0) + -84 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$1 >> 2] | 0;
      i64toi32_i32$2 = i64toi32_i32$0 >> 31 | 0;
      $1388 = i64toi32_i32$0;
      $1388$hi = i64toi32_i32$2;
      i64toi32_i32$1 = $2;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 80 | 0) >> 2] | 0;
      i64toi32_i32$0 = i64toi32_i32$2 >> 31 | 0;
      $1390 = i64toi32_i32$2;
      $1390$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $1388$hi;
      i64toi32_i32$2 = $1390$hi;
      i64toi32_i32$2 = __wasm_i64_mul($1388 | 0, i64toi32_i32$0 | 0, $1390 | 0, i64toi32_i32$2 | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
      $1391$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $8$hi;
      i64toi32_i32$0 = $1391$hi;
      i64toi32_i32$1 = i64toi32_i32$2;
      i64toi32_i32$2 = $8$hi;
      i64toi32_i32$3 = $8;
      i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
      i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $8 = i64toi32_i32$5;
      $8$hi = i64toi32_i32$4;
     case 7:
      i64toi32_i32$0 = (($6 << 2 | 0) + $5 | 0) + -80 | 0;
      i64toi32_i32$4 = HEAP32[i64toi32_i32$0 >> 2] | 0;
      i64toi32_i32$1 = i64toi32_i32$4 >> 31 | 0;
      $1399 = i64toi32_i32$4;
      $1399$hi = i64toi32_i32$1;
      i64toi32_i32$0 = $2;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 76 | 0) >> 2] | 0;
      i64toi32_i32$4 = i64toi32_i32$1 >> 31 | 0;
      $1401 = i64toi32_i32$1;
      $1401$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $1399$hi;
      i64toi32_i32$1 = $1401$hi;
      i64toi32_i32$1 = __wasm_i64_mul($1399 | 0, i64toi32_i32$4 | 0, $1401 | 0, i64toi32_i32$1 | 0) | 0;
      i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
      $1402$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $8$hi;
      i64toi32_i32$4 = $1402$hi;
      i64toi32_i32$0 = i64toi32_i32$1;
      i64toi32_i32$1 = $8$hi;
      i64toi32_i32$3 = $8;
      i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
      i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $8 = i64toi32_i32$2;
      $8$hi = i64toi32_i32$5;
     case 6:
      i64toi32_i32$4 = (($6 << 2 | 0) + $5 | 0) + -76 | 0;
      i64toi32_i32$5 = HEAP32[i64toi32_i32$4 >> 2] | 0;
      i64toi32_i32$0 = i64toi32_i32$5 >> 31 | 0;
      $1410 = i64toi32_i32$5;
      $1410$hi = i64toi32_i32$0;
      i64toi32_i32$4 = $2;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 72 | 0) >> 2] | 0;
      i64toi32_i32$5 = i64toi32_i32$0 >> 31 | 0;
      $1412 = i64toi32_i32$0;
      $1412$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $1410$hi;
      i64toi32_i32$0 = $1412$hi;
      i64toi32_i32$0 = __wasm_i64_mul($1410 | 0, i64toi32_i32$5 | 0, $1412 | 0, i64toi32_i32$0 | 0) | 0;
      i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
      $1413$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $8$hi;
      i64toi32_i32$5 = $1413$hi;
      i64toi32_i32$4 = i64toi32_i32$0;
      i64toi32_i32$0 = $8$hi;
      i64toi32_i32$3 = $8;
      i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
      i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
      }
      $8 = i64toi32_i32$1;
      $8$hi = i64toi32_i32$2;
     case 5:
      i64toi32_i32$5 = (($6 << 2 | 0) + $5 | 0) + -72 | 0;
      i64toi32_i32$2 = HEAP32[i64toi32_i32$5 >> 2] | 0;
      i64toi32_i32$4 = i64toi32_i32$2 >> 31 | 0;
      $1421 = i64toi32_i32$2;
      $1421$hi = i64toi32_i32$4;
      i64toi32_i32$5 = $2;
      i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 68 | 0) >> 2] | 0;
      i64toi32_i32$2 = i64toi32_i32$4 >> 31 | 0;
      $1423 = i64toi32_i32$4;
      $1423$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $1421$hi;
      i64toi32_i32$4 = $1423$hi;
      i64toi32_i32$4 = __wasm_i64_mul($1421 | 0, i64toi32_i32$2 | 0, $1423 | 0, i64toi32_i32$4 | 0) | 0;
      i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
      $1424$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $8$hi;
      i64toi32_i32$2 = $1424$hi;
      i64toi32_i32$5 = i64toi32_i32$4;
      i64toi32_i32$4 = $8$hi;
      i64toi32_i32$3 = $8;
      i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
      i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
      if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
      }
      $8 = i64toi32_i32$0;
      $8$hi = i64toi32_i32$1;
     case 4:
      i64toi32_i32$2 = (($6 << 2 | 0) + $5 | 0) + -68 | 0;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$5 = i64toi32_i32$1 >> 31 | 0;
      $1432 = i64toi32_i32$1;
      $1432$hi = i64toi32_i32$5;
      i64toi32_i32$2 = $2;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$2 + 64 | 0) >> 2] | 0;
      i64toi32_i32$1 = i64toi32_i32$5 >> 31 | 0;
      $1434 = i64toi32_i32$5;
      $1434$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $1432$hi;
      i64toi32_i32$5 = $1434$hi;
      i64toi32_i32$5 = __wasm_i64_mul($1432 | 0, i64toi32_i32$1 | 0, $1434 | 0, i64toi32_i32$5 | 0) | 0;
      i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
      $1435$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $8$hi;
      i64toi32_i32$1 = $1435$hi;
      i64toi32_i32$2 = i64toi32_i32$5;
      i64toi32_i32$5 = $8$hi;
      i64toi32_i32$3 = $8;
      i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
      i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
      }
      $8 = i64toi32_i32$4;
      $8$hi = i64toi32_i32$0;
     case 3:
      i64toi32_i32$1 = (($6 << 2 | 0) + $5 | 0) + -64 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$1 >> 2] | 0;
      i64toi32_i32$2 = i64toi32_i32$0 >> 31 | 0;
      $1443 = i64toi32_i32$0;
      $1443$hi = i64toi32_i32$2;
      i64toi32_i32$1 = $2;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 60 | 0) >> 2] | 0;
      i64toi32_i32$0 = i64toi32_i32$2 >> 31 | 0;
      $1445 = i64toi32_i32$2;
      $1445$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $1443$hi;
      i64toi32_i32$2 = $1445$hi;
      i64toi32_i32$2 = __wasm_i64_mul($1443 | 0, i64toi32_i32$0 | 0, $1445 | 0, i64toi32_i32$2 | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
      $1446$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $8$hi;
      i64toi32_i32$0 = $1446$hi;
      i64toi32_i32$1 = i64toi32_i32$2;
      i64toi32_i32$2 = $8$hi;
      i64toi32_i32$3 = $8;
      i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
      i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $8 = i64toi32_i32$5;
      $8$hi = i64toi32_i32$4;
     case 2:
      i64toi32_i32$0 = (($6 << 2 | 0) + $5 | 0) + -60 | 0;
      i64toi32_i32$4 = HEAP32[i64toi32_i32$0 >> 2] | 0;
      i64toi32_i32$1 = i64toi32_i32$4 >> 31 | 0;
      $1454 = i64toi32_i32$4;
      $1454$hi = i64toi32_i32$1;
      i64toi32_i32$0 = $2;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 56 | 0) >> 2] | 0;
      i64toi32_i32$4 = i64toi32_i32$1 >> 31 | 0;
      $1456 = i64toi32_i32$1;
      $1456$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $1454$hi;
      i64toi32_i32$1 = $1456$hi;
      i64toi32_i32$1 = __wasm_i64_mul($1454 | 0, i64toi32_i32$4 | 0, $1456 | 0, i64toi32_i32$1 | 0) | 0;
      i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
      $1457$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $8$hi;
      i64toi32_i32$4 = $1457$hi;
      i64toi32_i32$0 = i64toi32_i32$1;
      i64toi32_i32$1 = $8$hi;
      i64toi32_i32$3 = $8;
      i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
      i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $8 = i64toi32_i32$2;
      $8$hi = i64toi32_i32$5;
     case 1:
      i64toi32_i32$4 = (($6 << 2 | 0) + $5 | 0) + -56 | 0;
      i64toi32_i32$5 = HEAP32[i64toi32_i32$4 >> 2] | 0;
      i64toi32_i32$0 = i64toi32_i32$5 >> 31 | 0;
      $1465 = i64toi32_i32$5;
      $1465$hi = i64toi32_i32$0;
      i64toi32_i32$4 = $2;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 52 | 0) >> 2] | 0;
      i64toi32_i32$5 = i64toi32_i32$0 >> 31 | 0;
      $1467 = i64toi32_i32$0;
      $1467$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $1465$hi;
      i64toi32_i32$0 = $1467$hi;
      i64toi32_i32$0 = __wasm_i64_mul($1465 | 0, i64toi32_i32$5 | 0, $1467 | 0, i64toi32_i32$0 | 0) | 0;
      i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
      $1468$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $8$hi;
      i64toi32_i32$5 = $1468$hi;
      i64toi32_i32$4 = i64toi32_i32$0;
      i64toi32_i32$0 = $8$hi;
      i64toi32_i32$3 = $8;
      i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
      i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
      }
      $8 = i64toi32_i32$1;
      $8$hi = i64toi32_i32$2;
     case 0:
      $3 = ($6 << 2 | 0) + $5 | 0;
      i64toi32_i32$5 = $3 + -52 | 0;
      i64toi32_i32$2 = HEAP32[i64toi32_i32$5 >> 2] | 0;
      i64toi32_i32$4 = i64toi32_i32$2 >> 31 | 0;
      $1477 = i64toi32_i32$2;
      $1477$hi = i64toi32_i32$4;
      i64toi32_i32$5 = $2;
      i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 48 | 0) >> 2] | 0;
      i64toi32_i32$2 = i64toi32_i32$4 >> 31 | 0;
      $1479 = i64toi32_i32$4;
      $1479$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $1477$hi;
      i64toi32_i32$4 = $1479$hi;
      i64toi32_i32$4 = __wasm_i64_mul($1477 | 0, i64toi32_i32$2 | 0, $1479 | 0, i64toi32_i32$4 | 0) | 0;
      i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
      $1480$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $8$hi;
      i64toi32_i32$2 = $1480$hi;
      i64toi32_i32$5 = i64toi32_i32$4;
      i64toi32_i32$4 = $8$hi;
      i64toi32_i32$3 = $8;
      i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
      i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
      if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
      }
      $1482$hi = i64toi32_i32$1;
      i64toi32_i32$2 = $3 + -48 | 0;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$5 = i64toi32_i32$1 >> 31 | 0;
      $1485 = i64toi32_i32$1;
      $1485$hi = i64toi32_i32$5;
      i64toi32_i32$2 = $2;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$2 + 44 | 0) >> 2] | 0;
      i64toi32_i32$1 = i64toi32_i32$5 >> 31 | 0;
      $1487 = i64toi32_i32$5;
      $1487$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $1485$hi;
      i64toi32_i32$5 = $1487$hi;
      i64toi32_i32$5 = __wasm_i64_mul($1485 | 0, i64toi32_i32$1 | 0, $1487 | 0, i64toi32_i32$5 | 0) | 0;
      i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
      $1488 = i64toi32_i32$5;
      $1488$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $1482$hi;
      i64toi32_i32$2 = i64toi32_i32$0;
      i64toi32_i32$5 = $1488$hi;
      i64toi32_i32$3 = $1488;
      i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
      i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
      }
      $1489$hi = i64toi32_i32$0;
      i64toi32_i32$1 = $3 + -44 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$1 >> 2] | 0;
      i64toi32_i32$2 = i64toi32_i32$0 >> 31 | 0;
      $1492 = i64toi32_i32$0;
      $1492$hi = i64toi32_i32$2;
      i64toi32_i32$1 = $2;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 40 | 0) >> 2] | 0;
      i64toi32_i32$0 = i64toi32_i32$2 >> 31 | 0;
      $1494 = i64toi32_i32$2;
      $1494$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $1492$hi;
      i64toi32_i32$2 = $1494$hi;
      i64toi32_i32$2 = __wasm_i64_mul($1492 | 0, i64toi32_i32$0 | 0, $1494 | 0, i64toi32_i32$2 | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
      $1495 = i64toi32_i32$2;
      $1495$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $1489$hi;
      i64toi32_i32$1 = i64toi32_i32$4;
      i64toi32_i32$2 = $1495$hi;
      i64toi32_i32$3 = $1495;
      i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
      i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $1496$hi = i64toi32_i32$4;
      i64toi32_i32$0 = $3 + -40 | 0;
      i64toi32_i32$4 = HEAP32[i64toi32_i32$0 >> 2] | 0;
      i64toi32_i32$1 = i64toi32_i32$4 >> 31 | 0;
      $1499 = i64toi32_i32$4;
      $1499$hi = i64toi32_i32$1;
      i64toi32_i32$0 = $2;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 36 | 0) >> 2] | 0;
      i64toi32_i32$4 = i64toi32_i32$1 >> 31 | 0;
      $1501 = i64toi32_i32$1;
      $1501$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $1499$hi;
      i64toi32_i32$1 = $1501$hi;
      i64toi32_i32$1 = __wasm_i64_mul($1499 | 0, i64toi32_i32$4 | 0, $1501 | 0, i64toi32_i32$1 | 0) | 0;
      i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
      $1502 = i64toi32_i32$1;
      $1502$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $1496$hi;
      i64toi32_i32$0 = i64toi32_i32$5;
      i64toi32_i32$1 = $1502$hi;
      i64toi32_i32$3 = $1502;
      i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
      i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $1503$hi = i64toi32_i32$5;
      i64toi32_i32$4 = $3 + -36 | 0;
      i64toi32_i32$5 = HEAP32[i64toi32_i32$4 >> 2] | 0;
      i64toi32_i32$0 = i64toi32_i32$5 >> 31 | 0;
      $1506 = i64toi32_i32$5;
      $1506$hi = i64toi32_i32$0;
      i64toi32_i32$4 = $2;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 32 | 0) >> 2] | 0;
      i64toi32_i32$5 = i64toi32_i32$0 >> 31 | 0;
      $1508 = i64toi32_i32$0;
      $1508$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $1506$hi;
      i64toi32_i32$0 = $1508$hi;
      i64toi32_i32$0 = __wasm_i64_mul($1506 | 0, i64toi32_i32$5 | 0, $1508 | 0, i64toi32_i32$0 | 0) | 0;
      i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
      $1509 = i64toi32_i32$0;
      $1509$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $1503$hi;
      i64toi32_i32$4 = i64toi32_i32$2;
      i64toi32_i32$0 = $1509$hi;
      i64toi32_i32$3 = $1509;
      i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
      i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
      }
      $1510$hi = i64toi32_i32$2;
      i64toi32_i32$5 = $3 + -32 | 0;
      i64toi32_i32$2 = HEAP32[i64toi32_i32$5 >> 2] | 0;
      i64toi32_i32$4 = i64toi32_i32$2 >> 31 | 0;
      $1513 = i64toi32_i32$2;
      $1513$hi = i64toi32_i32$4;
      i64toi32_i32$5 = $2;
      i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 28 | 0) >> 2] | 0;
      i64toi32_i32$2 = i64toi32_i32$4 >> 31 | 0;
      $1515 = i64toi32_i32$4;
      $1515$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $1513$hi;
      i64toi32_i32$4 = $1515$hi;
      i64toi32_i32$4 = __wasm_i64_mul($1513 | 0, i64toi32_i32$2 | 0, $1515 | 0, i64toi32_i32$4 | 0) | 0;
      i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
      $1516 = i64toi32_i32$4;
      $1516$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $1510$hi;
      i64toi32_i32$5 = i64toi32_i32$1;
      i64toi32_i32$4 = $1516$hi;
      i64toi32_i32$3 = $1516;
      i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
      i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
      if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
      }
      $1517$hi = i64toi32_i32$1;
      i64toi32_i32$2 = $3 + -28 | 0;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$5 = i64toi32_i32$1 >> 31 | 0;
      $1520 = i64toi32_i32$1;
      $1520$hi = i64toi32_i32$5;
      i64toi32_i32$2 = $2;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$2 + 24 | 0) >> 2] | 0;
      i64toi32_i32$1 = i64toi32_i32$5 >> 31 | 0;
      $1522 = i64toi32_i32$5;
      $1522$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $1520$hi;
      i64toi32_i32$5 = $1522$hi;
      i64toi32_i32$5 = __wasm_i64_mul($1520 | 0, i64toi32_i32$1 | 0, $1522 | 0, i64toi32_i32$5 | 0) | 0;
      i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
      $1523 = i64toi32_i32$5;
      $1523$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $1517$hi;
      i64toi32_i32$2 = i64toi32_i32$0;
      i64toi32_i32$5 = $1523$hi;
      i64toi32_i32$3 = $1523;
      i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
      i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
      }
      $1524$hi = i64toi32_i32$0;
      i64toi32_i32$1 = $3 + -24 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$1 >> 2] | 0;
      i64toi32_i32$2 = i64toi32_i32$0 >> 31 | 0;
      $1527 = i64toi32_i32$0;
      $1527$hi = i64toi32_i32$2;
      i64toi32_i32$1 = $2;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 20 | 0) >> 2] | 0;
      i64toi32_i32$0 = i64toi32_i32$2 >> 31 | 0;
      $1529 = i64toi32_i32$2;
      $1529$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $1527$hi;
      i64toi32_i32$2 = $1529$hi;
      i64toi32_i32$2 = __wasm_i64_mul($1527 | 0, i64toi32_i32$0 | 0, $1529 | 0, i64toi32_i32$2 | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
      $1530 = i64toi32_i32$2;
      $1530$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $1524$hi;
      i64toi32_i32$1 = i64toi32_i32$4;
      i64toi32_i32$2 = $1530$hi;
      i64toi32_i32$3 = $1530;
      i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
      i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $1531$hi = i64toi32_i32$4;
      i64toi32_i32$0 = $3 + -20 | 0;
      i64toi32_i32$4 = HEAP32[i64toi32_i32$0 >> 2] | 0;
      i64toi32_i32$1 = i64toi32_i32$4 >> 31 | 0;
      $1534 = i64toi32_i32$4;
      $1534$hi = i64toi32_i32$1;
      i64toi32_i32$0 = $2;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 16 | 0) >> 2] | 0;
      i64toi32_i32$4 = i64toi32_i32$1 >> 31 | 0;
      $1536 = i64toi32_i32$1;
      $1536$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $1534$hi;
      i64toi32_i32$1 = $1536$hi;
      i64toi32_i32$1 = __wasm_i64_mul($1534 | 0, i64toi32_i32$4 | 0, $1536 | 0, i64toi32_i32$1 | 0) | 0;
      i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
      $1537 = i64toi32_i32$1;
      $1537$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $1531$hi;
      i64toi32_i32$0 = i64toi32_i32$5;
      i64toi32_i32$1 = $1537$hi;
      i64toi32_i32$3 = $1537;
      i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
      i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $1538$hi = i64toi32_i32$5;
      i64toi32_i32$4 = $3 + -16 | 0;
      i64toi32_i32$5 = HEAP32[i64toi32_i32$4 >> 2] | 0;
      i64toi32_i32$0 = i64toi32_i32$5 >> 31 | 0;
      $1541 = i64toi32_i32$5;
      $1541$hi = i64toi32_i32$0;
      i64toi32_i32$4 = $2;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 12 | 0) >> 2] | 0;
      i64toi32_i32$5 = i64toi32_i32$0 >> 31 | 0;
      $1543 = i64toi32_i32$0;
      $1543$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $1541$hi;
      i64toi32_i32$0 = $1543$hi;
      i64toi32_i32$0 = __wasm_i64_mul($1541 | 0, i64toi32_i32$5 | 0, $1543 | 0, i64toi32_i32$0 | 0) | 0;
      i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
      $1544 = i64toi32_i32$0;
      $1544$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $1538$hi;
      i64toi32_i32$4 = i64toi32_i32$2;
      i64toi32_i32$0 = $1544$hi;
      i64toi32_i32$3 = $1544;
      i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
      i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
      }
      $1545$hi = i64toi32_i32$2;
      i64toi32_i32$5 = $3 + -12 | 0;
      i64toi32_i32$2 = HEAP32[i64toi32_i32$5 >> 2] | 0;
      i64toi32_i32$4 = i64toi32_i32$2 >> 31 | 0;
      $1548 = i64toi32_i32$2;
      $1548$hi = i64toi32_i32$4;
      i64toi32_i32$5 = $2;
      i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 8 | 0) >> 2] | 0;
      i64toi32_i32$2 = i64toi32_i32$4 >> 31 | 0;
      $1550 = i64toi32_i32$4;
      $1550$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $1548$hi;
      i64toi32_i32$4 = $1550$hi;
      i64toi32_i32$4 = __wasm_i64_mul($1548 | 0, i64toi32_i32$2 | 0, $1550 | 0, i64toi32_i32$4 | 0) | 0;
      i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
      $1551 = i64toi32_i32$4;
      $1551$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $1545$hi;
      i64toi32_i32$5 = i64toi32_i32$1;
      i64toi32_i32$4 = $1551$hi;
      i64toi32_i32$3 = $1551;
      i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
      i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
      if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
      }
      $1552$hi = i64toi32_i32$1;
      i64toi32_i32$2 = $3 + -8 | 0;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$5 = i64toi32_i32$1 >> 31 | 0;
      $1555 = i64toi32_i32$1;
      $1555$hi = i64toi32_i32$5;
      i64toi32_i32$2 = $2;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      i64toi32_i32$1 = i64toi32_i32$5 >> 31 | 0;
      $1557 = i64toi32_i32$5;
      $1557$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $1555$hi;
      i64toi32_i32$5 = $1557$hi;
      i64toi32_i32$5 = __wasm_i64_mul($1555 | 0, i64toi32_i32$1 | 0, $1557 | 0, i64toi32_i32$5 | 0) | 0;
      i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
      $1558 = i64toi32_i32$5;
      $1558$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $1552$hi;
      i64toi32_i32$2 = i64toi32_i32$0;
      i64toi32_i32$5 = $1558$hi;
      i64toi32_i32$3 = $1558;
      i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
      i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
      }
      $1559$hi = i64toi32_i32$0;
      i64toi32_i32$1 = $3 + -4 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$1 >> 2] | 0;
      i64toi32_i32$2 = i64toi32_i32$0 >> 31 | 0;
      $1562 = i64toi32_i32$0;
      $1562$hi = i64toi32_i32$2;
      i64toi32_i32$1 = $2;
      i64toi32_i32$2 = HEAP32[i64toi32_i32$1 >> 2] | 0;
      i64toi32_i32$0 = i64toi32_i32$2 >> 31 | 0;
      $1564 = i64toi32_i32$2;
      $1564$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $1562$hi;
      i64toi32_i32$2 = $1564$hi;
      i64toi32_i32$2 = __wasm_i64_mul($1562 | 0, i64toi32_i32$0 | 0, $1564 | 0, i64toi32_i32$2 | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
      $1565 = i64toi32_i32$2;
      $1565$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $1559$hi;
      i64toi32_i32$1 = i64toi32_i32$4;
      i64toi32_i32$2 = $1565$hi;
      i64toi32_i32$3 = $1565;
      i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
      i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $8 = i64toi32_i32$5;
      $8$hi = i64toi32_i32$4;
      break;
     default:
      break label$30;
     };
    }
    $3 = $6 << 2 | 0;
    $1571 = $5 + $3 | 0;
    $1575 = HEAP32[($0 + $3 | 0) >> 2] | 0;
    i64toi32_i32$4 = $8$hi;
    i64toi32_i32$4 = $7$hi;
    i64toi32_i32$4 = $8$hi;
    i64toi32_i32$0 = $8;
    i64toi32_i32$1 = $7$hi;
    i64toi32_i32$3 = $7;
    i64toi32_i32$2 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$4 >> 31 | 0;
     $597 = i64toi32_i32$4 >> i64toi32_i32$2 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$4 >> i64toi32_i32$2 | 0;
     $597 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$2 | 0) | 0;
    }
    HEAP32[$1571 >> 2] = $1575 + $597 | 0;
    $6 = $6 + 1 | 0;
    if (($6 | 0) != ($1 | 0)) {
     continue label$29
    }
    break label$29;
   };
  }
 }
 
 function FLAC__lpc_compute_expected_bits_per_residual_sample($0, $1) {
  $0 = +$0;
  $1 = $1 | 0;
  label$1 : {
   if (!($0 > 0.0)) {
    break label$1
   }
   $0 = +log(+(.5 / +($1 >>> 0) * $0)) * .5 / .6931471805599453;
   return +($0 >= 0.0 ? $0 : 0.0);
  }
  return +($0 < 0.0 ? 1.e+32 : 0.0);
 }
 
 function FLAC__lpc_compute_best_order($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $9 = 0.0, $4 = 0, $6 = 0, $7 = 0.0, $8 = 0, $10 = 0, $5 = 0.0;
  $4 = 1;
  label$1 : {
   if (!$1) {
    break label$1
   }
   $5 = .5 / +($2 >>> 0);
   $6 = 0;
   $7 = 4294967295.0;
   $8 = 0;
   label$2 : while (1) {
    label$3 : {
     label$4 : {
      $9 = +HEAPF64[($0 + ($6 << 3 | 0) | 0) >> 3];
      if (!($9 > 0.0)) {
       break label$4
      }
      $9 = +log(+($5 * $9)) * .5 / .6931471805599453;
      $9 = $9 >= 0.0 ? $9 : 0.0;
      break label$3;
     }
     $9 = $9 < 0.0 ? 1.e+32 : 0.0;
    }
    $9 = $9 * +(($2 - $4 | 0) >>> 0) + +(Math_imul($4, $3) >>> 0);
    $10 = $9 < $7;
    $7 = $10 ? $9 : $7;
    $8 = $10 ? $6 : $8;
    $4 = $4 + 1 | 0;
    $6 = $6 + 1 | 0;
    if (($6 | 0) != ($1 | 0)) {
     continue label$2
    }
    break label$2;
   };
   $4 = $8 + 1 | 0;
  }
  return $4 | 0;
 }
 
 function strlen($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0;
  $1 = $0;
  label$1 : {
   label$2 : {
    if (!($1 & 3 | 0)) {
     break label$2
    }
    $1 = $0;
    label$3 : while (1) {
     if (!(HEAPU8[$1 >> 0] | 0)) {
      break label$1
     }
     $1 = $1 + 1 | 0;
     if ($1 & 3 | 0) {
      continue label$3
     }
     break label$3;
    };
   }
   label$4 : while (1) {
    $2 = $1;
    $1 = $1 + 4 | 0;
    $3 = HEAP32[$2 >> 2] | 0;
    if (!((($3 ^ -1 | 0) & ($3 + -16843009 | 0) | 0) & -2139062144 | 0)) {
     continue label$4
    }
    break label$4;
   };
   label$5 : {
    if ($3 & 255 | 0) {
     break label$5
    }
    return $2 - $0 | 0 | 0;
   }
   label$6 : while (1) {
    $3 = HEAPU8[($2 + 1 | 0) >> 0] | 0;
    $1 = $2 + 1 | 0;
    $2 = $1;
    if ($3) {
     continue label$6
    }
    break label$6;
   };
  }
  return $1 - $0 | 0 | 0;
 }
 
 function __strchrnul($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $3 = 0, $2 = 0;
  label$1 : {
   label$2 : {
    $2 = $1 & 255 | 0;
    if (!$2) {
     break label$2
    }
    label$3 : {
     if (!($0 & 3 | 0)) {
      break label$3
     }
     label$4 : while (1) {
      $3 = HEAPU8[$0 >> 0] | 0;
      if (!$3) {
       break label$1
      }
      if (($3 | 0) == ($1 & 255 | 0 | 0)) {
       break label$1
      }
      $0 = $0 + 1 | 0;
      if ($0 & 3 | 0) {
       continue label$4
      }
      break label$4;
     };
    }
    label$5 : {
     $3 = HEAP32[$0 >> 2] | 0;
     if ((($3 ^ -1 | 0) & ($3 + -16843009 | 0) | 0) & -2139062144 | 0) {
      break label$5
     }
     $2 = Math_imul($2, 16843009);
     label$6 : while (1) {
      $3 = $3 ^ $2 | 0;
      if ((($3 ^ -1 | 0) & ($3 + -16843009 | 0) | 0) & -2139062144 | 0) {
       break label$5
      }
      $3 = HEAP32[($0 + 4 | 0) >> 2] | 0;
      $0 = $0 + 4 | 0;
      if (!((($3 ^ -1 | 0) & ($3 + -16843009 | 0) | 0) & -2139062144 | 0)) {
       continue label$6
      }
      break label$6;
     };
    }
    label$7 : {
     label$8 : while (1) {
      $3 = $0;
      $2 = HEAPU8[$3 >> 0] | 0;
      if (!$2) {
       break label$7
      }
      $0 = $3 + 1 | 0;
      if (($2 | 0) != ($1 & 255 | 0 | 0)) {
       continue label$8
      }
      break label$8;
     };
    }
    return $3 | 0;
   }
   return $0 + (strlen($0 | 0) | 0) | 0 | 0;
  }
  return $0 | 0;
 }
 
 function strchr($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $0 = __strchrnul($0 | 0, $1 | 0) | 0;
  return ((HEAPU8[$0 >> 0] | 0 | 0) == ($1 & 255 | 0 | 0) ? $0 : 0) | 0;
 }
 
 function __stdio_write($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $4 = 0, $3 = 0, $5 = 0, $8 = 0, $9 = 0, $6 = 0, $7 = 0;
  $3 = __stack_pointer - 32 | 0;
  __stack_pointer = $3;
  $4 = HEAP32[($0 + 28 | 0) >> 2] | 0;
  HEAP32[($3 + 16 | 0) >> 2] = $4;
  $5 = HEAP32[($0 + 20 | 0) >> 2] | 0;
  HEAP32[($3 + 28 | 0) >> 2] = $2;
  HEAP32[($3 + 24 | 0) >> 2] = $1;
  $1 = $5 - $4 | 0;
  HEAP32[($3 + 20 | 0) >> 2] = $1;
  $6 = $1 + $2 | 0;
  $7 = 2;
  $1 = $3 + 16 | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      if (__wasi_syscall_ret(__wasi_fd_write(HEAP32[($0 + 60 | 0) >> 2] | 0 | 0, $3 + 16 | 0 | 0, 2 | 0, $3 + 12 | 0 | 0) | 0 | 0) | 0) {
       break label$4
      }
      label$5 : while (1) {
       $4 = HEAP32[($3 + 12 | 0) >> 2] | 0;
       if (($6 | 0) == ($4 | 0)) {
        break label$3
       }
       if (($4 | 0) <= (-1 | 0)) {
        break label$2
       }
       $8 = HEAP32[($1 + 4 | 0) >> 2] | 0;
       $5 = $4 >>> 0 > $8 >>> 0;
       $9 = $1 + ($5 << 3 | 0) | 0;
       $8 = $4 - ($5 ? $8 : 0) | 0;
       HEAP32[$9 >> 2] = (HEAP32[$9 >> 2] | 0) + $8 | 0;
       $9 = $1 + ($5 ? 12 : 4) | 0;
       HEAP32[$9 >> 2] = (HEAP32[$9 >> 2] | 0) - $8 | 0;
       $6 = $6 - $4 | 0;
       $1 = $5 ? $1 + 8 | 0 : $1;
       $7 = $7 - $5 | 0;
       if (!(__wasi_syscall_ret(__wasi_fd_write(HEAP32[($0 + 60 | 0) >> 2] | 0 | 0, $1 | 0, $7 | 0, $3 + 12 | 0 | 0) | 0 | 0) | 0)) {
        continue label$5
       }
       break label$5;
      };
     }
     if (($6 | 0) != (-1 | 0)) {
      break label$2
     }
    }
    $1 = HEAP32[($0 + 44 | 0) >> 2] | 0;
    HEAP32[($0 + 28 | 0) >> 2] = $1;
    HEAP32[($0 + 20 | 0) >> 2] = $1;
    HEAP32[($0 + 16 | 0) >> 2] = $1 + (HEAP32[($0 + 48 | 0) >> 2] | 0) | 0;
    $4 = $2;
    break label$1;
   }
   $4 = 0;
   HEAP32[($0 + 28 | 0) >> 2] = 0;
   HEAP32[($0 + 16 | 0) >> 2] = 0;
   HEAP32[($0 + 20 | 0) >> 2] = 0;
   HEAP32[$0 >> 2] = HEAP32[$0 >> 2] | 0 | 32 | 0;
   if (($7 | 0) == (2 | 0)) {
    break label$1
   }
   $4 = $2 - (HEAP32[($1 + 4 | 0) >> 2] | 0) | 0;
  }
  __stack_pointer = $3 + 32 | 0;
  return $4 | 0;
 }
 
 function FLAC__memory_alloc_aligned_int32_array($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  $3 = 0;
  label$1 : {
   if ($0 >>> 0 > 1073741823 >>> 0) {
    break label$1
   }
   $0 = dlmalloc(($0 ? $0 << 2 | 0 : 1) | 0) | 0;
   if (!$0) {
    break label$1
   }
   label$2 : {
    $3 = HEAP32[$1 >> 2] | 0;
    if (!$3) {
     break label$2
    }
    dlfree($3 | 0);
   }
   HEAP32[$1 >> 2] = $0;
   HEAP32[$2 >> 2] = $0;
   $3 = 1;
  }
  return $3 | 0;
 }
 
 function FLAC__memory_alloc_aligned_uint64_array($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  $3 = 0;
  label$1 : {
   if ($0 >>> 0 > 536870911 >>> 0) {
    break label$1
   }
   $0 = dlmalloc(($0 ? $0 << 3 | 0 : 1) | 0) | 0;
   if (!$0) {
    break label$1
   }
   label$2 : {
    $3 = HEAP32[$1 >> 2] | 0;
    if (!$3) {
     break label$2
    }
    dlfree($3 | 0);
   }
   HEAP32[$1 >> 2] = $0;
   HEAP32[$2 >> 2] = $0;
   $3 = 1;
  }
  return $3 | 0;
 }
 
 function FLAC__memory_alloc_aligned_unsigned_array($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  $3 = 0;
  label$1 : {
   if ($0 >>> 0 > 1073741823 >>> 0) {
    break label$1
   }
   $0 = dlmalloc(($0 ? $0 << 2 | 0 : 1) | 0) | 0;
   if (!$0) {
    break label$1
   }
   label$2 : {
    $3 = HEAP32[$1 >> 2] | 0;
    if (!$3) {
     break label$2
    }
    dlfree($3 | 0);
   }
   HEAP32[$1 >> 2] = $0;
   HEAP32[$2 >> 2] = $0;
   $3 = 1;
  }
  return $3 | 0;
 }
 
 function FLAC__memory_alloc_aligned_real_array($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  $3 = 0;
  label$1 : {
   if ($0 >>> 0 > 1073741823 >>> 0) {
    break label$1
   }
   $0 = dlmalloc(($0 ? $0 << 2 | 0 : 1) | 0) | 0;
   if (!$0) {
    break label$1
   }
   label$2 : {
    $3 = HEAP32[$1 >> 2] | 0;
    if (!$3) {
     break label$2
    }
    dlfree($3 | 0);
   }
   HEAP32[$1 >> 2] = $0;
   HEAP32[$2 >> 2] = $0;
   $3 = 1;
  }
  return $3 | 0;
 }
 
 function safe_malloc_mul_2op_p($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, $2 = 0, i64toi32_i32$3 = 0, $10 = 0, $8$hi = 0, $10$hi = 0, i64toi32_i32$2 = 0;
  label$1 : {
   label$2 : {
    if (!$0) {
     break label$2
    }
    if ($1) {
     break label$1
    }
   }
   return dlmalloc(1 | 0) | 0 | 0;
  }
  $2 = 0;
  label$3 : {
   i64toi32_i32$0 = 0;
   $8$hi = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   $10$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $8$hi;
   i64toi32_i32$1 = $10$hi;
   i64toi32_i32$1 = __wasm_i64_mul($1 | 0, i64toi32_i32$0 | 0, $0 | 0, i64toi32_i32$1 | 0) | 0;
   i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
   i64toi32_i32$2 = i64toi32_i32$1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 32;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = 0;
    $10 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    $10 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
   }
   if ($10) {
    break label$3
   }
   $2 = dlmalloc(Math_imul($1, $0) | 0) | 0;
  }
  return $2 | 0;
 }
 
 function FLAC__fixed_compute_best_predictor($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $10 = 0, $11 = 0, $7 = 0, $8 = 0, $6 = 0, $9 = 0, $5 = 0, $13 = 0, $16 = 0, $4 = 0, $17 = Math_fround(0), $18 = Math_fround(0), $3 = 0, $15 = 0, $12 = 0, $14 = 0, $101 = 0, wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
  $3 = 0;
  $4 = 0;
  $5 = 0;
  $6 = 0;
  $7 = 0;
  $8 = 0;
  label$1 : {
   if (!$1) {
    break label$1
   }
   $9 = HEAP32[($0 + -12 | 0) >> 2] | 0;
   $10 = HEAP32[($0 + -8 | 0) >> 2] | 0;
   $11 = HEAP32[($0 + -4 | 0) >> 2] | 0;
   $12 = $11 - $10 | 0;
   $13 = ($9 - $10 | 0) + $12 | 0;
   $14 = (($9 << 1 | 0) - ($10 + (HEAP32[($0 + -16 | 0) >> 2] | 0) | 0) | 0) + $13 | 0;
   $15 = 0;
   $8 = 0;
   $7 = 0;
   $6 = 0;
   $5 = 0;
   $4 = 0;
   label$2 : while (1) {
    $10 = HEAP32[($0 + ($15 << 2 | 0) | 0) >> 2] | 0;
    $9 = $10 >> 31 | 0;
    $4 = (($10 + $9 | 0) ^ $9 | 0) + $4 | 0;
    $9 = $10 - $11 | 0;
    $16 = $9 >> 31 | 0;
    $5 = (($9 + $16 | 0) ^ $16 | 0) + $5 | 0;
    $16 = $9 - $12 | 0;
    $11 = $16 >> 31 | 0;
    $6 = (($16 + $11 | 0) ^ $11 | 0) + $6 | 0;
    $13 = $16 - $13 | 0;
    $11 = $13 >> 31 | 0;
    $7 = (($13 + $11 | 0) ^ $11 | 0) + $7 | 0;
    $11 = $13 - $14 | 0;
    $101 = $11;
    $11 = $11 >> 31 | 0;
    $8 = (($101 + $11 | 0) ^ $11 | 0) + $8 | 0;
    $11 = $10;
    $12 = $9;
    $14 = $13;
    $13 = $16;
    $15 = $15 + 1 | 0;
    if (($15 | 0) != ($1 | 0)) {
     continue label$2
    }
    break label$2;
   };
  }
  label$3 : {
   $10 = $5 >>> 0 < $6 >>> 0 ? $5 : $6;
   $10 = $10 >>> 0 < $7 >>> 0 ? $10 : $7;
   if ($4 >>> 0 < ($10 >>> 0 < $8 >>> 0 ? $10 : $8) >>> 0) {
    break label$3
   }
   $3 = 1;
   $10 = $6 >>> 0 < $7 >>> 0 ? $6 : $7;
   if ($5 >>> 0 < ($10 >>> 0 < $8 >>> 0 ? $10 : $8) >>> 0) {
    break label$3
   }
   $10 = $7 >>> 0 < $8 >>> 0;
   $3 = $6 >>> 0 < ($10 ? $7 : $8) >>> 0 ? 2 : $10 ? 3 : 4;
  }
  $17 = Math_fround(0.0);
  $18 = Math_fround(0.0);
  label$4 : {
   if (!$4) {
    break label$4
   }
   $18 = Math_fround(+log(+(+($4 >>> 0) * .6931471805599453 / +($1 >>> 0))) / .6931471805599453);
  }
  HEAPF32[$2 >> 2] = $18;
  label$5 : {
   if (!$5) {
    break label$5
   }
   $17 = Math_fround(+log(+(+($5 >>> 0) * .6931471805599453 / +($1 >>> 0))) / .6931471805599453);
  }
  HEAPF32[($2 + 4 | 0) >> 2] = $17;
  $17 = Math_fround(0.0);
  $18 = Math_fround(0.0);
  label$6 : {
   if (!$6) {
    break label$6
   }
   $18 = Math_fround(+log(+(+($6 >>> 0) * .6931471805599453 / +($1 >>> 0))) / .6931471805599453);
  }
  HEAPF32[($2 + 8 | 0) >> 2] = $18;
  label$7 : {
   if (!$7) {
    break label$7
   }
   $17 = Math_fround(+log(+(+($7 >>> 0) * .6931471805599453 / +($1 >>> 0))) / .6931471805599453);
  }
  HEAPF32[($2 + 12 | 0) >> 2] = $17;
  label$8 : {
   if ($8) {
    break label$8
   }
   HEAPF32[($2 + 16 | 0) >> 2] = Math_fround(0.0);
   return $3 | 0;
  }
  (wasm2js_i32$0 = $2, wasm2js_f32$0 = Math_fround(+log(+(+($8 >>> 0) * .6931471805599453 / +($1 >>> 0))) / .6931471805599453)), HEAPF32[(wasm2js_i32$0 + 16 | 0) >> 2] = wasm2js_f32$0;
  return $3 | 0;
 }
 
 function FLAC__fixed_compute_best_predictor_wide($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, i64toi32_i32$2 = 0, $9 = 0, $10 = 0, i64toi32_i32$5 = 0, $5$hi = 0, $6$hi = 0, $7$hi = 0, $4$hi = 0, $8 = 0, $5 = 0, $6 = 0, $3$hi = 0, $4 = 0, $7 = 0, $12 = 0, $16$hi = 0, $15 = 0, $3 = 0, $16 = 0, $17 = Math_fround(0), $18 = Math_fround(0), $14 = 0, $11 = 0, $13 = 0, $60$hi = 0, $73$hi = 0, $86$hi = 0, $99$hi = 0, $105 = 0, $112$hi = 0, $141 = 0, $141$hi = 0, $155 = 0, $155$hi = 0, $166 = 0, $166$hi = 0, wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
  label$1 : {
   label$2 : {
    if ($1) {
     break label$2
    }
    i64toi32_i32$0 = 0;
    $3 = 0;
    $3$hi = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    $4 = 0;
    $4$hi = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    $5 = 0;
    $5$hi = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    $6 = 0;
    $6$hi = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    $7 = 0;
    $7$hi = i64toi32_i32$0;
    break label$1;
   }
   $8 = HEAP32[($0 + -12 | 0) >> 2] | 0;
   $9 = HEAP32[($0 + -8 | 0) >> 2] | 0;
   $10 = HEAP32[($0 + -4 | 0) >> 2] | 0;
   $11 = $10 - $9 | 0;
   $12 = ($8 - $9 | 0) + $11 | 0;
   $13 = (($8 << 1 | 0) - ($9 + (HEAP32[($0 + -16 | 0) >> 2] | 0) | 0) | 0) + $12 | 0;
   i64toi32_i32$0 = 0;
   $7 = 0;
   $7$hi = i64toi32_i32$0;
   $14 = 0;
   i64toi32_i32$0 = 0;
   $6 = 0;
   $6$hi = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   $5 = 0;
   $5$hi = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   $4 = 0;
   $4$hi = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   $3 = 0;
   $3$hi = i64toi32_i32$0;
   label$3 : while (1) {
    i64toi32_i32$0 = $3$hi;
    $9 = HEAP32[($0 + ($14 << 2 | 0) | 0) >> 2] | 0;
    $8 = $9 >> 31 | 0;
    i64toi32_i32$0 = 0;
    $60$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $3$hi;
    i64toi32_i32$2 = $3;
    i64toi32_i32$1 = $60$hi;
    i64toi32_i32$3 = ($9 + $8 | 0) ^ $8 | 0;
    i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
    i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    $3 = i64toi32_i32$4;
    $3$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $4$hi;
    $8 = $9 - $10 | 0;
    $15 = $8 >> 31 | 0;
    i64toi32_i32$5 = 0;
    $73$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $4$hi;
    i64toi32_i32$0 = $4;
    i64toi32_i32$2 = $73$hi;
    i64toi32_i32$3 = ($8 + $15 | 0) ^ $15 | 0;
    i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
    i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
    if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
    }
    $4 = i64toi32_i32$1;
    $4$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $5$hi;
    $15 = $8 - $11 | 0;
    $10 = $15 >> 31 | 0;
    i64toi32_i32$4 = 0;
    $86$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $5$hi;
    i64toi32_i32$5 = $5;
    i64toi32_i32$0 = $86$hi;
    i64toi32_i32$3 = ($15 + $10 | 0) ^ $10 | 0;
    i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
    i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
    if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
    }
    $5 = i64toi32_i32$2;
    $5$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $6$hi;
    $12 = $15 - $12 | 0;
    $10 = $12 >> 31 | 0;
    i64toi32_i32$1 = 0;
    $99$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $6$hi;
    i64toi32_i32$4 = $6;
    i64toi32_i32$5 = $99$hi;
    i64toi32_i32$3 = ($12 + $10 | 0) ^ $10 | 0;
    i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
    i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
    if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
    }
    $6 = i64toi32_i32$0;
    $6$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $7$hi;
    $10 = $12 - $13 | 0;
    $105 = $10;
    $10 = $10 >> 31 | 0;
    i64toi32_i32$2 = 0;
    $112$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $7$hi;
    i64toi32_i32$1 = $7;
    i64toi32_i32$4 = $112$hi;
    i64toi32_i32$3 = ($105 + $10 | 0) ^ $10 | 0;
    i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
    i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
    if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
    }
    $7 = i64toi32_i32$5;
    $7$hi = i64toi32_i32$0;
    $10 = $9;
    $11 = $8;
    $13 = $12;
    $12 = $15;
    $14 = $14 + 1 | 0;
    if (($14 | 0) != ($1 | 0)) {
     continue label$3
    }
    break label$3;
   };
  }
  $9 = 0;
  label$4 : {
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$0 = $5$hi;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$0 = $5$hi;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$2 = $4;
   i64toi32_i32$1 = $5$hi;
   i64toi32_i32$3 = $5;
   i64toi32_i32$4 = i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$0 = i64toi32_i32$1;
   i64toi32_i32$1 = i64toi32_i32$4 ? $4 : i64toi32_i32$3;
   i64toi32_i32$3 = i64toi32_i32$4 ? i64toi32_i32$2 : i64toi32_i32$0;
   $16 = i64toi32_i32$1;
   $16$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $6$hi;
   i64toi32_i32$3 = $16$hi;
   i64toi32_i32$3 = $6$hi;
   i64toi32_i32$3 = $16$hi;
   i64toi32_i32$4 = i64toi32_i32$1;
   i64toi32_i32$1 = $6$hi;
   i64toi32_i32$2 = $6;
   i64toi32_i32$0 = i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
   i64toi32_i32$4 = i64toi32_i32$3;
   i64toi32_i32$3 = i64toi32_i32$1;
   i64toi32_i32$1 = i64toi32_i32$0 ? $16 : i64toi32_i32$2;
   i64toi32_i32$2 = i64toi32_i32$0 ? i64toi32_i32$4 : i64toi32_i32$3;
   $16 = i64toi32_i32$1;
   $16$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $7$hi;
   i64toi32_i32$2 = $16$hi;
   i64toi32_i32$2 = $7$hi;
   i64toi32_i32$2 = $16$hi;
   i64toi32_i32$0 = i64toi32_i32$1;
   i64toi32_i32$1 = $7$hi;
   i64toi32_i32$4 = $7;
   i64toi32_i32$3 = i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
   i64toi32_i32$0 = i64toi32_i32$2;
   i64toi32_i32$2 = i64toi32_i32$1;
   i64toi32_i32$1 = i64toi32_i32$3 ? $16 : i64toi32_i32$4;
   i64toi32_i32$4 = i64toi32_i32$3 ? i64toi32_i32$0 : i64toi32_i32$2;
   $141 = i64toi32_i32$1;
   $141$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $3$hi;
   i64toi32_i32$3 = $3;
   i64toi32_i32$1 = $141$hi;
   i64toi32_i32$0 = $141;
   if (i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0) {
    break label$4
   }
   $9 = 1;
   i64toi32_i32$3 = $4$hi;
   i64toi32_i32$3 = $5$hi;
   i64toi32_i32$3 = $6$hi;
   i64toi32_i32$3 = $5$hi;
   i64toi32_i32$3 = $6$hi;
   i64toi32_i32$3 = $5$hi;
   i64toi32_i32$0 = $5;
   i64toi32_i32$4 = $6$hi;
   i64toi32_i32$1 = $6;
   i64toi32_i32$2 = i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
   i64toi32_i32$0 = i64toi32_i32$3;
   i64toi32_i32$3 = i64toi32_i32$4;
   i64toi32_i32$4 = i64toi32_i32$2 ? $5 : i64toi32_i32$1;
   i64toi32_i32$1 = i64toi32_i32$2 ? i64toi32_i32$0 : i64toi32_i32$3;
   $16 = i64toi32_i32$4;
   $16$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $7$hi;
   i64toi32_i32$1 = $16$hi;
   i64toi32_i32$1 = $7$hi;
   i64toi32_i32$1 = $16$hi;
   i64toi32_i32$2 = i64toi32_i32$4;
   i64toi32_i32$4 = $7$hi;
   i64toi32_i32$0 = $7;
   i64toi32_i32$3 = i64toi32_i32$1 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
   i64toi32_i32$2 = i64toi32_i32$1;
   i64toi32_i32$1 = i64toi32_i32$4;
   i64toi32_i32$4 = i64toi32_i32$3 ? $16 : i64toi32_i32$0;
   i64toi32_i32$0 = i64toi32_i32$3 ? i64toi32_i32$2 : i64toi32_i32$1;
   $155 = i64toi32_i32$4;
   $155$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$3 = $4;
   i64toi32_i32$4 = $155$hi;
   i64toi32_i32$2 = $155;
   if (i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0) {
    break label$4
   }
   i64toi32_i32$3 = $6$hi;
   i64toi32_i32$3 = $7$hi;
   i64toi32_i32$3 = $6$hi;
   i64toi32_i32$2 = $6;
   i64toi32_i32$0 = $7$hi;
   i64toi32_i32$4 = $7;
   $9 = i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
   i64toi32_i32$2 = $5$hi;
   i64toi32_i32$2 = i64toi32_i32$3;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$1 = $9;
   i64toi32_i32$2 = i64toi32_i32$3;
   i64toi32_i32$3 = i64toi32_i32$0;
   i64toi32_i32$0 = i64toi32_i32$1 ? $6 : i64toi32_i32$4;
   i64toi32_i32$4 = i64toi32_i32$1 ? i64toi32_i32$2 : i64toi32_i32$3;
   $166 = i64toi32_i32$0;
   $166$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $5$hi;
   i64toi32_i32$1 = $5;
   i64toi32_i32$0 = $166$hi;
   i64toi32_i32$2 = $166;
   $9 = i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0 ? 2 : $9 ? 3 : 4;
  }
  $17 = Math_fround(0.0);
  $18 = Math_fround(0.0);
  label$5 : {
   i64toi32_i32$1 = $3$hi;
   if (!($3 | i64toi32_i32$1 | 0)) {
    break label$5
   }
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$4 = $3;
   i64toi32_i32$2 = 0;
   $18 = Math_fround(+log(+((+(i64toi32_i32$4 >>> 0) + 4294967296.0 * +(i64toi32_i32$1 >>> 0)) * .6931471805599453 / +($1 >>> 0))) / .6931471805599453);
  }
  HEAPF32[$2 >> 2] = $18;
  label$6 : {
   i64toi32_i32$1 = $4$hi;
   if (!($4 | i64toi32_i32$1 | 0)) {
    break label$6
   }
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$4 = $4;
   i64toi32_i32$2 = 0;
   $17 = Math_fround(+log(+((+(i64toi32_i32$4 >>> 0) + 4294967296.0 * +(i64toi32_i32$1 >>> 0)) * .6931471805599453 / +($1 >>> 0))) / .6931471805599453);
  }
  HEAPF32[($2 + 4 | 0) >> 2] = $17;
  $17 = Math_fround(0.0);
  $18 = Math_fround(0.0);
  label$7 : {
   i64toi32_i32$1 = $5$hi;
   if (!($5 | i64toi32_i32$1 | 0)) {
    break label$7
   }
   i64toi32_i32$1 = $5$hi;
   i64toi32_i32$4 = $5;
   i64toi32_i32$2 = 0;
   $18 = Math_fround(+log(+((+(i64toi32_i32$4 >>> 0) + 4294967296.0 * +(i64toi32_i32$1 >>> 0)) * .6931471805599453 / +($1 >>> 0))) / .6931471805599453);
  }
  HEAPF32[($2 + 8 | 0) >> 2] = $18;
  label$8 : {
   i64toi32_i32$1 = $6$hi;
   if (!($6 | i64toi32_i32$1 | 0)) {
    break label$8
   }
   i64toi32_i32$1 = $6$hi;
   i64toi32_i32$4 = $6;
   i64toi32_i32$2 = 0;
   $17 = Math_fround(+log(+((+(i64toi32_i32$4 >>> 0) + 4294967296.0 * +(i64toi32_i32$1 >>> 0)) * .6931471805599453 / +($1 >>> 0))) / .6931471805599453);
  }
  HEAPF32[($2 + 12 | 0) >> 2] = $17;
  label$9 : {
   i64toi32_i32$1 = $7$hi;
   if (!!($7 | i64toi32_i32$1 | 0)) {
    break label$9
   }
   HEAPF32[($2 + 16 | 0) >> 2] = Math_fround(0.0);
   return $9 | 0;
  }
  i64toi32_i32$1 = $7$hi;
  i64toi32_i32$4 = $7;
  i64toi32_i32$2 = 0;
  (wasm2js_i32$0 = $2, wasm2js_f32$0 = Math_fround(+log(+((+(i64toi32_i32$4 >>> 0) + 4294967296.0 * +(i64toi32_i32$1 >>> 0)) * .6931471805599453 / +($1 >>> 0))) / .6931471805599453)), HEAPF32[(wasm2js_i32$0 + 16 | 0) >> 2] = wasm2js_f32$0;
  return $9 | 0;
 }
 
 function FLAC__fixed_compute_residual($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $6 = 0, $7 = 0, $15 = 0, $50 = 0, $5 = 0, $129 = 0, $189 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     switch ($2 | 0) {
     case 4:
      $4 = 0;
      if (($1 | 0) <= (0 | 0)) {
       break label$2
      }
      label$7 : while (1) {
       $2 = $4 << 2 | 0;
       $15 = $3 + $2 | 0;
       $2 = $0 + $2 | 0;
       HEAP32[$15 >> 2] = ((Math_imul(HEAP32[($2 + -8 | 0) >> 2] | 0, 6) + (HEAP32[$2 >> 2] | 0) | 0) + (HEAP32[($2 + -16 | 0) >> 2] | 0) | 0) - (((HEAP32[($2 + -12 | 0) >> 2] | 0) + (HEAP32[($2 + -4 | 0) >> 2] | 0) | 0) << 2 | 0) | 0;
       $4 = $4 + 1 | 0;
       if (($4 | 0) != ($1 | 0)) {
        continue label$7
       }
       break label$2;
      };
     case 3:
      $4 = 0;
      if (($1 | 0) <= (0 | 0)) {
       break label$2
      }
      label$8 : while (1) {
       $2 = $4 << 2 | 0;
       $50 = $3 + $2 | 0;
       $2 = $0 + $2 | 0;
       HEAP32[$50 >> 2] = ((HEAP32[$2 >> 2] | 0) - (HEAP32[($2 + -12 | 0) >> 2] | 0) | 0) + Math_imul((HEAP32[($2 + -8 | 0) >> 2] | 0) - (HEAP32[($2 + -4 | 0) >> 2] | 0) | 0, 3) | 0;
       $4 = $4 + 1 | 0;
       if (($4 | 0) != ($1 | 0)) {
        continue label$8
       }
       break label$2;
      };
     case 2:
      if (($1 | 0) < (1 | 0)) {
       break label$2
      }
      $5 = $1 & 1 | 0;
      $4 = 0;
      label$9 : {
       if (($1 | 0) == (1 | 0)) {
        break label$9
       }
       $6 = $1 & -2 | 0;
       $4 = 0;
       label$10 : while (1) {
        $1 = $4 << 2 | 0;
        $2 = $0 + $1 | 0;
        $7 = $2 + -4 | 0;
        HEAP32[($3 + $1 | 0) >> 2] = ((HEAP32[$2 >> 2] | 0) - ((HEAP32[$7 >> 2] | 0) << 1 | 0) | 0) + (HEAP32[($2 + -8 | 0) >> 2] | 0) | 0;
        $1 = $1 | 4 | 0;
        HEAP32[($3 + $1 | 0) >> 2] = ((HEAP32[($0 + $1 | 0) >> 2] | 0) - ((HEAP32[$2 >> 2] | 0) << 1 | 0) | 0) + (HEAP32[$7 >> 2] | 0) | 0;
        $4 = $4 + 2 | 0;
        $6 = $6 + -2 | 0;
        if ($6) {
         continue label$10
        }
        break label$10;
       };
      }
      if (!$5) {
       break label$2
      }
      $2 = $4 << 2 | 0;
      $129 = $3 + $2 | 0;
      $2 = $0 + $2 | 0;
      HEAP32[$129 >> 2] = ((HEAP32[$2 >> 2] | 0) - ((HEAP32[($2 + -4 | 0) >> 2] | 0) << 1 | 0) | 0) + (HEAP32[($2 + -8 | 0) >> 2] | 0) | 0;
      return;
     case 0:
      break label$1;
     case 1:
      break label$3;
     default:
      break label$2;
     };
    }
    if (($1 | 0) < (1 | 0)) {
     break label$2
    }
    $7 = $1 & 1 | 0;
    $2 = 0;
    label$11 : {
     if (($1 | 0) == (1 | 0)) {
      break label$11
     }
     $6 = $1 & -2 | 0;
     $2 = 0;
     label$12 : while (1) {
      $4 = $2 << 2 | 0;
      $1 = $0 + $4 | 0;
      HEAP32[($3 + $4 | 0) >> 2] = (HEAP32[$1 >> 2] | 0) - (HEAP32[($1 + -4 | 0) >> 2] | 0) | 0;
      $4 = $4 | 4 | 0;
      HEAP32[($3 + $4 | 0) >> 2] = (HEAP32[($0 + $4 | 0) >> 2] | 0) - (HEAP32[$1 >> 2] | 0) | 0;
      $2 = $2 + 2 | 0;
      $6 = $6 + -2 | 0;
      if ($6) {
       continue label$12
      }
      break label$12;
     };
    }
    if (!$7) {
     break label$2
    }
    $2 = $2 << 2 | 0;
    $189 = $3 + $2 | 0;
    $2 = $0 + $2 | 0;
    HEAP32[$189 >> 2] = (HEAP32[$2 >> 2] | 0) - (HEAP32[($2 + -4 | 0) >> 2] | 0) | 0;
   }
   return;
  }
  __memcpy($3 | 0, $0 | 0, $1 << 2 | 0 | 0) | 0;
 }
 
 function FLAC__fixed_restore_signal($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $7 = 0, $4 = 0, $5 = 0, $6 = 0, $8 = 0, $9 = 0, $76 = 0, $96 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     switch ($2 | 0) {
     case 4:
      if (($1 | 0) < (1 | 0)) {
       break label$2
      }
      $4 = HEAP32[($3 + -12 | 0) >> 2] | 0;
      $5 = HEAP32[($3 + -4 | 0) >> 2] | 0;
      $2 = 0;
      label$7 : while (1) {
       $6 = $2 << 2 | 0;
       $7 = $3 + $6 | 0;
       $8 = HEAP32[($7 + -8 | 0) >> 2] | 0;
       $5 = ((Math_imul($8, -6) + (HEAP32[($0 + $6 | 0) >> 2] | 0) | 0) - (HEAP32[($7 + -16 | 0) >> 2] | 0) | 0) + (($4 + $5 | 0) << 2 | 0) | 0;
       HEAP32[$7 >> 2] = $5;
       $4 = $8;
       $2 = $2 + 1 | 0;
       if (($2 | 0) != ($1 | 0)) {
        continue label$7
       }
       break label$2;
      };
     case 3:
      if (($1 | 0) < (1 | 0)) {
       break label$2
      }
      $9 = $1 & 1 | 0;
      $5 = HEAP32[($3 + -12 | 0) >> 2] | 0;
      $6 = HEAP32[($3 + -4 | 0) >> 2] | 0;
      $2 = 0;
      label$8 : {
       if (($1 | 0) == (1 | 0)) {
        break label$8
       }
       $8 = $1 & -2 | 0;
       $2 = 0;
       label$9 : while (1) {
        $7 = $2 << 2 | 0;
        $4 = $3 + $7 | 0;
        $76 = $5 + (HEAP32[($0 + $7 | 0) >> 2] | 0) | 0;
        $5 = HEAP32[($4 + -8 | 0) >> 2] | 0;
        $6 = $76 + Math_imul($6 - $5 | 0, 3) | 0;
        HEAP32[$4 >> 2] = $6;
        $7 = $7 | 4 | 0;
        $96 = $5 + (HEAP32[($0 + $7 | 0) >> 2] | 0) | 0;
        $5 = HEAP32[($4 + -4 | 0) >> 2] | 0;
        $6 = $96 + Math_imul($6 - $5 | 0, 3) | 0;
        HEAP32[($3 + $7 | 0) >> 2] = $6;
        $2 = $2 + 2 | 0;
        $8 = $8 + -2 | 0;
        if ($8) {
         continue label$9
        }
        break label$9;
       };
      }
      if (!$9) {
       break label$2
      }
      $2 = $2 << 2 | 0;
      $3 = $3 + $2 | 0;
      HEAP32[$3 >> 2] = ($5 + (HEAP32[($0 + $2 | 0) >> 2] | 0) | 0) + Math_imul($6 - (HEAP32[($3 + -8 | 0) >> 2] | 0) | 0, 3) | 0;
      return;
     case 2:
      if (($1 | 0) < (1 | 0)) {
       break label$2
      }
      $8 = $1 & 1 | 0;
      $5 = HEAP32[($3 + -4 | 0) >> 2] | 0;
      $2 = 0;
      label$10 : {
       if (($1 | 0) == (1 | 0)) {
        break label$10
       }
       $6 = $1 & -2 | 0;
       $2 = 0;
       label$11 : while (1) {
        $7 = $2 << 2 | 0;
        $4 = $3 + $7 | 0;
        $5 = (($5 << 1 | 0) + (HEAP32[($0 + $7 | 0) >> 2] | 0) | 0) - (HEAP32[($4 + -8 | 0) >> 2] | 0) | 0;
        HEAP32[$4 >> 2] = $5;
        $7 = $7 | 4 | 0;
        $5 = (($5 << 1 | 0) + (HEAP32[($0 + $7 | 0) >> 2] | 0) | 0) - (HEAP32[($4 + -4 | 0) >> 2] | 0) | 0;
        HEAP32[($3 + $7 | 0) >> 2] = $5;
        $2 = $2 + 2 | 0;
        $6 = $6 + -2 | 0;
        if ($6) {
         continue label$11
        }
        break label$11;
       };
      }
      if (!$8) {
       break label$2
      }
      $2 = $2 << 2 | 0;
      $3 = $3 + $2 | 0;
      HEAP32[$3 >> 2] = (($5 << 1 | 0) + (HEAP32[($0 + $2 | 0) >> 2] | 0) | 0) - (HEAP32[($3 + -8 | 0) >> 2] | 0) | 0;
      return;
     case 0:
      break label$1;
     case 1:
      break label$3;
     default:
      break label$2;
     };
    }
    if (($1 | 0) < (1 | 0)) {
     break label$2
    }
    $5 = $1 & 3 | 0;
    $4 = HEAP32[($3 + -4 | 0) >> 2] | 0;
    $2 = 0;
    label$12 : {
     if (($1 + -1 | 0) >>> 0 < 3 >>> 0) {
      break label$12
     }
     $6 = $1 & -4 | 0;
     $2 = 0;
     label$13 : while (1) {
      $7 = $2 << 2 | 0;
      $4 = $4 + (HEAP32[($0 + $7 | 0) >> 2] | 0) | 0;
      HEAP32[($3 + $7 | 0) >> 2] = $4;
      $8 = $7 | 4 | 0;
      $4 = $4 + (HEAP32[($0 + $8 | 0) >> 2] | 0) | 0;
      HEAP32[($3 + $8 | 0) >> 2] = $4;
      $8 = $7 | 8 | 0;
      $4 = $4 + (HEAP32[($0 + $8 | 0) >> 2] | 0) | 0;
      HEAP32[($3 + $8 | 0) >> 2] = $4;
      $7 = $7 | 12 | 0;
      $4 = $4 + (HEAP32[($0 + $7 | 0) >> 2] | 0) | 0;
      HEAP32[($3 + $7 | 0) >> 2] = $4;
      $2 = $2 + 4 | 0;
      $6 = $6 + -4 | 0;
      if ($6) {
       continue label$13
      }
      break label$13;
     };
    }
    if (!$5) {
     break label$2
    }
    label$14 : while (1) {
     $7 = $2 << 2 | 0;
     $4 = $4 + (HEAP32[($0 + $7 | 0) >> 2] | 0) | 0;
     HEAP32[($3 + $7 | 0) >> 2] = $4;
     $2 = $2 + 1 | 0;
     $5 = $5 + -1 | 0;
     if ($5) {
      continue label$14
     }
     break label$14;
    };
   }
   return;
  }
  __memcpy($3 | 0, $0 | 0, $1 << 2 | 0 | 0) | 0;
 }
 
 function __toread($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  $1 = HEAPU8[($0 + 74 | 0) >> 0] | 0;
  HEAP8[($0 + 74 | 0) >> 0] = $1 + -1 | 0 | $1 | 0;
  label$1 : {
   if ((HEAP32[($0 + 20 | 0) >> 2] | 0) >>> 0 <= (HEAP32[($0 + 28 | 0) >> 2] | 0) >>> 0) {
    break label$1
   }
   FUNCTION_TABLE[HEAP32[($0 + 36 | 0) >> 2] | 0 | 0]($0, 0, 0) | 0;
  }
  HEAP32[($0 + 28 | 0) >> 2] = 0;
  HEAP32[($0 + 16 | 0) >> 2] = 0;
  HEAP32[($0 + 20 | 0) >> 2] = 0;
  label$2 : {
   $1 = HEAP32[$0 >> 2] | 0;
   if (!($1 & 4 | 0)) {
    break label$2
   }
   HEAP32[$0 >> 2] = $1 | 32 | 0;
   return -1 | 0;
  }
  $2 = (HEAP32[($0 + 44 | 0) >> 2] | 0) + (HEAP32[($0 + 48 | 0) >> 2] | 0) | 0;
  HEAP32[($0 + 8 | 0) >> 2] = $2;
  HEAP32[($0 + 4 | 0) >> 2] = $2;
  return ($1 << 27 | 0) >> 31 | 0 | 0;
 }
 
 function FLAC__stream_decoder_new() {
  var i64toi32_i32$1 = 0, $2 = 0, i64toi32_i32$0 = 0, $1 = 0, $0 = 0, $3 = 0, $4 = 0;
  label$1 : {
   $0 = dlcalloc(1 | 0, 8 | 0) | 0;
   if (!$0) {
    break label$1
   }
   $1 = dlcalloc(1 | 0, 504 | 0) | 0;
   HEAP32[$0 >> 2] = $1;
   label$2 : {
    if (!$1) {
     break label$2
    }
    $2 = dlcalloc(1 | 0, 6160 | 0) | 0;
    HEAP32[($0 + 4 | 0) >> 2] = $2;
    label$3 : {
     if (!$2) {
      break label$3
     }
     $3 = FLAC__bitreader_new() | 0;
     HEAP32[($2 + 56 | 0) >> 2] = $3;
     label$4 : {
      if (!$3) {
       break label$4
      }
      HEAP32[($2 + 1128 | 0) >> 2] = 16;
      $4 = dlmalloc(((HEAP32[GOT_data_internal_FLAC__STREAM_METADATA_APPLICATION_ID_LEN >> 2] | 0) << 1 | 0) & -16 | 0 | 0) | 0;
      HEAP32[($2 + 1120 | 0) >> 2] = $4;
      label$5 : {
       if (!$4) {
        break label$5
       }
       HEAP32[($2 + 252 | 0) >> 2] = 0;
       i64toi32_i32$1 = $2;
       i64toi32_i32$0 = 0;
       HEAP32[($2 + 220 | 0) >> 2] = 0;
       HEAP32[($2 + 224 | 0) >> 2] = i64toi32_i32$0;
       i64toi32_i32$1 = $2 + 3616 | 0;
       i64toi32_i32$0 = 0;
       HEAP32[i64toi32_i32$1 >> 2] = 0;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
       i64toi32_i32$1 = $2 + 3608 | 0;
       i64toi32_i32$0 = 0;
       HEAP32[i64toi32_i32$1 >> 2] = 0;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
       i64toi32_i32$1 = $2 + 3600 | 0;
       i64toi32_i32$0 = 0;
       HEAP32[i64toi32_i32$1 >> 2] = 0;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
       i64toi32_i32$1 = $2 + 3592 | 0;
       i64toi32_i32$0 = 0;
       HEAP32[i64toi32_i32$1 >> 2] = 0;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
       i64toi32_i32$1 = $2 + 60 | 0;
       i64toi32_i32$0 = 0;
       HEAP32[i64toi32_i32$1 >> 2] = 0;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
       i64toi32_i32$1 = $2 + 68 | 0;
       i64toi32_i32$0 = 0;
       HEAP32[i64toi32_i32$1 >> 2] = 0;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
       i64toi32_i32$1 = $2 + 76 | 0;
       i64toi32_i32$0 = 0;
       HEAP32[i64toi32_i32$1 >> 2] = 0;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
       i64toi32_i32$1 = $2 + 84 | 0;
       i64toi32_i32$0 = 0;
       HEAP32[i64toi32_i32$1 >> 2] = 0;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
       i64toi32_i32$1 = $2 + 92 | 0;
       i64toi32_i32$0 = 0;
       HEAP32[i64toi32_i32$1 >> 2] = 0;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
       i64toi32_i32$1 = $2 + 100 | 0;
       i64toi32_i32$0 = 0;
       HEAP32[i64toi32_i32$1 >> 2] = 0;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
       i64toi32_i32$1 = $2 + 108 | 0;
       i64toi32_i32$0 = 0;
       HEAP32[i64toi32_i32$1 >> 2] = 0;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
       i64toi32_i32$1 = $2 + 116 | 0;
       i64toi32_i32$0 = 0;
       HEAP32[i64toi32_i32$1 >> 2] = 0;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
       FLAC__format_entropy_coding_method_partitioned_rice_contents_init($2 + 124 | 0 | 0);
       FLAC__format_entropy_coding_method_partitioned_rice_contents_init($2 + 136 | 0 | 0);
       FLAC__format_entropy_coding_method_partitioned_rice_contents_init($2 + 148 | 0 | 0);
       FLAC__format_entropy_coding_method_partitioned_rice_contents_init($2 + 160 | 0 | 0);
       FLAC__format_entropy_coding_method_partitioned_rice_contents_init($2 + 172 | 0 | 0);
       FLAC__format_entropy_coding_method_partitioned_rice_contents_init($2 + 184 | 0 | 0);
       FLAC__format_entropy_coding_method_partitioned_rice_contents_init($2 + 196 | 0 | 0);
       FLAC__format_entropy_coding_method_partitioned_rice_contents_init($2 + 208 | 0 | 0);
       i64toi32_i32$1 = $2;
       i64toi32_i32$0 = 0;
       HEAP32[($2 + 48 | 0) >> 2] = 0;
       HEAP32[($2 + 52 | 0) >> 2] = i64toi32_i32$0;
       memset($2 + 608 | 0 | 0, 0 | 0, 512 | 0) | 0;
       HEAP32[($2 + 1124 | 0) >> 2] = 0;
       HEAP32[($2 + 608 | 0) >> 2] = 1;
       HEAP32[($2 + 32 | 0) >> 2] = 0;
       i64toi32_i32$1 = $2 + 24 | 0;
       i64toi32_i32$0 = 0;
       HEAP32[i64toi32_i32$1 >> 2] = 0;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
       i64toi32_i32$1 = $2 + 16 | 0;
       i64toi32_i32$0 = 0;
       HEAP32[i64toi32_i32$1 >> 2] = 0;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
       i64toi32_i32$1 = $2 + 8 | 0;
       i64toi32_i32$0 = 0;
       HEAP32[i64toi32_i32$1 >> 2] = 0;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
       i64toi32_i32$1 = $2;
       i64toi32_i32$0 = 0;
       HEAP32[$2 >> 2] = 0;
       HEAP32[($2 + 4 | 0) >> 2] = i64toi32_i32$0;
       HEAP32[($1 + 28 | 0) >> 2] = 0;
       FLAC__ogg_decoder_aspect_set_defaults($1 + 32 | 0 | 0);
       HEAP32[$1 >> 2] = 9;
       return $0 | 0;
      }
      FLAC__bitreader_delete($3 | 0);
     }
     dlfree($2 | 0);
    }
    dlfree($1 | 0);
   }
   dlfree($0 | 0);
  }
  return 0 | 0;
 }
 
 function FLAC__stream_decoder_delete($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  label$1 : {
   if (!$0) {
    break label$1
   }
   FLAC__stream_decoder_finish($0 | 0) | 0;
   label$2 : {
    $1 = HEAP32[($0 + 4 | 0) >> 2] | 0;
    $2 = HEAP32[($1 + 1120 | 0) >> 2] | 0;
    if (!$2) {
     break label$2
    }
    dlfree($2 | 0);
    $1 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   }
   FLAC__bitreader_delete(HEAP32[($1 + 56 | 0) >> 2] | 0 | 0);
   FLAC__format_entropy_coding_method_partitioned_rice_contents_clear((HEAP32[($0 + 4 | 0) >> 2] | 0) + 124 | 0 | 0);
   FLAC__format_entropy_coding_method_partitioned_rice_contents_clear((HEAP32[($0 + 4 | 0) >> 2] | 0) + 136 | 0 | 0);
   FLAC__format_entropy_coding_method_partitioned_rice_contents_clear((HEAP32[($0 + 4 | 0) >> 2] | 0) + 148 | 0 | 0);
   FLAC__format_entropy_coding_method_partitioned_rice_contents_clear((HEAP32[($0 + 4 | 0) >> 2] | 0) + 160 | 0 | 0);
   FLAC__format_entropy_coding_method_partitioned_rice_contents_clear((HEAP32[($0 + 4 | 0) >> 2] | 0) + 172 | 0 | 0);
   FLAC__format_entropy_coding_method_partitioned_rice_contents_clear((HEAP32[($0 + 4 | 0) >> 2] | 0) + 184 | 0 | 0);
   FLAC__format_entropy_coding_method_partitioned_rice_contents_clear((HEAP32[($0 + 4 | 0) >> 2] | 0) + 196 | 0 | 0);
   FLAC__format_entropy_coding_method_partitioned_rice_contents_clear((HEAP32[($0 + 4 | 0) >> 2] | 0) + 208 | 0 | 0);
   dlfree(HEAP32[($0 + 4 | 0) >> 2] | 0 | 0);
   dlfree(HEAP32[$0 >> 2] | 0 | 0);
   dlfree($0 | 0);
  }
 }
 
 function FLAC__stream_decoder_finish($0) {
  $0 = $0 | 0;
  var $2 = 0, $3 = 0, $1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0;
  $1 = 1;
  label$1 : {
   if ((HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] | 0 | 0) == (9 | 0)) {
    break label$1
   }
   $2 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   FLAC__MD5Final($2 + 3732 | 0 | 0, $2 + 3636 | 0 | 0);
   dlfree(HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 452 | 0) >> 2] | 0 | 0);
   HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 452 | 0) >> 2] = 0;
   $2 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   HEAP32[($2 + 252 | 0) >> 2] = 0;
   FLAC__bitreader_free(HEAP32[($2 + 56 | 0) >> 2] | 0 | 0);
   $1 = $0 + 4 | 0;
   label$2 : {
    $2 = HEAP32[($0 + 4 | 0) >> 2] | 0;
    $3 = HEAP32[($2 + 60 | 0) >> 2] | 0;
    if (!$3) {
     break label$2
    }
    dlfree($3 + -16 | 0 | 0);
    HEAP32[((HEAP32[$1 >> 2] | 0) + 60 | 0) >> 2] = 0;
    $2 = HEAP32[$1 >> 2] | 0;
   }
   label$3 : {
    $3 = HEAP32[($2 + 3592 | 0) >> 2] | 0;
    if (!$3) {
     break label$3
    }
    dlfree($3 | 0);
    HEAP32[((HEAP32[$1 >> 2] | 0) + 92 | 0) >> 2] = 0;
    HEAP32[((HEAP32[$1 >> 2] | 0) + 3592 | 0) >> 2] = 0;
    $2 = HEAP32[$1 >> 2] | 0;
   }
   label$4 : {
    $3 = HEAP32[($2 + 64 | 0) >> 2] | 0;
    if (!$3) {
     break label$4
    }
    dlfree($3 + -16 | 0 | 0);
    HEAP32[((HEAP32[$1 >> 2] | 0) + 64 | 0) >> 2] = 0;
    $2 = HEAP32[$1 >> 2] | 0;
   }
   label$5 : {
    $3 = HEAP32[($2 + 3596 | 0) >> 2] | 0;
    if (!$3) {
     break label$5
    }
    dlfree($3 | 0);
    HEAP32[((HEAP32[$1 >> 2] | 0) + 96 | 0) >> 2] = 0;
    HEAP32[((HEAP32[$1 >> 2] | 0) + 3596 | 0) >> 2] = 0;
    $2 = HEAP32[$1 >> 2] | 0;
   }
   label$6 : {
    $3 = HEAP32[($2 + 68 | 0) >> 2] | 0;
    if (!$3) {
     break label$6
    }
    dlfree($3 + -16 | 0 | 0);
    HEAP32[((HEAP32[$1 >> 2] | 0) + 68 | 0) >> 2] = 0;
    $2 = HEAP32[$1 >> 2] | 0;
   }
   label$7 : {
    $3 = HEAP32[($2 + 3600 | 0) >> 2] | 0;
    if (!$3) {
     break label$7
    }
    dlfree($3 | 0);
    HEAP32[((HEAP32[$1 >> 2] | 0) + 100 | 0) >> 2] = 0;
    HEAP32[((HEAP32[$1 >> 2] | 0) + 3600 | 0) >> 2] = 0;
    $2 = HEAP32[$1 >> 2] | 0;
   }
   label$8 : {
    $3 = HEAP32[($2 + 72 | 0) >> 2] | 0;
    if (!$3) {
     break label$8
    }
    dlfree($3 + -16 | 0 | 0);
    HEAP32[((HEAP32[$1 >> 2] | 0) + 72 | 0) >> 2] = 0;
    $2 = HEAP32[$1 >> 2] | 0;
   }
   label$9 : {
    $3 = HEAP32[($2 + 3604 | 0) >> 2] | 0;
    if (!$3) {
     break label$9
    }
    dlfree($3 | 0);
    HEAP32[((HEAP32[$1 >> 2] | 0) + 104 | 0) >> 2] = 0;
    HEAP32[((HEAP32[$1 >> 2] | 0) + 3604 | 0) >> 2] = 0;
    $2 = HEAP32[$1 >> 2] | 0;
   }
   label$10 : {
    $3 = HEAP32[($2 + 76 | 0) >> 2] | 0;
    if (!$3) {
     break label$10
    }
    dlfree($3 + -16 | 0 | 0);
    HEAP32[((HEAP32[$1 >> 2] | 0) + 76 | 0) >> 2] = 0;
    $2 = HEAP32[$1 >> 2] | 0;
   }
   label$11 : {
    $3 = HEAP32[($2 + 3608 | 0) >> 2] | 0;
    if (!$3) {
     break label$11
    }
    dlfree($3 | 0);
    HEAP32[((HEAP32[$1 >> 2] | 0) + 108 | 0) >> 2] = 0;
    HEAP32[((HEAP32[$1 >> 2] | 0) + 3608 | 0) >> 2] = 0;
    $2 = HEAP32[$1 >> 2] | 0;
   }
   label$12 : {
    $3 = HEAP32[($2 + 80 | 0) >> 2] | 0;
    if (!$3) {
     break label$12
    }
    dlfree($3 + -16 | 0 | 0);
    HEAP32[((HEAP32[$1 >> 2] | 0) + 80 | 0) >> 2] = 0;
    $2 = HEAP32[$1 >> 2] | 0;
   }
   label$13 : {
    $3 = HEAP32[($2 + 3612 | 0) >> 2] | 0;
    if (!$3) {
     break label$13
    }
    dlfree($3 | 0);
    HEAP32[((HEAP32[$1 >> 2] | 0) + 112 | 0) >> 2] = 0;
    HEAP32[((HEAP32[$1 >> 2] | 0) + 3612 | 0) >> 2] = 0;
    $2 = HEAP32[$1 >> 2] | 0;
   }
   label$14 : {
    $3 = HEAP32[($2 + 84 | 0) >> 2] | 0;
    if (!$3) {
     break label$14
    }
    dlfree($3 + -16 | 0 | 0);
    HEAP32[((HEAP32[$1 >> 2] | 0) + 84 | 0) >> 2] = 0;
    $2 = HEAP32[$1 >> 2] | 0;
   }
   label$15 : {
    $3 = HEAP32[($2 + 3616 | 0) >> 2] | 0;
    if (!$3) {
     break label$15
    }
    dlfree($3 | 0);
    HEAP32[((HEAP32[$1 >> 2] | 0) + 116 | 0) >> 2] = 0;
    HEAP32[((HEAP32[$1 >> 2] | 0) + 3616 | 0) >> 2] = 0;
    $2 = HEAP32[$1 >> 2] | 0;
   }
   label$16 : {
    $3 = HEAP32[($2 + 88 | 0) >> 2] | 0;
    if (!$3) {
     break label$16
    }
    dlfree($3 + -16 | 0 | 0);
    HEAP32[((HEAP32[$1 >> 2] | 0) + 88 | 0) >> 2] = 0;
    $2 = HEAP32[$1 >> 2] | 0;
   }
   label$17 : {
    $3 = HEAP32[($2 + 3620 | 0) >> 2] | 0;
    if (!$3) {
     break label$17
    }
    dlfree($3 | 0);
    HEAP32[((HEAP32[$1 >> 2] | 0) + 120 | 0) >> 2] = 0;
    HEAP32[((HEAP32[$1 >> 2] | 0) + 3620 | 0) >> 2] = 0;
    $2 = HEAP32[$1 >> 2] | 0;
   }
   i64toi32_i32$1 = $2;
   i64toi32_i32$0 = 0;
   HEAP32[($2 + 220 | 0) >> 2] = 0;
   HEAP32[($2 + 224 | 0) >> 2] = i64toi32_i32$0;
   label$18 : {
    if (!(HEAP32[$2 >> 2] | 0)) {
     break label$18
    }
    FLAC__ogg_decoder_aspect_finish((HEAP32[$0 >> 2] | 0) + 32 | 0 | 0);
    $2 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   }
   label$19 : {
    $3 = HEAP32[($2 + 52 | 0) >> 2] | 0;
    if (!$3) {
     break label$19
    }
    label$20 : {
     if (($3 | 0) == (HEAP32[GOT_data_internal_stdin >> 2] | 0 | 0)) {
      break label$20
     }
     fclose($3 | 0) | 0;
     $2 = HEAP32[$1 >> 2] | 0;
    }
    HEAP32[($2 + 52 | 0) >> 2] = 0;
   }
   $1 = 1;
   label$21 : {
    if (!(HEAP32[($2 + 3624 | 0) >> 2] | 0)) {
     break label$21
    }
    $1 = !(memcmp($2 + 312 | 0 | 0, $2 + 3732 | 0 | 0, 16 | 0) | 0);
   }
   HEAP32[($2 + 48 | 0) >> 2] = 0;
   HEAP32[($2 + 3632 | 0) >> 2] = 0;
   memset($2 + 608 | 0 | 0, 0 | 0, 512 | 0) | 0;
   HEAP32[($2 + 32 | 0) >> 2] = 0;
   i64toi32_i32$1 = $2 + 24 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $2 + 16 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $2 + 8 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $2;
   i64toi32_i32$0 = 0;
   HEAP32[$2 >> 2] = 0;
   HEAP32[($2 + 4 | 0) >> 2] = i64toi32_i32$0;
   $2 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   HEAP32[($2 + 1124 | 0) >> 2] = 0;
   HEAP32[($2 + 608 | 0) >> 2] = 1;
   $2 = HEAP32[$0 >> 2] | 0;
   HEAP32[($2 + 28 | 0) >> 2] = 0;
   FLAC__ogg_decoder_aspect_set_defaults($2 + 32 | 0 | 0);
   HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] = 9;
  }
  return $1 | 0;
 }
 
 function FLAC__stream_decoder_init_stream($0, $1, $2, $3, $4, $5, $6, $7, $8, $9) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  $7 = $7 | 0;
  $8 = $8 | 0;
  $9 = $9 | 0;
  return init_stream_internal_($0 | 0, $1 | 0, $2 | 0, $3 | 0, $4 | 0, $5 | 0, $6 | 0, $7 | 0, $8 | 0, $9 | 0, 0 | 0) | 0 | 0;
 }
 
 function init_stream_internal_($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  $7 = $7 | 0;
  $8 = $8 | 0;
  $9 = $9 | 0;
  $10 = $10 | 0;
  var $11 = 0, i64toi32_i32$0 = 0, $12 = 0;
  $11 = 5;
  label$1 : {
   label$2 : {
    $12 = HEAP32[$0 >> 2] | 0;
    if ((HEAP32[$12 >> 2] | 0 | 0) != (9 | 0)) {
     break label$2
    }
    $11 = 2;
    if (!$1) {
     break label$2
    }
    if (!$6) {
     break label$2
    }
    if (!$8) {
     break label$2
    }
    label$3 : {
     if (!$2) {
      break label$3
     }
     if (!$3) {
      break label$2
     }
     if (!$4) {
      break label$2
     }
     if (!$5) {
      break label$2
     }
    }
    $11 = HEAP32[($0 + 4 | 0) >> 2] | 0;
    HEAP32[$11 >> 2] = $10;
    label$4 : {
     if (!$10) {
      break label$4
     }
     if (!(FLAC__ogg_decoder_aspect_init($12 + 32 | 0 | 0) | 0)) {
      break label$1
     }
     $11 = HEAP32[($0 + 4 | 0) >> 2] | 0;
    }
    FLAC__cpu_info($11 + 3524 | 0 | 0);
    $11 = HEAP32[($0 + 4 | 0) >> 2] | 0;
    $10 = GOT_func_internal_FLAC__lpc_restore_signal;
    HEAP32[($11 + 44 | 0) >> 2] = $10;
    HEAP32[($11 + 40 | 0) >> 2] = GOT_func_internal_FLAC__lpc_restore_signal_wide;
    HEAP32[($11 + 36 | 0) >> 2] = $10;
    $10 = GOT_data_internal___table_base;
    label$5 : {
     if (FLAC__bitreader_init(HEAP32[($11 + 56 | 0) >> 2] | 0 | 0, $10 + 6 | 0 | 0, $0 | 0) | 0) {
      break label$5
     }
     HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] = 8;
     return 3 | 0;
    }
    $11 = HEAP32[($0 + 4 | 0) >> 2] | 0;
    HEAP32[($11 + 48 | 0) >> 2] = $9;
    HEAP32[($11 + 32 | 0) >> 2] = $8;
    HEAP32[($11 + 28 | 0) >> 2] = $7;
    HEAP32[($11 + 24 | 0) >> 2] = $6;
    HEAP32[($11 + 20 | 0) >> 2] = $5;
    HEAP32[($11 + 16 | 0) >> 2] = $4;
    HEAP32[($11 + 12 | 0) >> 2] = $3;
    HEAP32[($11 + 8 | 0) >> 2] = $2;
    HEAP32[($11 + 4 | 0) >> 2] = $1;
    HEAP32[($11 + 3520 | 0) >> 2] = 0;
    HEAP32[($11 + 248 | 0) >> 2] = 0;
    i64toi32_i32$0 = 0;
    HEAP32[($11 + 240 | 0) >> 2] = 0;
    HEAP32[($11 + 244 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    HEAP32[($11 + 228 | 0) >> 2] = 0;
    HEAP32[($11 + 232 | 0) >> 2] = i64toi32_i32$0;
    HEAP32[($11 + 3624 | 0) >> 2] = HEAP32[((HEAP32[$0 >> 2] | 0) + 28 | 0) >> 2] | 0;
    i64toi32_i32$0 = 0;
    HEAP32[($11 + 3628 | 0) >> 2] = 1;
    HEAP32[($11 + 3632 | 0) >> 2] = i64toi32_i32$0;
    $11 = FLAC__stream_decoder_reset($0 | 0) | 0 ? 0 : 3;
   }
   return $11 | 0;
  }
  HEAP32[((HEAP32[$0 >> 2] | 0) + 4 | 0) >> 2] = 4;
  return 4 | 0;
 }
 
 function read_callback_($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0, $6 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      $3 = HEAP32[($2 + 4 | 0) >> 2] | 0;
      if (HEAP32[$3 >> 2] | 0) {
       break label$4
      }
      $4 = HEAP32[($3 + 20 | 0) >> 2] | 0;
      if (!$4) {
       break label$4
      }
      if (!(FUNCTION_TABLE[$4 | 0]($2, HEAP32[($3 + 48 | 0) >> 2] | 0) | 0)) {
       break label$4
      }
      HEAP32[$1 >> 2] = 0;
      break label$3;
     }
     $4 = 7;
     if (!(HEAP32[$1 >> 2] | 0)) {
      break label$2
     }
     label$5 : {
      $3 = HEAP32[($2 + 4 | 0) >> 2] | 0;
      if (!(HEAP32[($3 + 3632 | 0) >> 2] | 0)) {
       break label$5
      }
      if ((HEAP32[($3 + 6152 | 0) >> 2] | 0) >>> 0 > 20 >>> 0) {
       break label$2
      }
     }
     label$6 : {
      label$7 : {
       label$8 : {
        if (!(HEAP32[$3 >> 2] | 0)) {
         break label$8
        }
        $6 = 0;
        switch (FLAC__ogg_decoder_aspect_read_callback_wrapper((HEAP32[$2 >> 2] | 0) + 32 | 0 | 0, $0 | 0, $1 | 0, GOT_data_internal___table_base + 7 | 0 | 0, $2 | 0, HEAP32[($3 + 48 | 0) >> 2] | 0 | 0) | 0 | 0) {
        case 1:
         break label$6;
        case 0:
        case 2:
         break label$7;
        default:
         break label$2;
        };
       }
       $6 = FUNCTION_TABLE[HEAP32[($3 + 4 | 0) >> 2] | 0 | 0]($2, $0, $1, HEAP32[($3 + 48 | 0) >> 2] | 0) | 0;
       if (($6 | 0) == (2 | 0)) {
        break label$2
       }
      }
      $3 = 1;
      if (HEAP32[$1 >> 2] | 0) {
       break label$1
      }
      $3 = 1;
      $4 = 4;
      if (($6 | 0) == (1 | 0)) {
       break label$2
      }
      $1 = HEAP32[($2 + 4 | 0) >> 2] | 0;
      if (HEAP32[$1 >> 2] | 0) {
       break label$1
      }
      $0 = HEAP32[($1 + 20 | 0) >> 2] | 0;
      if (!$0) {
       break label$1
      }
      if (FUNCTION_TABLE[$0 | 0]($2, HEAP32[($1 + 48 | 0) >> 2] | 0) | 0) {
       break label$2
      }
      break label$1;
     }
     $3 = 1;
     if (HEAP32[$1 >> 2] | 0) {
      break label$1
     }
    }
    $4 = 4;
   }
   HEAP32[(HEAP32[$2 >> 2] | 0) >> 2] = $4;
   $3 = 0;
  }
  return $3 | 0;
 }
 
 function FLAC__stream_decoder_reset($0) {
  $0 = $0 | 0;
  var $1 = 0, i64toi32_i32$0 = 0, $3 = 0, $2 = 0;
  label$1 : {
   label$2 : {
    $1 = HEAP32[($0 + 4 | 0) >> 2] | 0;
    if (HEAP32[($1 + 3628 | 0) >> 2] | 0) {
     break label$2
    }
    $2 = 0;
    if ((HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] | 0 | 0) == (9 | 0)) {
     break label$1
    }
   }
   $2 = 0;
   HEAP32[($1 + 3624 | 0) >> 2] = 0;
   i64toi32_i32$0 = 0;
   HEAP32[($1 + 240 | 0) >> 2] = 0;
   HEAP32[($1 + 244 | 0) >> 2] = i64toi32_i32$0;
   label$3 : {
    if (!(HEAP32[$1 >> 2] | 0)) {
     break label$3
    }
    FLAC__ogg_decoder_aspect_flush((HEAP32[$0 >> 2] | 0) + 32 | 0 | 0);
    $1 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   }
   $1 = FLAC__bitreader_clear(HEAP32[($1 + 56 | 0) >> 2] | 0 | 0) | 0;
   $3 = HEAP32[$0 >> 2] | 0;
   HEAP32[$3 >> 2] = $1 ? 2 : 8;
   if (!$1) {
    break label$1
   }
   label$4 : {
    $1 = HEAP32[($0 + 4 | 0) >> 2] | 0;
    if (!(HEAP32[$1 >> 2] | 0)) {
     break label$4
    }
    FLAC__ogg_decoder_aspect_reset($3 + 32 | 0 | 0);
    $1 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   }
   label$5 : {
    label$6 : {
     if (HEAP32[($1 + 3628 | 0) >> 2] | 0) {
      break label$6
     }
     $3 = GOT_data_internal_stdin;
     if ((HEAP32[($1 + 52 | 0) >> 2] | 0 | 0) == (HEAP32[$3 >> 2] | 0 | 0)) {
      break label$1
     }
     $3 = HEAP32[($1 + 8 | 0) >> 2] | 0;
     if (!$3) {
      break label$5
     }
     i64toi32_i32$0 = 0;
     if ((FUNCTION_TABLE[$3 | 0]($0, 0, i64toi32_i32$0, HEAP32[($1 + 48 | 0) >> 2] | 0) | 0 | 0) == (1 | 0)) {
      break label$1
     }
     $1 = HEAP32[($0 + 4 | 0) >> 2] | 0;
     break label$5;
    }
    HEAP32[($1 + 3628 | 0) >> 2] = 0;
   }
   HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] = 0;
   HEAP32[($1 + 248 | 0) >> 2] = 0;
   dlfree(HEAP32[($1 + 452 | 0) >> 2] | 0 | 0);
   HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 452 | 0) >> 2] = 0;
   $1 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   HEAP32[($1 + 252 | 0) >> 2] = 0;
   HEAP32[($1 + 3624 | 0) >> 2] = HEAP32[((HEAP32[$0 >> 2] | 0) + 28 | 0) >> 2] | 0;
   i64toi32_i32$0 = 0;
   HEAP32[($1 + 228 | 0) >> 2] = 0;
   HEAP32[($1 + 232 | 0) >> 2] = i64toi32_i32$0;
   FLAC__MD5Init($1 + 3636 | 0 | 0);
   $0 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   HEAP32[($0 + 6152 | 0) >> 2] = 0;
   i64toi32_i32$0 = 0;
   HEAP32[($0 + 6136 | 0) >> 2] = 0;
   HEAP32[($0 + 6140 | 0) >> 2] = i64toi32_i32$0;
   $2 = 1;
  }
  return $2 | 0;
 }
 
 function FLAC__stream_decoder_init_ogg_stream($0, $1, $2, $3, $4, $5, $6, $7, $8, $9) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  $7 = $7 | 0;
  $8 = $8 | 0;
  $9 = $9 | 0;
  return init_stream_internal_($0 | 0, $1 | 0, $2 | 0, $3 | 0, $4 | 0, $5 | 0, $6 | 0, $7 | 0, $8 | 0, $9 | 0, 1 | 0) | 0 | 0;
 }
 
 function FLAC__stream_decoder_set_ogg_serial_number($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = 0;
  label$1 : {
   $0 = HEAP32[$0 >> 2] | 0;
   if ((HEAP32[$0 >> 2] | 0 | 0) != (9 | 0)) {
    break label$1
   }
   FLAC__ogg_decoder_aspect_set_serial_number($0 + 32 | 0 | 0, $1 | 0);
   $2 = 1;
  }
  return $2 | 0;
 }
 
 function FLAC__stream_decoder_set_md5_checking($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = 0;
  label$1 : {
   $0 = HEAP32[$0 >> 2] | 0;
   if ((HEAP32[$0 >> 2] | 0 | 0) != (9 | 0)) {
    break label$1
   }
   HEAP32[($0 + 28 | 0) >> 2] = $1;
   $2 = 1;
  }
  return $2 | 0;
 }
 
 function FLAC__stream_decoder_set_metadata_respond($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = 0;
  label$1 : {
   if ($1 >>> 0 > 126 >>> 0) {
    break label$1
   }
   if ((HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] | 0 | 0) != (9 | 0)) {
    break label$1
   }
   $2 = 1;
   $0 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   HEAP32[(($0 + ($1 << 2 | 0) | 0) + 608 | 0) >> 2] = 1;
   if (($1 | 0) != (2 | 0)) {
    break label$1
   }
   HEAP32[($0 + 1124 | 0) >> 2] = 0;
  }
  return $2 | 0;
 }
 
 function FLAC__stream_decoder_set_metadata_respond_application($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0;
  $2 = 0;
  label$1 : {
   if ((HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] | 0 | 0) != (9 | 0)) {
    break label$1
   }
   $2 = 1;
   $3 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   if (HEAP32[($3 + 616 | 0) >> 2] | 0) {
    break label$1
   }
   $4 = HEAP32[($3 + 1120 | 0) >> 2] | 0;
   label$2 : {
    label$3 : {
     label$4 : {
      $2 = HEAP32[($3 + 1124 | 0) >> 2] | 0;
      if (($2 | 0) == (HEAP32[($3 + 1128 | 0) >> 2] | 0 | 0)) {
       break label$4
      }
      $3 = $4;
      break label$3;
     }
     label$5 : {
      label$6 : {
       if ($2) {
        break label$6
       }
       $3 = dlrealloc($4 | 0, 0 | 0) | 0;
       break label$5;
      }
      label$7 : {
       if (($2 | 0) < (0 | 0)) {
        break label$7
       }
       $3 = dlrealloc($4 | 0, $2 << 1 | 0 | 0) | 0;
       if ($3) {
        break label$5
       }
       dlfree($4 | 0);
       $3 = HEAP32[($0 + 4 | 0) >> 2] | 0;
      }
      HEAP32[($3 + 1120 | 0) >> 2] = 0;
      break label$2;
     }
     $2 = HEAP32[($0 + 4 | 0) >> 2] | 0;
     HEAP32[($2 + 1120 | 0) >> 2] = $3;
     if (!$3) {
      break label$2
     }
     HEAP32[($2 + 1128 | 0) >> 2] = (HEAP32[($2 + 1128 | 0) >> 2] | 0) << 1 | 0;
     $2 = HEAP32[($2 + 1124 | 0) >> 2] | 0;
    }
    $4 = (HEAP32[GOT_data_internal_FLAC__STREAM_METADATA_APPLICATION_ID_LEN >> 2] | 0) >>> 3 | 0;
    __memcpy($3 + Math_imul($4, $2) | 0 | 0, $1 | 0, $4 | 0) | 0;
    $0 = HEAP32[($0 + 4 | 0) >> 2] | 0;
    HEAP32[($0 + 1124 | 0) >> 2] = (HEAP32[($0 + 1124 | 0) >> 2] | 0) + 1 | 0;
    return 1 | 0;
   }
   HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] = 8;
   $2 = 0;
  }
  return $2 | 0;
 }
 
 function FLAC__stream_decoder_set_metadata_respond_all($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0;
  $1 = 0;
  label$1 : {
   if ((HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] | 0 | 0) != (9 | 0)) {
    break label$1
   }
   $2 = 0;
   $3 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   $0 = $3 + 608 | 0;
   label$2 : while (1) {
    $1 = $2 << 2 | 0;
    HEAP32[($0 + $1 | 0) >> 2] = 1;
    HEAP32[($0 + ($1 | 4 | 0) | 0) >> 2] = 1;
    HEAP32[($0 + ($1 | 8 | 0) | 0) >> 2] = 1;
    HEAP32[($0 + ($1 | 12 | 0) | 0) >> 2] = 1;
    HEAP32[($0 + ($1 | 16 | 0) | 0) >> 2] = 1;
    HEAP32[($0 + ($1 | 20 | 0) | 0) >> 2] = 1;
    HEAP32[($0 + ($1 | 24 | 0) | 0) >> 2] = 1;
    HEAP32[($0 + ($1 | 28 | 0) | 0) >> 2] = 1;
    $2 = $2 + 8 | 0;
    if (($2 | 0) != (128 | 0)) {
     continue label$2
    }
    break label$2;
   };
   HEAP32[($3 + 1124 | 0) >> 2] = 0;
   $1 = 1;
  }
  return $1 | 0;
 }
 
 function FLAC__stream_decoder_set_metadata_ignore($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = 0;
  label$1 : {
   if ($1 >>> 0 > 126 >>> 0) {
    break label$1
   }
   if ((HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] | 0 | 0) != (9 | 0)) {
    break label$1
   }
   $0 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   HEAP32[(($0 + ($1 << 2 | 0) | 0) + 608 | 0) >> 2] = 0;
   $2 = 1;
   if (($1 | 0) != (2 | 0)) {
    break label$1
   }
   HEAP32[($0 + 1124 | 0) >> 2] = 0;
  }
  return $2 | 0;
 }
 
 function FLAC__stream_decoder_set_metadata_ignore_application($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $4 = 0, $3 = 0;
  label$1 : {
   if ((HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] | 0 | 0) != (9 | 0)) {
    break label$1
   }
   label$2 : {
    $2 = HEAP32[($0 + 4 | 0) >> 2] | 0;
    if (HEAP32[($2 + 616 | 0) >> 2] | 0) {
     break label$2
    }
    return 1 | 0;
   }
   $3 = HEAP32[($2 + 1120 | 0) >> 2] | 0;
   label$3 : {
    label$4 : {
     label$5 : {
      $4 = HEAP32[($2 + 1124 | 0) >> 2] | 0;
      if (($4 | 0) == (HEAP32[($2 + 1128 | 0) >> 2] | 0 | 0)) {
       break label$5
      }
      $2 = $3;
      break label$4;
     }
     label$6 : {
      label$7 : {
       if ($4) {
        break label$7
       }
       $2 = dlrealloc($3 | 0, 0 | 0) | 0;
       break label$6;
      }
      label$8 : {
       if (($4 | 0) < (0 | 0)) {
        break label$8
       }
       $2 = dlrealloc($3 | 0, $4 << 1 | 0 | 0) | 0;
       if ($2) {
        break label$6
       }
       dlfree($3 | 0);
       $2 = HEAP32[($0 + 4 | 0) >> 2] | 0;
      }
      HEAP32[($2 + 1120 | 0) >> 2] = 0;
      break label$3;
     }
     $4 = HEAP32[($0 + 4 | 0) >> 2] | 0;
     HEAP32[($4 + 1120 | 0) >> 2] = $2;
     if (!$2) {
      break label$3
     }
     HEAP32[($4 + 1128 | 0) >> 2] = (HEAP32[($4 + 1128 | 0) >> 2] | 0) << 1 | 0;
     $4 = HEAP32[($4 + 1124 | 0) >> 2] | 0;
    }
    $3 = (HEAP32[GOT_data_internal_FLAC__STREAM_METADATA_APPLICATION_ID_LEN >> 2] | 0) >>> 3 | 0;
    __memcpy($2 + Math_imul($3, $4) | 0 | 0, $1 | 0, $3 | 0) | 0;
    $0 = HEAP32[($0 + 4 | 0) >> 2] | 0;
    HEAP32[($0 + 1124 | 0) >> 2] = (HEAP32[($0 + 1124 | 0) >> 2] | 0) + 1 | 0;
    return 1 | 0;
   }
   HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] = 8;
  }
  return 0 | 0;
 }
 
 function FLAC__stream_decoder_set_metadata_ignore_all($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = 0;
  label$1 : {
   if ((HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] | 0 | 0) != (9 | 0)) {
    break label$1
   }
   memset((HEAP32[($0 + 4 | 0) >> 2] | 0) + 608 | 0 | 0, 0 | 0, 512 | 0) | 0;
   HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 1124 | 0) >> 2] = 0;
   $1 = 1;
  }
  return $1 | 0;
 }
 
 function FLAC__stream_decoder_get_state($0) {
  $0 = $0 | 0;
  return HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] | 0 | 0;
 }
 
 function FLAC__stream_decoder_get_md5_checking($0) {
  $0 = $0 | 0;
  return HEAP32[((HEAP32[$0 >> 2] | 0) + 28 | 0) >> 2] | 0 | 0;
 }
 
 function FLAC__stream_decoder_process_single($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  $2 = 1;
  label$1 : {
   label$2 : {
    label$3 : while (1) {
     $3 = 0;
     label$4 : {
      switch (HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] | 0 | 0) {
      case 0:
       if (find_metadata_($0 | 0) | 0) {
        continue label$3
       }
       $2 = 0;
       break label$2;
      case 1:
       $3 = (read_metadata_($0 | 0) | 0 | 0) != (0 | 0);
       break label$1;
      case 2:
       if (frame_sync_($0 | 0) | 0) {
        continue label$3
       }
       break label$2;
      case 4:
      case 7:
       break label$2;
      case 3:
       break label$4;
      default:
       break label$1;
      };
     }
     label$8 : {
      if (read_frame_($0 | 0, $1 + 12 | 0 | 0, 1 | 0) | 0) {
       break label$8
      }
      $2 = 0;
      break label$2;
     }
     if (!(HEAP32[($1 + 12 | 0) >> 2] | 0)) {
      continue label$3
     }
     break label$3;
    };
   }
   $3 = $2;
  }
  __stack_pointer = $1 + 16 | 0;
  return $3 | 0;
 }
 
 function find_metadata_($0) {
  $0 = $0 | 0;
  var $1 = 0, $4 = 0, $3 = 0, $6 = 0, $5 = 0, $2 = 0, $7 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  $2 = 1;
  $3 = 0;
  label$1 : {
   label$2 : while (1) {
    $4 = 0;
    label$3 : {
     label$4 : while (1) {
      label$5 : {
       label$6 : {
        $5 = HEAP32[($0 + 4 | 0) >> 2] | 0;
        if (!(HEAP32[($5 + 3520 | 0) >> 2] | 0)) {
         break label$6
        }
        $6 = HEAPU8[($5 + 3590 | 0) >> 0] | 0;
        HEAP32[($1 + 8 | 0) >> 2] = $6;
        HEAP32[($5 + 3520 | 0) >> 2] = 0;
        break label$5;
       }
       label$7 : {
        if (FLAC__bitreader_read_raw_uint32(HEAP32[($5 + 56 | 0) >> 2] | 0 | 0, $1 + 8 | 0 | 0, 8 | 0) | 0) {
         break label$7
        }
        $3 = 0;
        break label$1;
       }
       $6 = HEAP32[($1 + 8 | 0) >> 2] | 0;
      }
      label$8 : {
       if (($6 | 0) != (HEAPU8[(GOT_data_internal_FLAC__STREAM_SYNC_STRING + $3 | 0) >> 0] | 0 | 0)) {
        break label$8
       }
       $2 = 1;
       $3 = $3 + 1 | 0;
       break label$3;
      }
      $3 = 0;
      if (($4 | 0) == (3 | 0)) {
       break label$1
      }
      label$9 : {
       if (($6 | 0) != (HEAPU8[((GOT_data_internal___memory_base + 7836 | 0) + $4 | 0) >> 0] | 0 | 0)) {
        break label$9
       }
       $3 = 0;
       $4 = $4 + 1 | 0;
       if (($4 | 0) != (3 | 0)) {
        continue label$4
       }
       label$10 : {
        label$11 : {
         if (!(FLAC__bitreader_read_raw_uint32(HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0 | 0, $1 + 12 | 0 | 0, 24 | 0) | 0)) {
          break label$11
         }
         if (!(FLAC__bitreader_read_raw_uint32(HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0 | 0, $1 + 12 | 0 | 0, 8 | 0) | 0)) {
          break label$11
         }
         $6 = HEAP32[($1 + 12 | 0) >> 2] | 0;
         if (!(FLAC__bitreader_read_raw_uint32(HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0 | 0, $1 + 12 | 0 | 0, 8 | 0) | 0)) {
          break label$11
         }
         $5 = HEAP32[($1 + 12 | 0) >> 2] | 0;
         if (!(FLAC__bitreader_read_raw_uint32(HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0 | 0, $1 + 12 | 0 | 0, 8 | 0) | 0)) {
          break label$11
         }
         $7 = HEAP32[($1 + 12 | 0) >> 2] | 0;
         if (FLAC__bitreader_read_raw_uint32(HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0 | 0, $1 + 12 | 0 | 0, 8 | 0) | 0) {
          break label$10
         }
        }
        $3 = 0;
        break label$1;
       }
       $3 = 0;
       if (FLAC__bitreader_skip_byte_block_aligned_no_crc(HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0 | 0, (HEAP32[($1 + 12 | 0) >> 2] | 0) & 127 | 0 | (($7 << 7 | 0) & 16256 | 0 | (($5 & 127 | 0 | (($6 << 7 | 0) & 16256 | 0) | 0) << 14 | 0) | 0) | 0 | 0) | 0) {
        continue label$4
       }
       break label$1;
      }
      break label$4;
     };
     label$12 : {
      if (($6 | 0) != (255 | 0)) {
       break label$12
      }
      HEAP8[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 3588 | 0) >> 0] = 255;
      if (!(FLAC__bitreader_read_raw_uint32(HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0 | 0, $1 + 8 | 0 | 0, 8 | 0) | 0)) {
       break label$1
      }
      label$13 : {
       $4 = HEAP32[($1 + 8 | 0) >> 2] | 0;
       if (($4 | 0) != (255 | 0)) {
        break label$13
       }
       $4 = HEAP32[($0 + 4 | 0) >> 2] | 0;
       HEAP32[($4 + 3520 | 0) >> 2] = 1;
       HEAP8[($4 + 3590 | 0) >> 0] = 255;
       break label$12;
      }
      if (($4 & -2 | 0 | 0) != (248 | 0)) {
       break label$12
      }
      HEAP8[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 3589 | 0) >> 0] = $4;
      HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] = 3;
      $3 = 1;
      break label$1;
     }
     $3 = 0;
     label$14 : {
      if ($2) {
       break label$14
      }
      $2 = 0;
      break label$3;
     }
     $2 = 0;
     $4 = HEAP32[($0 + 4 | 0) >> 2] | 0;
     if (HEAP32[($4 + 3632 | 0) >> 2] | 0) {
      break label$3
     }
     $3 = 0;
     FUNCTION_TABLE[HEAP32[($4 + 32 | 0) >> 2] | 0 | 0]($0, 0, HEAP32[($4 + 48 | 0) >> 2] | 0);
     $2 = 0;
    }
    if ($3 >>> 0 < 4 >>> 0) {
     continue label$2
    }
    break label$2;
   };
   $3 = 1;
   HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] = 1;
  }
  __stack_pointer = $1 + 16 | 0;
  return $3 | 0;
 }
 
 function read_metadata_($0) {
  $0 = $0 | 0;
  var $2 = 0, $1 = 0, $5 = 0, $7 = 0, $4 = 0, $6 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $8 = 0, i64toi32_i32$2 = 0, $3 = 0, $10 = 0, i64toi32_i32$5 = 0, $9 = 0, $11 = 0, $14 = 0, $12 = 0, $13 = 0, i64toi32_i32$3 = 0, $67 = 0, $175 = 0, $177 = 0, $322 = 0, $337 = 0, $461 = 0, $638$hi = 0, $641$hi = 0, $642 = 0;
  $1 = __stack_pointer - 192 | 0;
  __stack_pointer = $1;
  label$1 : {
   label$2 : {
    if (!(FLAC__bitreader_read_raw_uint32(HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0 | 0, $1 + 184 | 0 | 0, HEAP32[GOT_data_internal_FLAC__STREAM_METADATA_IS_LAST_LEN >> 2] | 0 | 0) | 0)) {
     break label$2
    }
    $2 = 0;
    $3 = HEAP32[($1 + 184 | 0) >> 2] | 0;
    $4 = $0 + 4 | 0;
    if (!(FLAC__bitreader_read_raw_uint32(HEAP32[((HEAP32[$4 >> 2] | 0) + 56 | 0) >> 2] | 0 | 0, $1 + 180 | 0 | 0, HEAP32[GOT_data_internal_FLAC__STREAM_METADATA_TYPE_LEN >> 2] | 0 | 0) | 0)) {
     break label$1
    }
    if (!(FLAC__bitreader_read_raw_uint32(HEAP32[((HEAP32[$4 >> 2] | 0) + 56 | 0) >> 2] | 0 | 0, $1 + 176 | 0 | 0, HEAP32[GOT_data_internal_FLAC__STREAM_METADATA_LENGTH_LEN >> 2] | 0 | 0) | 0)) {
     break label$1
    }
    $5 = ($3 | 0) != (0 | 0);
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        label$7 : {
         $2 = HEAP32[($1 + 180 | 0) >> 2] | 0;
         switch ($2 | 0) {
         case 3:
          break label$6;
         case 0:
          break label$7;
         default:
          break label$5;
         };
        }
        $6 = HEAP32[($1 + 176 | 0) >> 2] | 0;
        $2 = 0;
        $7 = HEAP32[$4 >> 2] | 0;
        HEAP32[($7 + 256 | 0) >> 2] = 0;
        HEAP32[($7 + 264 | 0) >> 2] = $6;
        HEAP32[($7 + 260 | 0) >> 2] = $5;
        $5 = GOT_data_internal_FLAC__STREAM_METADATA_STREAMINFO_MIN_BLOCK_SIZE_LEN;
        $67 = HEAP32[($7 + 56 | 0) >> 2] | 0;
        $7 = HEAP32[$5 >> 2] | 0;
        if (!(FLAC__bitreader_read_raw_uint32($67 | 0, $1 | 0, $7 | 0) | 0)) {
         break label$1
        }
        HEAP32[((HEAP32[$4 >> 2] | 0) + 272 | 0) >> 2] = HEAP32[$1 >> 2] | 0;
        $5 = GOT_data_internal_FLAC__STREAM_METADATA_STREAMINFO_MAX_BLOCK_SIZE_LEN;
        $8 = HEAP32[$5 >> 2] | 0;
        if (!(FLAC__bitreader_read_raw_uint32(HEAP32[((HEAP32[$4 >> 2] | 0) + 56 | 0) >> 2] | 0 | 0, $1 | 0, $8 | 0) | 0)) {
         break label$1
        }
        HEAP32[((HEAP32[$4 >> 2] | 0) + 276 | 0) >> 2] = HEAP32[$1 >> 2] | 0;
        $5 = GOT_data_internal_FLAC__STREAM_METADATA_STREAMINFO_MIN_FRAME_SIZE_LEN;
        $9 = HEAP32[$5 >> 2] | 0;
        if (!(FLAC__bitreader_read_raw_uint32(HEAP32[((HEAP32[$4 >> 2] | 0) + 56 | 0) >> 2] | 0 | 0, $1 | 0, $9 | 0) | 0)) {
         break label$1
        }
        HEAP32[((HEAP32[$4 >> 2] | 0) + 280 | 0) >> 2] = HEAP32[$1 >> 2] | 0;
        $5 = GOT_data_internal_FLAC__STREAM_METADATA_STREAMINFO_MAX_FRAME_SIZE_LEN;
        $10 = HEAP32[$5 >> 2] | 0;
        if (!(FLAC__bitreader_read_raw_uint32(HEAP32[((HEAP32[$4 >> 2] | 0) + 56 | 0) >> 2] | 0 | 0, $1 | 0, $10 | 0) | 0)) {
         break label$1
        }
        HEAP32[((HEAP32[$4 >> 2] | 0) + 284 | 0) >> 2] = HEAP32[$1 >> 2] | 0;
        $5 = GOT_data_internal_FLAC__STREAM_METADATA_STREAMINFO_SAMPLE_RATE_LEN;
        $11 = HEAP32[$5 >> 2] | 0;
        if (!(FLAC__bitreader_read_raw_uint32(HEAP32[((HEAP32[$4 >> 2] | 0) + 56 | 0) >> 2] | 0 | 0, $1 | 0, $11 | 0) | 0)) {
         break label$1
        }
        HEAP32[((HEAP32[$4 >> 2] | 0) + 288 | 0) >> 2] = HEAP32[$1 >> 2] | 0;
        $5 = GOT_data_internal_FLAC__STREAM_METADATA_STREAMINFO_CHANNELS_LEN;
        $12 = HEAP32[$5 >> 2] | 0;
        if (!(FLAC__bitreader_read_raw_uint32(HEAP32[((HEAP32[$4 >> 2] | 0) + 56 | 0) >> 2] | 0 | 0, $1 | 0, $12 | 0) | 0)) {
         break label$1
        }
        HEAP32[((HEAP32[$4 >> 2] | 0) + 292 | 0) >> 2] = (HEAP32[$1 >> 2] | 0) + 1 | 0;
        $5 = GOT_data_internal_FLAC__STREAM_METADATA_STREAMINFO_BITS_PER_SAMPLE_LEN;
        $13 = HEAP32[$5 >> 2] | 0;
        if (!(FLAC__bitreader_read_raw_uint32(HEAP32[((HEAP32[$4 >> 2] | 0) + 56 | 0) >> 2] | 0 | 0, $1 | 0, $13 | 0) | 0)) {
         break label$1
        }
        HEAP32[((HEAP32[$4 >> 2] | 0) + 296 | 0) >> 2] = (HEAP32[$1 >> 2] | 0) + 1 | 0;
        $5 = HEAP32[$4 >> 2] | 0;
        $14 = GOT_data_internal_FLAC__STREAM_METADATA_STREAMINFO_TOTAL_SAMPLES_LEN;
        $175 = HEAP32[($5 + 56 | 0) >> 2] | 0;
        $177 = $5 + 304 | 0;
        $5 = HEAP32[$14 >> 2] | 0;
        if (!(FLAC__bitreader_read_raw_uint64($175 | 0, $177 | 0, $5 | 0) | 0)) {
         break label$1
        }
        $14 = HEAP32[$4 >> 2] | 0;
        if (!(FLAC__bitreader_read_byte_block_aligned_no_crc(HEAP32[($14 + 56 | 0) >> 2] | 0 | 0, $14 + 312 | 0 | 0, 16 | 0) | 0)) {
         break label$1
        }
        if (!(FLAC__bitreader_skip_byte_block_aligned_no_crc(HEAP32[((HEAP32[$4 >> 2] | 0) + 56 | 0) >> 2] | 0 | 0, $6 - ((((((((($7 + $8 | 0) + $9 | 0) + $10 | 0) + $11 | 0) + $12 | 0) + $13 | 0) + $5 | 0) + 128 | 0) >>> 3 | 0) | 0 | 0) | 0)) {
         break label$2
        }
        $2 = HEAP32[$4 >> 2] | 0;
        HEAP32[($2 + 248 | 0) >> 2] = 1;
        label$8 : {
         if (memcmp($2 + 312 | 0 | 0, GOT_data_internal___memory_base + 7839 | 0 | 0, 16 | 0) | 0) {
          break label$8
         }
         HEAP32[($2 + 3624 | 0) >> 2] = 0;
        }
        if (HEAP32[($2 + 3632 | 0) >> 2] | 0) {
         break label$4
        }
        if (!(HEAP32[($2 + 608 | 0) >> 2] | 0)) {
         break label$4
        }
        $5 = HEAP32[($2 + 28 | 0) >> 2] | 0;
        if (!$5) {
         break label$4
        }
        FUNCTION_TABLE[$5 | 0]($0, $2 + 256 | 0, HEAP32[($2 + 48 | 0) >> 2] | 0);
        break label$4;
       }
       $2 = HEAP32[$4 >> 2] | 0;
       HEAP32[($2 + 252 | 0) >> 2] = 0;
       $10 = HEAP32[($1 + 176 | 0) >> 2] | 0;
       HEAP32[($2 + 448 | 0) >> 2] = ($10 >>> 0) / (18 >>> 0) | 0;
       HEAP32[($2 + 440 | 0) >> 2] = $10;
       HEAP32[($2 + 436 | 0) >> 2] = $5;
       HEAP32[($2 + 432 | 0) >> 2] = 3;
       $2 = HEAP32[$4 >> 2] | 0;
       $7 = HEAP32[($2 + 452 | 0) >> 2] | 0;
       label$9 : {
        label$10 : {
         $5 = HEAP32[($2 + 448 | 0) >> 2] | 0;
         if (!$5) {
          break label$10
         }
         label$11 : {
          if ($5 >>> 0 > 178956970 >>> 0) {
           break label$11
          }
          label$12 : {
           $2 = dlrealloc($7 | 0, Math_imul($5, 24) | 0) | 0;
           if (!$2) {
            break label$12
           }
           HEAP32[((HEAP32[$4 >> 2] | 0) + 452 | 0) >> 2] = $2;
           break label$9;
          }
          dlfree($7 | 0);
          $2 = HEAP32[$4 >> 2] | 0;
         }
         HEAP32[($2 + 452 | 0) >> 2] = 0;
         break label$3;
        }
        $2 = dlrealloc($7 | 0, 0 | 0) | 0;
        HEAP32[((HEAP32[$4 >> 2] | 0) + 452 | 0) >> 2] = $2;
        if (!$2) {
         break label$3
        }
       }
       $2 = HEAP32[$4 >> 2] | 0;
       $7 = HEAP32[($2 + 448 | 0) >> 2] | 0;
       $6 = GOT_data_internal_FLAC__STREAM_METADATA_SEEKPOINT_FRAME_SAMPLES_LEN;
       $8 = GOT_data_internal_FLAC__STREAM_METADATA_SEEKPOINT_STREAM_OFFSET_LEN;
       $11 = GOT_data_internal_FLAC__STREAM_METADATA_SEEKPOINT_SAMPLE_NUMBER_LEN;
       $5 = 0;
       label$13 : {
        if (!$7) {
         break label$13
        }
        $9 = HEAP32[$6 >> 2] | 0;
        $8 = HEAP32[$8 >> 2] | 0;
        $6 = HEAP32[$11 >> 2] | 0;
        label$14 : while (1) {
         if (!(FLAC__bitreader_read_raw_uint64(HEAP32[($2 + 56 | 0) >> 2] | 0 | 0, $1 | 0, $6 | 0) | 0)) {
          break label$2
         }
         $2 = HEAP32[$4 >> 2] | 0;
         $7 = Math_imul($5, 24);
         i64toi32_i32$2 = $1;
         i64toi32_i32$0 = HEAP32[$1 >> 2] | 0;
         i64toi32_i32$1 = HEAP32[($1 + 4 | 0) >> 2] | 0;
         $322 = i64toi32_i32$0;
         i64toi32_i32$0 = (HEAP32[($2 + 452 | 0) >> 2] | 0) + $7 | 0;
         HEAP32[i64toi32_i32$0 >> 2] = $322;
         HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
         if (!(FLAC__bitreader_read_raw_uint64(HEAP32[($2 + 56 | 0) >> 2] | 0 | 0, $1 | 0, $8 | 0) | 0)) {
          break label$2
         }
         $2 = HEAP32[$4 >> 2] | 0;
         i64toi32_i32$2 = $1;
         i64toi32_i32$1 = HEAP32[$1 >> 2] | 0;
         i64toi32_i32$0 = HEAP32[($1 + 4 | 0) >> 2] | 0;
         $337 = i64toi32_i32$1;
         i64toi32_i32$1 = (HEAP32[($2 + 452 | 0) >> 2] | 0) + $7 | 0;
         HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $337;
         HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$0;
         if (!(FLAC__bitreader_read_raw_uint32(HEAP32[($2 + 56 | 0) >> 2] | 0 | 0, $1 + 188 | 0 | 0, $9 | 0) | 0)) {
          break label$2
         }
         $2 = HEAP32[$4 >> 2] | 0;
         HEAP32[(((HEAP32[($2 + 452 | 0) >> 2] | 0) + $7 | 0) + 16 | 0) >> 2] = HEAP32[($1 + 188 | 0) >> 2] | 0;
         $5 = $5 + 1 | 0;
         $7 = HEAP32[($2 + 448 | 0) >> 2] | 0;
         if ($5 >>> 0 < $7 >>> 0) {
          continue label$14
         }
         break label$14;
        };
        $5 = Math_imul($7, -18);
       }
       label$15 : {
        $5 = $5 + $10 | 0;
        if (!$5) {
         break label$15
        }
        if (!(FLAC__bitreader_skip_byte_block_aligned_no_crc(HEAP32[($2 + 56 | 0) >> 2] | 0 | 0, $5 | 0) | 0)) {
         break label$2
        }
        $2 = HEAP32[$4 >> 2] | 0;
       }
       HEAP32[($2 + 252 | 0) >> 2] = 1;
       if (HEAP32[($2 + 3632 | 0) >> 2] | 0) {
        break label$4
       }
       if (!(HEAP32[($2 + 620 | 0) >> 2] | 0)) {
        break label$4
       }
       $5 = HEAP32[($2 + 28 | 0) >> 2] | 0;
       if (!$5) {
        break label$4
       }
       FUNCTION_TABLE[$5 | 0]($0, $2 + 432 | 0, HEAP32[($2 + 48 | 0) >> 2] | 0);
       break label$4;
      }
      $6 = HEAP32[$4 >> 2] | 0;
      $8 = HEAP32[(($6 + ($2 << 2 | 0) | 0) + 608 | 0) >> 2] | 0;
      $7 = HEAP32[($1 + 176 | 0) >> 2] | 0;
      memset($1 + 8 | 0 | 0, 0 | 0, 168 | 0) | 0;
      HEAP32[($1 + 8 | 0) >> 2] = $7;
      HEAP32[$1 >> 2] = $2;
      HEAP32[($1 + 4 | 0) >> 2] = $5;
      label$16 : {
       label$17 : {
        label$18 : {
         if (($2 | 0) != (2 | 0)) {
          break label$18
         }
         $2 = GOT_data_internal_FLAC__STREAM_METADATA_APPLICATION_ID_LEN;
         $5 = $1 + 16 | 0;
         $2 = (HEAP32[$2 >> 2] | 0) >>> 3 | 0;
         if (!(FLAC__bitreader_read_byte_block_aligned_no_crc(HEAP32[($6 + 56 | 0) >> 2] | 0 | 0, $5 | 0, $2 | 0) | 0)) {
          break label$2
         }
         label$19 : {
          if ($7 >>> 0 >= $2 >>> 0) {
           break label$19
          }
          HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] = 8;
          $2 = 0;
          break label$1;
         }
         $7 = $7 - $2 | 0;
         $6 = HEAP32[$4 >> 2] | 0;
         if (!(HEAP32[($6 + 1124 | 0) >> 2] | 0)) {
          break label$18
         }
         if (($8 | 0) != (0 | 0) ^ !(has_id_filtered_($0 | 0, $5 | 0) | 0) | 0) {
          break label$17
         }
         break label$16;
        }
        if ($8) {
         break label$16
        }
       }
       if (!(FLAC__bitreader_skip_byte_block_aligned_no_crc(HEAP32[($6 + 56 | 0) >> 2] | 0 | 0, $7 | 0) | 0)) {
        break label$2
       }
       break label$4;
      }
      label$20 : {
       label$21 : {
        label$22 : {
         label$23 : {
          switch (HEAP32[($1 + 180 | 0) >> 2] | 0 | 0) {
          case 1:
           if (FLAC__bitreader_skip_byte_block_aligned_no_crc(HEAP32[($6 + 56 | 0) >> 2] | 0 | 0, $7 | 0) | 0) {
            break label$21
           }
           $6 = 1;
           break label$20;
          case 2:
           if (!$7) {
            break label$22
           }
           $461 = $1 + 20 | 0;
           $2 = dlmalloc($7 | 0) | 0;
           HEAP32[$461 >> 2] = $2;
           label$29 : {
            if ($2) {
             break label$29
            }
            HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] = 8;
            $6 = 1;
            break label$20;
           }
           if (FLAC__bitreader_read_byte_block_aligned_no_crc(HEAP32[($6 + 56 | 0) >> 2] | 0 | 0, $2 | 0, $7 | 0) | 0) {
            break label$21
           }
           $6 = 1;
           break label$20;
          case 4:
           if (read_metadata_vorbiscomment_($0 | 0, $1 + 16 | 0 | 0, $7 | 0) | 0) {
            break label$21
           }
           $6 = 1;
           break label$20;
          case 5:
           if (read_metadata_cuesheet_($0 | 0, $1 + 16 | 0 | 0) | 0) {
            break label$21
           }
           $6 = 1;
           break label$20;
          case 6:
           if (read_metadata_picture_($0 | 0, $1 + 16 | 0 | 0) | 0) {
            break label$21
           }
           $6 = 1;
           break label$20;
          case 0:
          case 3:
           break label$21;
          default:
           break label$23;
          };
         }
         label$30 : {
          label$31 : {
           if (!$7) {
            break label$31
           }
           $2 = dlmalloc($7 | 0) | 0;
           HEAP32[($1 + 16 | 0) >> 2] = $2;
           if ($2) {
            break label$30
           }
           HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] = 8;
           $6 = 1;
           break label$20;
          }
          HEAP32[($1 + 16 | 0) >> 2] = 0;
          break label$21;
         }
         if (FLAC__bitreader_read_byte_block_aligned_no_crc(HEAP32[($6 + 56 | 0) >> 2] | 0 | 0, $2 | 0, $7 | 0) | 0) {
          break label$21
         }
         $6 = 1;
         break label$20;
        }
        HEAP32[($1 + 20 | 0) >> 2] = 0;
       }
       $6 = 0;
       $2 = HEAP32[$4 >> 2] | 0;
       if (HEAP32[($2 + 3632 | 0) >> 2] | 0) {
        break label$20
       }
       $5 = HEAP32[($2 + 28 | 0) >> 2] | 0;
       if (!$5) {
        break label$20
       }
       FUNCTION_TABLE[$5 | 0]($0, $1, HEAP32[($2 + 48 | 0) >> 2] | 0);
      }
      label$32 : {
       label$33 : {
        switch ((HEAP32[($1 + 180 | 0) >> 2] | 0) + -1 | 0 | 0) {
        case 1:
         $2 = HEAP32[($1 + 20 | 0) >> 2] | 0;
         if (!$2) {
          break label$32
         }
         dlfree($2 | 0);
         break label$32;
        case 3:
         label$38 : {
          $2 = HEAP32[($1 + 20 | 0) >> 2] | 0;
          if (!$2) {
           break label$38
          }
          dlfree($2 | 0);
         }
         label$39 : {
          $5 = HEAP32[($1 + 24 | 0) >> 2] | 0;
          if (!$5) {
           break label$39
          }
          $2 = 0;
          label$40 : while (1) {
           label$41 : {
            $7 = HEAP32[(((HEAP32[($1 + 28 | 0) >> 2] | 0) + ($2 << 3 | 0) | 0) + 4 | 0) >> 2] | 0;
            if (!$7) {
             break label$41
            }
            dlfree($7 | 0);
            $5 = HEAP32[($1 + 24 | 0) >> 2] | 0;
           }
           $2 = $2 + 1 | 0;
           if ($2 >>> 0 < $5 >>> 0) {
            continue label$40
           }
           break label$40;
          };
         }
         $2 = HEAP32[($1 + 28 | 0) >> 2] | 0;
         if (!$2) {
          break label$32
         }
         dlfree($2 | 0);
         break label$32;
        case 4:
         label$42 : {
          $5 = HEAP32[($1 + 164 | 0) >> 2] | 0;
          if (!$5) {
           break label$42
          }
          $2 = 0;
          label$43 : while (1) {
           label$44 : {
            $7 = HEAP32[(((HEAP32[($1 + 168 | 0) >> 2] | 0) + ($2 << 5 | 0) | 0) + 24 | 0) >> 2] | 0;
            if (!$7) {
             break label$44
            }
            dlfree($7 | 0);
            $5 = HEAP32[($1 + 164 | 0) >> 2] | 0;
           }
           $2 = $2 + 1 | 0;
           if ($2 >>> 0 < $5 >>> 0) {
            continue label$43
           }
           break label$43;
          };
         }
         $2 = HEAP32[($1 + 168 | 0) >> 2] | 0;
         if (!$2) {
          break label$32
         }
         dlfree($2 | 0);
         break label$32;
        case 5:
         label$45 : {
          $2 = HEAP32[($1 + 20 | 0) >> 2] | 0;
          if (!$2) {
           break label$45
          }
          dlfree($2 | 0);
         }
         label$46 : {
          $2 = HEAP32[($1 + 24 | 0) >> 2] | 0;
          if (!$2) {
           break label$46
          }
          dlfree($2 | 0);
         }
         $2 = HEAP32[($1 + 48 | 0) >> 2] | 0;
         if (!$2) {
          break label$32
         }
         dlfree($2 | 0);
         break label$32;
        case 0:
         break label$32;
        default:
         break label$33;
        };
       }
       $2 = HEAP32[($1 + 16 | 0) >> 2] | 0;
       if (!$2) {
        break label$32
       }
       dlfree($2 | 0);
      }
      if ($6) {
       break label$2
      }
     }
     $2 = 1;
     if (!$3) {
      break label$1
     }
     label$47 : {
      label$48 : {
       $3 = HEAP32[$4 >> 2] | 0;
       if (HEAP32[$3 >> 2] | 0) {
        break label$48
       }
       $5 = HEAP32[($3 + 12 | 0) >> 2] | 0;
       if (!$5) {
        break label$48
       }
       $7 = $3 + 6136 | 0;
       if (FUNCTION_TABLE[$5 | 0]($0, $7, HEAP32[($3 + 48 | 0) >> 2] | 0) | 0) {
        break label$48
       }
       if (!(FLAC__bitreader_is_consumed_byte_aligned(HEAP32[((HEAP32[$4 >> 2] | 0) + 56 | 0) >> 2] | 0 | 0) | 0)) {
        break label$48
       }
       $4 = FLAC__bitreader_get_input_bits_unconsumed(HEAP32[((HEAP32[$4 >> 2] | 0) + 56 | 0) >> 2] | 0 | 0) | 0;
       i64toi32_i32$2 = $7;
       i64toi32_i32$0 = HEAP32[$7 >> 2] | 0;
       i64toi32_i32$1 = HEAP32[($7 + 4 | 0) >> 2] | 0;
       $638$hi = i64toi32_i32$1;
       i64toi32_i32$1 = 0;
       $641$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $638$hi;
       i64toi32_i32$2 = i64toi32_i32$0;
       i64toi32_i32$0 = $641$hi;
       i64toi32_i32$3 = $4 >>> 3 | 0;
       i64toi32_i32$5 = (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) + i64toi32_i32$0 | 0;
       i64toi32_i32$5 = i64toi32_i32$1 - i64toi32_i32$5 | 0;
       $642 = i64toi32_i32$2 - i64toi32_i32$3 | 0;
       i64toi32_i32$2 = $7;
       HEAP32[$7 >> 2] = $642;
       HEAP32[($7 + 4 | 0) >> 2] = i64toi32_i32$5;
       break label$47;
      }
      i64toi32_i32$2 = HEAP32[$4 >> 2] | 0;
      i64toi32_i32$5 = 0;
      HEAP32[(i64toi32_i32$2 + 6136 | 0) >> 2] = 0;
      HEAP32[(i64toi32_i32$2 + 6140 | 0) >> 2] = i64toi32_i32$5;
     }
     HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] = 2;
     break label$1;
    }
    HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] = 8;
   }
   $2 = 0;
  }
  __stack_pointer = $1 + 192 | 0;
  return $2 | 0;
 }
 
 function frame_sync_($0) {
  $0 = $0 | 0;
  var $4 = 0, $2 = 0, $1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $5 = 0, $3$hi = 0, $3 = 0, $20$hi = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  label$1 : {
   label$2 : {
    label$3 : {
     $2 = HEAP32[($0 + 4 | 0) >> 2] | 0;
     if (!(HEAP32[($2 + 248 | 0) >> 2] | 0)) {
      break label$3
     }
     i64toi32_i32$2 = $2 + 304 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $3 = i64toi32_i32$0;
     $3$hi = i64toi32_i32$1;
     if (!(i64toi32_i32$0 | i64toi32_i32$1 | 0)) {
      break label$3
     }
     $4 = 4;
     i64toi32_i32$2 = $2;
     i64toi32_i32$1 = HEAP32[($2 + 240 | 0) >> 2] | 0;
     i64toi32_i32$0 = HEAP32[($2 + 244 | 0) >> 2] | 0;
     $20$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $3$hi;
     i64toi32_i32$0 = $20$hi;
     i64toi32_i32$2 = i64toi32_i32$1;
     i64toi32_i32$1 = $3$hi;
     if (i64toi32_i32$0 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 >= $3 >>> 0 | 0) | 0) {
      break label$2
     }
    }
    label$4 : {
     if (FLAC__bitreader_is_consumed_byte_aligned(HEAP32[($2 + 56 | 0) >> 2] | 0 | 0) | 0) {
      break label$4
     }
     $2 = HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0;
     if (FLAC__bitreader_read_raw_uint32($2 | 0, $1 + 12 | 0 | 0, FLAC__bitreader_bits_left_for_byte_alignment($2 | 0) | 0 | 0) | 0) {
      break label$4
     }
     $0 = 0;
     break label$1;
    }
    $2 = 0;
    label$5 : while (1) {
     label$6 : {
      label$7 : {
       $4 = HEAP32[($0 + 4 | 0) >> 2] | 0;
       if (!(HEAP32[($4 + 3520 | 0) >> 2] | 0)) {
        break label$7
       }
       $5 = HEAPU8[($4 + 3590 | 0) >> 0] | 0;
       HEAP32[($1 + 12 | 0) >> 2] = $5;
       HEAP32[($4 + 3520 | 0) >> 2] = 0;
       break label$6;
      }
      label$8 : {
       if (FLAC__bitreader_read_raw_uint32(HEAP32[($4 + 56 | 0) >> 2] | 0 | 0, $1 + 12 | 0 | 0, 8 | 0) | 0) {
        break label$8
       }
       $0 = 0;
       break label$1;
      }
      $5 = HEAP32[($1 + 12 | 0) >> 2] | 0;
     }
     label$9 : {
      if (($5 | 0) != (255 | 0)) {
       break label$9
      }
      HEAP8[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 3588 | 0) >> 0] = 255;
      label$10 : {
       if (FLAC__bitreader_read_raw_uint32(HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0 | 0, $1 + 12 | 0 | 0, 8 | 0) | 0) {
        break label$10
       }
       $0 = 0;
       break label$1;
      }
      label$11 : {
       $4 = HEAP32[($1 + 12 | 0) >> 2] | 0;
       if (($4 | 0) != (255 | 0)) {
        break label$11
       }
       $4 = HEAP32[($0 + 4 | 0) >> 2] | 0;
       HEAP32[($4 + 3520 | 0) >> 2] = 1;
       HEAP8[($4 + 3590 | 0) >> 0] = 255;
       break label$9;
      }
      if (($4 & -2 | 0 | 0) != (248 | 0)) {
       break label$9
      }
      HEAP8[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 3589 | 0) >> 0] = $4;
      $4 = 3;
      break label$2;
     }
     $4 = $2 & 1 | 0;
     $2 = 1;
     if ($4) {
      continue label$5
     }
     $2 = 1;
     $4 = HEAP32[($0 + 4 | 0) >> 2] | 0;
     if (HEAP32[($4 + 3632 | 0) >> 2] | 0) {
      continue label$5
     }
     FUNCTION_TABLE[HEAP32[($4 + 32 | 0) >> 2] | 0 | 0]($0, 0, HEAP32[($4 + 48 | 0) >> 2] | 0);
     $2 = 1;
     continue label$5;
    };
   }
   HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] = $4;
   $0 = 1;
  }
  __stack_pointer = $1 + 16 | 0;
  return $0 | 0;
 }
 
 function read_frame_($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $7 = 0, $6 = 0, $5 = 0, $3 = 0, $9 = 0, $8 = 0, $10 = 0, i64toi32_i32$2 = 0, $11 = 0, i64toi32_i32$1 = 0, $4 = 0, $19 = 0, $20 = 0, i64toi32_i32$3 = 0, $12 = 0, $21 = 0, i64toi32_i32$0 = 0, $23 = 0, $22 = 0, i64toi32_i32$5 = 0, $14 = 0, $16 = 0, $17 = 0, i64toi32_i32$4 = 0, $13 = 0, $13$hi = 0, $468$hi = 0, $470$hi = 0, $471 = 0, $484 = 0, $486$hi = 0, $488$hi = 0, $489 = 0, $505 = 0, $507$hi = 0, $509$hi = 0, $46 = 0, $510 = 0, $15 = 0, $18 = 0, $1715 = 0, $1809 = 0, $1812$hi = 0, $1814$hi = 0;
  $3 = __stack_pointer - 48 | 0;
  __stack_pointer = $3;
  $4 = 0;
  HEAP32[$1 >> 2] = 0;
  $5 = HEAP32[($0 + 4 | 0) >> 2] | 0;
  $6 = HEAPU8[($5 + 3588 | 0) >> 0] | 0;
  $7 = GOT_data_internal_FLAC__crc16_table;
  $6 = HEAPU16[($7 + ($6 << 1 | 0) | 0) >> 1] | 0;
  FLAC__bitreader_reset_read_crc16(HEAP32[($5 + 56 | 0) >> 2] | 0 | 0, (HEAPU16[($7 + ((($6 >>> 8 | 0) ^ (HEAPU8[($5 + 3589 | 0) >> 0] | 0) | 0) << 1 | 0) | 0) >> 1] | 0) ^ (($6 << 8 | 0) & 65280 | 0) | 0 | 0);
  $5 = HEAP32[($0 + 4 | 0) >> 2] | 0;
  HEAP8[($3 + 16 | 0) >> 0] = HEAPU8[($5 + 3588 | 0) >> 0] | 0;
  $7 = HEAPU8[($5 + 3589 | 0) >> 0] | 0;
  HEAP32[($3 + 12 | 0) >> 2] = 2;
  HEAP8[($3 + 17 | 0) >> 0] = $7;
  label$1 : {
   if (!(FLAC__bitreader_read_raw_uint32(HEAP32[($5 + 56 | 0) >> 2] | 0 | 0, $3 + 44 | 0 | 0, 8 | 0) | 0)) {
    break label$1
   }
   $5 = $0 + 4 | 0;
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       $6 = HEAP32[($3 + 44 | 0) >> 2] | 0;
       if (($6 | 0) == (255 | 0)) {
        break label$5
       }
       HEAP8[($3 + 18 | 0) >> 0] = $6;
       HEAP32[($3 + 12 | 0) >> 2] = 3;
       if (!(FLAC__bitreader_read_raw_uint32(HEAP32[((HEAP32[$5 >> 2] | 0) + 56 | 0) >> 2] | 0 | 0, $3 + 44 | 0 | 0, 8 | 0) | 0)) {
        break label$3
       }
       $6 = HEAP32[($3 + 44 | 0) >> 2] | 0;
       if (($6 | 0) == (255 | 0)) {
        break label$5
       }
       $4 = ($7 >>> 1 | 0) & 1 | 0;
       $7 = HEAP32[($3 + 12 | 0) >> 2] | 0;
       HEAP8[(($3 + 16 | 0) + $7 | 0) >> 0] = $6;
       $8 = 1;
       HEAP32[($3 + 12 | 0) >> 2] = $7 + 1 | 0;
       label$6 : {
        label$7 : {
         label$8 : {
          label$9 : {
           label$10 : {
            label$11 : {
             $7 = HEAPU8[($3 + 18 | 0) >> 0] | 0;
             $9 = $7 >>> 4 | 0;
             switch ($9 | 0) {
             case 2:
             case 3:
             case 4:
             case 5:
              break label$10;
             case 8:
             case 9:
             case 10:
             case 11:
             case 12:
             case 13:
             case 14:
             case 15:
              break label$11;
             case 6:
             case 7:
              break label$7;
             case 1:
              break label$9;
             default:
              break label$6;
             };
            }
            HEAP32[((HEAP32[$5 >> 2] | 0) + 1136 | 0) >> 2] = 256 << ($9 + -8 | 0) | 0;
            break label$8;
           }
           HEAP32[((HEAP32[$5 >> 2] | 0) + 1136 | 0) >> 2] = 576 << ($9 + -2 | 0) | 0;
           break label$8;
          }
          HEAP32[((HEAP32[$5 >> 2] | 0) + 1136 | 0) >> 2] = 192;
         }
         $9 = 0;
        }
        $8 = $4;
       }
       $4 = $7 & 15 | 0;
       HEAP32[($3 + 44 | 0) >> 2] = $4;
       label$12 : {
        label$13 : {
         label$14 : {
          label$15 : {
           label$16 : {
            switch ($4 | 0) {
            default:
             $7 = HEAP32[$5 >> 2] | 0;
             if (HEAP32[($7 + 248 | 0) >> 2] | 0) {
              break label$15
             }
             $8 = 1;
             break label$13;
            case 1:
             $7 = HEAP32[$5 >> 2] | 0;
             $6 = 88200;
             break label$14;
            case 2:
             $7 = HEAP32[$5 >> 2] | 0;
             $6 = 176400;
             break label$14;
            case 3:
             $7 = HEAP32[$5 >> 2] | 0;
             $6 = 192e3;
             break label$14;
            case 4:
             $7 = HEAP32[$5 >> 2] | 0;
             $6 = 8e3;
             break label$14;
            case 5:
             $7 = HEAP32[$5 >> 2] | 0;
             $6 = 16e3;
             break label$14;
            case 6:
             $7 = HEAP32[$5 >> 2] | 0;
             $6 = 22050;
             break label$14;
            case 7:
             $7 = HEAP32[$5 >> 2] | 0;
             $6 = 24e3;
             break label$14;
            case 8:
             $7 = HEAP32[$5 >> 2] | 0;
             $6 = 32e3;
             break label$14;
            case 9:
             $7 = HEAP32[$5 >> 2] | 0;
             $6 = 44100;
             break label$14;
            case 10:
             $7 = HEAP32[$5 >> 2] | 0;
             $6 = 48e3;
             break label$14;
            case 11:
             $7 = HEAP32[$5 >> 2] | 0;
             $6 = 96e3;
             break label$14;
            case 12:
            case 13:
            case 14:
             break label$12;
            case 15:
             break label$16;
            };
           }
           label$29 : {
            $7 = HEAP32[$5 >> 2] | 0;
            if (HEAP32[($7 + 3632 | 0) >> 2] | 0) {
             break label$29
            }
            FUNCTION_TABLE[HEAP32[($7 + 32 | 0) >> 2] | 0 | 0]($0, 1, HEAP32[($7 + 48 | 0) >> 2] | 0);
           }
           $7 = HEAP32[$0 >> 2] | 0;
           HEAP32[$7 >> 2] = 2;
           break label$4;
          }
          $6 = HEAP32[($7 + 288 | 0) >> 2] | 0;
         }
         HEAP32[($7 + 1140 | 0) >> 2] = $6;
        }
        $4 = 0;
       }
       label$30 : {
        label$31 : {
         label$32 : {
          $10 = HEAPU8[($3 + 19 | 0) >> 0] | 0;
          $11 = $10 >>> 4 | 0;
          if (!($11 & 8 | 0)) {
           break label$32
          }
          $7 = HEAP32[$5 >> 2] | 0;
          HEAP32[($7 + 1144 | 0) >> 2] = 2;
          $6 = 1;
          label$33 : {
           switch ($11 & 7 | 0 | 0) {
           case 1:
            $6 = 2;
            break label$31;
           case 0:
            break label$31;
           case 2:
            break label$33;
           default:
            break label$30;
           };
          }
          $6 = 3;
          break label$31;
         }
         $7 = HEAP32[$5 >> 2] | 0;
         HEAP32[($7 + 1144 | 0) >> 2] = $11 + 1 | 0;
         $6 = 0;
        }
        HEAP32[($7 + 1148 | 0) >> 2] = $6;
        $6 = $8;
       }
       $11 = ($10 >>> 1 | 0) & 7 | 0;
       HEAP32[($3 + 44 | 0) >> 2] = $11;
       $8 = 8;
       $12 = 1;
       label$35 : {
        label$36 : {
         label$37 : {
          switch ($11 | 0) {
          default:
           $12 = 1;
           if (!(HEAP32[($7 + 248 | 0) >> 2] | 0)) {
            break label$35
           }
           $8 = HEAP32[($7 + 296 | 0) >> 2] | 0;
           break label$36;
          case 2:
           $8 = 12;
           break label$36;
          case 4:
           $8 = 16;
           break label$36;
          case 5:
           $8 = 20;
           break label$36;
          case 3:
          case 7:
           break label$35;
          case 1:
           break label$36;
          case 6:
           break label$37;
          };
         }
         $8 = 24;
        }
        HEAP32[($7 + 1152 | 0) >> 2] = $8;
        $12 = $6;
       }
       label$42 : {
        label$43 : {
         label$44 : {
          if ((HEAPU8[($3 + 17 | 0) >> 0] | 0) & 1 | 0) {
           break label$44
          }
          if (!(HEAP32[($7 + 248 | 0) >> 2] | 0)) {
           break label$43
          }
          if ((HEAP32[($7 + 272 | 0) >> 2] | 0 | 0) == (HEAP32[($7 + 276 | 0) >> 2] | 0 | 0)) {
           break label$43
          }
         }
         if (!(FLAC__bitreader_read_utf8_uint64(HEAP32[($7 + 56 | 0) >> 2] | 0 | 0, $3 + 32 | 0 | 0, $3 + 16 | 0 | 0, $3 + 12 | 0 | 0) | 0)) {
          break label$3
         }
         label$45 : {
          i64toi32_i32$2 = $3;
          i64toi32_i32$0 = HEAP32[($3 + 32 | 0) >> 2] | 0;
          i64toi32_i32$1 = HEAP32[($3 + 36 | 0) >> 2] | 0;
          $13 = i64toi32_i32$0;
          $13$hi = i64toi32_i32$1;
          i64toi32_i32$2 = i64toi32_i32$0;
          i64toi32_i32$0 = -1;
          i64toi32_i32$3 = -1;
          if ((i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$0 | 0) | 0) {
           break label$45
          }
          $6 = HEAPU8[(((HEAP32[($3 + 12 | 0) >> 2] | 0) + ($3 + 16 | 0) | 0) + -1 | 0) >> 0] | 0;
          $7 = HEAP32[$5 >> 2] | 0;
          HEAP32[($7 + 3520 | 0) >> 2] = 1;
          HEAP8[($7 + 3590 | 0) >> 0] = $6;
          label$46 : {
           if (HEAP32[($7 + 3632 | 0) >> 2] | 0) {
            break label$46
           }
           FUNCTION_TABLE[HEAP32[($7 + 32 | 0) >> 2] | 0 | 0]($0, 1, HEAP32[($7 + 48 | 0) >> 2] | 0);
          }
          $7 = HEAP32[$0 >> 2] | 0;
          HEAP32[$7 >> 2] = 2;
          break label$4;
         }
         $7 = HEAP32[$5 >> 2] | 0;
         i64toi32_i32$2 = $13$hi;
         i64toi32_i32$1 = $7 + 1160 | 0;
         HEAP32[i64toi32_i32$1 >> 2] = $13;
         HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$2;
         HEAP32[($7 + 1156 | 0) >> 2] = 1;
         break label$42;
        }
        if (!(FLAC__bitreader_read_utf8_uint32(HEAP32[($7 + 56 | 0) >> 2] | 0 | 0, $3 + 44 | 0 | 0, $3 + 16 | 0 | 0, $3 + 12 | 0 | 0) | 0)) {
         break label$3
        }
        label$47 : {
         $7 = HEAP32[($3 + 44 | 0) >> 2] | 0;
         if (($7 | 0) != (-1 | 0)) {
          break label$47
         }
         $6 = HEAPU8[(((HEAP32[($3 + 12 | 0) >> 2] | 0) + ($3 + 16 | 0) | 0) + -1 | 0) >> 0] | 0;
         $7 = HEAP32[$5 >> 2] | 0;
         HEAP32[($7 + 3520 | 0) >> 2] = 1;
         HEAP8[($7 + 3590 | 0) >> 0] = $6;
         label$48 : {
          if (HEAP32[($7 + 3632 | 0) >> 2] | 0) {
           break label$48
          }
          FUNCTION_TABLE[HEAP32[($7 + 32 | 0) >> 2] | 0 | 0]($0, 1, HEAP32[($7 + 48 | 0) >> 2] | 0);
         }
         $7 = HEAP32[$0 >> 2] | 0;
         HEAP32[$7 >> 2] = 2;
         break label$4;
        }
        $6 = HEAP32[$5 >> 2] | 0;
        HEAP32[($6 + 1160 | 0) >> 2] = $7;
        HEAP32[($6 + 1156 | 0) >> 2] = 0;
       }
       $7 = HEAP32[$5 >> 2] | 0;
       label$49 : {
        if (!$9) {
         break label$49
        }
        if (!(FLAC__bitreader_read_raw_uint32(HEAP32[($7 + 56 | 0) >> 2] | 0 | 0, $3 + 44 | 0 | 0, 8 | 0) | 0)) {
         break label$3
        }
        $7 = HEAP32[($3 + 12 | 0) >> 2] | 0;
        $6 = HEAP32[($3 + 44 | 0) >> 2] | 0;
        HEAP8[(($3 + 16 | 0) + $7 | 0) >> 0] = $6;
        HEAP32[($3 + 12 | 0) >> 2] = $7 + 1 | 0;
        label$50 : {
         if (($9 | 0) != (7 | 0)) {
          break label$50
         }
         if (!(FLAC__bitreader_read_raw_uint32(HEAP32[((HEAP32[$5 >> 2] | 0) + 56 | 0) >> 2] | 0 | 0, $3 + 8 | 0 | 0, 8 | 0) | 0)) {
          break label$3
         }
         $7 = HEAP32[($3 + 12 | 0) >> 2] | 0;
         $6 = HEAP32[($3 + 8 | 0) >> 2] | 0;
         HEAP8[(($3 + 16 | 0) + $7 | 0) >> 0] = $6;
         HEAP32[($3 + 12 | 0) >> 2] = $7 + 1 | 0;
         $6 = $6 | ((HEAP32[($3 + 44 | 0) >> 2] | 0) << 8 | 0) | 0;
         HEAP32[($3 + 44 | 0) >> 2] = $6;
        }
        $7 = HEAP32[$5 >> 2] | 0;
        HEAP32[($7 + 1136 | 0) >> 2] = $6 + 1 | 0;
       }
       label$51 : {
        if (!$4) {
         break label$51
        }
        if (!(FLAC__bitreader_read_raw_uint32(HEAP32[($7 + 56 | 0) >> 2] | 0 | 0, $3 + 44 | 0 | 0, 8 | 0) | 0)) {
         break label$3
        }
        $7 = HEAP32[($3 + 12 | 0) >> 2] | 0;
        $6 = HEAP32[($3 + 44 | 0) >> 2] | 0;
        HEAP8[(($3 + 16 | 0) + $7 | 0) >> 0] = $6;
        HEAP32[($3 + 12 | 0) >> 2] = $7 + 1 | 0;
        label$52 : {
         label$53 : {
          label$54 : {
           if (($4 | 0) == (12 | 0)) {
            break label$54
           }
           if (!(FLAC__bitreader_read_raw_uint32(HEAP32[((HEAP32[$5 >> 2] | 0) + 56 | 0) >> 2] | 0 | 0, $3 + 8 | 0 | 0, 8 | 0) | 0)) {
            break label$3
           }
           $7 = HEAP32[($3 + 12 | 0) >> 2] | 0;
           $6 = HEAP32[($3 + 8 | 0) >> 2] | 0;
           HEAP8[(($3 + 16 | 0) + $7 | 0) >> 0] = $6;
           HEAP32[($3 + 12 | 0) >> 2] = $7 + 1 | 0;
           $6 = $6 | ((HEAP32[($3 + 44 | 0) >> 2] | 0) << 8 | 0) | 0;
           HEAP32[($3 + 44 | 0) >> 2] = $6;
           switch ($4 + -12 | 0 | 0) {
           case 1:
            break label$52;
           case 0:
            break label$54;
           default:
            break label$53;
           };
          }
          $6 = Math_imul($6, 1e3);
          break label$52;
         }
         $6 = Math_imul($6, 10);
        }
        $7 = HEAP32[$5 >> 2] | 0;
        HEAP32[($7 + 1140 | 0) >> 2] = $6;
       }
       if (!(FLAC__bitreader_read_raw_uint32(HEAP32[($7 + 56 | 0) >> 2] | 0 | 0, $3 + 44 | 0 | 0, 8 | 0) | 0)) {
        break label$3
       }
       $6 = HEAPU8[($3 + 44 | 0) >> 0] | 0;
       $4 = FLAC__crc8($3 + 16 | 0 | 0, HEAP32[($3 + 12 | 0) >> 2] | 0 | 0) | 0;
       $7 = HEAP32[$5 >> 2] | 0;
       label$55 : {
        if (($4 | 0) == ($6 | 0)) {
         break label$55
        }
        label$56 : {
         if (HEAP32[($7 + 3632 | 0) >> 2] | 0) {
          break label$56
         }
         FUNCTION_TABLE[HEAP32[($7 + 32 | 0) >> 2] | 0 | 0]($0, 1, HEAP32[($7 + 48 | 0) >> 2] | 0);
        }
        $7 = HEAP32[$0 >> 2] | 0;
        HEAP32[$7 >> 2] = 2;
        break label$4;
       }
       HEAP32[($7 + 232 | 0) >> 2] = 0;
       label$57 : {
        label$58 : {
         label$59 : {
          if (HEAP32[($7 + 1156 | 0) >> 2] | 0) {
           break label$59
          }
          $4 = $7 + 1160 | 0;
          $6 = HEAP32[$4 >> 2] | 0;
          HEAP32[($3 + 44 | 0) >> 2] = $6;
          HEAP32[($7 + 1156 | 0) >> 2] = 1;
          label$60 : {
           $9 = HEAP32[($7 + 228 | 0) >> 2] | 0;
           if (!$9) {
            break label$60
           }
           i64toi32_i32$2 = 0;
           $468$hi = i64toi32_i32$2;
           i64toi32_i32$2 = 0;
           $470$hi = i64toi32_i32$2;
           i64toi32_i32$2 = $468$hi;
           i64toi32_i32$1 = $470$hi;
           i64toi32_i32$1 = __wasm_i64_mul($9 | 0, i64toi32_i32$2 | 0, $6 | 0, i64toi32_i32$1 | 0) | 0;
           i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
           $471 = i64toi32_i32$1;
           i64toi32_i32$1 = $4;
           HEAP32[i64toi32_i32$1 >> 2] = $471;
           HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$2;
           break label$59;
          }
          label$61 : {
           if (!(HEAP32[($7 + 248 | 0) >> 2] | 0)) {
            break label$61
           }
           $4 = HEAP32[($7 + 272 | 0) >> 2] | 0;
           if (($4 | 0) != (HEAP32[($7 + 276 | 0) >> 2] | 0 | 0)) {
            break label$58
           }
           $484 = $7 + 1160 | 0;
           i64toi32_i32$2 = 0;
           $486$hi = i64toi32_i32$2;
           i64toi32_i32$2 = 0;
           $488$hi = i64toi32_i32$2;
           i64toi32_i32$2 = $486$hi;
           i64toi32_i32$1 = $488$hi;
           i64toi32_i32$1 = __wasm_i64_mul($4 | 0, i64toi32_i32$2 | 0, $6 | 0, i64toi32_i32$1 | 0) | 0;
           i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
           $489 = i64toi32_i32$1;
           i64toi32_i32$1 = $484;
           HEAP32[i64toi32_i32$1 >> 2] = $489;
           HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$2;
           $7 = HEAP32[$5 >> 2] | 0;
           HEAP32[($7 + 232 | 0) >> 2] = HEAP32[($7 + 276 | 0) >> 2] | 0;
           break label$59;
          }
          label$62 : {
           if ($6) {
            break label$62
           }
           i64toi32_i32$1 = $7 + 1160 | 0;
           i64toi32_i32$2 = 0;
           HEAP32[i64toi32_i32$1 >> 2] = 0;
           HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$2;
           $7 = HEAP32[$5 >> 2] | 0;
           HEAP32[($7 + 232 | 0) >> 2] = HEAP32[($7 + 1136 | 0) >> 2] | 0;
           break label$59;
          }
          $505 = $7 + 1160 | 0;
          i64toi32_i32$3 = $7;
          i64toi32_i32$2 = HEAP32[($7 + 1136 | 0) >> 2] | 0;
          i64toi32_i32$1 = 0;
          $507$hi = i64toi32_i32$1;
          i64toi32_i32$1 = 0;
          $509$hi = i64toi32_i32$1;
          i64toi32_i32$1 = $507$hi;
          $46 = i64toi32_i32$2;
          i64toi32_i32$2 = $509$hi;
          i64toi32_i32$2 = __wasm_i64_mul($46 | 0, i64toi32_i32$1 | 0, $6 | 0, i64toi32_i32$2 | 0) | 0;
          i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
          $510 = i64toi32_i32$2;
          i64toi32_i32$2 = $505;
          HEAP32[i64toi32_i32$2 >> 2] = $510;
          HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$1;
         }
         if (!($10 & 1 | 0 | $12 | 0)) {
          break label$57
         }
         $7 = HEAP32[$5 >> 2] | 0;
        }
        label$63 : {
         label$64 : {
          if (HEAP32[($7 + 3632 | 0) >> 2] | 0) {
           break label$64
          }
          FUNCTION_TABLE[HEAP32[($7 + 32 | 0) >> 2] | 0 | 0]($0, 3, HEAP32[($7 + 48 | 0) >> 2] | 0);
          break label$63;
         }
         HEAP32[($7 + 6152 | 0) >> 2] = (HEAP32[($7 + 6152 | 0) >> 2] | 0) + 1 | 0;
        }
        $7 = HEAP32[$0 >> 2] | 0;
        HEAP32[$7 >> 2] = 2;
        break label$4;
       }
       $7 = HEAP32[$0 >> 2] | 0;
       break label$4;
      }
      $7 = HEAP32[$5 >> 2] | 0;
      HEAP32[($7 + 3520 | 0) >> 2] = 1;
      HEAP8[($7 + 3590 | 0) >> 0] = 255;
      label$65 : {
       if (HEAP32[($7 + 3632 | 0) >> 2] | 0) {
        break label$65
       }
       FUNCTION_TABLE[HEAP32[($7 + 32 | 0) >> 2] | 0 | 0]($0, 1, HEAP32[($7 + 48 | 0) >> 2] | 0);
      }
      $7 = HEAP32[$0 >> 2] | 0;
      HEAP32[$7 >> 2] = 2;
     }
     $4 = 1;
     if ((HEAP32[$7 >> 2] | 0 | 0) == (2 | 0)) {
      break label$1
     }
     $7 = HEAP32[$5 >> 2] | 0;
     $9 = HEAP32[($7 + 1144 | 0) >> 2] | 0;
     label$66 : {
      label$67 : {
       $10 = HEAP32[($7 + 1136 | 0) >> 2] | 0;
       if ((HEAP32[($7 + 220 | 0) >> 2] | 0) >>> 0 < $10 >>> 0) {
        break label$67
       }
       if ((HEAP32[($7 + 224 | 0) >> 2] | 0) >>> 0 >= $9 >>> 0) {
        break label$66
       }
      }
      label$68 : {
       $6 = HEAP32[($7 + 60 | 0) >> 2] | 0;
       if (!$6) {
        break label$68
       }
       dlfree($6 + -16 | 0 | 0);
       HEAP32[((HEAP32[$5 >> 2] | 0) + 60 | 0) >> 2] = 0;
       $7 = HEAP32[$5 >> 2] | 0;
      }
      label$69 : {
       $6 = HEAP32[($7 + 3592 | 0) >> 2] | 0;
       if (!$6) {
        break label$69
       }
       dlfree($6 | 0);
       HEAP32[((HEAP32[$5 >> 2] | 0) + 92 | 0) >> 2] = 0;
       HEAP32[((HEAP32[$5 >> 2] | 0) + 3592 | 0) >> 2] = 0;
       $7 = HEAP32[$5 >> 2] | 0;
      }
      label$70 : {
       $6 = HEAP32[($7 + 64 | 0) >> 2] | 0;
       if (!$6) {
        break label$70
       }
       dlfree($6 + -16 | 0 | 0);
       HEAP32[((HEAP32[$5 >> 2] | 0) + 64 | 0) >> 2] = 0;
       $7 = HEAP32[$5 >> 2] | 0;
      }
      label$71 : {
       $6 = HEAP32[($7 + 3596 | 0) >> 2] | 0;
       if (!$6) {
        break label$71
       }
       dlfree($6 | 0);
       HEAP32[((HEAP32[$5 >> 2] | 0) + 96 | 0) >> 2] = 0;
       HEAP32[((HEAP32[$5 >> 2] | 0) + 3596 | 0) >> 2] = 0;
       $7 = HEAP32[$5 >> 2] | 0;
      }
      label$72 : {
       $6 = HEAP32[($7 + 68 | 0) >> 2] | 0;
       if (!$6) {
        break label$72
       }
       dlfree($6 + -16 | 0 | 0);
       HEAP32[((HEAP32[$5 >> 2] | 0) + 68 | 0) >> 2] = 0;
       $7 = HEAP32[$5 >> 2] | 0;
      }
      label$73 : {
       $6 = HEAP32[($7 + 3600 | 0) >> 2] | 0;
       if (!$6) {
        break label$73
       }
       dlfree($6 | 0);
       HEAP32[((HEAP32[$5 >> 2] | 0) + 100 | 0) >> 2] = 0;
       HEAP32[((HEAP32[$5 >> 2] | 0) + 3600 | 0) >> 2] = 0;
       $7 = HEAP32[$5 >> 2] | 0;
      }
      label$74 : {
       $6 = HEAP32[($7 + 72 | 0) >> 2] | 0;
       if (!$6) {
        break label$74
       }
       dlfree($6 + -16 | 0 | 0);
       HEAP32[((HEAP32[$5 >> 2] | 0) + 72 | 0) >> 2] = 0;
       $7 = HEAP32[$5 >> 2] | 0;
      }
      label$75 : {
       $6 = HEAP32[($7 + 3604 | 0) >> 2] | 0;
       if (!$6) {
        break label$75
       }
       dlfree($6 | 0);
       HEAP32[((HEAP32[$5 >> 2] | 0) + 104 | 0) >> 2] = 0;
       HEAP32[((HEAP32[$5 >> 2] | 0) + 3604 | 0) >> 2] = 0;
       $7 = HEAP32[$5 >> 2] | 0;
      }
      label$76 : {
       $6 = HEAP32[($7 + 76 | 0) >> 2] | 0;
       if (!$6) {
        break label$76
       }
       dlfree($6 + -16 | 0 | 0);
       HEAP32[((HEAP32[$5 >> 2] | 0) + 76 | 0) >> 2] = 0;
       $7 = HEAP32[$5 >> 2] | 0;
      }
      label$77 : {
       $6 = HEAP32[($7 + 3608 | 0) >> 2] | 0;
       if (!$6) {
        break label$77
       }
       dlfree($6 | 0);
       HEAP32[((HEAP32[$5 >> 2] | 0) + 108 | 0) >> 2] = 0;
       HEAP32[((HEAP32[$5 >> 2] | 0) + 3608 | 0) >> 2] = 0;
       $7 = HEAP32[$5 >> 2] | 0;
      }
      label$78 : {
       $6 = HEAP32[($7 + 80 | 0) >> 2] | 0;
       if (!$6) {
        break label$78
       }
       dlfree($6 + -16 | 0 | 0);
       HEAP32[((HEAP32[$5 >> 2] | 0) + 80 | 0) >> 2] = 0;
       $7 = HEAP32[$5 >> 2] | 0;
      }
      label$79 : {
       $6 = HEAP32[($7 + 3612 | 0) >> 2] | 0;
       if (!$6) {
        break label$79
       }
       dlfree($6 | 0);
       HEAP32[((HEAP32[$5 >> 2] | 0) + 112 | 0) >> 2] = 0;
       HEAP32[((HEAP32[$5 >> 2] | 0) + 3612 | 0) >> 2] = 0;
       $7 = HEAP32[$5 >> 2] | 0;
      }
      label$80 : {
       $6 = HEAP32[($7 + 84 | 0) >> 2] | 0;
       if (!$6) {
        break label$80
       }
       dlfree($6 + -16 | 0 | 0);
       HEAP32[((HEAP32[$5 >> 2] | 0) + 84 | 0) >> 2] = 0;
       $7 = HEAP32[$5 >> 2] | 0;
      }
      label$81 : {
       $6 = HEAP32[($7 + 3616 | 0) >> 2] | 0;
       if (!$6) {
        break label$81
       }
       dlfree($6 | 0);
       HEAP32[((HEAP32[$5 >> 2] | 0) + 116 | 0) >> 2] = 0;
       HEAP32[((HEAP32[$5 >> 2] | 0) + 3616 | 0) >> 2] = 0;
       $7 = HEAP32[$5 >> 2] | 0;
      }
      label$82 : {
       $6 = HEAP32[($7 + 88 | 0) >> 2] | 0;
       if (!$6) {
        break label$82
       }
       dlfree($6 + -16 | 0 | 0);
       HEAP32[((HEAP32[$5 >> 2] | 0) + 88 | 0) >> 2] = 0;
       $7 = HEAP32[$5 >> 2] | 0;
      }
      label$83 : {
       $7 = HEAP32[($7 + 3620 | 0) >> 2] | 0;
       if (!$7) {
        break label$83
       }
       dlfree($7 | 0);
       HEAP32[((HEAP32[$5 >> 2] | 0) + 120 | 0) >> 2] = 0;
       HEAP32[((HEAP32[$5 >> 2] | 0) + 3620 | 0) >> 2] = 0;
      }
      label$84 : {
       if (!$9) {
        break label$84
       }
       if ($10 >>> 0 > -5 >>> 0) {
        break label$2
       }
       $7 = $10 + 4 | 0;
       if ($7 >>> 0 > 1073741823 >>> 0) {
        break label$2
       }
       $11 = $7 << 2 | 0;
       $6 = 0;
       label$85 : while (1) {
        $7 = dlmalloc($11 | 0) | 0;
        if (!$7) {
         break label$2
        }
        i64toi32_i32$2 = $7;
        i64toi32_i32$1 = 0;
        HEAP32[$7 >> 2] = 0;
        HEAP32[($7 + 4 | 0) >> 2] = i64toi32_i32$1;
        i64toi32_i32$2 = $7 + 8 | 0;
        i64toi32_i32$1 = 0;
        HEAP32[i64toi32_i32$2 >> 2] = 0;
        HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$1;
        $8 = $6 << 2 | 0;
        HEAP32[(((HEAP32[$5 >> 2] | 0) + $8 | 0) + 60 | 0) >> 2] = $7 + 16 | 0;
        label$86 : {
         $7 = (HEAP32[$5 >> 2] | 0) + $8 | 0;
         if (!(FLAC__memory_alloc_aligned_int32_array($10 | 0, $7 + 3592 | 0 | 0, $7 + 92 | 0 | 0) | 0)) {
          break label$86
         }
         $6 = $6 + 1 | 0;
         if (($6 | 0) == ($9 | 0)) {
          break label$84
         }
         continue label$85;
        }
        break label$85;
       };
       HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] = 8;
       break label$3;
      }
      $7 = HEAP32[$5 >> 2] | 0;
      HEAP32[($7 + 224 | 0) >> 2] = $9;
      HEAP32[($7 + 220 | 0) >> 2] = $10;
      $9 = HEAP32[($7 + 1144 | 0) >> 2] | 0;
     }
     $6 = GOT_data_internal_FLAC__SUBFRAME_LPC_QLP_COEFF_PRECISION_LEN;
     $8 = GOT_data_internal_FLAC__ENTROPY_CODING_METHOD_PARTITIONED_RICE_ORDER_LEN;
     $10 = GOT_data_internal_FLAC__ENTROPY_CODING_METHOD_TYPE_LEN;
     $11 = GOT_data_internal_FLAC__SUBFRAME_LPC_QLP_SHIFT_LEN;
     label$87 : {
      label$88 : {
       if (!$9) {
        break label$88
       }
       $14 = HEAP32[$6 >> 2] | 0;
       $15 = (-1 << $14 | 0) ^ -1 | 0;
       $16 = HEAP32[$8 >> 2] | 0;
       $17 = HEAP32[$10 >> 2] | 0;
       $18 = HEAP32[$11 >> 2] | 0;
       $8 = 0;
       label$89 : while (1) {
        $6 = HEAP32[($7 + 1152 | 0) >> 2] | 0;
        label$90 : {
         label$91 : {
          switch ((HEAP32[($7 + 1148 | 0) >> 2] | 0) + -1 | 0 | 0) {
          case 0:
           $6 = $6 + (($8 | 0) == (1 | 0)) | 0;
           break label$90;
          case 1:
           $6 = $6 + !$8 | 0;
           break label$90;
          case 2:
           break label$91;
          default:
           break label$90;
          };
         }
         $6 = $6 + (($8 | 0) == (1 | 0)) | 0;
        }
        if (!(FLAC__bitreader_read_raw_uint32(HEAP32[($7 + 56 | 0) >> 2] | 0 | 0, $3 + 44 | 0 | 0, 8 | 0) | 0)) {
         break label$3
        }
        $7 = HEAP32[($3 + 44 | 0) >> 2] | 0;
        HEAP32[($3 + 44 | 0) >> 2] = $7 & 254 | 0;
        label$94 : {
         label$95 : {
          $12 = $7 & 1 | 0;
          if (!$12) {
           break label$95
          }
          if (!(FLAC__bitreader_read_unary_unsigned(HEAP32[((HEAP32[$5 >> 2] | 0) + 56 | 0) >> 2] | 0 | 0, $3 + 16 | 0 | 0) | 0)) {
           break label$3
          }
          $7 = HEAP32[$5 >> 2] | 0;
          $9 = (HEAP32[($3 + 16 | 0) >> 2] | 0) + 1 | 0;
          HEAP32[(($7 + Math_imul($8, 292) | 0) + 1464 | 0) >> 2] = $9;
          if ($6 >>> 0 <= $9 >>> 0) {
           break label$3
          }
          $6 = $6 - $9 | 0;
          break label$94;
         }
         $7 = HEAP32[$5 >> 2] | 0;
         HEAP32[(($7 + Math_imul($8, 292) | 0) + 1464 | 0) >> 2] = 0;
        }
        label$96 : {
         label$97 : {
          label$98 : {
           $9 = HEAP32[($3 + 44 | 0) >> 2] | 0;
           if (!($9 & 128 | 0)) {
            break label$98
           }
           if (HEAP32[($7 + 3632 | 0) >> 2] | 0) {
            break label$97
           }
           FUNCTION_TABLE[HEAP32[($7 + 32 | 0) >> 2] | 0 | 0]($0, 0, HEAP32[($7 + 48 | 0) >> 2] | 0);
           break label$97;
          }
          label$99 : {
           label$100 : {
            label$101 : {
             switch ($9 | 0) {
             case 0:
              $9 = HEAP32[(($7 + ($8 << 2 | 0) | 0) + 60 | 0) >> 2] | 0;
              $10 = $7 + Math_imul($8, 292) | 0;
              HEAP32[($10 + 1176 | 0) >> 2] = 0;
              if (!(FLAC__bitreader_read_raw_int32(HEAP32[($7 + 56 | 0) >> 2] | 0 | 0, $3 + 16 | 0 | 0, $6 | 0) | 0)) {
               break label$3
              }
              HEAP32[($10 + 1180 | 0) >> 2] = HEAP32[($3 + 16 | 0) >> 2] | 0;
              if (!$2) {
               break label$100
              }
              $7 = 0;
              $6 = HEAP32[$5 >> 2] | 0;
              if (!(HEAP32[($6 + 1136 | 0) >> 2] | 0)) {
               break label$100
              }
              label$104 : while (1) {
               HEAP32[($9 + ($7 << 2 | 0) | 0) >> 2] = HEAP32[($3 + 16 | 0) >> 2] | 0;
               $7 = $7 + 1 | 0;
               if ($7 >>> 0 < (HEAP32[($6 + 1136 | 0) >> 2] | 0) >>> 0) {
                continue label$104
               }
               break label$100;
              };
             case 2:
              $9 = ($7 + 1136 | 0) + Math_imul($8, 292) | 0;
              $19 = $9 + 44 | 0;
              $20 = $8 << 2 | 0;
              $10 = HEAP32[(($7 + $20 | 0) + 92 | 0) >> 2] | 0;
              HEAP32[$19 >> 2] = $10;
              HEAP32[($9 + 40 | 0) >> 2] = 1;
              $9 = 0;
              label$105 : {
               if (!(HEAP32[($7 + 1136 | 0) >> 2] | 0)) {
                break label$105
               }
               label$106 : while (1) {
                if (!(FLAC__bitreader_read_raw_int32(HEAP32[($7 + 56 | 0) >> 2] | 0 | 0, $3 + 16 | 0 | 0, $6 | 0) | 0)) {
                 break label$3
                }
                HEAP32[($10 + ($9 << 2 | 0) | 0) >> 2] = HEAP32[($3 + 16 | 0) >> 2] | 0;
                $9 = $9 + 1 | 0;
                $7 = HEAP32[$5 >> 2] | 0;
                $11 = HEAP32[($7 + 1136 | 0) >> 2] | 0;
                if ($9 >>> 0 < $11 >>> 0) {
                 continue label$106
                }
                break label$106;
               };
               $9 = $11 << 2 | 0;
              }
              if (!$2) {
               break label$100
              }
              __memcpy(HEAP32[(($7 + $20 | 0) + 60 | 0) >> 2] | 0 | 0, HEAP32[$19 >> 2] | 0 | 0, $9 | 0) | 0;
              break label$100;
             default:
              break label$101;
             };
            }
            label$107 : {
             if ($9 >>> 0 > 15 >>> 0) {
              break label$107
             }
             if (HEAP32[($7 + 3632 | 0) >> 2] | 0) {
              break label$99
             }
             FUNCTION_TABLE[HEAP32[($7 + 32 | 0) >> 2] | 0 | 0]($0, 3, HEAP32[($7 + 48 | 0) >> 2] | 0);
             break label$97;
            }
            label$108 : {
             if ($9 >>> 0 > 24 >>> 0) {
              break label$108
             }
             $19 = $7 + Math_imul($8, 292) | 0;
             HEAP32[($19 + 1176 | 0) >> 2] = 2;
             $20 = $8 << 2 | 0;
             $11 = HEAP32[(($7 + $20 | 0) + 92 | 0) >> 2] | 0;
             $10 = ($9 >>> 1 | 0) & 7 | 0;
             HEAP32[($19 + 1192 | 0) >> 2] = $10;
             HEAP32[($19 + 1212 | 0) >> 2] = $11;
             $11 = $19 + 1196 | 0;
             $9 = 0;
             label$109 : {
              if (!$10) {
               break label$109
              }
              label$110 : while (1) {
               if (!(FLAC__bitreader_read_raw_int32(HEAP32[($7 + 56 | 0) >> 2] | 0 | 0, $3 + 16 | 0 | 0, $6 | 0) | 0)) {
                break label$3
               }
               HEAP32[($11 + ($9 << 2 | 0) | 0) >> 2] = HEAP32[($3 + 16 | 0) >> 2] | 0;
               $7 = HEAP32[$5 >> 2] | 0;
               $9 = $9 + 1 | 0;
               if (($9 | 0) != ($10 | 0)) {
                continue label$110
               }
               break label$110;
              };
             }
             if (!(FLAC__bitreader_read_raw_uint32(HEAP32[($7 + 56 | 0) >> 2] | 0 | 0, $3 + 32 | 0 | 0, $17 | 0) | 0)) {
              break label$3
             }
             $9 = $19 + 1180 | 0;
             $6 = HEAP32[($3 + 32 | 0) >> 2] | 0;
             HEAP32[$9 >> 2] = $6;
             $7 = HEAP32[$5 >> 2] | 0;
             label$111 : {
              label$112 : {
               label$113 : {
                if ($6 >>> 0 > 1 >>> 0) {
                 break label$113
                }
                if (!(FLAC__bitreader_read_raw_uint32(HEAP32[($7 + 56 | 0) >> 2] | 0 | 0, $3 + 32 | 0 | 0, $16 | 0) | 0)) {
                 break label$3
                }
                $7 = HEAP32[$5 >> 2] | 0;
                $6 = HEAP32[($3 + 32 | 0) >> 2] | 0;
                if (((HEAP32[($7 + 1136 | 0) >> 2] | 0) >>> $6 | 0) >>> 0 >= $10 >>> 0) {
                 break label$112
                }
                label$114 : {
                 if (HEAP32[($7 + 3632 | 0) >> 2] | 0) {
                  break label$114
                 }
                 FUNCTION_TABLE[HEAP32[($7 + 32 | 0) >> 2] | 0 | 0]($0, 0, HEAP32[($7 + 48 | 0) >> 2] | 0);
                }
                HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] = 2;
                break label$111;
               }
               label$115 : {
                label$116 : {
                 if (HEAP32[($7 + 3632 | 0) >> 2] | 0) {
                  break label$116
                 }
                 FUNCTION_TABLE[HEAP32[($7 + 32 | 0) >> 2] | 0 | 0]($0, 3, HEAP32[($7 + 48 | 0) >> 2] | 0);
                 break label$115;
                }
                HEAP32[($7 + 6152 | 0) >> 2] = (HEAP32[($7 + 6152 | 0) >> 2] | 0) + 1 | 0;
               }
               HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] = 2;
               break label$111;
              }
              HEAP32[($19 + 1184 | 0) >> 2] = $6;
              $7 = Math_imul($8, 12);
              HEAP32[($19 + 1188 | 0) >> 2] = ((HEAP32[$5 >> 2] | 0) + $7 | 0) + 124 | 0;
              label$117 : {
               $9 = HEAP32[$9 >> 2] | 0;
               if ($9 >>> 0 >= 2 >>> 0) {
                break label$117
               }
               $19 = HEAP32[($0 + 4 | 0) >> 2] | 0;
               if (!(read_residual_partitioned_rice_($0 | 0, $10 | 0, $6 | 0, ($19 + $7 | 0) + 124 | 0 | 0, HEAP32[(($19 + $20 | 0) + 92 | 0) >> 2] | 0 | 0, ($9 | 0) == (1 | 0) | 0) | 0)) {
                break label$3
               }
              }
              if (!$2) {
               break label$111
              }
              $7 = $10 << 2 | 0;
              __memcpy(HEAP32[(((HEAP32[$5 >> 2] | 0) + $20 | 0) + 60 | 0) >> 2] | 0 | 0, $11 | 0, $7 | 0) | 0;
              $6 = HEAP32[$5 >> 2] | 0;
              $9 = $6 + $20 | 0;
              FLAC__fixed_restore_signal(HEAP32[($9 + 92 | 0) >> 2] | 0 | 0, (HEAP32[($6 + 1136 | 0) >> 2] | 0) - $10 | 0 | 0, $10 | 0, (HEAP32[($9 + 60 | 0) >> 2] | 0) + $7 | 0 | 0);
             }
             if ((HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] | 0 | 0) != (2 | 0)) {
              break label$100
             }
             break label$96;
            }
            label$118 : {
             if ($9 >>> 0 > 63 >>> 0) {
              break label$118
             }
             label$119 : {
              if (HEAP32[($7 + 3632 | 0) >> 2] | 0) {
               break label$119
              }
              FUNCTION_TABLE[HEAP32[($7 + 32 | 0) >> 2] | 0 | 0]($0, 3, HEAP32[($7 + 48 | 0) >> 2] | 0);
              break label$97;
             }
             HEAP32[($7 + 6152 | 0) >> 2] = (HEAP32[($7 + 6152 | 0) >> 2] | 0) + 1 | 0;
             break label$97;
            }
            $11 = $7 + Math_imul($8, 292) | 0;
            HEAP32[($11 + 1176 | 0) >> 2] = 3;
            $21 = $8 << 2 | 0;
            $10 = HEAP32[(($7 + $21 | 0) + 92 | 0) >> 2] | 0;
            $19 = ($9 >>> 1 | 0) & 31 | 0;
            $20 = $19 + 1 | 0;
            HEAP32[($11 + 1192 | 0) >> 2] = $20;
            HEAP32[($11 + 1460 | 0) >> 2] = $10;
            $9 = 0;
            label$120 : while (1) {
             if (!(FLAC__bitreader_read_raw_int32(HEAP32[($7 + 56 | 0) >> 2] | 0 | 0, $3 + 16 | 0 | 0, $6 | 0) | 0)) {
              break label$3
             }
             HEAP32[(($11 + ($9 << 2 | 0) | 0) + 1332 | 0) >> 2] = HEAP32[($3 + 16 | 0) >> 2] | 0;
             $10 = ($9 | 0) != ($19 | 0);
             $7 = HEAP32[$5 >> 2] | 0;
             $9 = $9 + 1 | 0;
             if ($10) {
              continue label$120
             }
             break label$120;
            };
            if (!(FLAC__bitreader_read_raw_uint32(HEAP32[($7 + 56 | 0) >> 2] | 0 | 0, $3 + 32 | 0 | 0, $14 | 0) | 0)) {
             break label$3
            }
            label$121 : {
             label$122 : {
              $7 = HEAP32[($3 + 32 | 0) >> 2] | 0;
              if (($7 | 0) != ($15 | 0)) {
               break label$122
              }
              label$123 : {
               $7 = HEAP32[$5 >> 2] | 0;
               if (HEAP32[($7 + 3632 | 0) >> 2] | 0) {
                break label$123
               }
               FUNCTION_TABLE[HEAP32[($7 + 32 | 0) >> 2] | 0 | 0]($0, 0, HEAP32[($7 + 48 | 0) >> 2] | 0);
              }
              HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] = 2;
              break label$121;
             }
             $10 = $11 + 1196 | 0;
             HEAP32[$10 >> 2] = $7 + 1 | 0;
             if (!(FLAC__bitreader_read_raw_int32(HEAP32[((HEAP32[$5 >> 2] | 0) + 56 | 0) >> 2] | 0 | 0, $3 + 16 | 0 | 0, $18 | 0) | 0)) {
              break label$3
             }
             label$124 : {
              $7 = HEAP32[($3 + 16 | 0) >> 2] | 0;
              if (($7 | 0) > (-1 | 0)) {
               break label$124
              }
              label$125 : {
               $7 = HEAP32[$5 >> 2] | 0;
               if (HEAP32[($7 + 3632 | 0) >> 2] | 0) {
                break label$125
               }
               FUNCTION_TABLE[HEAP32[($7 + 32 | 0) >> 2] | 0 | 0]($0, 0, HEAP32[($7 + 48 | 0) >> 2] | 0);
              }
              HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] = 2;
              break label$121;
             }
             $22 = $11 + 1200 | 0;
             HEAP32[$22 >> 2] = $7;
             $7 = 0;
             label$126 : while (1) {
              if (!(FLAC__bitreader_read_raw_int32(HEAP32[((HEAP32[$5 >> 2] | 0) + 56 | 0) >> 2] | 0 | 0, $3 + 16 | 0 | 0, HEAP32[$10 >> 2] | 0 | 0) | 0)) {
               break label$3
              }
              HEAP32[(($11 + ($7 << 2 | 0) | 0) + 1204 | 0) >> 2] = HEAP32[($3 + 16 | 0) >> 2] | 0;
              $9 = ($7 | 0) != ($19 | 0);
              $7 = $7 + 1 | 0;
              if ($9) {
               continue label$126
              }
              break label$126;
             };
             if (!(FLAC__bitreader_read_raw_uint32(HEAP32[((HEAP32[$5 >> 2] | 0) + 56 | 0) >> 2] | 0 | 0, $3 + 32 | 0 | 0, $17 | 0) | 0)) {
              break label$3
             }
             $23 = $11 + 1180 | 0;
             $9 = HEAP32[($3 + 32 | 0) >> 2] | 0;
             HEAP32[$23 >> 2] = $9;
             $7 = HEAP32[$5 >> 2] | 0;
             label$127 : {
              label$128 : {
               if ($9 >>> 0 > 1 >>> 0) {
                break label$128
               }
               if (!(FLAC__bitreader_read_raw_uint32(HEAP32[($7 + 56 | 0) >> 2] | 0 | 0, $3 + 32 | 0 | 0, $16 | 0) | 0)) {
                break label$3
               }
               $7 = HEAP32[$5 >> 2] | 0;
               $9 = HEAP32[($3 + 32 | 0) >> 2] | 0;
               if (((HEAP32[($7 + 1136 | 0) >> 2] | 0) >>> $9 | 0) >>> 0 > $19 >>> 0) {
                break label$127
               }
               label$129 : {
                if (HEAP32[($7 + 3632 | 0) >> 2] | 0) {
                 break label$129
                }
                FUNCTION_TABLE[HEAP32[($7 + 32 | 0) >> 2] | 0 | 0]($0, 0, HEAP32[($7 + 48 | 0) >> 2] | 0);
               }
               HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] = 2;
               break label$121;
              }
              label$130 : {
               label$131 : {
                if (HEAP32[($7 + 3632 | 0) >> 2] | 0) {
                 break label$131
                }
                FUNCTION_TABLE[HEAP32[($7 + 32 | 0) >> 2] | 0 | 0]($0, 3, HEAP32[($7 + 48 | 0) >> 2] | 0);
                break label$130;
               }
               HEAP32[($7 + 6152 | 0) >> 2] = (HEAP32[($7 + 6152 | 0) >> 2] | 0) + 1 | 0;
              }
              HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] = 2;
              break label$121;
             }
             HEAP32[($11 + 1184 | 0) >> 2] = $9;
             $7 = Math_imul($8, 12);
             HEAP32[($11 + 1188 | 0) >> 2] = ((HEAP32[$5 >> 2] | 0) + $7 | 0) + 124 | 0;
             label$132 : {
              $19 = HEAP32[$23 >> 2] | 0;
              if ($19 >>> 0 >= 2 >>> 0) {
               break label$132
              }
              $23 = HEAP32[($0 + 4 | 0) >> 2] | 0;
              if (!(read_residual_partitioned_rice_($0 | 0, $20 | 0, $9 | 0, ($23 + $7 | 0) + 124 | 0 | 0, HEAP32[(($23 + $21 | 0) + 92 | 0) >> 2] | 0 | 0, ($19 | 0) == (1 | 0) | 0) | 0)) {
               break label$3
              }
             }
             if (!$2) {
              break label$121
             }
             $7 = $20 << 2 | 0;
             __memcpy(HEAP32[(((HEAP32[$5 >> 2] | 0) + $21 | 0) + 60 | 0) >> 2] | 0 | 0, $11 + 1332 | 0 | 0, $7 | 0) | 0;
             label$133 : {
              label$134 : {
               $10 = HEAP32[$10 >> 2] | 0;
               if ((((Math_clz32($20) ^ 31 | 0) + $6 | 0) + $10 | 0) >>> 0 > 32 >>> 0) {
                break label$134
               }
               $9 = HEAP32[$5 >> 2] | 0;
               if ($6 >>> 0 > 16 >>> 0) {
                break label$133
               }
               if ($10 >>> 0 > 16 >>> 0) {
                break label$133
               }
               $6 = $9 + $21 | 0;
               FUNCTION_TABLE[HEAP32[($9 + 44 | 0) >> 2] | 0 | 0](HEAP32[($6 + 92 | 0) >> 2] | 0, (HEAP32[($9 + 1136 | 0) >> 2] | 0) - $20 | 0, $11 + 1204 | 0, $20, HEAP32[$22 >> 2] | 0, (HEAP32[($6 + 60 | 0) >> 2] | 0) + $7 | 0);
               break label$121;
              }
              $6 = HEAP32[$5 >> 2] | 0;
              $9 = $6 + $21 | 0;
              FUNCTION_TABLE[HEAP32[($6 + 40 | 0) >> 2] | 0 | 0](HEAP32[($9 + 92 | 0) >> 2] | 0, (HEAP32[($6 + 1136 | 0) >> 2] | 0) - $20 | 0, $11 + 1204 | 0, $20, HEAP32[$22 >> 2] | 0, (HEAP32[($9 + 60 | 0) >> 2] | 0) + $7 | 0);
              break label$121;
             }
             $6 = $9 + $21 | 0;
             FUNCTION_TABLE[HEAP32[($9 + 36 | 0) >> 2] | 0 | 0](HEAP32[($6 + 92 | 0) >> 2] | 0, (HEAP32[($9 + 1136 | 0) >> 2] | 0) - $20 | 0, $11 + 1204 | 0, $20, HEAP32[$22 >> 2] | 0, (HEAP32[($6 + 60 | 0) >> 2] | 0) + $7 | 0);
            }
            if ((HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] | 0 | 0) == (2 | 0)) {
             break label$96
            }
           }
           if (!$12) {
            break label$96
           }
           if (!$2) {
            break label$96
           }
           $9 = HEAP32[$5 >> 2] | 0;
           $7 = HEAP32[((($9 + 1136 | 0) + Math_imul($8, 292) | 0) + 328 | 0) >> 2] | 0;
           HEAP32[($3 + 44 | 0) >> 2] = $7;
           if (!(HEAP32[($9 + 1136 | 0) >> 2] | 0)) {
            break label$96
           }
           $10 = HEAP32[(($9 + ($8 << 2 | 0) | 0) + 60 | 0) >> 2] | 0;
           HEAP32[$10 >> 2] = (HEAP32[$10 >> 2] | 0) << $7 | 0;
           $7 = 1;
           if ((HEAP32[($9 + 1136 | 0) >> 2] | 0) >>> 0 < 2 >>> 0) {
            break label$96
           }
           label$135 : while (1) {
            $6 = $10 + ($7 << 2 | 0) | 0;
            HEAP32[$6 >> 2] = (HEAP32[$6 >> 2] | 0) << (HEAP32[($3 + 44 | 0) >> 2] | 0) | 0;
            $7 = $7 + 1 | 0;
            if ($7 >>> 0 < (HEAP32[($9 + 1136 | 0) >> 2] | 0) >>> 0) {
             continue label$135
            }
            break label$96;
           };
          }
          HEAP32[($7 + 6152 | 0) >> 2] = (HEAP32[($7 + 6152 | 0) >> 2] | 0) + 1 | 0;
         }
         HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] = 2;
        }
        if ((HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] | 0 | 0) == (2 | 0)) {
         break label$87
        }
        $8 = $8 + 1 | 0;
        $7 = HEAP32[$5 >> 2] | 0;
        if ($8 >>> 0 < (HEAP32[($7 + 1144 | 0) >> 2] | 0) >>> 0) {
         continue label$89
        }
        break label$89;
       };
      }
      label$136 : {
       if (FLAC__bitreader_is_consumed_byte_aligned(HEAP32[($7 + 56 | 0) >> 2] | 0 | 0) | 0) {
        break label$136
       }
       HEAP32[($3 + 16 | 0) >> 2] = 0;
       $7 = HEAP32[((HEAP32[$5 >> 2] | 0) + 56 | 0) >> 2] | 0;
       if (!(FLAC__bitreader_read_raw_uint32($7 | 0, $3 + 16 | 0 | 0, FLAC__bitreader_bits_left_for_byte_alignment($7 | 0) | 0 | 0) | 0)) {
        break label$3
       }
       if (!(HEAP32[($3 + 16 | 0) >> 2] | 0)) {
        break label$136
       }
       label$137 : {
        $7 = HEAP32[$5 >> 2] | 0;
        if (HEAP32[($7 + 3632 | 0) >> 2] | 0) {
         break label$137
        }
        FUNCTION_TABLE[HEAP32[($7 + 32 | 0) >> 2] | 0 | 0]($0, 0, HEAP32[($7 + 48 | 0) >> 2] | 0);
       }
       HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] = 2;
      }
      if ((HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] | 0 | 0) == (2 | 0)) {
       break label$1
      }
      $7 = FLAC__bitreader_get_read_crc16(HEAP32[((HEAP32[$5 >> 2] | 0) + 56 | 0) >> 2] | 0 | 0) | 0;
      $4 = 0;
      if (!(FLAC__bitreader_read_raw_uint32(HEAP32[((HEAP32[$5 >> 2] | 0) + 56 | 0) >> 2] | 0 | 0, $3 + 16 | 0 | 0, HEAP32[GOT_data_internal_FLAC__FRAME_FOOTER_CRC_LEN >> 2] | 0 | 0) | 0)) {
       break label$1
      }
      label$138 : {
       label$139 : {
        if ((HEAP32[($3 + 16 | 0) >> 2] | 0 | 0) != ($7 | 0)) {
         break label$139
        }
        if (!$2) {
         break label$138
        }
        label$140 : {
         label$141 : {
          label$142 : {
           $7 = HEAP32[$5 >> 2] | 0;
           switch ((HEAP32[($7 + 1148 | 0) >> 2] | 0) + -1 | 0 | 0) {
           case 2:
            break label$140;
           case 0:
            break label$141;
           case 1:
            break label$142;
           default:
            break label$138;
           };
          }
          if (!(HEAP32[($7 + 1136 | 0) >> 2] | 0)) {
           break label$138
          }
          $10 = HEAP32[($7 + 64 | 0) >> 2] | 0;
          $11 = HEAP32[($7 + 60 | 0) >> 2] | 0;
          $6 = 0;
          label$143 : while (1) {
           $9 = $6 << 2 | 0;
           $8 = $11 + $9 | 0;
           HEAP32[$8 >> 2] = (HEAP32[$8 >> 2] | 0) + (HEAP32[($10 + $9 | 0) >> 2] | 0) | 0;
           $6 = $6 + 1 | 0;
           if ($6 >>> 0 < (HEAP32[($7 + 1136 | 0) >> 2] | 0) >>> 0) {
            continue label$143
           }
           break label$138;
          };
         }
         if (!(HEAP32[($7 + 1136 | 0) >> 2] | 0)) {
          break label$138
         }
         $10 = HEAP32[($7 + 64 | 0) >> 2] | 0;
         $11 = HEAP32[($7 + 60 | 0) >> 2] | 0;
         $6 = 0;
         label$144 : while (1) {
          $9 = $6 << 2 | 0;
          $8 = $10 + $9 | 0;
          HEAP32[$8 >> 2] = (HEAP32[($11 + $9 | 0) >> 2] | 0) - (HEAP32[$8 >> 2] | 0) | 0;
          $6 = $6 + 1 | 0;
          if ($6 >>> 0 < (HEAP32[($7 + 1136 | 0) >> 2] | 0) >>> 0) {
           continue label$144
          }
          break label$138;
         };
        }
        if (!(HEAP32[($7 + 1136 | 0) >> 2] | 0)) {
         break label$138
        }
        $11 = HEAP32[($7 + 64 | 0) >> 2] | 0;
        $12 = HEAP32[($7 + 60 | 0) >> 2] | 0;
        $6 = 0;
        label$145 : while (1) {
         $9 = $6 << 2 | 0;
         $8 = $12 + $9 | 0;
         $1715 = $8;
         $10 = $11 + $9 | 0;
         $9 = HEAP32[$10 >> 2] | 0;
         $8 = $9 & 1 | 0 | ((HEAP32[$8 >> 2] | 0) << 1 | 0) | 0;
         HEAP32[$1715 >> 2] = ($8 + $9 | 0) >> 1 | 0;
         HEAP32[$10 >> 2] = ($8 - $9 | 0) >> 1 | 0;
         $6 = $6 + 1 | 0;
         if ($6 >>> 0 < (HEAP32[($7 + 1136 | 0) >> 2] | 0) >>> 0) {
          continue label$145
         }
         break label$138;
        };
       }
       label$146 : {
        $7 = HEAP32[$5 >> 2] | 0;
        if (HEAP32[($7 + 3632 | 0) >> 2] | 0) {
         break label$146
        }
        FUNCTION_TABLE[HEAP32[($7 + 32 | 0) >> 2] | 0 | 0]($0, 2, HEAP32[($7 + 48 | 0) >> 2] | 0);
       }
       if (!$2) {
        break label$138
       }
       $7 = HEAP32[$5 >> 2] | 0;
       if (!(HEAP32[($7 + 1144 | 0) >> 2] | 0)) {
        break label$138
       }
       $6 = 0;
       label$147 : while (1) {
        memset(HEAP32[(($7 + ($6 << 2 | 0) | 0) + 60 | 0) >> 2] | 0 | 0, 0 | 0, (HEAP32[($7 + 1136 | 0) >> 2] | 0) << 2 | 0 | 0) | 0;
        $6 = $6 + 1 | 0;
        $7 = HEAP32[$5 >> 2] | 0;
        if ($6 >>> 0 < (HEAP32[($7 + 1144 | 0) >> 2] | 0) >>> 0) {
         continue label$147
        }
        break label$147;
       };
      }
      HEAP32[$1 >> 2] = 1;
      label$148 : {
       $5 = HEAP32[$5 >> 2] | 0;
       $7 = HEAP32[($5 + 232 | 0) >> 2] | 0;
       if (!$7) {
        break label$148
       }
       HEAP32[($5 + 228 | 0) >> 2] = $7;
      }
      $7 = HEAP32[$0 >> 2] | 0;
      HEAP32[($7 + 8 | 0) >> 2] = HEAP32[($5 + 1144 | 0) >> 2] | 0;
      HEAP32[($7 + 12 | 0) >> 2] = HEAP32[($5 + 1148 | 0) >> 2] | 0;
      HEAP32[($7 + 16 | 0) >> 2] = HEAP32[($5 + 1152 | 0) >> 2] | 0;
      HEAP32[($7 + 20 | 0) >> 2] = HEAP32[($5 + 1140 | 0) >> 2] | 0;
      $6 = HEAP32[($5 + 1136 | 0) >> 2] | 0;
      HEAP32[($7 + 24 | 0) >> 2] = $6;
      $1809 = $5;
      i64toi32_i32$3 = $5 + 1160 | 0;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$3 >> 2] | 0;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
      $1812$hi = i64toi32_i32$2;
      i64toi32_i32$2 = 0;
      $1814$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $1812$hi;
      i64toi32_i32$3 = i64toi32_i32$1;
      i64toi32_i32$1 = $1814$hi;
      i64toi32_i32$0 = $6;
      i64toi32_i32$4 = i64toi32_i32$3 + $6 | 0;
      i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$4 >>> 0 < $6 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      i64toi32_i32$3 = $1809;
      HEAP32[(i64toi32_i32$3 + 240 | 0) >> 2] = i64toi32_i32$4;
      HEAP32[(i64toi32_i32$3 + 244 | 0) >> 2] = i64toi32_i32$5;
      label$149 : {
       if (!$2) {
        break label$149
       }
       $5 = write_audio_frame_to_client_($0 | 0, $5 + 1136 | 0 | 0, $5 + 60 | 0 | 0) | 0;
       $7 = HEAP32[$0 >> 2] | 0;
       if (!$5) {
        break label$149
       }
       HEAP32[$7 >> 2] = 7;
       break label$1;
      }
      HEAP32[$7 >> 2] = 2;
     }
     $4 = 1;
     break label$1;
    }
    $4 = 0;
    break label$1;
   }
   HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] = 8;
   $4 = 0;
  }
  __stack_pointer = $3 + 48 | 0;
  return $4 | 0;
 }
 
 function has_id_filtered_($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0;
  $2 = GOT_data_internal_FLAC__STREAM_METADATA_APPLICATION_ID_LEN;
  label$1 : {
   $0 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   $3 = HEAP32[($0 + 1124 | 0) >> 2] | 0;
   if ($3) {
    break label$1
   }
   return 0 | 0;
  }
  $2 = (HEAP32[$2 >> 2] | 0) >>> 3 | 0;
  $4 = HEAP32[($0 + 1120 | 0) >> 2] | 0;
  $0 = 0;
  label$2 : {
   label$3 : while (1) {
    if (!(memcmp($4 + Math_imul($2, $0) | 0 | 0, $1 | 0, $2 | 0) | 0)) {
     break label$2
    }
    $0 = $0 + 1 | 0;
    if (($0 | 0) != ($3 | 0)) {
     continue label$3
    }
    break label$3;
   };
   return 0 | 0;
  }
  return 1 | 0;
 }
 
 function read_metadata_vorbiscomment_($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $5 = 0, $3 = 0, $4 = 0, $6 = 0, $8 = 0, i64toi32_i32$0 = 0, $7 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      if ($2 >>> 0 < 8 >>> 0) {
       break label$4
      }
      $3 = 0;
      if (!(FLAC__bitreader_read_uint32_little_endian(HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0 | 0, $1 | 0) | 0)) {
       break label$3
      }
      $2 = $2 + -8 | 0;
      label$5 : {
       label$6 : {
        $4 = HEAP32[$1 >> 2] | 0;
        if (!$4) {
         break label$6
        }
        label$7 : {
         if ($2 >>> 0 >= $4 >>> 0) {
          break label$7
         }
         i64toi32_i32$0 = 0;
         HEAP32[$1 >> 2] = 0;
         HEAP32[($1 + 4 | 0) >> 2] = i64toi32_i32$0;
         break label$4;
        }
        label$8 : {
         label$9 : {
          label$10 : {
           if (($4 | 0) != (-1 | 0)) {
            break label$10
           }
           HEAP32[($1 + 4 | 0) >> 2] = 0;
           break label$9;
          }
          $5 = dlmalloc($4 + 1 | 0 | 0) | 0;
          HEAP32[($1 + 4 | 0) >> 2] = $5;
          if ($5) {
           break label$8
          }
         }
         HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] = 8;
         return 0 | 0;
        }
        if (!(FLAC__bitreader_read_byte_block_aligned_no_crc(HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0 | 0, $5 | 0, $4 | 0) | 0)) {
         break label$3
        }
        $2 = $2 - $4 | 0;
        HEAP8[((HEAP32[($1 + 4 | 0) >> 2] | 0) + (HEAP32[$1 >> 2] | 0) | 0) >> 0] = 0;
        break label$5;
       }
       HEAP32[($1 + 4 | 0) >> 2] = 0;
      }
      $4 = $1 + 8 | 0;
      if (!(FLAC__bitreader_read_uint32_little_endian(HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0 | 0, $4 | 0) | 0)) {
       break label$3
      }
      label$11 : {
       $3 = HEAP32[$4 >> 2] | 0;
       if ($3 >>> 0 < 100001 >>> 0) {
        break label$11
       }
       HEAP32[$4 >> 2] = 0;
       return 0 | 0;
      }
      if (!$3) {
       break label$4
      }
      $5 = safe_malloc_mul_2op_p($3 | 0, 8 | 0) | 0;
      HEAP32[($1 + 12 | 0) >> 2] = $5;
      if (!$5) {
       break label$2
      }
      if (!(HEAP32[$4 >> 2] | 0)) {
       break label$4
      }
      i64toi32_i32$0 = 0;
      HEAP32[$5 >> 2] = 0;
      HEAP32[($5 + 4 | 0) >> 2] = i64toi32_i32$0;
      $3 = 0;
      label$12 : {
       if ($2 >>> 0 < 4 >>> 0) {
        break label$12
       }
       label$13 : while (1) {
        if (!(FLAC__bitreader_read_uint32_little_endian(HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0 | 0, $5 | 0) | 0)) {
         break label$1
        }
        $2 = $2 + -4 | 0;
        label$14 : {
         label$15 : {
          $6 = HEAP32[($1 + 12 | 0) >> 2] | 0;
          $7 = $3 << 3 | 0;
          $8 = $6 + $7 | 0;
          $5 = HEAP32[$8 >> 2] | 0;
          if (!$5) {
           break label$15
          }
          if ($2 >>> 0 < $5 >>> 0) {
           break label$12
          }
          label$16 : {
           label$17 : {
            label$18 : {
             if (($5 | 0) != (-1 | 0)) {
              break label$18
             }
             HEAP32[(($6 + ($3 << 3 | 0) | 0) + 4 | 0) >> 2] = 0;
             break label$17;
            }
            $6 = dlmalloc($5 + 1 | 0 | 0) | 0;
            HEAP32[($8 + 4 | 0) >> 2] = $6;
            if ($6) {
             break label$16
            }
           }
           HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] = 8;
           break label$1;
          }
          $2 = $2 - $5 | 0;
          memset($6 | 0, 0 | 0, $5 | 0) | 0;
          $5 = FLAC__bitreader_read_byte_block_aligned_no_crc(HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0 | 0, HEAP32[($8 + 4 | 0) >> 2] | 0 | 0, HEAP32[$8 >> 2] | 0 | 0) | 0;
          $6 = (HEAP32[($1 + 12 | 0) >> 2] | 0) + $7 | 0;
          $8 = HEAP32[($6 + 4 | 0) >> 2] | 0;
          label$19 : {
           if ($5) {
            break label$19
           }
           dlfree($8 | 0);
           HEAP32[(((HEAP32[($1 + 12 | 0) >> 2] | 0) + ($3 << 3 | 0) | 0) + 4 | 0) >> 2] = 0;
           HEAP32[($1 + 8 | 0) >> 2] = $3;
           break label$4;
          }
          HEAP8[($8 + (HEAP32[$6 >> 2] | 0) | 0) >> 0] = 0;
          break label$14;
         }
         HEAP32[($8 + 4 | 0) >> 2] = 0;
        }
        $3 = $3 + 1 | 0;
        if ($3 >>> 0 >= (HEAP32[$4 >> 2] | 0) >>> 0) {
         break label$4
        }
        $5 = (HEAP32[($1 + 12 | 0) >> 2] | 0) + ($3 << 3 | 0) | 0;
        i64toi32_i32$0 = 0;
        HEAP32[$5 >> 2] = 0;
        HEAP32[($5 + 4 | 0) >> 2] = i64toi32_i32$0;
        if ($2 >>> 0 >= 4 >>> 0) {
         continue label$13
        }
        break label$13;
       };
      }
      HEAP32[$4 >> 2] = $3;
     }
     label$20 : {
      if (!$2) {
       break label$20
      }
      label$21 : {
       if (HEAP32[($1 + 8 | 0) >> 2] | 0) {
        break label$21
       }
       dlfree(HEAP32[($1 + 12 | 0) >> 2] | 0 | 0);
       HEAP32[($1 + 12 | 0) >> 2] = 0;
      }
      if (FLAC__bitreader_skip_byte_block_aligned_no_crc(HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0 | 0, $2 | 0) | 0) {
       break label$20
      }
      return 0 | 0;
     }
     $3 = 1;
    }
    return $3 | 0;
   }
   HEAP32[$4 >> 2] = 0;
   HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] = 8;
   return 0 | 0;
  }
  HEAP32[$4 >> 2] = $3;
  return 0 | 0;
 }
 
 function read_metadata_cuesheet_($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $3 = 0, $4 = 0, $2 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $14 = 0, $13 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  $3 = 0;
  $1 = memset($1 | 0, 0 | 0, 160 | 0) | 0;
  $4 = GOT_data_internal_FLAC__STREAM_METADATA_CUESHEET_MEDIA_CATALOG_NUMBER_LEN;
  label$1 : {
   if (!(FLAC__bitreader_read_byte_block_aligned_no_crc(HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0 | 0, $1 | 0, (HEAP32[$4 >> 2] | 0) >>> 3 | 0 | 0) | 0)) {
    break label$1
   }
   if (!(FLAC__bitreader_read_raw_uint64(HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0 | 0, $1 + 136 | 0 | 0, HEAP32[GOT_data_internal_FLAC__STREAM_METADATA_CUESHEET_LEAD_IN_LEN >> 2] | 0 | 0) | 0)) {
    break label$1
   }
   if (!(FLAC__bitreader_read_raw_uint32(HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0 | 0, $2 + 12 | 0 | 0, HEAP32[GOT_data_internal_FLAC__STREAM_METADATA_CUESHEET_IS_CD_LEN >> 2] | 0 | 0) | 0)) {
    break label$1
   }
   $3 = 0;
   HEAP32[($1 + 144 | 0) >> 2] = (HEAP32[($2 + 12 | 0) >> 2] | 0 | 0) != (0 | 0);
   if (!(FLAC__bitreader_skip_bits_no_crc(HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0 | 0, HEAP32[GOT_data_internal_FLAC__STREAM_METADATA_CUESHEET_RESERVED_LEN >> 2] | 0 | 0) | 0)) {
    break label$1
   }
   if (!(FLAC__bitreader_read_raw_uint32(HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0 | 0, $2 + 12 | 0 | 0, HEAP32[GOT_data_internal_FLAC__STREAM_METADATA_CUESHEET_NUM_TRACKS_LEN >> 2] | 0 | 0) | 0)) {
    break label$1
   }
   $3 = HEAP32[($2 + 12 | 0) >> 2] | 0;
   HEAP32[($1 + 148 | 0) >> 2] = $3;
   label$2 : {
    if ($3) {
     break label$2
    }
    $3 = 1;
    break label$1;
   }
   $3 = dlcalloc($3 | 0, 32 | 0) | 0;
   HEAP32[($1 + 152 | 0) >> 2] = $3;
   label$3 : {
    label$4 : {
     if (!$3) {
      break label$4
     }
     $5 = GOT_data_internal_FLAC__STREAM_METADATA_CUESHEET_TRACK_ISRC_LEN;
     $6 = GOT_data_internal_FLAC__STREAM_METADATA_CUESHEET_INDEX_RESERVED_LEN;
     $7 = GOT_data_internal_FLAC__STREAM_METADATA_CUESHEET_INDEX_NUMBER_LEN;
     $8 = GOT_data_internal_FLAC__STREAM_METADATA_CUESHEET_INDEX_OFFSET_LEN;
     $9 = GOT_data_internal_FLAC__STREAM_METADATA_CUESHEET_TRACK_NUM_INDICES_LEN;
     $10 = GOT_data_internal_FLAC__STREAM_METADATA_CUESHEET_TRACK_RESERVED_LEN;
     $11 = GOT_data_internal_FLAC__STREAM_METADATA_CUESHEET_TRACK_PRE_EMPHASIS_LEN;
     $12 = GOT_data_internal_FLAC__STREAM_METADATA_CUESHEET_TRACK_TYPE_LEN;
     $13 = GOT_data_internal_FLAC__STREAM_METADATA_CUESHEET_TRACK_NUMBER_LEN;
     $4 = GOT_data_internal_FLAC__STREAM_METADATA_CUESHEET_TRACK_OFFSET_LEN;
     $14 = HEAP32[$4 >> 2] | 0;
     if (!(FLAC__bitreader_read_raw_uint64(HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0 | 0, $3 | 0, $14 | 0) | 0)) {
      break label$3
     }
     $15 = (HEAP32[$5 >> 2] | 0) >>> 3 | 0;
     $16 = HEAP32[$6 >> 2] | 0;
     $17 = HEAP32[$7 >> 2] | 0;
     $7 = HEAP32[$8 >> 2] | 0;
     $18 = HEAP32[$9 >> 2] | 0;
     $19 = HEAP32[$10 >> 2] | 0;
     $11 = HEAP32[$11 >> 2] | 0;
     $12 = HEAP32[$12 >> 2] | 0;
     $10 = HEAP32[$13 >> 2] | 0;
     $6 = 0;
     label$5 : while (1) {
      if (!(FLAC__bitreader_read_raw_uint32(HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0 | 0, $2 + 12 | 0 | 0, $10 | 0) | 0)) {
       break label$3
      }
      $4 = $3 + ($6 << 5 | 0) | 0;
      HEAP8[($4 + 8 | 0) >> 0] = HEAP32[($2 + 12 | 0) >> 2] | 0;
      if (!(FLAC__bitreader_read_byte_block_aligned_no_crc(HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0 | 0, $4 + 9 | 0 | 0, $15 | 0) | 0)) {
       break label$3
      }
      if (!(FLAC__bitreader_read_raw_uint32(HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0 | 0, $2 + 12 | 0 | 0, $12 | 0) | 0)) {
       break label$3
      }
      HEAP8[($4 + 22 | 0) >> 0] = (HEAPU8[($4 + 22 | 0) >> 0] | 0) & 254 | 0 | ((HEAPU8[($2 + 12 | 0) >> 0] | 0) & 1 | 0) | 0;
      if (!(FLAC__bitreader_read_raw_uint32(HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0 | 0, $2 + 12 | 0 | 0, $11 | 0) | 0)) {
       break label$3
      }
      $3 = $4 + 22 | 0;
      HEAP8[$3 >> 0] = ((HEAPU8[($2 + 12 | 0) >> 0] | 0) << 1 | 0) & 2 | 0 | ((HEAPU8[$3 >> 0] | 0) & 253 | 0) | 0;
      if (!(FLAC__bitreader_skip_bits_no_crc(HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0 | 0, $19 | 0) | 0)) {
       break label$3
      }
      if (!(FLAC__bitreader_read_raw_uint32(HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0 | 0, $2 + 12 | 0 | 0, $18 | 0) | 0)) {
       break label$3
      }
      $3 = HEAP32[($2 + 12 | 0) >> 2] | 0;
      HEAP8[($4 + 23 | 0) >> 0] = $3;
      label$6 : {
       $3 = $3 & 255 | 0;
       if (!$3) {
        break label$6
       }
       $5 = dlcalloc($3 | 0, 16 | 0) | 0;
       HEAP32[($4 + 24 | 0) >> 2] = $5;
       if (!$5) {
        break label$4
       }
       $8 = $4 + 23 | 0;
       if (!(HEAPU8[$8 >> 0] | 0)) {
        break label$6
       }
       $3 = 0;
       if (!(FLAC__bitreader_read_raw_uint64(HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0 | 0, $5 | 0, $7 | 0) | 0)) {
        break label$1
       }
       $9 = $4 + 24 | 0;
       $4 = 0;
       label$7 : while (1) {
        if (!(FLAC__bitreader_read_raw_uint32(HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0 | 0, $2 + 12 | 0 | 0, $17 | 0) | 0)) {
         break label$1
        }
        HEAP8[(($5 + ($4 << 4 | 0) | 0) + 8 | 0) >> 0] = HEAP32[($2 + 12 | 0) >> 2] | 0;
        if (!(FLAC__bitreader_skip_bits_no_crc(HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0 | 0, $16 | 0) | 0)) {
         break label$1
        }
        $4 = $4 + 1 | 0;
        if ($4 >>> 0 >= (HEAPU8[$8 >> 0] | 0) >>> 0) {
         break label$6
        }
        $5 = HEAP32[$9 >> 2] | 0;
        if (!(FLAC__bitreader_read_raw_uint64(HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0 | 0, $5 + ($4 << 4 | 0) | 0 | 0, $7 | 0) | 0)) {
         break label$1
        }
        continue label$7;
       };
      }
      $3 = 1;
      $6 = $6 + 1 | 0;
      if ($6 >>> 0 >= (HEAP32[($1 + 148 | 0) >> 2] | 0) >>> 0) {
       break label$1
      }
      $3 = HEAP32[($1 + 152 | 0) >> 2] | 0;
      if (FLAC__bitreader_read_raw_uint64(HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0 | 0, $3 + ($6 << 5 | 0) | 0 | 0, $14 | 0) | 0) {
       continue label$5
      }
      break label$3;
     };
    }
    HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] = 8;
   }
   $3 = 0;
  }
  __stack_pointer = $2 + 16 | 0;
  return $3 | 0;
 }
 
 function read_metadata_picture_($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $5 = 0, $2 = 0, $3 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  $3 = 0;
  label$1 : {
   if (!(FLAC__bitreader_read_raw_uint32(HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0 | 0, $2 + 12 | 0 | 0, HEAP32[GOT_data_internal_FLAC__STREAM_METADATA_PICTURE_TYPE_LEN >> 2] | 0 | 0) | 0)) {
    break label$1
   }
   HEAP32[$1 >> 2] = HEAP32[($2 + 12 | 0) >> 2] | 0;
   if (!(FLAC__bitreader_read_raw_uint32(HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0 | 0, $2 + 12 | 0 | 0, HEAP32[GOT_data_internal_FLAC__STREAM_METADATA_PICTURE_MIME_TYPE_LENGTH_LEN >> 2] | 0 | 0) | 0)) {
    break label$1
   }
   label$2 : {
    label$3 : {
     label$4 : {
      $4 = HEAP32[($2 + 12 | 0) >> 2] | 0;
      if (($4 | 0) != (-1 | 0)) {
       break label$4
      }
      HEAP32[($1 + 4 | 0) >> 2] = 0;
      break label$3;
     }
     $5 = dlmalloc($4 + 1 | 0 | 0) | 0;
     HEAP32[($1 + 4 | 0) >> 2] = $5;
     if ($5) {
      break label$2
     }
    }
    HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] = 8;
    break label$1;
   }
   $3 = 0;
   label$5 : {
    label$6 : {
     if ($4) {
      break label$6
     }
     $4 = 0;
     break label$5;
    }
    label$7 : {
     if (FLAC__bitreader_read_byte_block_aligned_no_crc(HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0 | 0, $5 | 0, $4 | 0) | 0) {
      break label$7
     }
     $3 = 0;
     break label$1;
    }
    $5 = HEAP32[($1 + 4 | 0) >> 2] | 0;
    $4 = HEAP32[($2 + 12 | 0) >> 2] | 0;
   }
   HEAP8[($5 + $4 | 0) >> 0] = 0;
   if (!(FLAC__bitreader_read_raw_uint32(HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0 | 0, $2 + 12 | 0 | 0, HEAP32[GOT_data_internal_FLAC__STREAM_METADATA_PICTURE_DESCRIPTION_LENGTH_LEN >> 2] | 0 | 0) | 0)) {
    break label$1
   }
   label$8 : {
    label$9 : {
     label$10 : {
      $4 = HEAP32[($2 + 12 | 0) >> 2] | 0;
      if (($4 | 0) != (-1 | 0)) {
       break label$10
      }
      HEAP32[($1 + 8 | 0) >> 2] = 0;
      break label$9;
     }
     $5 = dlmalloc($4 + 1 | 0 | 0) | 0;
     HEAP32[($1 + 8 | 0) >> 2] = $5;
     if ($5) {
      break label$8
     }
    }
    HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] = 8;
    break label$1;
   }
   $3 = 0;
   label$11 : {
    label$12 : {
     if ($4) {
      break label$12
     }
     $4 = 0;
     break label$11;
    }
    label$13 : {
     if (FLAC__bitreader_read_byte_block_aligned_no_crc(HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0 | 0, $5 | 0, $4 | 0) | 0) {
      break label$13
     }
     $3 = 0;
     break label$1;
    }
    $5 = HEAP32[($1 + 8 | 0) >> 2] | 0;
    $4 = HEAP32[($2 + 12 | 0) >> 2] | 0;
   }
   HEAP8[($5 + $4 | 0) >> 0] = 0;
   if (!(FLAC__bitreader_read_raw_uint32(HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0 | 0, $1 + 12 | 0 | 0, HEAP32[GOT_data_internal_FLAC__STREAM_METADATA_PICTURE_WIDTH_LEN >> 2] | 0 | 0) | 0)) {
    break label$1
   }
   if (!(FLAC__bitreader_read_raw_uint32(HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0 | 0, $1 + 16 | 0 | 0, HEAP32[GOT_data_internal_FLAC__STREAM_METADATA_PICTURE_HEIGHT_LEN >> 2] | 0 | 0) | 0)) {
    break label$1
   }
   if (!(FLAC__bitreader_read_raw_uint32(HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0 | 0, $1 + 20 | 0 | 0, HEAP32[GOT_data_internal_FLAC__STREAM_METADATA_PICTURE_DEPTH_LEN >> 2] | 0 | 0) | 0)) {
    break label$1
   }
   if (!(FLAC__bitreader_read_raw_uint32(HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0 | 0, $1 + 24 | 0 | 0, HEAP32[GOT_data_internal_FLAC__STREAM_METADATA_PICTURE_COLORS_LEN >> 2] | 0 | 0) | 0)) {
    break label$1
   }
   if (!(FLAC__bitreader_read_raw_uint32(HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0 | 0, $1 + 28 | 0 | 0, HEAP32[GOT_data_internal_FLAC__STREAM_METADATA_PICTURE_DATA_LENGTH_LEN >> 2] | 0 | 0) | 0)) {
    break label$1
   }
   $4 = HEAP32[($1 + 28 | 0) >> 2] | 0;
   $5 = dlmalloc(($4 ? $4 : 1) | 0) | 0;
   HEAP32[($1 + 32 | 0) >> 2] = $5;
   label$14 : {
    if ($5) {
     break label$14
    }
    HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] = 8;
    break label$1;
   }
   label$15 : {
    if (!$4) {
     break label$15
    }
    if (!(FLAC__bitreader_read_byte_block_aligned_no_crc(HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0 | 0, $5 | 0, $4 | 0) | 0)) {
     break label$1
    }
   }
   $3 = 1;
  }
  __stack_pointer = $2 + 16 | 0;
  return $3 | 0;
 }
 
 function read_residual_partitioned_rice_($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var $7 = 0, $6 = 0, $8 = 0, $12 = 0, $13 = 0, $9 = 0, $10 = 0, $11 = 0;
  $6 = __stack_pointer - 16 | 0;
  __stack_pointer = $6;
  $7 = HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 1136 | 0) >> 2] | 0;
  $8 = GOT_data_internal_FLAC__ENTROPY_CODING_METHOD_PARTITIONED_RICE_ESCAPE_PARAMETER;
  $9 = HEAP32[($5 ? GOT_data_internal_FLAC__ENTROPY_CODING_METHOD_PARTITIONED_RICE2_ESCAPE_PARAMETER : $8) >> 2] | 0;
  $8 = GOT_data_internal_FLAC__ENTROPY_CODING_METHOD_PARTITIONED_RICE_PARAMETER_LEN;
  $10 = HEAP32[($5 ? GOT_data_internal_FLAC__ENTROPY_CODING_METHOD_PARTITIONED_RICE2_PARAMETER_LEN : $8) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (!(FLAC__format_entropy_coding_method_partitioned_rice_contents_ensure_size($3 | 0, ($2 >>> 0 > 6 >>> 0 ? $2 : 6) | 0) | 0)) {
     break label$2
    }
    $8 = $2 ? $7 >>> $2 | 0 : $7 - $1 | 0;
    $11 = HEAP32[GOT_data_internal_FLAC__ENTROPY_CODING_METHOD_PARTITIONED_RICE_RAW_LEN >> 2] | 0;
    $12 = 0;
    $5 = 0;
    label$3 : while (1) {
     label$4 : {
      if (FLAC__bitreader_read_raw_uint32(HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0 | 0, $6 + 12 | 0 | 0, $10 | 0) | 0) {
       break label$4
      }
      $13 = 0;
      break label$1;
     }
     $7 = $12 << 2 | 0;
     HEAP32[((HEAP32[$3 >> 2] | 0) + $7 | 0) >> 2] = HEAP32[($6 + 12 | 0) >> 2] | 0;
     label$5 : {
      label$6 : {
       if ((HEAP32[($6 + 12 | 0) >> 2] | 0) >>> 0 >= $9 >>> 0) {
        break label$6
       }
       $13 = 0;
       HEAP32[((HEAP32[($3 + 4 | 0) >> 2] | 0) + $7 | 0) >> 2] = 0;
       $7 = $8 - ($2 ? ($12 ? 0 : $1) : 0) | 0;
       if (!(FLAC__bitreader_read_rice_signed_block(HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0 | 0, $4 + ($5 << 2 | 0) | 0 | 0, $7 | 0, HEAP32[($6 + 12 | 0) >> 2] | 0 | 0) | 0)) {
        break label$1
       }
       $5 = $7 + $5 | 0;
       break label$5;
      }
      label$7 : {
       if (FLAC__bitreader_read_raw_uint32(HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0 | 0, $6 + 12 | 0 | 0, $11 | 0) | 0) {
        break label$7
       }
       $13 = 0;
       break label$1;
      }
      HEAP32[((HEAP32[($3 + 4 | 0) >> 2] | 0) + $7 | 0) >> 2] = HEAP32[($6 + 12 | 0) >> 2] | 0;
      $7 = $2 ? ($12 ? 0 : $1) : 0;
      if ($7 >>> 0 >= $8 >>> 0) {
       break label$5
      }
      label$8 : while (1) {
       label$9 : {
        if (FLAC__bitreader_read_raw_int32(HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0 | 0, $6 + 8 | 0 | 0, HEAP32[($6 + 12 | 0) >> 2] | 0 | 0) | 0) {
         break label$9
        }
        $13 = 0;
        break label$1;
       }
       HEAP32[($4 + ($5 << 2 | 0) | 0) >> 2] = HEAP32[($6 + 8 | 0) >> 2] | 0;
       $5 = $5 + 1 | 0;
       $7 = $7 + 1 | 0;
       if (($7 | 0) != ($8 | 0)) {
        continue label$8
       }
       break label$8;
      };
     }
     $13 = 1;
     $12 = $12 + 1 | 0;
     if (!($12 >>> $2 | 0)) {
      continue label$3
     }
     break label$1;
    };
   }
   HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] = 8;
   $13 = 0;
  }
  __stack_pointer = $6 + 16 | 0;
  return $13 | 0;
 }
 
 function write_audio_frame_to_client_($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $4 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, i64toi32_i32$5 = 0, $6$hi = 0, $3 = 0, $8 = 0, $6 = 0, $13 = 0, $7$hi = 0, $10 = 0, $12 = 0, $9 = 0, $11 = 0, $5$hi = 0, $7 = 0, $5 = 0, $36 = 0, $36$hi = 0, $39$hi = 0, $139 = 0, $141 = 0, $141$hi = 0, $143 = 0, $143$hi = 0;
  $3 = __stack_pointer - 32 | 0;
  __stack_pointer = $3;
  label$1 : {
   label$2 : {
    $4 = HEAP32[($0 + 4 | 0) >> 2] | 0;
    if (!(HEAP32[($4 + 3632 | 0) >> 2] | 0)) {
     break label$2
    }
    i64toi32_i32$2 = $1;
    i64toi32_i32$0 = HEAP32[$1 >> 2] | 0;
    i64toi32_i32$1 = 0;
    $5 = i64toi32_i32$0;
    $5$hi = i64toi32_i32$1;
    i64toi32_i32$2 = $1;
    i64toi32_i32$1 = HEAP32[($1 + 24 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[($1 + 28 | 0) >> 2] | 0;
    $6 = i64toi32_i32$1;
    $6$hi = i64toi32_i32$0;
    HEAP32[($4 + 6156 | 0) >> 2] = 1;
    i64toi32_i32$2 = $4;
    i64toi32_i32$0 = HEAP32[($4 + 6144 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($4 + 6148 | 0) >> 2] | 0;
    $7 = i64toi32_i32$0;
    $7$hi = i64toi32_i32$1;
    __memcpy($4 + 3752 | 0 | 0, $1 | 0, 2384 | 0) | 0;
    $4 = 0;
    i64toi32_i32$1 = $6$hi;
    i64toi32_i32$1 = $7$hi;
    i64toi32_i32$2 = i64toi32_i32$0;
    i64toi32_i32$0 = $6$hi;
    i64toi32_i32$3 = $6;
    if (i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0) {
     break label$1
    }
    i64toi32_i32$2 = $7$hi;
    $36 = $7;
    $36$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $6$hi;
    i64toi32_i32$2 = $5$hi;
    i64toi32_i32$2 = $6$hi;
    i64toi32_i32$3 = $6;
    i64toi32_i32$1 = $5$hi;
    i64toi32_i32$0 = $5;
    i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
    i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    $39$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $36$hi;
    i64toi32_i32$2 = $36;
    i64toi32_i32$3 = $39$hi;
    i64toi32_i32$0 = i64toi32_i32$4;
    if (i64toi32_i32$5 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$2 >>> 0 >= i64toi32_i32$0 >>> 0 | 0) | 0) {
     break label$1
    }
    $8 = HEAP32[($0 + 4 | 0) >> 2] | 0;
    HEAP32[($8 + 3632 | 0) >> 2] = 0;
    label$3 : {
     i64toi32_i32$2 = $7$hi;
     i64toi32_i32$2 = $6$hi;
     i64toi32_i32$2 = $7$hi;
     i64toi32_i32$0 = $7;
     i64toi32_i32$5 = $6$hi;
     i64toi32_i32$3 = $6;
     i64toi32_i32$1 = i64toi32_i32$0 - i64toi32_i32$3 | 0;
     i64toi32_i32$4 = (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) + $6$hi | 0;
     i64toi32_i32$4 = i64toi32_i32$2 - i64toi32_i32$4 | 0;
     $6 = i64toi32_i32$1;
     $6$hi = i64toi32_i32$4;
     $9 = i64toi32_i32$1;
     if (!i64toi32_i32$1) {
      break label$3
     }
     label$4 : {
      $1 = HEAP32[($1 + 8 | 0) >> 2] | 0;
      if (!$1) {
       break label$4
      }
      $10 = $1 & 3 | 0;
      $4 = 0;
      label$5 : {
       if (($1 + -1 | 0) >>> 0 < 3 >>> 0) {
        break label$5
       }
       $11 = $1 & -4 | 0;
       $4 = 0;
       label$6 : while (1) {
        $1 = $4 << 2 | 0;
        $12 = $9 << 2 | 0;
        HEAP32[($3 + $1 | 0) >> 2] = (HEAP32[($2 + $1 | 0) >> 2] | 0) + $12 | 0;
        $13 = $1 | 4 | 0;
        HEAP32[($3 + $13 | 0) >> 2] = (HEAP32[($2 + $13 | 0) >> 2] | 0) + $12 | 0;
        $13 = $1 | 8 | 0;
        HEAP32[($3 + $13 | 0) >> 2] = (HEAP32[($2 + $13 | 0) >> 2] | 0) + $12 | 0;
        $1 = $1 | 12 | 0;
        HEAP32[($3 + $1 | 0) >> 2] = (HEAP32[($2 + $1 | 0) >> 2] | 0) + $12 | 0;
        $4 = $4 + 4 | 0;
        $11 = $11 + -4 | 0;
        if ($11) {
         continue label$6
        }
        break label$6;
       };
      }
      if (!$10) {
       break label$4
      }
      label$7 : while (1) {
       $1 = $4 << 2 | 0;
       HEAP32[($3 + $1 | 0) >> 2] = (HEAP32[($2 + $1 | 0) >> 2] | 0) + ($9 << 2 | 0) | 0;
       $4 = $4 + 1 | 0;
       $10 = $10 + -1 | 0;
       if ($10) {
        continue label$7
       }
       break label$7;
      };
     }
     HEAP32[($8 + 3752 | 0) >> 2] = (HEAP32[($8 + 3752 | 0) >> 2] | 0) - $9 | 0;
     $4 = $8 + 3776 | 0;
     $139 = $4;
     i64toi32_i32$2 = $4;
     i64toi32_i32$4 = HEAP32[$4 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[($4 + 4 | 0) >> 2] | 0;
     $141 = i64toi32_i32$4;
     $141$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $6$hi;
     i64toi32_i32$2 = $6;
     i64toi32_i32$4 = 0;
     i64toi32_i32$3 = -1;
     i64toi32_i32$4 = i64toi32_i32$0 & i64toi32_i32$4 | 0;
     $143 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
     $143$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $141$hi;
     i64toi32_i32$0 = $141;
     i64toi32_i32$2 = $143$hi;
     i64toi32_i32$3 = $143;
     i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
     i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
     }
     i64toi32_i32$0 = $139;
     HEAP32[i64toi32_i32$0 >> 2] = i64toi32_i32$5;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     $4 = HEAP32[($0 + 4 | 0) >> 2] | 0;
     $4 = FUNCTION_TABLE[HEAP32[($4 + 24 | 0) >> 2] | 0 | 0]($0, $4 + 3752 | 0, $3, HEAP32[($4 + 48 | 0) >> 2] | 0) | 0;
     break label$1;
    }
    $4 = FUNCTION_TABLE[HEAP32[($8 + 24 | 0) >> 2] | 0 | 0]($0, $1, $2, HEAP32[($8 + 48 | 0) >> 2] | 0) | 0;
    break label$1;
   }
   label$8 : {
    label$9 : {
     if (HEAP32[($4 + 248 | 0) >> 2] | 0) {
      break label$9
     }
     HEAP32[($4 + 3624 | 0) >> 2] = 0;
     break label$8;
    }
    if (!(HEAP32[($4 + 3624 | 0) >> 2] | 0)) {
     break label$8
    }
    label$10 : {
     if (FLAC__MD5Accumulate($4 + 3636 | 0 | 0, $2 | 0, HEAP32[($1 + 8 | 0) >> 2] | 0 | 0, HEAP32[$1 >> 2] | 0 | 0, ((HEAP32[($1 + 16 | 0) >> 2] | 0) + 7 | 0) >>> 3 | 0 | 0) | 0) {
      break label$10
     }
     $4 = 1;
     break label$1;
    }
    $4 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   }
   $4 = FUNCTION_TABLE[HEAP32[($4 + 24 | 0) >> 2] | 0 | 0]($0, $1, $2, HEAP32[($4 + 48 | 0) >> 2] | 0) | 0;
  }
  __stack_pointer = $3 + 32 | 0;
  return $4 | 0;
 }
 
 function FLAC__stream_decoder_process_until_end_of_metadata($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : while (1) {
      $1 = 1;
      $2 = 0;
      label$5 : {
       switch (HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] | 0 | 0) {
       case 0:
        if (find_metadata_($0 | 0) | 0) {
         continue label$4
        }
        break label$3;
       case 2:
       case 3:
       case 4:
       case 7:
        break label$2;
       case 1:
        break label$5;
       default:
        break label$1;
       };
      }
      if (read_metadata_($0 | 0) | 0) {
       continue label$4
      }
      break label$4;
     };
    }
    $1 = 0;
   }
   $2 = $1;
  }
  return $2 | 0;
 }
 
 function FLAC__stream_decoder_process_until_end_of_stream($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  $2 = 1;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : while (1) {
      $3 = 0;
      label$5 : {
       switch (HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] | 0 | 0) {
       case 0:
        if (find_metadata_($0 | 0) | 0) {
         continue label$4
        }
        break label$3;
       case 1:
        if (read_metadata_($0 | 0) | 0) {
         continue label$4
        }
        break label$3;
       case 2:
        if (frame_sync_($0 | 0) | 0) {
         continue label$4
        }
        break label$2;
       case 4:
       case 7:
        break label$2;
       case 3:
        break label$5;
       default:
        break label$1;
       };
      }
      if (read_frame_($0 | 0, $1 + 12 | 0 | 0, 1 | 0) | 0) {
       continue label$4
      }
      break label$4;
     };
    }
    $2 = 0;
   }
   $3 = $2;
  }
  __stack_pointer = $1 + 16 | 0;
  return $3 | 0;
 }
 
 function read_callback_proxy_($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0;
  $4 = 5;
  label$1 : {
   $0 = FUNCTION_TABLE[HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0]($0, $1, $2, $3) | 0;
   if ($0 >>> 0 > 2 >>> 0) {
    break label$1
   }
   $4 = HEAP32[((GOT_data_internal___memory_base + 7856 | 0) + ($0 << 2 | 0) | 0) >> 2] | 0;
  }
  return $4 | 0;
 }
 
 function FLAC__bitwriter_new() {
  return dlcalloc(1 | 0, 20 | 0) | 0 | 0;
 }
 
 function FLAC__bitwriter_delete($0) {
  $0 = $0 | 0;
  var $1 = 0;
  label$1 : {
   $1 = HEAP32[$0 >> 2] | 0;
   if (!$1) {
    break label$1
   }
   dlfree($1 | 0);
  }
  dlfree($0 | 0);
 }
 
 function FLAC__bitwriter_free($0) {
  $0 = $0 | 0;
  var $1 = 0;
  label$1 : {
   $1 = HEAP32[$0 >> 2] | 0;
   if (!$1) {
    break label$1
   }
   dlfree($1 | 0);
  }
  HEAP32[($0 + 16 | 0) >> 2] = 0;
  HEAP32[$0 >> 2] = 0;
  HEAP32[($0 + 8 | 0) >> 2] = 0;
  HEAP32[($0 + 12 | 0) >> 2] = 0;
 }
 
 function FLAC__bitwriter_init($0) {
  $0 = $0 | 0;
  var $1 = 0;
  HEAP32[($0 + 16 | 0) >> 2] = 0;
  HEAP32[($0 + 8 | 0) >> 2] = 8192;
  HEAP32[($0 + 12 | 0) >> 2] = 0;
  $1 = dlmalloc(32768 | 0) | 0;
  HEAP32[$0 >> 2] = $1;
  return ($1 | 0) != (0 | 0) | 0;
 }
 
 function FLAC__bitwriter_clear($0) {
  $0 = $0 | 0;
  var i64toi32_i32$1 = 0;
  i64toi32_i32$1 = $0;
  HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 16 | 0) >> 2] = 0;
 }
 
 function FLAC__bitwriter_get_write_crc16($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  label$1 : {
   label$2 : {
    if (FLAC__bitwriter_get_buffer($0 | 0, $2 + 12 | 0 | 0, $2 + 8 | 0 | 0) | 0) {
     break label$2
    }
    $0 = 0;
    break label$1;
   }
   (wasm2js_i32$0 = $1, wasm2js_i32$1 = FLAC__crc16(HEAP32[($2 + 12 | 0) >> 2] | 0 | 0, HEAP32[($2 + 8 | 0) >> 2] | 0 | 0) | 0), HEAP16[wasm2js_i32$0 >> 1] = wasm2js_i32$1;
   $0 = 1;
  }
  __stack_pointer = $2 + 16 | 0;
  return $0 | 0;
 }
 
 function FLAC__bitwriter_get_buffer($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0, $5 = 0, $7 = 0, $6 = 0, $67 = 0;
  $3 = 0;
  label$1 : {
   $4 = HEAP32[($0 + 16 | 0) >> 2] | 0;
   if ($4 & 7 | 0) {
    break label$1
   }
   label$2 : {
    label$3 : {
     if ($4) {
      break label$3
     }
     $5 = HEAP32[$0 >> 2] | 0;
     $3 = 0;
     break label$2;
    }
    label$4 : {
     $3 = HEAP32[($0 + 12 | 0) >> 2] | 0;
     if (($3 | 0) != (HEAP32[($0 + 8 | 0) >> 2] | 0 | 0)) {
      break label$4
     }
     $5 = ($4 + 63 | 0) >>> 5 | 0;
     $6 = $3 + $5 | 0;
     if ($6 >>> 0 <= $3 >>> 0) {
      break label$4
     }
     $3 = 0;
     $7 = HEAP32[$0 >> 2] | 0;
     label$5 : {
      label$6 : {
       $4 = $5 & 1023 | 0;
       $4 = ($4 ? 1024 - $4 | 0 : 0) + $6 | 0;
       if (!$4) {
        break label$6
       }
       if ($4 >>> 0 > 1073741823 >>> 0) {
        break label$1
       }
       $5 = dlrealloc($7 | 0, $4 << 2 | 0 | 0) | 0;
       if ($5) {
        break label$5
       }
       dlfree($7 | 0);
       return 0 | 0;
      }
      $3 = 0;
      $5 = dlrealloc($7 | 0, 0 | 0) | 0;
      if (!$5) {
       break label$1
      }
     }
     HEAP32[($0 + 8 | 0) >> 2] = $4;
     HEAP32[$0 >> 2] = $5;
     $3 = HEAP32[($0 + 12 | 0) >> 2] | 0;
     $4 = HEAP32[($0 + 16 | 0) >> 2] | 0;
    }
    $5 = HEAP32[$0 >> 2] | 0;
    $67 = $5 + ($3 << 2 | 0) | 0;
    $3 = (HEAP32[($0 + 4 | 0) >> 2] | 0) << (32 - $4 | 0) | 0;
    HEAP32[$67 >> 2] = $3 << 24 | 0 | (($3 << 8 | 0) & 16711680 | 0) | 0 | (($3 >>> 8 | 0) & 65280 | 0 | ($3 >>> 24 | 0) | 0) | 0;
    $3 = (HEAP32[($0 + 16 | 0) >> 2] | 0) >>> 3 | 0;
   }
   HEAP32[$1 >> 2] = $5;
   HEAP32[$2 >> 2] = $3 + ((HEAP32[($0 + 12 | 0) >> 2] | 0) << 2 | 0) | 0;
   $3 = 1;
  }
  return $3 | 0;
 }
 
 function FLAC__bitwriter_release_buffer($0) {
  $0 = $0 | 0;
 }
 
 function FLAC__bitwriter_get_write_crc8($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  label$1 : {
   label$2 : {
    if (FLAC__bitwriter_get_buffer($0 | 0, $2 + 12 | 0 | 0, $2 + 8 | 0 | 0) | 0) {
     break label$2
    }
    $0 = 0;
    break label$1;
   }
   (wasm2js_i32$0 = $1, wasm2js_i32$1 = FLAC__crc8(HEAP32[($2 + 12 | 0) >> 2] | 0 | 0, HEAP32[($2 + 8 | 0) >> 2] | 0 | 0) | 0), HEAP8[wasm2js_i32$0 >> 0] = wasm2js_i32$1;
   $0 = 1;
  }
  __stack_pointer = $2 + 16 | 0;
  return $0 | 0;
 }
 
 function FLAC__bitwriter_write_zeroes($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
  label$1 : {
   label$2 : {
    if (!$1) {
     break label$2
    }
    label$3 : {
     $2 = HEAP32[($0 + 8 | 0) >> 2] | 0;
     $3 = HEAP32[($0 + 12 | 0) >> 2] | 0;
     if ($2 >>> 0 > ($3 + $1 | 0) >>> 0) {
      break label$3
     }
     $4 = ((($1 + (HEAP32[($0 + 16 | 0) >> 2] | 0) | 0) + 31 | 0) >>> 5 | 0) + $3 | 0;
     if ($4 >>> 0 <= $2 >>> 0) {
      break label$3
     }
     $3 = 0;
     $5 = HEAP32[$0 >> 2] | 0;
     label$4 : {
      label$5 : {
       $2 = ($4 - $2 | 0) & 1023 | 0;
       $2 = ($2 ? 1024 - $2 | 0 : 0) + $4 | 0;
       if (!$2) {
        break label$5
       }
       if ($2 >>> 0 > 1073741823 >>> 0) {
        break label$1
       }
       $4 = dlrealloc($5 | 0, $2 << 2 | 0 | 0) | 0;
       if ($4) {
        break label$4
       }
       dlfree($5 | 0);
       return 0 | 0;
      }
      $3 = 0;
      $4 = dlrealloc($5 | 0, 0 | 0) | 0;
      if (!$4) {
       break label$1
      }
     }
     HEAP32[($0 + 8 | 0) >> 2] = $2;
     HEAP32[$0 >> 2] = $4;
    }
    label$6 : {
     $3 = HEAP32[($0 + 16 | 0) >> 2] | 0;
     if (!$3) {
      break label$6
     }
     $2 = 32 - $3 | 0;
     $2 = $2 >>> 0 < $1 >>> 0 ? $2 : $1;
     $4 = $2 + $3 | 0;
     HEAP32[($0 + 16 | 0) >> 2] = $4;
     $3 = (HEAP32[($0 + 4 | 0) >> 2] | 0) << $2 | 0;
     HEAP32[($0 + 4 | 0) >> 2] = $3;
     if (($4 | 0) != (32 | 0)) {
      break label$2
     }
     $4 = HEAP32[($0 + 12 | 0) >> 2] | 0;
     HEAP32[($0 + 12 | 0) >> 2] = $4 + 1 | 0;
     HEAP32[((HEAP32[$0 >> 2] | 0) + ($4 << 2 | 0) | 0) >> 2] = $3 << 24 | 0 | (($3 << 8 | 0) & 16711680 | 0) | 0 | (($3 >>> 8 | 0) & 65280 | 0 | ($3 >>> 24 | 0) | 0) | 0;
     HEAP32[($0 + 16 | 0) >> 2] = 0;
     $1 = $1 - $2 | 0;
    }
    label$7 : {
     if ($1 >>> 0 < 32 >>> 0) {
      break label$7
     }
     $3 = HEAP32[$0 >> 2] | 0;
     label$8 : {
      $5 = $1 + -32 | 0;
      $2 = (($5 >>> 5 | 0) + 1 | 0) & 3 | 0;
      if (!$2) {
       break label$8
      }
      label$9 : while (1) {
       $4 = HEAP32[($0 + 12 | 0) >> 2] | 0;
       HEAP32[($0 + 12 | 0) >> 2] = $4 + 1 | 0;
       HEAP32[($3 + ($4 << 2 | 0) | 0) >> 2] = 0;
       $1 = $1 + -32 | 0;
       $2 = $2 + -1 | 0;
       if ($2) {
        continue label$9
       }
       break label$9;
      };
     }
     if ($5 >>> 0 < 96 >>> 0) {
      break label$7
     }
     label$10 : while (1) {
      $2 = HEAP32[($0 + 12 | 0) >> 2] | 0;
      HEAP32[($0 + 12 | 0) >> 2] = $2 + 1 | 0;
      HEAP32[($3 + ($2 << 2 | 0) | 0) >> 2] = 0;
      $2 = HEAP32[($0 + 12 | 0) >> 2] | 0;
      HEAP32[($0 + 12 | 0) >> 2] = $2 + 1 | 0;
      HEAP32[($3 + ($2 << 2 | 0) | 0) >> 2] = 0;
      $2 = HEAP32[($0 + 12 | 0) >> 2] | 0;
      HEAP32[($0 + 12 | 0) >> 2] = $2 + 1 | 0;
      HEAP32[($3 + ($2 << 2 | 0) | 0) >> 2] = 0;
      $2 = HEAP32[($0 + 12 | 0) >> 2] | 0;
      HEAP32[($0 + 12 | 0) >> 2] = $2 + 1 | 0;
      HEAP32[($3 + ($2 << 2 | 0) | 0) >> 2] = 0;
      $1 = $1 + -128 | 0;
      if ($1 >>> 0 > 31 >>> 0) {
       continue label$10
      }
      break label$10;
     };
    }
    if (!$1) {
     break label$2
    }
    HEAP32[($0 + 16 | 0) >> 2] = $1;
    HEAP32[($0 + 4 | 0) >> 2] = 0;
   }
   $3 = 1;
  }
  return $3 | 0;
 }
 
 function FLAC__bitwriter_write_raw_uint32($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  label$1 : {
   label$2 : {
    if ($2 >>> 0 > 31 >>> 0) {
     break label$2
    }
    $3 = 0;
    if ($1 >>> $2 | 0) {
     break label$1
    }
   }
   $3 = FLAC__bitwriter_write_raw_uint32_nocheck($0 | 0, $1 | 0, $2 | 0) | 0;
  }
  return $3 | 0;
 }
 
 function FLAC__bitwriter_write_raw_uint32_nocheck($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $5 = 0, $4 = 0, $6 = 0;
  $3 = 0;
  label$1 : {
   if (!$0) {
    break label$1
   }
   $4 = HEAP32[$0 >> 2] | 0;
   if (!$4) {
    break label$1
   }
   if ($2 >>> 0 > 32 >>> 0) {
    break label$1
   }
   $3 = 1;
   if (!$2) {
    break label$1
   }
   label$2 : {
    label$3 : {
     $5 = HEAP32[($0 + 8 | 0) >> 2] | 0;
     $3 = HEAP32[($0 + 12 | 0) >> 2] | 0;
     if ($5 >>> 0 <= ($3 + $2 | 0) >>> 0) {
      break label$3
     }
     $5 = $4;
     break label$2;
    }
    label$4 : {
     $6 = ((($2 + (HEAP32[($0 + 16 | 0) >> 2] | 0) | 0) + 31 | 0) >>> 5 | 0) + $3 | 0;
     if ($6 >>> 0 > $5 >>> 0) {
      break label$4
     }
     $5 = $4;
     break label$2;
    }
    $3 = 0;
    label$5 : {
     label$6 : {
      $5 = ($6 - $5 | 0) & 1023 | 0;
      $6 = ($5 ? 1024 - $5 | 0 : 0) + $6 | 0;
      if (!$6) {
       break label$6
      }
      if ($6 >>> 0 > 1073741823 >>> 0) {
       break label$1
      }
      $5 = dlrealloc($4 | 0, $6 << 2 | 0 | 0) | 0;
      if ($5) {
       break label$5
      }
      dlfree($4 | 0);
      return 0 | 0;
     }
     $3 = 0;
     $5 = dlrealloc($4 | 0, 0 | 0) | 0;
     if (!$5) {
      break label$1
     }
    }
    HEAP32[($0 + 8 | 0) >> 2] = $6;
    HEAP32[$0 >> 2] = $5;
   }
   label$7 : {
    $3 = HEAP32[($0 + 16 | 0) >> 2] | 0;
    $4 = 32 - $3 | 0;
    if ($4 >>> 0 <= $2 >>> 0) {
     break label$7
    }
    HEAP32[($0 + 16 | 0) >> 2] = $3 + $2 | 0;
    HEAP32[($0 + 4 | 0) >> 2] = (HEAP32[($0 + 4 | 0) >> 2] | 0) << $2 | 0 | $1 | 0;
    return 1 | 0;
   }
   label$8 : {
    if (!$3) {
     break label$8
    }
    $2 = $2 - $4 | 0;
    HEAP32[($0 + 16 | 0) >> 2] = $2;
    $3 = HEAP32[($0 + 12 | 0) >> 2] | 0;
    HEAP32[($0 + 12 | 0) >> 2] = $3 + 1 | 0;
    $2 = (HEAP32[($0 + 4 | 0) >> 2] | 0) << $4 | 0 | ($1 >>> $2 | 0) | 0;
    HEAP32[($5 + ($3 << 2 | 0) | 0) >> 2] = $2 << 24 | 0 | (($2 << 8 | 0) & 16711680 | 0) | 0 | (($2 >>> 8 | 0) & 65280 | 0 | ($2 >>> 24 | 0) | 0) | 0;
    HEAP32[($0 + 4 | 0) >> 2] = $1;
    return 1 | 0;
   }
   $3 = 1;
   $2 = HEAP32[($0 + 12 | 0) >> 2] | 0;
   HEAP32[($0 + 12 | 0) >> 2] = $2 + 1 | 0;
   HEAP32[($5 + ($2 << 2 | 0) | 0) >> 2] = $1 << 24 | 0 | (($1 << 8 | 0) & 16711680 | 0) | 0 | (($1 >>> 8 | 0) & 65280 | 0 | ($1 >>> 24 | 0) | 0) | 0;
  }
  return $3 | 0;
 }
 
 function FLAC__bitwriter_write_raw_int32($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  return FLAC__bitwriter_write_raw_uint32_nocheck($0 | 0, ($2 >>> 0 < 32 >>> 0 ? (-1 << $2 | 0) ^ -1 | 0 : -1) & $1 | 0 | 0, $2 | 0) | 0 | 0;
 }
 
 function FLAC__bitwriter_write_raw_uint64($0, $1, $1$hi, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $1$hi = $1$hi | 0;
  $2 = $2 | 0;
  var $3 = 0, i64toi32_i32$4 = 0, $4 = 0, i64toi32_i32$0 = 0, i64toi32_i32$3 = 0, $10 = 0, i64toi32_i32$2 = 0;
  label$1 : {
   label$2 : {
    if ($2 >>> 0 < 33 >>> 0) {
     break label$2
    }
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$2 = $1;
    i64toi32_i32$3 = 32;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     $10 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0
    } else {
     $10 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0
    }
    $3 = $10;
    $4 = 0;
    label$3 : {
     $2 = $2 + -32 | 0;
     if ($2 >>> 0 > 31 >>> 0) {
      break label$3
     }
     if ($3 >>> $2 | 0) {
      break label$1
     }
    }
    if (!(FLAC__bitwriter_write_raw_uint32_nocheck($0 | 0, $3 | 0, $2 | 0) | 0)) {
     break label$1
    }
    return (FLAC__bitwriter_write_raw_uint32_nocheck($0 | 0, $1 | 0, 32 | 0) | 0 | 0) != (0 | 0) | 0;
   }
   $3 = $1;
   label$4 : {
    if (($2 | 0) == (32 | 0)) {
     break label$4
    }
    $4 = 0;
    if ($3 >>> $2 | 0) {
     break label$1
    }
   }
   $4 = FLAC__bitwriter_write_raw_uint32_nocheck($0 | 0, $3 | 0, $2 | 0) | 0;
  }
  return $4 | 0;
 }
 
 function FLAC__bitwriter_write_raw_uint32_little_endian($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = 0;
  label$1 : {
   if (!(FLAC__bitwriter_write_raw_uint32_nocheck($0 | 0, $1 & 255 | 0 | 0, 8 | 0) | 0)) {
    break label$1
   }
   if (!(FLAC__bitwriter_write_raw_uint32_nocheck($0 | 0, ($1 >>> 8 | 0) & 255 | 0 | 0, 8 | 0) | 0)) {
    break label$1
   }
   if (!(FLAC__bitwriter_write_raw_uint32_nocheck($0 | 0, ($1 >>> 16 | 0) & 255 | 0 | 0, 8 | 0) | 0)) {
    break label$1
   }
   $2 = (FLAC__bitwriter_write_raw_uint32_nocheck($0 | 0, $1 >>> 24 | 0 | 0, 8 | 0) | 0 | 0) != (0 | 0);
  }
  return $2 | 0;
 }
 
 function FLAC__bitwriter_write_byte_block($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $4 = 0, $3 = 0, $5 = 0, $6 = 0;
  label$1 : {
   label$2 : {
    $3 = HEAP32[($0 + 8 | 0) >> 2] | 0;
    $4 = HEAP32[($0 + 12 | 0) >> 2] | 0;
    if ($3 >>> 0 > ((($2 >>> 2 | 0) + $4 | 0) + 1 | 0) >>> 0) {
     break label$2
    }
    $5 = (((($2 << 3 | 0) + (HEAP32[($0 + 16 | 0) >> 2] | 0) | 0) + 31 | 0) >>> 5 | 0) + $4 | 0;
    if ($5 >>> 0 <= $3 >>> 0) {
     break label$2
    }
    $4 = 0;
    $6 = HEAP32[$0 >> 2] | 0;
    label$3 : {
     label$4 : {
      $3 = ($5 - $3 | 0) & 1023 | 0;
      $3 = ($3 ? 1024 - $3 | 0 : 0) + $5 | 0;
      if (!$3) {
       break label$4
      }
      if ($3 >>> 0 > 1073741823 >>> 0) {
       break label$1
      }
      $5 = dlrealloc($6 | 0, $3 << 2 | 0 | 0) | 0;
      if ($5) {
       break label$3
      }
      dlfree($6 | 0);
      return 0 | 0;
     }
     $4 = 0;
     $5 = dlrealloc($6 | 0, 0 | 0) | 0;
     if (!$5) {
      break label$1
     }
    }
    HEAP32[($0 + 8 | 0) >> 2] = $3;
    HEAP32[$0 >> 2] = $5;
   }
   $4 = 1;
   if (!$2) {
    break label$1
   }
   $4 = 0;
   label$5 : {
    label$6 : while (1) {
     if (!(FLAC__bitwriter_write_raw_uint32_nocheck($0 | 0, HEAPU8[($1 + $4 | 0) >> 0] | 0 | 0, 8 | 0) | 0)) {
      break label$5
     }
     $4 = $4 + 1 | 0;
     if (($4 | 0) != ($2 | 0)) {
      continue label$6
     }
     break label$6;
    };
    return 1 | 0;
   }
   $4 = 0;
  }
  return $4 | 0;
 }
 
 function FLAC__bitwriter_write_unary_unsigned($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  label$1 : {
   if ($1 >>> 0 > 31 >>> 0) {
    break label$1
   }
   return FLAC__bitwriter_write_raw_uint32_nocheck($0 | 0, 1 | 0, $1 + 1 | 0 | 0) | 0 | 0;
  }
  label$2 : {
   if (FLAC__bitwriter_write_zeroes($0 | 0, $1 | 0) | 0) {
    break label$2
   }
   return 0 | 0;
  }
  return (FLAC__bitwriter_write_raw_uint32_nocheck($0 | 0, 1 | 0, 1 | 0) | 0 | 0) != (0 | 0) | 0;
 }
 
 function FLAC__bitwriter_write_rice_signed_block($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $11 = 0, $4 = 0, $8 = 0, $10 = 0, $9 = 0, $12 = 0, $5 = 0, $6 = 0, $7 = 0, $62 = 0;
  $4 = 1;
  label$1 : {
   if (!$2) {
    break label$1
   }
   $5 = $3 + 1 | 0;
   $6 = -1 << $3 | 0;
   $7 = -1 >>> (31 - $3 | 0) | 0;
   label$2 : while (1) {
    $8 = HEAP32[$1 >> 2] | 0;
    $9 = ($8 << 1 | 0) ^ ($8 >> 31 | 0) | 0;
    $8 = $9 >>> $3 | 0;
    $10 = $8 + $5 | 0;
    $11 = HEAP32[($0 + 16 | 0) >> 2] | 0;
    $4 = $10 + $11 | 0;
    label$3 : {
     label$4 : {
      if (!$11) {
       break label$4
      }
      if ($4 >>> 0 > 31 >>> 0) {
       break label$4
      }
      HEAP32[($0 + 16 | 0) >> 2] = $4;
      HEAP32[($0 + 4 | 0) >> 2] = (HEAP32[($0 + 4 | 0) >> 2] | 0) << $10 | 0 | (($9 | $6 | 0) & $7 | 0) | 0;
      break label$3;
     }
     label$5 : {
      $10 = HEAP32[($0 + 8 | 0) >> 2] | 0;
      $62 = $11 + $8 | 0;
      $11 = HEAP32[($0 + 12 | 0) >> 2] | 0;
      if ($10 >>> 0 > (($62 + $11 | 0) + 1 | 0) >>> 0) {
       break label$5
      }
      $11 = $11 + (($4 + 31 | 0) >>> 5 | 0) | 0;
      if ($11 >>> 0 <= $10 >>> 0) {
       break label$5
      }
      $12 = HEAP32[$0 >> 2] | 0;
      label$6 : {
       label$7 : {
        $4 = ($11 - $10 | 0) & 1023 | 0;
        $11 = ($4 ? 1024 - $4 | 0 : 0) + $11 | 0;
        if (!$11) {
         break label$7
        }
        $4 = 0;
        if ($11 >>> 0 > 1073741823 >>> 0) {
         break label$1
        }
        $10 = dlrealloc($12 | 0, $11 << 2 | 0 | 0) | 0;
        if ($10) {
         break label$6
        }
        dlfree($12 | 0);
        return 0 | 0;
       }
       $4 = 0;
       $10 = dlrealloc($12 | 0, 0 | 0) | 0;
       if (!$10) {
        break label$1
       }
      }
      HEAP32[($0 + 8 | 0) >> 2] = $11;
      HEAP32[$0 >> 2] = $10;
     }
     label$8 : {
      if (!$8) {
       break label$8
      }
      label$9 : {
       label$10 : {
        $11 = HEAP32[($0 + 16 | 0) >> 2] | 0;
        if (!$11) {
         break label$10
        }
        $4 = HEAP32[($0 + 4 | 0) >> 2] | 0;
        label$11 : {
         $10 = 32 - $11 | 0;
         if ($8 >>> 0 >= $10 >>> 0) {
          break label$11
         }
         HEAP32[($0 + 4 | 0) >> 2] = $4 << $8 | 0;
         $8 = $11 + $8 | 0;
         break label$9;
        }
        $11 = $4 << $10 | 0;
        HEAP32[($0 + 4 | 0) >> 2] = $11;
        $4 = HEAP32[($0 + 12 | 0) >> 2] | 0;
        HEAP32[($0 + 12 | 0) >> 2] = $4 + 1 | 0;
        HEAP32[((HEAP32[$0 >> 2] | 0) + ($4 << 2 | 0) | 0) >> 2] = $11 << 24 | 0 | (($11 << 8 | 0) & 16711680 | 0) | 0 | (($11 >>> 8 | 0) & 65280 | 0 | ($11 >>> 24 | 0) | 0) | 0;
        HEAP32[($0 + 16 | 0) >> 2] = 0;
        $8 = $8 - $10 | 0;
       }
       label$12 : {
        if ($8 >>> 0 < 32 >>> 0) {
         break label$12
        }
        $11 = HEAP32[$0 >> 2] | 0;
        label$13 : {
         $12 = $8 + -32 | 0;
         $4 = (($12 >>> 5 | 0) + 1 | 0) & 3 | 0;
         if (!$4) {
          break label$13
         }
         label$14 : while (1) {
          $10 = HEAP32[($0 + 12 | 0) >> 2] | 0;
          HEAP32[($0 + 12 | 0) >> 2] = $10 + 1 | 0;
          HEAP32[($11 + ($10 << 2 | 0) | 0) >> 2] = 0;
          $8 = $8 + -32 | 0;
          $4 = $4 + -1 | 0;
          if ($4) {
           continue label$14
          }
          break label$14;
         };
        }
        if ($12 >>> 0 < 96 >>> 0) {
         break label$12
        }
        label$15 : while (1) {
         $4 = HEAP32[($0 + 12 | 0) >> 2] | 0;
         HEAP32[($0 + 12 | 0) >> 2] = $4 + 1 | 0;
         HEAP32[($11 + ($4 << 2 | 0) | 0) >> 2] = 0;
         $4 = HEAP32[($0 + 12 | 0) >> 2] | 0;
         HEAP32[($0 + 12 | 0) >> 2] = $4 + 1 | 0;
         HEAP32[($11 + ($4 << 2 | 0) | 0) >> 2] = 0;
         $4 = HEAP32[($0 + 12 | 0) >> 2] | 0;
         HEAP32[($0 + 12 | 0) >> 2] = $4 + 1 | 0;
         HEAP32[($11 + ($4 << 2 | 0) | 0) >> 2] = 0;
         $4 = HEAP32[($0 + 12 | 0) >> 2] | 0;
         HEAP32[($0 + 12 | 0) >> 2] = $4 + 1 | 0;
         HEAP32[($11 + ($4 << 2 | 0) | 0) >> 2] = 0;
         $8 = $8 + -128 | 0;
         if ($8 >>> 0 > 31 >>> 0) {
          continue label$15
         }
         break label$15;
        };
       }
       if (!$8) {
        break label$8
       }
       HEAP32[($0 + 4 | 0) >> 2] = 0;
      }
      HEAP32[($0 + 16 | 0) >> 2] = $8;
     }
     $8 = ($9 | $6 | 0) & $7 | 0;
     $11 = HEAP32[($0 + 4 | 0) >> 2] | 0;
     label$16 : {
      $10 = HEAP32[($0 + 16 | 0) >> 2] | 0;
      $4 = 32 - $10 | 0;
      if ($5 >>> 0 >= $4 >>> 0) {
       break label$16
      }
      HEAP32[($0 + 16 | 0) >> 2] = $10 + $5 | 0;
      HEAP32[($0 + 4 | 0) >> 2] = $11 << $5 | 0 | $8 | 0;
      break label$3;
     }
     $10 = $5 - $4 | 0;
     HEAP32[($0 + 16 | 0) >> 2] = $10;
     $9 = HEAP32[($0 + 12 | 0) >> 2] | 0;
     HEAP32[($0 + 12 | 0) >> 2] = $9 + 1 | 0;
     $11 = $11 << $4 | 0 | ($8 >>> $10 | 0) | 0;
     HEAP32[((HEAP32[$0 >> 2] | 0) + ($9 << 2 | 0) | 0) >> 2] = $11 << 24 | 0 | (($11 << 8 | 0) & 16711680 | 0) | 0 | (($11 >>> 8 | 0) & 65280 | 0 | ($11 >>> 24 | 0) | 0) | 0;
     HEAP32[($0 + 4 | 0) >> 2] = $8;
    }
    $1 = $1 + 4 | 0;
    $2 = $2 + -1 | 0;
    if ($2) {
     continue label$2
    }
    break label$2;
   };
   $4 = 1;
  }
  return $4 | 0;
 }
 
 function FLAC__bitwriter_write_utf8_uint32($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = 0;
  label$1 : {
   if (($1 | 0) < (0 | 0)) {
    break label$1
   }
   label$2 : {
    if ($1 >>> 0 > 127 >>> 0) {
     break label$2
    }
    return FLAC__bitwriter_write_raw_uint32_nocheck($0 | 0, $1 | 0, 8 | 0) | 0 | 0;
   }
   label$3 : {
    if ($1 >>> 0 > 2047 >>> 0) {
     break label$3
    }
    return ((FLAC__bitwriter_write_raw_uint32_nocheck($0 | 0, $1 >>> 6 | 0 | 192 | 0 | 0, 8 | 0) | 0) & (FLAC__bitwriter_write_raw_uint32_nocheck($0 | 0, $1 & 63 | 0 | 128 | 0 | 0, 8 | 0) | 0) | 0) & 1 | 0 | 0;
   }
   label$4 : {
    if ($1 >>> 0 > 65535 >>> 0) {
     break label$4
    }
    return (((FLAC__bitwriter_write_raw_uint32_nocheck($0 | 0, $1 >>> 12 | 0 | 224 | 0 | 0, 8 | 0) | 0) & (FLAC__bitwriter_write_raw_uint32_nocheck($0 | 0, ($1 >>> 6 | 0) & 63 | 0 | 128 | 0 | 0, 8 | 0) | 0) | 0) & (FLAC__bitwriter_write_raw_uint32_nocheck($0 | 0, $1 & 63 | 0 | 128 | 0 | 0, 8 | 0) | 0) | 0) & 1 | 0 | 0;
   }
   label$5 : {
    if ($1 >>> 0 > 2097151 >>> 0) {
     break label$5
    }
    return ((((FLAC__bitwriter_write_raw_uint32_nocheck($0 | 0, $1 >>> 18 | 0 | 240 | 0 | 0, 8 | 0) | 0) & (FLAC__bitwriter_write_raw_uint32_nocheck($0 | 0, ($1 >>> 12 | 0) & 63 | 0 | 128 | 0 | 0, 8 | 0) | 0) | 0) & (FLAC__bitwriter_write_raw_uint32_nocheck($0 | 0, ($1 >>> 6 | 0) & 63 | 0 | 128 | 0 | 0, 8 | 0) | 0) | 0) & (FLAC__bitwriter_write_raw_uint32_nocheck($0 | 0, $1 & 63 | 0 | 128 | 0 | 0, 8 | 0) | 0) | 0) & 1 | 0 | 0;
   }
   label$6 : {
    if ($1 >>> 0 > 67108863 >>> 0) {
     break label$6
    }
    return (((((FLAC__bitwriter_write_raw_uint32_nocheck($0 | 0, $1 >>> 24 | 0 | 248 | 0 | 0, 8 | 0) | 0) & (FLAC__bitwriter_write_raw_uint32_nocheck($0 | 0, ($1 >>> 18 | 0) & 63 | 0 | 128 | 0 | 0, 8 | 0) | 0) | 0) & (FLAC__bitwriter_write_raw_uint32_nocheck($0 | 0, ($1 >>> 12 | 0) & 63 | 0 | 128 | 0 | 0, 8 | 0) | 0) | 0) & (FLAC__bitwriter_write_raw_uint32_nocheck($0 | 0, ($1 >>> 6 | 0) & 63 | 0 | 128 | 0 | 0, 8 | 0) | 0) | 0) & (FLAC__bitwriter_write_raw_uint32_nocheck($0 | 0, $1 & 63 | 0 | 128 | 0 | 0, 8 | 0) | 0) | 0) & 1 | 0 | 0;
   }
   $2 = ((((((FLAC__bitwriter_write_raw_uint32_nocheck($0 | 0, $1 >>> 30 | 0 | 252 | 0 | 0, 8 | 0) | 0) & (FLAC__bitwriter_write_raw_uint32_nocheck($0 | 0, ($1 >>> 24 | 0) & 63 | 0 | 128 | 0 | 0, 8 | 0) | 0) | 0) & (FLAC__bitwriter_write_raw_uint32_nocheck($0 | 0, ($1 >>> 18 | 0) & 63 | 0 | 128 | 0 | 0, 8 | 0) | 0) | 0) & (FLAC__bitwriter_write_raw_uint32_nocheck($0 | 0, ($1 >>> 12 | 0) & 63 | 0 | 128 | 0 | 0, 8 | 0) | 0) | 0) & (FLAC__bitwriter_write_raw_uint32_nocheck($0 | 0, ($1 >>> 6 | 0) & 63 | 0 | 128 | 0 | 0, 8 | 0) | 0) | 0) & (FLAC__bitwriter_write_raw_uint32_nocheck($0 | 0, $1 & 63 | 0 | 128 | 0 | 0, 8 | 0) | 0) | 0) & 1 | 0;
  }
  return $2 | 0;
 }
 
 function FLAC__bitwriter_write_utf8_uint64($0, $1, $1$hi) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $1$hi = $1$hi | 0;
  var i64toi32_i32$3 = 0, i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, $2 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $13 = 0, $18 = 0, $29 = 0, $34 = 0, $53 = 0, $58 = 0, $84 = 0, $89 = 0, $122 = 0, $127 = 0, $166 = 0, $167 = 0, $173 = 0;
  $2 = 0;
  label$1 : {
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$2 = $1;
   i64toi32_i32$1 = 15;
   i64toi32_i32$3 = -1;
   if (i64toi32_i32$0 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$3 >>> 0 | 0) | 0) {
    break label$1
   }
   label$2 : {
    i64toi32_i32$2 = $1$hi;
    i64toi32_i32$3 = $1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = 127;
    if (i64toi32_i32$2 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$3 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0) {
     break label$2
    }
    i64toi32_i32$3 = $1$hi;
    return FLAC__bitwriter_write_raw_uint32_nocheck($0 | 0, $1 | 0, 8 | 0) | 0 | 0;
   }
   label$3 : {
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$1 = $1;
    i64toi32_i32$2 = 0;
    i64toi32_i32$0 = 2047;
    if (i64toi32_i32$3 >>> 0 > i64toi32_i32$2 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$1 >>> 0 > i64toi32_i32$0 >>> 0 | 0) | 0) {
     break label$3
    }
    $13 = $0;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$0 = $1;
    i64toi32_i32$3 = 0;
    i64toi32_i32$2 = 6;
    i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = 0;
     $22 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$3 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
     $22 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
    }
    $18 = FLAC__bitwriter_write_raw_uint32_nocheck($13 | 0, $22 | 192 | 0 | 0, 8 | 0) | 0;
    i64toi32_i32$3 = $1$hi;
    return ($18 & (FLAC__bitwriter_write_raw_uint32_nocheck($0 | 0, $1 & 63 | 0 | 128 | 0 | 0, 8 | 0) | 0) | 0) & 1 | 0 | 0;
   }
   label$4 : {
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$1 = $1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$2 = 65535;
    if (i64toi32_i32$3 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$1 >>> 0 > i64toi32_i32$2 >>> 0 | 0) | 0) {
     break label$4
    }
    $29 = $0;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$2 = $1;
    i64toi32_i32$3 = 0;
    i64toi32_i32$0 = 12;
    i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = 0;
     $23 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$3 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
     $23 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
    }
    $34 = FLAC__bitwriter_write_raw_uint32_nocheck($29 | 0, $23 | 224 | 0 | 0, 8 | 0) | 0;
    i64toi32_i32$3 = $1$hi;
    $2 = $1;
    return (($34 & (FLAC__bitwriter_write_raw_uint32_nocheck($0 | 0, ($1 >>> 6 | 0) & 63 | 0 | 128 | 0 | 0, 8 | 0) | 0) | 0) & (FLAC__bitwriter_write_raw_uint32_nocheck($0 | 0, $1 & 63 | 0 | 128 | 0 | 0, 8 | 0) | 0) | 0) & 1 | 0 | 0;
   }
   label$5 : {
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$1 = $1;
    i64toi32_i32$2 = 0;
    i64toi32_i32$0 = 2097151;
    if (i64toi32_i32$3 >>> 0 > i64toi32_i32$2 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$1 >>> 0 > i64toi32_i32$0 >>> 0 | 0) | 0) {
     break label$5
    }
    $53 = $0;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$0 = $1;
    i64toi32_i32$3 = 0;
    i64toi32_i32$2 = 18;
    i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = 0;
     $24 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$3 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
     $24 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
    }
    $58 = FLAC__bitwriter_write_raw_uint32_nocheck($53 | 0, $24 | 240 | 0 | 0, 8 | 0) | 0;
    i64toi32_i32$3 = $1$hi;
    $2 = $1;
    return ((($58 & (FLAC__bitwriter_write_raw_uint32_nocheck($0 | 0, ($1 >>> 12 | 0) & 63 | 0 | 128 | 0 | 0, 8 | 0) | 0) | 0) & (FLAC__bitwriter_write_raw_uint32_nocheck($0 | 0, ($1 >>> 6 | 0) & 63 | 0 | 128 | 0 | 0, 8 | 0) | 0) | 0) & (FLAC__bitwriter_write_raw_uint32_nocheck($0 | 0, $1 & 63 | 0 | 128 | 0 | 0, 8 | 0) | 0) | 0) & 1 | 0 | 0;
   }
   label$6 : {
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$1 = $1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$2 = 67108863;
    if (i64toi32_i32$3 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$1 >>> 0 > i64toi32_i32$2 >>> 0 | 0) | 0) {
     break label$6
    }
    $84 = $0;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$2 = $1;
    i64toi32_i32$3 = 0;
    i64toi32_i32$0 = 24;
    i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = 0;
     $25 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$3 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
     $25 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
    }
    $89 = FLAC__bitwriter_write_raw_uint32_nocheck($84 | 0, $25 | 248 | 0 | 0, 8 | 0) | 0;
    i64toi32_i32$3 = $1$hi;
    $2 = $1;
    return (((($89 & (FLAC__bitwriter_write_raw_uint32_nocheck($0 | 0, ($1 >>> 18 | 0) & 63 | 0 | 128 | 0 | 0, 8 | 0) | 0) | 0) & (FLAC__bitwriter_write_raw_uint32_nocheck($0 | 0, ($1 >>> 12 | 0) & 63 | 0 | 128 | 0 | 0, 8 | 0) | 0) | 0) & (FLAC__bitwriter_write_raw_uint32_nocheck($0 | 0, ($1 >>> 6 | 0) & 63 | 0 | 128 | 0 | 0, 8 | 0) | 0) | 0) & (FLAC__bitwriter_write_raw_uint32_nocheck($0 | 0, $1 & 63 | 0 | 128 | 0 | 0, 8 | 0) | 0) | 0) & 1 | 0 | 0;
   }
   label$7 : {
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$1 = $1;
    i64toi32_i32$2 = 0;
    i64toi32_i32$0 = 2147483647;
    if (i64toi32_i32$3 >>> 0 > i64toi32_i32$2 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & $1 >>> 0 > i64toi32_i32$0 >>> 0 | 0) | 0) {
     break label$7
    }
    $122 = $0;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$0 = $1;
    i64toi32_i32$3 = 0;
    i64toi32_i32$2 = 30;
    i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = 0;
     $26 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$3 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
     $26 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
    }
    $127 = FLAC__bitwriter_write_raw_uint32_nocheck($122 | 0, $26 | 252 | 0 | 0, 8 | 0) | 0;
    i64toi32_i32$3 = $1$hi;
    $2 = $1;
    return ((((($127 & (FLAC__bitwriter_write_raw_uint32_nocheck($0 | 0, ($1 >>> 24 | 0) & 63 | 0 | 128 | 0 | 0, 8 | 0) | 0) | 0) & (FLAC__bitwriter_write_raw_uint32_nocheck($0 | 0, ($1 >>> 18 | 0) & 63 | 0 | 128 | 0 | 0, 8 | 0) | 0) | 0) & (FLAC__bitwriter_write_raw_uint32_nocheck($0 | 0, ($1 >>> 12 | 0) & 63 | 0 | 128 | 0 | 0, 8 | 0) | 0) | 0) & (FLAC__bitwriter_write_raw_uint32_nocheck($0 | 0, ($1 >>> 6 | 0) & 63 | 0 | 128 | 0 | 0, 8 | 0) | 0) | 0) & (FLAC__bitwriter_write_raw_uint32_nocheck($0 | 0, $1 & 63 | 0 | 128 | 0 | 0, 8 | 0) | 0) | 0) & 1 | 0 | 0;
   }
   $166 = FLAC__bitwriter_write_raw_uint32_nocheck($0 | 0, 254 | 0, 8 | 0) | 0;
   $167 = $0;
   i64toi32_i32$3 = $1$hi;
   i64toi32_i32$1 = $1;
   i64toi32_i32$0 = 0;
   i64toi32_i32$2 = 30;
   i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = 0;
    $27 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$0 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
    $27 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
   }
   $173 = $166 & (FLAC__bitwriter_write_raw_uint32_nocheck($167 | 0, $27 | 128 | 0 | 0, 8 | 0) | 0) | 0;
   i64toi32_i32$0 = $1$hi;
   $2 = $1;
   $2 = ((((($173 & (FLAC__bitwriter_write_raw_uint32_nocheck($0 | 0, ($1 >>> 24 | 0) & 63 | 0 | 128 | 0 | 0, 8 | 0) | 0) | 0) & (FLAC__bitwriter_write_raw_uint32_nocheck($0 | 0, ($1 >>> 18 | 0) & 63 | 0 | 128 | 0 | 0, 8 | 0) | 0) | 0) & (FLAC__bitwriter_write_raw_uint32_nocheck($0 | 0, ($1 >>> 12 | 0) & 63 | 0 | 128 | 0 | 0, 8 | 0) | 0) | 0) & (FLAC__bitwriter_write_raw_uint32_nocheck($0 | 0, ($1 >>> 6 | 0) & 63 | 0 | 128 | 0 | 0, 8 | 0) | 0) | 0) & (FLAC__bitwriter_write_raw_uint32_nocheck($0 | 0, $1 & 63 | 0 | 128 | 0 | 0, 8 | 0) | 0) | 0) & 1 | 0;
  }
  return $2 | 0;
 }
 
 function FLAC__bitwriter_zero_pad_to_byte_boundary($0) {
  $0 = $0 | 0;
  var $1 = 0;
  label$1 : {
   $1 = (HEAP32[($0 + 16 | 0) >> 2] | 0) & 7 | 0;
   if ($1) {
    break label$1
   }
   return 1 | 0;
  }
  return FLAC__bitwriter_write_zeroes($0 | 0, 8 - $1 | 0 | 0) | 0 | 0;
 }
 
 function FLAC__ogg_encoder_aspect_init($0) {
  $0 = $0 | 0;
  var i64toi32_i32$0 = 0, $1 = 0;
  $1 = 0;
  label$1 : {
   if (ogg_stream_init($0 + 8 | 0 | 0, HEAP32[$0 >> 2] | 0 | 0) | 0) {
    break label$1
   }
   i64toi32_i32$0 = 0;
   HEAP32[($0 + 392 | 0) >> 2] = 0;
   HEAP32[($0 + 396 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$0 = 1;
   HEAP32[($0 + 384 | 0) >> 2] = 0;
   HEAP32[($0 + 388 | 0) >> 2] = i64toi32_i32$0;
   $1 = 1;
  }
  return $1 | 0;
 }
 
 function FLAC__ogg_encoder_aspect_finish($0) {
  $0 = $0 | 0;
  ogg_stream_clear($0 + 8 | 0 | 0) | 0;
 }
 
 function FLAC__ogg_encoder_aspect_set_serial_number($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  HEAP32[$0 >> 2] = $1;
 }
 
 function FLAC__ogg_encoder_aspect_set_num_metadata($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = 0;
  label$1 : {
   if ($1 >>> (HEAP32[GOT_data_internal_FLAC__OGG_MAPPING_NUM_HEADERS_LEN >> 2] | 0) | 0) {
    break label$1
   }
   HEAP32[($0 + 4 | 0) >> 2] = $1;
   $2 = 1;
  }
  return $2 | 0;
 }
 
 function FLAC__ogg_encoder_aspect_set_defaults($0) {
  $0 = $0 | 0;
  var i64toi32_i32$1 = 0;
  i64toi32_i32$1 = $0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = 0;
 }
 
 function FLAC__ogg_encoder_aspect_write_callback_wrapper($0, $1, $2, $3, $4, $5, $6, $7, $8) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  $7 = $7 | 0;
  $8 = $8 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$5 = 0, i64toi32_i32$2 = 0, $9 = 0, i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, $11$hi = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, i64toi32_i32$3 = 0, $10 = 0, $11 = 0, $36 = 0, $26 = 0, $28$hi = 0, $61 = 0, $66 = 0, $71 = 0, $76 = 0, $79 = 0, $157 = 0, $159$hi = 0;
  $9 = __stack_pointer - 96 | 0;
  __stack_pointer = $9;
  label$1 : {
   label$2 : {
    label$3 : {
     if (!(HEAP32[($0 + 384 | 0) >> 2] | 0)) {
      break label$3
     }
     i64toi32_i32$1 = $9 + 72 | 0;
     i64toi32_i32$0 = 0;
     HEAP32[i64toi32_i32$1 >> 2] = 0;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     $10 = $9 + 80 | 0;
     i64toi32_i32$1 = $10;
     i64toi32_i32$0 = 0;
     HEAP32[i64toi32_i32$1 >> 2] = 0;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$1 = $9 + 88 | 0;
     i64toi32_i32$0 = 0;
     HEAP32[i64toi32_i32$1 >> 2] = 0;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$1 = $9;
     i64toi32_i32$0 = 0;
     HEAP32[(i64toi32_i32$1 + 64 | 0) >> 2] = 0;
     HEAP32[(i64toi32_i32$1 + 68 | 0) >> 2] = i64toi32_i32$0;
     $26 = $10;
     i64toi32_i32$2 = $0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 392 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 396 | 0) >> 2] | 0;
     $28$hi = i64toi32_i32$1;
     i64toi32_i32$1 = 0;
     $11 = $3;
     $11$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $28$hi;
     i64toi32_i32$2 = i64toi32_i32$0;
     i64toi32_i32$0 = $11$hi;
     i64toi32_i32$3 = $3;
     i64toi32_i32$4 = i64toi32_i32$2 + $3 | 0;
     i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$4 >>> 0 < $3 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     i64toi32_i32$2 = $26;
     HEAP32[i64toi32_i32$2 >> 2] = i64toi32_i32$4;
     HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$5;
     label$4 : {
      label$5 : {
       label$6 : {
        if (!(HEAP32[($0 + 388 | 0) >> 2] | 0)) {
         break label$6
        }
        if (($2 | 0) != (38 | 0)) {
         break label$4
        }
        HEAP8[$9 >> 0] = HEAPU8[GOT_data_internal_FLAC__OGG_MAPPING_FIRST_HEADER_PACKET_TYPE >> 0] | 0;
        $28 = HEAP32[GOT_data_internal_FLAC__OGG_MAPPING_MAGIC >> 2] | 0;
        $2 = HEAPU8[$28 >> 0] | 0 | ((HEAPU8[($28 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($28 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($28 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
        $36 = 1;
        HEAP8[($9 + 5 | 0) >> 0] = $36;
        HEAP8[($9 + 6 | 0) >> 0] = $36 >>> 8 | 0;
        HEAP8[($9 + 1 | 0) >> 0] = $2;
        HEAP8[($9 + 2 | 0) >> 0] = $2 >>> 8 | 0;
        HEAP8[($9 + 3 | 0) >> 0] = $2 >>> 16 | 0;
        HEAP8[($9 + 4 | 0) >> 0] = $2 >>> 24 | 0;
        $2 = HEAP32[($0 + 4 | 0) >> 2] | 0;
        $29 = GOT_data_internal_FLAC__STREAM_SYNC_STRING;
        $30 = HEAPU8[$29 >> 0] | 0 | ((HEAPU8[($29 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($29 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($29 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
        HEAP8[($9 + 9 | 0) >> 0] = $30;
        HEAP8[($9 + 10 | 0) >> 0] = $30 >>> 8 | 0;
        HEAP8[($9 + 11 | 0) >> 0] = $30 >>> 16 | 0;
        HEAP8[($9 + 12 | 0) >> 0] = $30 >>> 24 | 0;
        HEAP8[($9 + 8 | 0) >> 0] = $2;
        HEAP8[($9 + 7 | 0) >> 0] = $2 >>> 8 | 0;
        i64toi32_i32$1 = $1 + 30 | 0;
        i64toi32_i32$5 = HEAPU8[i64toi32_i32$1 >> 0] | 0 | ((HEAPU8[(i64toi32_i32$1 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$1 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$1 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
        i64toi32_i32$2 = HEAPU8[(i64toi32_i32$1 + 4 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$1 + 5 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$1 + 6 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$1 + 7 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
        $61 = i64toi32_i32$5;
        i64toi32_i32$5 = $9 + 43 | 0;
        $31 = $61;
        HEAP8[i64toi32_i32$5 >> 0] = $31;
        HEAP8[(i64toi32_i32$5 + 1 | 0) >> 0] = $31 >>> 8 | 0;
        HEAP8[(i64toi32_i32$5 + 2 | 0) >> 0] = $31 >>> 16 | 0;
        HEAP8[(i64toi32_i32$5 + 3 | 0) >> 0] = $31 >>> 24 | 0;
        HEAP8[(i64toi32_i32$5 + 4 | 0) >> 0] = i64toi32_i32$2;
        HEAP8[(i64toi32_i32$5 + 5 | 0) >> 0] = i64toi32_i32$2 >>> 8 | 0;
        HEAP8[(i64toi32_i32$5 + 6 | 0) >> 0] = i64toi32_i32$2 >>> 16 | 0;
        HEAP8[(i64toi32_i32$5 + 7 | 0) >> 0] = i64toi32_i32$2 >>> 24 | 0;
        i64toi32_i32$1 = $1 + 24 | 0;
        i64toi32_i32$2 = HEAPU8[i64toi32_i32$1 >> 0] | 0 | ((HEAPU8[(i64toi32_i32$1 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$1 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$1 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
        i64toi32_i32$5 = HEAPU8[(i64toi32_i32$1 + 4 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$1 + 5 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$1 + 6 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$1 + 7 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
        $66 = i64toi32_i32$2;
        i64toi32_i32$2 = $9 + 37 | 0;
        $32 = $66;
        HEAP8[i64toi32_i32$2 >> 0] = $32;
        HEAP8[(i64toi32_i32$2 + 1 | 0) >> 0] = $32 >>> 8 | 0;
        HEAP8[(i64toi32_i32$2 + 2 | 0) >> 0] = $32 >>> 16 | 0;
        HEAP8[(i64toi32_i32$2 + 3 | 0) >> 0] = $32 >>> 24 | 0;
        HEAP8[(i64toi32_i32$2 + 4 | 0) >> 0] = i64toi32_i32$5;
        HEAP8[(i64toi32_i32$2 + 5 | 0) >> 0] = i64toi32_i32$5 >>> 8 | 0;
        HEAP8[(i64toi32_i32$2 + 6 | 0) >> 0] = i64toi32_i32$5 >>> 16 | 0;
        HEAP8[(i64toi32_i32$2 + 7 | 0) >> 0] = i64toi32_i32$5 >>> 24 | 0;
        i64toi32_i32$1 = $1 + 16 | 0;
        i64toi32_i32$5 = HEAPU8[i64toi32_i32$1 >> 0] | 0 | ((HEAPU8[(i64toi32_i32$1 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$1 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$1 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
        i64toi32_i32$2 = HEAPU8[(i64toi32_i32$1 + 4 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$1 + 5 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$1 + 6 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$1 + 7 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
        $71 = i64toi32_i32$5;
        i64toi32_i32$5 = $9 + 29 | 0;
        $33 = $71;
        HEAP8[i64toi32_i32$5 >> 0] = $33;
        HEAP8[(i64toi32_i32$5 + 1 | 0) >> 0] = $33 >>> 8 | 0;
        HEAP8[(i64toi32_i32$5 + 2 | 0) >> 0] = $33 >>> 16 | 0;
        HEAP8[(i64toi32_i32$5 + 3 | 0) >> 0] = $33 >>> 24 | 0;
        HEAP8[(i64toi32_i32$5 + 4 | 0) >> 0] = i64toi32_i32$2;
        HEAP8[(i64toi32_i32$5 + 5 | 0) >> 0] = i64toi32_i32$2 >>> 8 | 0;
        HEAP8[(i64toi32_i32$5 + 6 | 0) >> 0] = i64toi32_i32$2 >>> 16 | 0;
        HEAP8[(i64toi32_i32$5 + 7 | 0) >> 0] = i64toi32_i32$2 >>> 24 | 0;
        i64toi32_i32$1 = $1 + 8 | 0;
        i64toi32_i32$2 = HEAPU8[i64toi32_i32$1 >> 0] | 0 | ((HEAPU8[(i64toi32_i32$1 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$1 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$1 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
        i64toi32_i32$5 = HEAPU8[(i64toi32_i32$1 + 4 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$1 + 5 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$1 + 6 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$1 + 7 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
        $76 = i64toi32_i32$2;
        i64toi32_i32$2 = $9 + 21 | 0;
        $34 = $76;
        HEAP8[i64toi32_i32$2 >> 0] = $34;
        HEAP8[(i64toi32_i32$2 + 1 | 0) >> 0] = $34 >>> 8 | 0;
        HEAP8[(i64toi32_i32$2 + 2 | 0) >> 0] = $34 >>> 16 | 0;
        HEAP8[(i64toi32_i32$2 + 3 | 0) >> 0] = $34 >>> 24 | 0;
        HEAP8[(i64toi32_i32$2 + 4 | 0) >> 0] = i64toi32_i32$5;
        HEAP8[(i64toi32_i32$2 + 5 | 0) >> 0] = i64toi32_i32$5 >>> 8 | 0;
        HEAP8[(i64toi32_i32$2 + 6 | 0) >> 0] = i64toi32_i32$5 >>> 16 | 0;
        HEAP8[(i64toi32_i32$2 + 7 | 0) >> 0] = i64toi32_i32$5 >>> 24 | 0;
        i64toi32_i32$1 = $1;
        i64toi32_i32$5 = HEAPU8[i64toi32_i32$1 >> 0] | 0 | ((HEAPU8[(i64toi32_i32$1 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$1 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$1 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
        i64toi32_i32$2 = HEAPU8[(i64toi32_i32$1 + 4 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$1 + 5 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$1 + 6 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$1 + 7 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
        $79 = i64toi32_i32$5;
        i64toi32_i32$5 = $9;
        $35 = $79;
        HEAP8[(i64toi32_i32$5 + 13 | 0) >> 0] = $35;
        HEAP8[(i64toi32_i32$5 + 14 | 0) >> 0] = $35 >>> 8 | 0;
        HEAP8[(i64toi32_i32$5 + 15 | 0) >> 0] = $35 >>> 16 | 0;
        HEAP8[(i64toi32_i32$5 + 16 | 0) >> 0] = $35 >>> 24 | 0;
        HEAP8[(i64toi32_i32$5 + 17 | 0) >> 0] = i64toi32_i32$2;
        HEAP8[(i64toi32_i32$5 + 18 | 0) >> 0] = i64toi32_i32$2 >>> 8 | 0;
        HEAP8[(i64toi32_i32$5 + 19 | 0) >> 0] = i64toi32_i32$2 >>> 16 | 0;
        HEAP8[(i64toi32_i32$5 + 20 | 0) >> 0] = i64toi32_i32$2 >>> 24 | 0;
        i64toi32_i32$2 = 1;
        HEAP32[(i64toi32_i32$5 + 68 | 0) >> 2] = 51;
        HEAP32[(i64toi32_i32$5 + 72 | 0) >> 2] = i64toi32_i32$2;
        HEAP32[(i64toi32_i32$5 + 64 | 0) >> 2] = i64toi32_i32$5;
        HEAP32[($0 + 388 | 0) >> 2] = 0;
        break label$5;
       }
       HEAP32[($9 + 68 | 0) >> 2] = $2;
       HEAP32[($9 + 64 | 0) >> 2] = $1;
      }
      label$7 : {
       if (!$5) {
        break label$7
       }
       HEAP32[($9 + 76 | 0) >> 2] = 1;
      }
      $1 = $0 + 8 | 0;
      if (ogg_stream_packetin($1 | 0, $9 + 64 | 0 | 0) | 0) {
       break label$4
      }
      $2 = $0 + 368 | 0;
      label$8 : {
       if ($3) {
        break label$8
       }
       label$9 : while (1) {
        if (!(ogg_stream_flush($1 | 0, $2 | 0) | 0)) {
         break label$2
        }
        if (FUNCTION_TABLE[$6 | 0]($7, HEAP32[($0 + 368 | 0) >> 2] | 0, HEAP32[($0 + 372 | 0) >> 2] | 0, 0, $4, $8) | 0) {
         break label$4
        }
        if (!(FUNCTION_TABLE[$6 | 0]($7, HEAP32[($0 + 376 | 0) >> 2] | 0, HEAP32[($0 + 380 | 0) >> 2] | 0, 0, $4, $8) | 0)) {
         continue label$9
        }
        break label$4;
       };
      }
      label$10 : while (1) {
       if (!(ogg_stream_pageout($1 | 0, $2 | 0) | 0)) {
        break label$2
       }
       if (FUNCTION_TABLE[$6 | 0]($7, HEAP32[($0 + 368 | 0) >> 2] | 0, HEAP32[($0 + 372 | 0) >> 2] | 0, 0, $4, $8) | 0) {
        break label$4
       }
       if (!(FUNCTION_TABLE[$6 | 0]($7, HEAP32[($0 + 376 | 0) >> 2] | 0, HEAP32[($0 + 380 | 0) >> 2] | 0, 0, $4, $8) | 0)) {
        continue label$10
       }
       break label$10;
      };
     }
     $6 = 1;
     break label$1;
    }
    $6 = 1;
    if ($3) {
     break label$1
    }
    if ($4) {
     break label$1
    }
    if (($2 | 0) != (4 | 0)) {
     break label$1
    }
    $4 = GOT_data_internal_FLAC__STREAM_SYNC_STRING;
    if ((HEAPU8[$1 >> 0] | 0 | ((HEAPU8[($1 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($1 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($1 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0 | 0) != (HEAPU8[$4 >> 0] | 0 | ((HEAPU8[($4 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($4 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($4 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0 | 0)) {
     break label$1
    }
    HEAP32[($0 + 384 | 0) >> 2] = 1;
    i64toi32_i32$2 = 0;
    $11 = 0;
    $11$hi = i64toi32_i32$2;
   }
   $157 = $0;
   i64toi32_i32$1 = $0;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 392 | 0) >> 2] | 0;
   i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 396 | 0) >> 2] | 0;
   $159$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $11$hi;
   i64toi32_i32$5 = $159$hi;
   i64toi32_i32$1 = i64toi32_i32$2;
   i64toi32_i32$2 = $11$hi;
   i64toi32_i32$3 = $11;
   i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
   i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
   if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
   }
   i64toi32_i32$1 = $157;
   HEAP32[(i64toi32_i32$1 + 392 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[(i64toi32_i32$1 + 396 | 0) >> 2] = i64toi32_i32$4;
   $6 = 0;
  }
  __stack_pointer = $9 + 96 | 0;
  return $6 | 0;
 }
 
 function simple_ogg_page__init($0) {
  $0 = $0 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0;
  i64toi32_i32$1 = $0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = i64toi32_i32$1 + 8 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
 }
 
 function simple_ogg_page__clear($0) {
  $0 = $0 | 0;
  var $1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0;
  label$1 : {
   $1 = HEAP32[$0 >> 2] | 0;
   if (!$1) {
    break label$1
   }
   dlfree($1 | 0);
  }
  label$2 : {
   $1 = HEAP32[($0 + 8 | 0) >> 2] | 0;
   if (!$1) {
    break label$2
   }
   dlfree($1 | 0);
  }
  i64toi32_i32$1 = $0;
  i64toi32_i32$0 = 0;
  HEAP32[$0 >> 2] = 0;
  HEAP32[($0 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 8 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
 }
 
 function simple_ogg_page__get_at($0, $1, $1$hi, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $1$hi = $1$hi | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var $8 = 0, $9 = 0, $6 = 0, $7 = 0, i64toi32_i32$0 = 0, $14 = 0, $15 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0;
  $6 = __stack_pointer - 16 | 0;
  __stack_pointer = $6;
  $7 = 0;
  label$1 : {
   if (!$3) {
    break label$1
   }
   label$2 : {
    label$3 : {
     i64toi32_i32$0 = $1$hi;
     switch (FUNCTION_TABLE[$3 | 0]($0, $1, i64toi32_i32$0, $5) | 0 | 0) {
     case 0:
      break label$2;
     case 1:
      break label$3;
     default:
      break label$1;
     };
    }
    HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] = 5;
    break label$1;
   }
   $3 = dlmalloc(282 | 0) | 0;
   HEAP32[$2 >> 2] = $3;
   label$4 : {
    if ($3) {
     break label$4
    }
    HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] = 8;
    break label$1;
   }
   $8 = 27;
   label$5 : while (1) {
    HEAP32[($6 + 12 | 0) >> 2] = $8;
    $9 = 5;
    label$6 : {
     label$7 : {
      switch (FUNCTION_TABLE[$4 | 0]($0, $3, $6 + 12 | 0, $5) | 0 | 0) {
      case 1:
       $9 = HEAP32[($6 + 12 | 0) >> 2] | 0;
       if ($9) {
        break label$6
       }
       $9 = 2;
      default:
       HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] = $9;
       break label$1;
      case 3:
       break label$1;
      case 0:
       break label$7;
      };
     }
     $9 = HEAP32[($6 + 12 | 0) >> 2] | 0;
    }
    $3 = $3 + $9 | 0;
    $8 = $8 - $9 | 0;
    if ($8) {
     continue label$5
    }
    break label$5;
   };
   $3 = HEAP32[$2 >> 2] | 0;
   HEAP32[($2 + 4 | 0) >> 2] = (HEAPU8[($3 + 26 | 0) >> 0] | 0) + 27 | 0;
   label$10 : {
    label$11 : {
     if ((HEAPU8[$3 >> 0] | 0 | ((HEAPU8[($3 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($3 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($3 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0 | 0) != (1399285583 | 0)) {
      break label$11
     }
     if ((HEAPU8[($3 + 5 | 0) >> 0] | 0) & 1 | 0) {
      break label$11
     }
     i64toi32_i32$0 = HEAPU8[($3 + 6 | 0) >> 0] | 0 | ((HEAPU8[($3 + 7 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($3 + 8 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($3 + 9 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
     i64toi32_i32$1 = HEAPU8[($3 + 10 | 0) >> 0] | 0 | ((HEAPU8[($3 + 11 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($3 + 12 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($3 + 13 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
     i64toi32_i32$2 = i64toi32_i32$0;
     i64toi32_i32$0 = 0;
     if ((i64toi32_i32$2 | 0) != (0 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$0 | 0) | 0) {
      break label$11
     }
     $8 = HEAPU8[($3 + 26 | 0) >> 0] | 0;
     if ($8) {
      break label$10
     }
    }
    HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] = 2;
    break label$1;
   }
   if (!(full_read_($0 | 0, $3 + 27 | 0 | 0, $8 | 0, $4 | 0, $5 | 0) | 0)) {
    break label$1
   }
   label$12 : {
    $8 = HEAP32[$2 >> 2] | 0;
    $7 = HEAPU8[($8 + 26 | 0) >> 0] | 0;
    $9 = $7 + -1 | 0;
    if (!$9) {
     break label$12
    }
    $3 = 0;
    label$13 : while (1) {
     label$14 : {
      if ((HEAPU8[(($3 + $8 | 0) + 27 | 0) >> 0] | 0 | 0) == (255 | 0)) {
       break label$14
      }
      HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] = 2;
      $7 = 0;
      break label$1;
     }
     $3 = $3 + 1 | 0;
     if (($3 | 0) != ($9 | 0)) {
      continue label$13
     }
     break label$13;
    };
   }
   $3 = Math_imul($9, 255) + (HEAPU8[(($7 + $8 | 0) + 26 | 0) >> 0] | 0) | 0;
   HEAP32[($2 + 12 | 0) >> 2] = $3;
   $8 = dlmalloc(($3 ? $3 : 1) | 0) | 0;
   HEAP32[($2 + 8 | 0) >> 2] = $8;
   label$15 : {
    if ($8) {
     break label$15
    }
    HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] = 8;
    $7 = 0;
    break label$1;
   }
   $7 = 0;
   if (!(full_read_($0 | 0, $8 | 0, $3 | 0, $4 | 0, $5 | 0) | 0)) {
    break label$1
   }
   $14 = HEAP32[$2 >> 2] | 0;
   HEAP32[($6 + 8 | 0) >> 2] = HEAPU8[($14 + 22 | 0) >> 0] | 0 | ((HEAPU8[($14 + 23 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($14 + 24 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($14 + 25 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
   ogg_page_checksum_set($2 | 0);
   label$16 : {
    $15 = HEAP32[$2 >> 2] | 0;
    if ((HEAP32[($6 + 8 | 0) >> 2] | 0 | 0) != (HEAPU8[($15 + 22 | 0) >> 0] | 0 | ((HEAPU8[($15 + 23 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($15 + 24 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($15 + 25 | 0) >> 0] | 0) << 24 | 0) | 0) | 0 | 0)) {
     break label$16
    }
    $7 = 1;
    break label$1;
   }
   HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] = 2;
  }
  __stack_pointer = $6 + 16 | 0;
  return $7 | 0;
 }
 
 function full_read_($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $7 = 0, $5 = 0, $6 = 0;
  $5 = __stack_pointer - 16 | 0;
  __stack_pointer = $5;
  $6 = 1;
  label$1 : {
   if (!$2) {
    break label$1
   }
   label$2 : while (1) {
    HEAP32[($5 + 12 | 0) >> 2] = $2;
    $7 = 5;
    label$3 : {
     label$4 : {
      switch (FUNCTION_TABLE[$3 | 0]($0, $1, $5 + 12 | 0, $4) | 0 | 0) {
      case 1:
       $7 = HEAP32[($5 + 12 | 0) >> 2] | 0;
       if ($7) {
        break label$3
       }
       $7 = 2;
      default:
       HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] = $7;
      case 3:
       $6 = 0;
       break label$1;
      case 0:
       break label$4;
      };
     }
     $7 = HEAP32[($5 + 12 | 0) >> 2] | 0;
    }
    $1 = $1 + $7 | 0;
    $2 = $2 - $7 | 0;
    if ($2) {
     continue label$2
    }
    break label$2;
   };
  }
  __stack_pointer = $5 + 16 | 0;
  return $6 | 0;
 }
 
 function simple_ogg_page__set_at($0, $1, $1$hi, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $1$hi = $1$hi | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var i64toi32_i32$0 = 0;
  label$1 : {
   if (!$3) {
    break label$1
   }
   label$2 : {
    label$3 : {
     i64toi32_i32$0 = $1$hi;
     switch (FUNCTION_TABLE[$3 | 0]($0, $1, i64toi32_i32$0, $5) | 0 | 0) {
     case 1:
      break label$2;
     case 0:
      break label$3;
     default:
      break label$1;
     };
    }
    ogg_page_checksum_set($2 | 0);
    if (FUNCTION_TABLE[$4 | 0]($0, HEAP32[$2 >> 2] | 0, HEAP32[($2 + 4 | 0) >> 2] | 0, 0, 0, $5) | 0) {
     break label$2
    }
    if (FUNCTION_TABLE[$4 | 0]($0, HEAP32[($2 + 8 | 0) >> 2] | 0, HEAP32[($2 + 12 | 0) >> 2] | 0, 0, 0, $5) | 0) {
     break label$2
    }
    return 1 | 0;
   }
   HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] = 5;
  }
  return 0 | 0;
 }
 
 function __emscripten_stdout_close($0) {
  $0 = $0 | 0;
  return 0 | 0;
 }
 
 function __emscripten_stdout_seek($0, $1, $1$hi, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $1$hi = $1$hi | 0;
  $2 = $2 | 0;
  i64toi32_i32$HIGH_BITS = 0;
  return 0 | 0;
 }
 
 function strcmp($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $3 = 0, $2 = 0;
  $2 = HEAPU8[$1 >> 0] | 0;
  label$1 : {
   $3 = HEAPU8[$0 >> 0] | 0;
   if (!$3) {
    break label$1
   }
   if (($3 | 0) != ($2 & 255 | 0 | 0)) {
    break label$1
   }
   label$2 : while (1) {
    $2 = HEAPU8[($1 + 1 | 0) >> 0] | 0;
    $3 = HEAPU8[($0 + 1 | 0) >> 0] | 0;
    if (!$3) {
     break label$1
    }
    $1 = $1 + 1 | 0;
    $0 = $0 + 1 | 0;
    if (($3 | 0) == ($2 & 255 | 0 | 0)) {
     continue label$2
    }
    break label$2;
   };
  }
  return $3 - ($2 & 255 | 0) | 0 | 0;
 }
 
 function FLAC__add_metadata_block($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, i64toi32_i32$2 = 0, $4 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $5 = 0, $9 = 0, $7 = 0, $8 = 0, $6 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
  $2 = GOT_data_internal_FLAC__STREAM_METADATA_IS_LAST_LEN;
  $3 = strlen(HEAP32[GOT_data_internal_FLAC__VENDOR_STRING >> 2] | 0 | 0) | 0;
  $4 = 0;
  label$1 : {
   if (!(FLAC__bitwriter_write_raw_uint32($1 | 0, HEAP32[($0 + 4 | 0) >> 2] | 0 | 0, HEAP32[$2 >> 2] | 0 | 0) | 0)) {
    break label$1
   }
   if (!(FLAC__bitwriter_write_raw_uint32($1 | 0, HEAP32[$0 >> 2] | 0 | 0, HEAP32[GOT_data_internal_FLAC__STREAM_METADATA_TYPE_LEN >> 2] | 0 | 0) | 0)) {
    break label$1
   }
   $2 = HEAP32[($0 + 8 | 0) >> 2] | 0;
   label$2 : {
    if ((HEAP32[$0 >> 2] | 0 | 0) != (4 | 0)) {
     break label$2
    }
    $2 = ($2 + $3 | 0) - (HEAP32[($0 + 16 | 0) >> 2] | 0) | 0;
   }
   $5 = HEAP32[GOT_data_internal_FLAC__STREAM_METADATA_LENGTH_LEN >> 2] | 0;
   if ($2 >>> $5 | 0) {
    break label$1
   }
   if (!(FLAC__bitwriter_write_raw_uint32($1 | 0, $2 | 0, $5 | 0) | 0)) {
    break label$1
   }
   label$3 : {
    label$4 : {
     label$5 : {
      label$6 : {
       label$7 : {
        label$8 : {
         label$9 : {
          switch (HEAP32[$0 >> 2] | 0 | 0) {
          case 3:
           $4 = GOT_data_internal_FLAC__STREAM_METADATA_SEEKPOINT_FRAME_SAMPLES_LEN;
           $2 = GOT_data_internal_FLAC__STREAM_METADATA_SEEKPOINT_STREAM_OFFSET_LEN;
           $3 = GOT_data_internal_FLAC__STREAM_METADATA_SEEKPOINT_SAMPLE_NUMBER_LEN;
           if (!(HEAP32[($0 + 16 | 0) >> 2] | 0)) {
            break label$3
           }
           $6 = HEAP32[$4 >> 2] | 0;
           $7 = HEAP32[$2 >> 2] | 0;
           $5 = HEAP32[$3 >> 2] | 0;
           $2 = 0;
           break label$8;
          case 0:
           if (!(FLAC__bitwriter_write_raw_uint32($1 | 0, HEAP32[($0 + 16 | 0) >> 2] | 0 | 0, HEAP32[GOT_data_internal_FLAC__STREAM_METADATA_STREAMINFO_MIN_BLOCK_SIZE_LEN >> 2] | 0 | 0) | 0)) {
            break label$1
           }
           if (!(FLAC__bitwriter_write_raw_uint32($1 | 0, HEAP32[($0 + 20 | 0) >> 2] | 0 | 0, HEAP32[GOT_data_internal_FLAC__STREAM_METADATA_STREAMINFO_MAX_BLOCK_SIZE_LEN >> 2] | 0 | 0) | 0)) {
            break label$1
           }
           if (!(FLAC__bitwriter_write_raw_uint32($1 | 0, HEAP32[($0 + 24 | 0) >> 2] | 0 | 0, HEAP32[GOT_data_internal_FLAC__STREAM_METADATA_STREAMINFO_MIN_FRAME_SIZE_LEN >> 2] | 0 | 0) | 0)) {
            break label$1
           }
           if (!(FLAC__bitwriter_write_raw_uint32($1 | 0, HEAP32[($0 + 28 | 0) >> 2] | 0 | 0, HEAP32[GOT_data_internal_FLAC__STREAM_METADATA_STREAMINFO_MAX_FRAME_SIZE_LEN >> 2] | 0 | 0) | 0)) {
            break label$1
           }
           if (!(FLAC__bitwriter_write_raw_uint32($1 | 0, HEAP32[($0 + 32 | 0) >> 2] | 0 | 0, HEAP32[GOT_data_internal_FLAC__STREAM_METADATA_STREAMINFO_SAMPLE_RATE_LEN >> 2] | 0 | 0) | 0)) {
            break label$1
           }
           if (!(FLAC__bitwriter_write_raw_uint32($1 | 0, (HEAP32[($0 + 36 | 0) >> 2] | 0) + -1 | 0 | 0, HEAP32[GOT_data_internal_FLAC__STREAM_METADATA_STREAMINFO_CHANNELS_LEN >> 2] | 0 | 0) | 0)) {
            break label$1
           }
           if (!(FLAC__bitwriter_write_raw_uint32($1 | 0, (HEAP32[($0 + 40 | 0) >> 2] | 0) + -1 | 0 | 0, HEAP32[GOT_data_internal_FLAC__STREAM_METADATA_STREAMINFO_BITS_PER_SAMPLE_LEN >> 2] | 0 | 0) | 0)) {
            break label$1
           }
           i64toi32_i32$2 = $0 + 48 | 0;
           i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
           i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
           if (!(FLAC__bitwriter_write_raw_uint64($1 | 0, i64toi32_i32$0 | 0, i64toi32_i32$1 | 0, HEAP32[GOT_data_internal_FLAC__STREAM_METADATA_STREAMINFO_TOTAL_SAMPLES_LEN >> 2] | 0 | 0) | 0)) {
            break label$1
           }
           if (FLAC__bitwriter_write_byte_block($1 | 0, $0 + 56 | 0 | 0, 16 | 0) | 0) {
            break label$3
           }
           break label$1;
          case 1:
           if (FLAC__bitwriter_write_zeroes($1 | 0, (HEAP32[($0 + 8 | 0) >> 2] | 0) << 3 | 0 | 0) | 0) {
            break label$3
           }
           break label$1;
          case 6:
           break label$5;
          case 5:
           break label$6;
          case 4:
           break label$7;
          case 2:
           break label$9;
          default:
           break label$4;
          };
         }
         $2 = (HEAP32[GOT_data_internal_FLAC__STREAM_METADATA_APPLICATION_ID_LEN >> 2] | 0) >>> 3 | 0;
         if (!(FLAC__bitwriter_write_byte_block($1 | 0, $0 + 16 | 0 | 0, $2 | 0) | 0)) {
          break label$1
         }
         if (FLAC__bitwriter_write_byte_block($1 | 0, HEAP32[($0 + 20 | 0) >> 2] | 0 | 0, (HEAP32[($0 + 8 | 0) >> 2] | 0) - $2 | 0 | 0) | 0) {
          break label$3
         }
         break label$1;
        }
        label$13 : while (1) {
         $4 = 0;
         $3 = Math_imul($2, 24);
         i64toi32_i32$2 = (HEAP32[($0 + 20 | 0) >> 2] | 0) + $3 | 0;
         i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
         i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
         if (!(FLAC__bitwriter_write_raw_uint64($1 | 0, i64toi32_i32$1 | 0, i64toi32_i32$0 | 0, $5 | 0) | 0)) {
          break label$1
         }
         i64toi32_i32$2 = (HEAP32[($0 + 20 | 0) >> 2] | 0) + $3 | 0;
         i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
         i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] | 0;
         if (!(FLAC__bitwriter_write_raw_uint64($1 | 0, i64toi32_i32$0 | 0, i64toi32_i32$1 | 0, $7 | 0) | 0)) {
          break label$1
         }
         if (!(FLAC__bitwriter_write_raw_uint32($1 | 0, HEAP32[(((HEAP32[($0 + 20 | 0) >> 2] | 0) + $3 | 0) + 16 | 0) >> 2] | 0 | 0, $6 | 0) | 0)) {
          break label$1
         }
         $2 = $2 + 1 | 0;
         if ($2 >>> 0 >= (HEAP32[($0 + 16 | 0) >> 2] | 0) >>> 0) {
          break label$3
         }
         continue label$13;
        };
       }
       if (!(FLAC__bitwriter_write_raw_uint32_little_endian($1 | 0, $3 | 0) | 0)) {
        break label$1
       }
       if (!(FLAC__bitwriter_write_byte_block($1 | 0, HEAP32[GOT_data_internal_FLAC__VENDOR_STRING >> 2] | 0 | 0, $3 | 0) | 0)) {
        break label$1
       }
       if (!(FLAC__bitwriter_write_raw_uint32_little_endian($1 | 0, HEAP32[($0 + 24 | 0) >> 2] | 0 | 0) | 0)) {
        break label$1
       }
       if (!(HEAP32[($0 + 24 | 0) >> 2] | 0)) {
        break label$3
       }
       $2 = 0;
       label$14 : while (1) {
        $4 = 0;
        $3 = $2 << 3 | 0;
        if (!(FLAC__bitwriter_write_raw_uint32_little_endian($1 | 0, HEAP32[((HEAP32[($0 + 28 | 0) >> 2] | 0) + $3 | 0) >> 2] | 0 | 0) | 0)) {
         break label$1
        }
        $3 = (HEAP32[($0 + 28 | 0) >> 2] | 0) + $3 | 0;
        if (!(FLAC__bitwriter_write_byte_block($1 | 0, HEAP32[($3 + 4 | 0) >> 2] | 0 | 0, HEAP32[$3 >> 2] | 0 | 0) | 0)) {
         break label$1
        }
        $2 = $2 + 1 | 0;
        if ($2 >>> 0 >= (HEAP32[($0 + 24 | 0) >> 2] | 0) >>> 0) {
         break label$3
        }
        continue label$14;
       };
      }
      if (!(FLAC__bitwriter_write_byte_block($1 | 0, $0 + 16 | 0 | 0, (HEAP32[GOT_data_internal_FLAC__STREAM_METADATA_CUESHEET_MEDIA_CATALOG_NUMBER_LEN >> 2] | 0) >>> 3 | 0 | 0) | 0)) {
       break label$1
      }
      i64toi32_i32$2 = $0 + 152 | 0;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      if (!(FLAC__bitwriter_write_raw_uint64($1 | 0, i64toi32_i32$1 | 0, i64toi32_i32$0 | 0, HEAP32[GOT_data_internal_FLAC__STREAM_METADATA_CUESHEET_LEAD_IN_LEN >> 2] | 0 | 0) | 0)) {
       break label$1
      }
      $4 = 0;
      if (!(FLAC__bitwriter_write_raw_uint32($1 | 0, (HEAP32[($0 + 160 | 0) >> 2] | 0 | 0) != (0 | 0) | 0, HEAP32[GOT_data_internal_FLAC__STREAM_METADATA_CUESHEET_IS_CD_LEN >> 2] | 0 | 0) | 0)) {
       break label$1
      }
      if (!(FLAC__bitwriter_write_zeroes($1 | 0, HEAP32[GOT_data_internal_FLAC__STREAM_METADATA_CUESHEET_RESERVED_LEN >> 2] | 0 | 0) | 0)) {
       break label$1
      }
      if (!(FLAC__bitwriter_write_raw_uint32($1 | 0, HEAP32[($0 + 164 | 0) >> 2] | 0 | 0, HEAP32[GOT_data_internal_FLAC__STREAM_METADATA_CUESHEET_NUM_TRACKS_LEN >> 2] | 0 | 0) | 0)) {
       break label$1
      }
      $4 = GOT_data_internal_FLAC__STREAM_METADATA_CUESHEET_TRACK_ISRC_LEN;
      $2 = GOT_data_internal_FLAC__STREAM_METADATA_CUESHEET_INDEX_RESERVED_LEN;
      $3 = GOT_data_internal_FLAC__STREAM_METADATA_CUESHEET_INDEX_NUMBER_LEN;
      $5 = GOT_data_internal_FLAC__STREAM_METADATA_CUESHEET_INDEX_OFFSET_LEN;
      $7 = GOT_data_internal_FLAC__STREAM_METADATA_CUESHEET_TRACK_NUM_INDICES_LEN;
      $8 = GOT_data_internal_FLAC__STREAM_METADATA_CUESHEET_TRACK_RESERVED_LEN;
      $9 = GOT_data_internal_FLAC__STREAM_METADATA_CUESHEET_TRACK_PRE_EMPHASIS_LEN;
      $10 = GOT_data_internal_FLAC__STREAM_METADATA_CUESHEET_TRACK_TYPE_LEN;
      $11 = GOT_data_internal_FLAC__STREAM_METADATA_CUESHEET_TRACK_NUMBER_LEN;
      $12 = GOT_data_internal_FLAC__STREAM_METADATA_CUESHEET_TRACK_OFFSET_LEN;
      if (!(HEAP32[($0 + 164 | 0) >> 2] | 0)) {
       break label$3
      }
      $13 = (HEAP32[$4 >> 2] | 0) >>> 3 | 0;
      $14 = HEAP32[$2 >> 2] | 0;
      $6 = HEAP32[$3 >> 2] | 0;
      $5 = HEAP32[$5 >> 2] | 0;
      $15 = HEAP32[$7 >> 2] | 0;
      $16 = HEAP32[$8 >> 2] | 0;
      $17 = HEAP32[$9 >> 2] | 0;
      $18 = HEAP32[$10 >> 2] | 0;
      $11 = HEAP32[$11 >> 2] | 0;
      $10 = HEAP32[$12 >> 2] | 0;
      $9 = 0;
      label$15 : while (1) {
       $4 = 0;
       $2 = (HEAP32[($0 + 168 | 0) >> 2] | 0) + ($9 << 5 | 0) | 0;
       i64toi32_i32$2 = $2;
       i64toi32_i32$0 = HEAP32[$2 >> 2] | 0;
       i64toi32_i32$1 = HEAP32[($2 + 4 | 0) >> 2] | 0;
       if (!(FLAC__bitwriter_write_raw_uint64($1 | 0, i64toi32_i32$0 | 0, i64toi32_i32$1 | 0, $10 | 0) | 0)) {
        break label$1
       }
       if (!(FLAC__bitwriter_write_raw_uint32($1 | 0, HEAPU8[($2 + 8 | 0) >> 0] | 0 | 0, $11 | 0) | 0)) {
        break label$1
       }
       if (!(FLAC__bitwriter_write_byte_block($1 | 0, $2 + 9 | 0 | 0, $13 | 0) | 0)) {
        break label$1
       }
       if (!(FLAC__bitwriter_write_raw_uint32($1 | 0, (HEAPU8[($2 + 22 | 0) >> 0] | 0) & 1 | 0 | 0, $18 | 0) | 0)) {
        break label$1
       }
       if (!(FLAC__bitwriter_write_raw_uint32($1 | 0, ((HEAPU8[($2 + 22 | 0) >> 0] | 0) >>> 1 | 0) & 1 | 0 | 0, $17 | 0) | 0)) {
        break label$1
       }
       if (!(FLAC__bitwriter_write_zeroes($1 | 0, $16 | 0) | 0)) {
        break label$1
       }
       if (!(FLAC__bitwriter_write_raw_uint32($1 | 0, HEAPU8[($2 + 23 | 0) >> 0] | 0 | 0, $15 | 0) | 0)) {
        break label$1
       }
       label$16 : {
        $8 = $2 + 23 | 0;
        if (!(HEAPU8[$8 >> 0] | 0)) {
         break label$16
        }
        $7 = $2 + 24 | 0;
        $4 = 0;
        $2 = 0;
        label$17 : while (1) {
         $3 = (HEAP32[$7 >> 2] | 0) + ($2 << 4 | 0) | 0;
         i64toi32_i32$2 = $3;
         i64toi32_i32$1 = HEAP32[$3 >> 2] | 0;
         i64toi32_i32$0 = HEAP32[($3 + 4 | 0) >> 2] | 0;
         if (!(FLAC__bitwriter_write_raw_uint64($1 | 0, i64toi32_i32$1 | 0, i64toi32_i32$0 | 0, $5 | 0) | 0)) {
          break label$1
         }
         if (!(FLAC__bitwriter_write_raw_uint32($1 | 0, HEAPU8[($3 + 8 | 0) >> 0] | 0 | 0, $6 | 0) | 0)) {
          break label$1
         }
         if (!(FLAC__bitwriter_write_zeroes($1 | 0, $14 | 0) | 0)) {
          break label$1
         }
         $2 = $2 + 1 | 0;
         if ($2 >>> 0 < (HEAPU8[$8 >> 0] | 0) >>> 0) {
          continue label$17
         }
         break label$17;
        };
       }
       $9 = $9 + 1 | 0;
       if ($9 >>> 0 < (HEAP32[($0 + 164 | 0) >> 2] | 0) >>> 0) {
        continue label$15
       }
       break label$3;
      };
     }
     if (!(FLAC__bitwriter_write_raw_uint32($1 | 0, HEAP32[($0 + 16 | 0) >> 2] | 0 | 0, HEAP32[GOT_data_internal_FLAC__STREAM_METADATA_PICTURE_TYPE_LEN >> 2] | 0 | 0) | 0)) {
      break label$1
     }
     $2 = HEAP32[($0 + 20 | 0) >> 2] | 0;
     $3 = GOT_data_internal_FLAC__STREAM_METADATA_PICTURE_MIME_TYPE_LENGTH_LEN;
     $2 = strlen($2 | 0) | 0;
     if (!(FLAC__bitwriter_write_raw_uint32($1 | 0, $2 | 0, HEAP32[$3 >> 2] | 0 | 0) | 0)) {
      break label$1
     }
     if (!(FLAC__bitwriter_write_byte_block($1 | 0, HEAP32[($0 + 20 | 0) >> 2] | 0 | 0, $2 | 0) | 0)) {
      break label$1
     }
     $2 = HEAP32[($0 + 24 | 0) >> 2] | 0;
     $3 = GOT_data_internal_FLAC__STREAM_METADATA_PICTURE_DESCRIPTION_LENGTH_LEN;
     $2 = strlen($2 | 0) | 0;
     if (!(FLAC__bitwriter_write_raw_uint32($1 | 0, $2 | 0, HEAP32[$3 >> 2] | 0 | 0) | 0)) {
      break label$1
     }
     if (!(FLAC__bitwriter_write_byte_block($1 | 0, HEAP32[($0 + 24 | 0) >> 2] | 0 | 0, $2 | 0) | 0)) {
      break label$1
     }
     if (!(FLAC__bitwriter_write_raw_uint32($1 | 0, HEAP32[($0 + 28 | 0) >> 2] | 0 | 0, HEAP32[GOT_data_internal_FLAC__STREAM_METADATA_PICTURE_WIDTH_LEN >> 2] | 0 | 0) | 0)) {
      break label$1
     }
     if (!(FLAC__bitwriter_write_raw_uint32($1 | 0, HEAP32[($0 + 32 | 0) >> 2] | 0 | 0, HEAP32[GOT_data_internal_FLAC__STREAM_METADATA_PICTURE_HEIGHT_LEN >> 2] | 0 | 0) | 0)) {
      break label$1
     }
     if (!(FLAC__bitwriter_write_raw_uint32($1 | 0, HEAP32[($0 + 36 | 0) >> 2] | 0 | 0, HEAP32[GOT_data_internal_FLAC__STREAM_METADATA_PICTURE_DEPTH_LEN >> 2] | 0 | 0) | 0)) {
      break label$1
     }
     if (!(FLAC__bitwriter_write_raw_uint32($1 | 0, HEAP32[($0 + 40 | 0) >> 2] | 0 | 0, HEAP32[GOT_data_internal_FLAC__STREAM_METADATA_PICTURE_COLORS_LEN >> 2] | 0 | 0) | 0)) {
      break label$1
     }
     if (!(FLAC__bitwriter_write_raw_uint32($1 | 0, HEAP32[($0 + 44 | 0) >> 2] | 0 | 0, HEAP32[GOT_data_internal_FLAC__STREAM_METADATA_PICTURE_DATA_LENGTH_LEN >> 2] | 0 | 0) | 0)) {
      break label$1
     }
     if (FLAC__bitwriter_write_byte_block($1 | 0, HEAP32[($0 + 48 | 0) >> 2] | 0 | 0, HEAP32[($0 + 44 | 0) >> 2] | 0 | 0) | 0) {
      break label$3
     }
     break label$1;
    }
    if (!(FLAC__bitwriter_write_byte_block($1 | 0, HEAP32[($0 + 16 | 0) >> 2] | 0 | 0, HEAP32[($0 + 8 | 0) >> 2] | 0 | 0) | 0)) {
     break label$1
    }
   }
   $4 = 1;
  }
  return $4 | 0;
 }
 
 function FLAC__frame_add_header($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $6 = 0, $3 = 0, $2 = 0, $7 = 0, $8 = 0, $4 = 0, $5 = 0, i64toi32_i32$1 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  $3 = GOT_data_internal_FLAC__FRAME_HEADER_SYNC_LEN;
  label$1 : {
   label$2 : {
    if (FLAC__bitwriter_write_raw_uint32($1 | 0, HEAP32[GOT_data_internal_FLAC__FRAME_HEADER_SYNC >> 2] | 0 | 0, HEAP32[$3 >> 2] | 0 | 0) | 0) {
     break label$2
    }
    $3 = 0;
    break label$1;
   }
   $3 = 0;
   if (!(FLAC__bitwriter_write_raw_uint32($1 | 0, 0 | 0, HEAP32[GOT_data_internal_FLAC__FRAME_HEADER_RESERVED_LEN >> 2] | 0 | 0) | 0)) {
    break label$1
   }
   $3 = 0;
   if (!(FLAC__bitwriter_write_raw_uint32($1 | 0, (HEAP32[($0 + 20 | 0) >> 2] | 0 | 0) != (0 | 0) | 0, HEAP32[GOT_data_internal_FLAC__FRAME_HEADER_BLOCKING_STRATEGY_LEN >> 2] | 0 | 0) | 0)) {
    break label$1
   }
   $4 = 16;
   $5 = 1;
   label$3 : {
    label$4 : {
     label$5 : {
      label$6 : {
       label$7 : {
        label$8 : {
         label$9 : {
          label$10 : {
           label$11 : {
            label$12 : {
             $6 = HEAP32[$0 >> 2] | 0;
             if (($6 | 0) > (2047 | 0)) {
              break label$12
             }
             label$13 : {
              if (($6 | 0) > (575 | 0)) {
               break label$13
              }
              label$14 : {
               if (($6 | 0) != (192 | 0)) {
                break label$14
               }
               $6 = 1;
               break label$3;
              }
              if (($6 | 0) == (256 | 0)) {
               break label$8
              }
              if (($6 | 0) != (512 | 0)) {
               break label$4
              }
              $6 = 9;
              break label$3;
             }
             if (($6 | 0) == (576 | 0)) {
              break label$11
             }
             if (($6 | 0) == (1024 | 0)) {
              break label$7
             }
             if (($6 | 0) != (1152 | 0)) {
              break label$4
             }
             $6 = 3;
             break label$3;
            }
            label$15 : {
             if (($6 | 0) > (4607 | 0)) {
              break label$15
             }
             if (($6 | 0) == (2048 | 0)) {
              break label$6
             }
             if (($6 | 0) == (2304 | 0)) {
              break label$10
             }
             if (($6 | 0) != (4096 | 0)) {
              break label$4
             }
             $6 = 12;
             break label$3;
            }
            label$16 : {
             if (($6 | 0) > (16383 | 0)) {
              break label$16
             }
             if (($6 | 0) == (4608 | 0)) {
              break label$9
             }
             if (($6 | 0) != (8192 | 0)) {
              break label$4
             }
             $6 = 13;
             break label$3;
            }
            if (($6 | 0) == (16384 | 0)) {
             break label$5
            }
            if (($6 | 0) != (32768 | 0)) {
             break label$4
            }
            $6 = 15;
            break label$3;
           }
           $6 = 2;
           break label$3;
          }
          $6 = 4;
          break label$3;
         }
         $6 = 5;
         break label$3;
        }
        $6 = 8;
        break label$3;
       }
       $6 = 10;
       break label$3;
      }
      $6 = 11;
      break label$3;
     }
     $6 = 14;
     break label$3;
    }
    $6 = $6 >>> 0 < 257 >>> 0;
    $4 = $6 ? 8 : 16;
    $6 = $6 ? 6 : 7;
    $5 = 0;
   }
   if (!(FLAC__bitwriter_write_raw_uint32($1 | 0, $6 | 0, HEAP32[GOT_data_internal_FLAC__FRAME_HEADER_BLOCK_SIZE_LEN >> 2] | 0 | 0) | 0)) {
    break label$1
   }
   $7 = 0;
   label$17 : {
    label$18 : {
     label$19 : {
      label$20 : {
       label$21 : {
        label$22 : {
         label$23 : {
          label$24 : {
           label$25 : {
            $3 = HEAP32[($0 + 4 | 0) >> 2] | 0;
            if (($3 | 0) > (44099 | 0)) {
             break label$25
            }
            label$26 : {
             if (($3 | 0) > (22049 | 0)) {
              break label$26
             }
             if (($3 | 0) == (8e3 | 0)) {
              break label$24
             }
             if (($3 | 0) != (16e3 | 0)) {
              break label$18
             }
             $6 = 5;
             break label$17;
            }
            if (($3 | 0) == (22050 | 0)) {
             break label$23
            }
            if (($3 | 0) == (24e3 | 0)) {
             break label$22
            }
            if (($3 | 0) != (32e3 | 0)) {
             break label$18
            }
            $6 = 8;
            break label$17;
           }
           label$27 : {
            if (($3 | 0) > (95999 | 0)) {
             break label$27
            }
            if (($3 | 0) == (44100 | 0)) {
             break label$21
            }
            if (($3 | 0) == (48e3 | 0)) {
             break label$20
            }
            $6 = 1;
            if (($3 | 0) == (88200 | 0)) {
             break label$17
            }
            break label$18;
           }
           if (($3 | 0) == (96e3 | 0)) {
            break label$19
           }
           label$28 : {
            if (($3 | 0) == (192e3 | 0)) {
             break label$28
            }
            if (($3 | 0) != (176400 | 0)) {
             break label$18
            }
            $6 = 2;
            break label$17;
           }
           $6 = 3;
           break label$17;
          }
          $6 = 4;
          break label$17;
         }
         $6 = 6;
         break label$17;
        }
        $6 = 7;
        break label$17;
       }
       $6 = 9;
       break label$17;
      }
      $6 = 10;
      break label$17;
     }
     $6 = 11;
     break label$17;
    }
    $8 = ($3 >>> 0) % (1e3 >>> 0) | 0;
    label$29 : {
     if ($3 >>> 0 > 255e3 >>> 0) {
      break label$29
     }
     $6 = 12;
     $7 = 12;
     if (!$8) {
      break label$17
     }
    }
    label$30 : {
     if (($3 >>> 0) % (10 >>> 0) | 0) {
      break label$30
     }
     $6 = 14;
     $7 = 14;
     break label$17;
    }
    $6 = $3 >>> 0 < 65536 >>> 0 ? 13 : 0;
    $7 = $6;
   }
   $3 = 0;
   if (!(FLAC__bitwriter_write_raw_uint32($1 | 0, $6 | 0, HEAP32[GOT_data_internal_FLAC__FRAME_HEADER_SAMPLE_RATE_LEN >> 2] | 0 | 0) | 0)) {
    break label$1
   }
   label$31 : {
    label$32 : {
     switch (HEAP32[($0 + 12 | 0) >> 2] | 0 | 0) {
     case 0:
      $6 = (HEAP32[($0 + 8 | 0) >> 2] | 0) + -1 | 0;
      break label$31;
     case 1:
      $6 = 8;
      break label$31;
     case 2:
      $6 = 9;
      break label$31;
     case 3:
      break label$32;
     default:
      break label$31;
     };
    }
    $6 = 10;
   }
   if (!(FLAC__bitwriter_write_raw_uint32($1 | 0, $6 | 0, HEAP32[GOT_data_internal_FLAC__FRAME_HEADER_CHANNEL_ASSIGNMENT_LEN >> 2] | 0 | 0) | 0)) {
    break label$1
   }
   $3 = 0;
   $6 = 0;
   label$36 : {
    $8 = __wasm_rotl_i32((HEAP32[($0 + 16 | 0) >> 2] | 0) + -8 | 0 | 0, 30 | 0) | 0;
    if ($8 >>> 0 > 4 >>> 0) {
     break label$36
    }
    $6 = HEAP32[((GOT_data_internal___memory_base + 7872 | 0) + ($8 << 2 | 0) | 0) >> 2] | 0;
   }
   if (!(FLAC__bitwriter_write_raw_uint32($1 | 0, $6 | 0, HEAP32[GOT_data_internal_FLAC__FRAME_HEADER_BITS_PER_SAMPLE_LEN >> 2] | 0 | 0) | 0)) {
    break label$1
   }
   $3 = 0;
   if (!(FLAC__bitwriter_write_raw_uint32($1 | 0, 0 | 0, HEAP32[GOT_data_internal_FLAC__FRAME_HEADER_ZERO_PAD_LEN >> 2] | 0 | 0) | 0)) {
    break label$1
   }
   label$37 : {
    label$38 : {
     if (HEAP32[($0 + 20 | 0) >> 2] | 0) {
      break label$38
     }
     if (FLAC__bitwriter_write_utf8_uint32($1 | 0, HEAP32[($0 + 24 | 0) >> 2] | 0 | 0) | 0) {
      break label$37
     }
     break label$1;
    }
    i64toi32_i32$1 = HEAP32[($0 + 28 | 0) >> 2] | 0;
    if (!(FLAC__bitwriter_write_utf8_uint64($1 | 0, HEAP32[($0 + 24 | 0) >> 2] | 0 | 0, i64toi32_i32$1 | 0) | 0)) {
     break label$1
    }
   }
   label$39 : {
    if ($5) {
     break label$39
    }
    if (!(FLAC__bitwriter_write_raw_uint32($1 | 0, (HEAP32[$0 >> 2] | 0) + -1 | 0 | 0, $4 | 0) | 0)) {
     break label$1
    }
   }
   label$40 : {
    label$41 : {
     switch ($7 + -12 | 0 | 0) {
     case 0:
      if (FLAC__bitwriter_write_raw_uint32($1 | 0, ((HEAP32[($0 + 4 | 0) >> 2] | 0) >>> 0) / (1e3 >>> 0) | 0 | 0, 8 | 0) | 0) {
       break label$40
      }
      break label$1;
     case 1:
      if (FLAC__bitwriter_write_raw_uint32($1 | 0, HEAP32[($0 + 4 | 0) >> 2] | 0 | 0, 16 | 0) | 0) {
       break label$40
      }
      break label$1;
     case 2:
      break label$41;
     default:
      break label$40;
     };
    }
    if (!(FLAC__bitwriter_write_raw_uint32($1 | 0, ((HEAP32[($0 + 4 | 0) >> 2] | 0) >>> 0) / (10 >>> 0) | 0 | 0, 16 | 0) | 0)) {
     break label$1
    }
   }
   if (!(FLAC__bitwriter_get_write_crc8($1 | 0, $2 + 15 | 0 | 0) | 0)) {
    break label$1
   }
   $3 = GOT_data_internal_FLAC__FRAME_HEADER_CRC_LEN;
   $3 = (FLAC__bitwriter_write_raw_uint32($1 | 0, HEAPU8[($2 + 15 | 0) >> 0] | 0 | 0, HEAP32[$3 >> 2] | 0 | 0) | 0 | 0) != (0 | 0);
  }
  __stack_pointer = $2 + 16 | 0;
  return $3 | 0;
 }
 
 function FLAC__subframe_add_constant($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0;
  $4 = 0;
  label$1 : {
   if (!(FLAC__bitwriter_write_raw_uint32($3 | 0, HEAP32[GOT_data_internal_FLAC__SUBFRAME_TYPE_CONSTANT_BYTE_ALIGNED_MASK >> 2] | 0 | ($2 | 0) != (0 | 0) | 0 | 0, ((HEAP32[GOT_data_internal_FLAC__SUBFRAME_TYPE_LEN >> 2] | 0) + (HEAP32[GOT_data_internal_FLAC__SUBFRAME_ZERO_PAD_LEN >> 2] | 0) | 0) + (HEAP32[GOT_data_internal_FLAC__SUBFRAME_WASTED_BITS_FLAG_LEN >> 2] | 0) | 0 | 0) | 0)) {
    break label$1
   }
   label$2 : {
    if (!$2) {
     break label$2
    }
    if (!(FLAC__bitwriter_write_unary_unsigned($3 | 0, $2 + -1 | 0 | 0) | 0)) {
     break label$1
    }
   }
   $4 = (FLAC__bitwriter_write_raw_int32($3 | 0, HEAP32[$0 >> 2] | 0 | 0, $1 | 0) | 0 | 0) != (0 | 0);
  }
  return $4 | 0;
 }
 
 function FLAC__subframe_add_fixed($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $6 = 0;
  $6 = 0;
  label$1 : {
   if (!(FLAC__bitwriter_write_raw_uint32($4 | 0, HEAP32[GOT_data_internal_FLAC__SUBFRAME_TYPE_FIXED_BYTE_ALIGNED_MASK >> 2] | 0 | ($3 | 0) != (0 | 0) | 0 | ((HEAP32[($0 + 12 | 0) >> 2] | 0) << 1 | 0) | 0 | 0, ((HEAP32[GOT_data_internal_FLAC__SUBFRAME_TYPE_LEN >> 2] | 0) + (HEAP32[GOT_data_internal_FLAC__SUBFRAME_ZERO_PAD_LEN >> 2] | 0) | 0) + (HEAP32[GOT_data_internal_FLAC__SUBFRAME_WASTED_BITS_FLAG_LEN >> 2] | 0) | 0 | 0) | 0)) {
    break label$1
   }
   label$2 : {
    if (!$3) {
     break label$2
    }
    if (!(FLAC__bitwriter_write_unary_unsigned($4 | 0, $3 + -1 | 0 | 0) | 0)) {
     break label$1
    }
   }
   label$3 : {
    if (!(HEAP32[($0 + 12 | 0) >> 2] | 0)) {
     break label$3
    }
    $3 = 0;
    label$4 : {
     label$5 : while (1) {
      if (!(FLAC__bitwriter_write_raw_int32($4 | 0, HEAP32[(($0 + ($3 << 2 | 0) | 0) + 16 | 0) >> 2] | 0 | 0, $2 | 0) | 0)) {
       break label$4
      }
      $3 = $3 + 1 | 0;
      if ($3 >>> 0 >= (HEAP32[($0 + 12 | 0) >> 2] | 0) >>> 0) {
       break label$3
      }
      continue label$5;
     };
    }
    return 0 | 0;
   }
   $6 = 0;
   if (!(FLAC__bitwriter_write_raw_uint32($4 | 0, HEAP32[$0 >> 2] | 0 | 0, HEAP32[GOT_data_internal_FLAC__ENTROPY_CODING_METHOD_TYPE_LEN >> 2] | 0 | 0) | 0)) {
    break label$1
   }
   label$6 : {
    if ((HEAP32[$0 >> 2] | 0) >>> 0 > 1 >>> 0) {
     break label$6
    }
    if (!(FLAC__bitwriter_write_raw_uint32($4 | 0, HEAP32[($0 + 4 | 0) >> 2] | 0 | 0, HEAP32[GOT_data_internal_FLAC__ENTROPY_CODING_METHOD_PARTITIONED_RICE_ORDER_LEN >> 2] | 0 | 0) | 0)) {
     break label$1
    }
    $3 = HEAP32[$0 >> 2] | 0;
    if ($3 >>> 0 > 1 >>> 0) {
     break label$6
    }
    $2 = HEAP32[($0 + 8 | 0) >> 2] | 0;
    if (!(add_residual_partitioned_rice_($4 | 0, HEAP32[($0 + 32 | 0) >> 2] | 0 | 0, $1 | 0, HEAP32[($0 + 12 | 0) >> 2] | 0 | 0, HEAP32[$2 >> 2] | 0 | 0, HEAP32[($2 + 4 | 0) >> 2] | 0 | 0, HEAP32[($0 + 4 | 0) >> 2] | 0 | 0, ($3 | 0) == (1 | 0) | 0) | 0)) {
     break label$1
    }
   }
   $6 = 1;
  }
  return $6 | 0;
 }
 
 function add_residual_partitioned_rice_($0, $1, $2, $3, $4, $5, $6, $7) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  $7 = $7 | 0;
  var $8 = 0, $11 = 0, $14 = 0, $10 = 0, $9 = 0, $15 = 0, $16 = 0, $12 = 0, $13 = 0;
  $8 = GOT_data_internal_FLAC__ENTROPY_CODING_METHOD_PARTITIONED_RICE_ESCAPE_PARAMETER;
  $9 = HEAP32[($7 ? GOT_data_internal_FLAC__ENTROPY_CODING_METHOD_PARTITIONED_RICE2_ESCAPE_PARAMETER : $8) >> 2] | 0;
  $8 = GOT_data_internal_FLAC__ENTROPY_CODING_METHOD_PARTITIONED_RICE_PARAMETER_LEN;
  $10 = HEAP32[($7 ? GOT_data_internal_FLAC__ENTROPY_CODING_METHOD_PARTITIONED_RICE2_PARAMETER_LEN : $8) >> 2] | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     if ($6) {
      break label$3
     }
     label$4 : {
      if (HEAP32[$5 >> 2] | 0) {
       break label$4
      }
      $11 = 0;
      if (!(FLAC__bitwriter_write_raw_uint32($0 | 0, HEAP32[$4 >> 2] | 0 | 0, $10 | 0) | 0)) {
       break label$2
      }
      if (!(FLAC__bitwriter_write_rice_signed_block($0 | 0, $1 | 0, $2 | 0, HEAP32[$4 >> 2] | 0 | 0) | 0)) {
       break label$2
      }
      break label$1;
     }
     $11 = 0;
     if (!(FLAC__bitwriter_write_raw_uint32($0 | 0, $9 | 0, $10 | 0) | 0)) {
      break label$2
     }
     if (!(FLAC__bitwriter_write_raw_uint32($0 | 0, HEAP32[$5 >> 2] | 0 | 0, HEAP32[GOT_data_internal_FLAC__ENTROPY_CODING_METHOD_PARTITIONED_RICE_RAW_LEN >> 2] | 0 | 0) | 0)) {
      break label$2
     }
     if (!$2) {
      break label$1
     }
     $7 = 0;
     label$5 : {
      label$6 : while (1) {
       if (!(FLAC__bitwriter_write_raw_int32($0 | 0, HEAP32[($1 + ($7 << 2 | 0) | 0) >> 2] | 0 | 0, HEAP32[$5 >> 2] | 0 | 0) | 0)) {
        break label$5
       }
       $7 = $7 + 1 | 0;
       if (($7 | 0) == ($2 | 0)) {
        break label$1
       }
       continue label$6;
      };
     }
     return 0 | 0;
    }
    $12 = ($3 + $2 | 0) >>> $6 | 0;
    $13 = HEAP32[GOT_data_internal_FLAC__ENTROPY_CODING_METHOD_PARTITIONED_RICE_RAW_LEN >> 2] | 0;
    $2 = 0;
    $14 = 0;
    label$7 : while (1) {
     $15 = $12 - ($14 ? 0 : $3) | 0;
     $7 = $2;
     $2 = $15 + $7 | 0;
     label$8 : {
      label$9 : {
       $16 = $14 << 2 | 0;
       $8 = $5 + $16 | 0;
       if (HEAP32[$8 >> 2] | 0) {
        break label$9
       }
       $11 = 0;
       $8 = $4 + $16 | 0;
       if (!(FLAC__bitwriter_write_raw_uint32($0 | 0, HEAP32[$8 >> 2] | 0 | 0, $10 | 0) | 0)) {
        break label$2
       }
       if (FLAC__bitwriter_write_rice_signed_block($0 | 0, $1 + ($7 << 2 | 0) | 0 | 0, $15 | 0, HEAP32[$8 >> 2] | 0 | 0) | 0) {
        break label$8
       }
       break label$2;
      }
      $11 = 0;
      if (!(FLAC__bitwriter_write_raw_uint32($0 | 0, $9 | 0, $10 | 0) | 0)) {
       break label$2
      }
      if (!(FLAC__bitwriter_write_raw_uint32($0 | 0, HEAP32[$8 >> 2] | 0 | 0, $13 | 0) | 0)) {
       break label$2
      }
      if ($7 >>> 0 >= $2 >>> 0) {
       break label$8
      }
      label$10 : while (1) {
       if (!(FLAC__bitwriter_write_raw_int32($0 | 0, HEAP32[($1 + ($7 << 2 | 0) | 0) >> 2] | 0 | 0, HEAP32[$8 >> 2] | 0 | 0) | 0)) {
        break label$2
       }
       $7 = $7 + 1 | 0;
       if (($7 | 0) != ($2 | 0)) {
        continue label$10
       }
       break label$10;
      };
     }
     $11 = 1;
     $14 = $14 + 1 | 0;
     if (!($14 >>> $6 | 0)) {
      continue label$7
     }
     break label$7;
    };
   }
   return $11 | 0;
  }
  return 1 | 0;
 }
 
 function FLAC__subframe_add_lpc($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = 0;
  $5 = 0;
  label$1 : {
   if (!(FLAC__bitwriter_write_raw_uint32($4 | 0, HEAP32[GOT_data_internal_FLAC__SUBFRAME_TYPE_LPC_BYTE_ALIGNED_MASK >> 2] | 0 | ($3 | 0) != (0 | 0) | 0 | (((HEAP32[($0 + 12 | 0) >> 2] | 0) << 1 | 0) + -2 | 0) | 0 | 0, ((HEAP32[GOT_data_internal_FLAC__SUBFRAME_TYPE_LEN >> 2] | 0) + (HEAP32[GOT_data_internal_FLAC__SUBFRAME_ZERO_PAD_LEN >> 2] | 0) | 0) + (HEAP32[GOT_data_internal_FLAC__SUBFRAME_WASTED_BITS_FLAG_LEN >> 2] | 0) | 0 | 0) | 0)) {
    break label$1
   }
   label$2 : {
    if (!$3) {
     break label$2
    }
    if (!(FLAC__bitwriter_write_unary_unsigned($4 | 0, $3 + -1 | 0 | 0) | 0)) {
     break label$1
    }
   }
   label$3 : {
    if (!(HEAP32[($0 + 12 | 0) >> 2] | 0)) {
     break label$3
    }
    $3 = 0;
    label$4 : {
     label$5 : while (1) {
      if (!(FLAC__bitwriter_write_raw_int32($4 | 0, HEAP32[(($0 + ($3 << 2 | 0) | 0) + 152 | 0) >> 2] | 0 | 0, $2 | 0) | 0)) {
       break label$4
      }
      $3 = $3 + 1 | 0;
      if ($3 >>> 0 >= (HEAP32[($0 + 12 | 0) >> 2] | 0) >>> 0) {
       break label$3
      }
      continue label$5;
     };
    }
    return 0 | 0;
   }
   $5 = 0;
   if (!(FLAC__bitwriter_write_raw_uint32($4 | 0, (HEAP32[($0 + 16 | 0) >> 2] | 0) + -1 | 0 | 0, HEAP32[GOT_data_internal_FLAC__SUBFRAME_LPC_QLP_COEFF_PRECISION_LEN >> 2] | 0 | 0) | 0)) {
    break label$1
   }
   if (!(FLAC__bitwriter_write_raw_int32($4 | 0, HEAP32[($0 + 20 | 0) >> 2] | 0 | 0, HEAP32[GOT_data_internal_FLAC__SUBFRAME_LPC_QLP_SHIFT_LEN >> 2] | 0 | 0) | 0)) {
    break label$1
   }
   label$6 : {
    if (!(HEAP32[($0 + 12 | 0) >> 2] | 0)) {
     break label$6
    }
    $3 = 0;
    label$7 : {
     label$8 : while (1) {
      if (!(FLAC__bitwriter_write_raw_int32($4 | 0, HEAP32[(($0 + ($3 << 2 | 0) | 0) + 24 | 0) >> 2] | 0 | 0, HEAP32[($0 + 16 | 0) >> 2] | 0 | 0) | 0)) {
       break label$7
      }
      $3 = $3 + 1 | 0;
      if ($3 >>> 0 >= (HEAP32[($0 + 12 | 0) >> 2] | 0) >>> 0) {
       break label$6
      }
      continue label$8;
     };
    }
    return 0 | 0;
   }
   $5 = 0;
   if (!(FLAC__bitwriter_write_raw_uint32($4 | 0, HEAP32[$0 >> 2] | 0 | 0, HEAP32[GOT_data_internal_FLAC__ENTROPY_CODING_METHOD_TYPE_LEN >> 2] | 0 | 0) | 0)) {
    break label$1
   }
   label$9 : {
    if ((HEAP32[$0 >> 2] | 0) >>> 0 > 1 >>> 0) {
     break label$9
    }
    if (!(FLAC__bitwriter_write_raw_uint32($4 | 0, HEAP32[($0 + 4 | 0) >> 2] | 0 | 0, HEAP32[GOT_data_internal_FLAC__ENTROPY_CODING_METHOD_PARTITIONED_RICE_ORDER_LEN >> 2] | 0 | 0) | 0)) {
     break label$1
    }
    $3 = HEAP32[$0 >> 2] | 0;
    if ($3 >>> 0 > 1 >>> 0) {
     break label$9
    }
    $2 = HEAP32[($0 + 8 | 0) >> 2] | 0;
    if (!(add_residual_partitioned_rice_($4 | 0, HEAP32[($0 + 280 | 0) >> 2] | 0 | 0, $1 | 0, HEAP32[($0 + 12 | 0) >> 2] | 0 | 0, HEAP32[$2 >> 2] | 0 | 0, HEAP32[($2 + 4 | 0) >> 2] | 0 | 0, HEAP32[($0 + 4 | 0) >> 2] | 0 | 0, ($3 | 0) == (1 | 0) | 0) | 0)) {
     break label$1
    }
   }
   $5 = 1;
  }
  return $5 | 0;
 }
 
 function FLAC__subframe_add_verbatim($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = 0;
  $5 = 0;
  $0 = HEAP32[$0 >> 2] | 0;
  label$1 : {
   if (!(FLAC__bitwriter_write_raw_uint32($4 | 0, HEAP32[GOT_data_internal_FLAC__SUBFRAME_TYPE_VERBATIM_BYTE_ALIGNED_MASK >> 2] | 0 | ($3 | 0) != (0 | 0) | 0 | 0, ((HEAP32[GOT_data_internal_FLAC__SUBFRAME_TYPE_LEN >> 2] | 0) + (HEAP32[GOT_data_internal_FLAC__SUBFRAME_ZERO_PAD_LEN >> 2] | 0) | 0) + (HEAP32[GOT_data_internal_FLAC__SUBFRAME_WASTED_BITS_FLAG_LEN >> 2] | 0) | 0 | 0) | 0)) {
    break label$1
   }
   label$2 : {
    if (!$3) {
     break label$2
    }
    if (!(FLAC__bitwriter_write_unary_unsigned($4 | 0, $3 + -1 | 0 | 0) | 0)) {
     break label$1
    }
   }
   label$3 : {
    if ($1) {
     break label$3
    }
    return 1 | 0;
   }
   $3 = 0;
   label$4 : {
    label$5 : while (1) {
     if (!(FLAC__bitwriter_write_raw_int32($4 | 0, HEAP32[($0 + ($3 << 2 | 0) | 0) >> 2] | 0 | 0, $2 | 0) | 0)) {
      break label$4
     }
     $3 = $3 + 1 | 0;
     if (($3 | 0) != ($1 | 0)) {
      continue label$5
     }
     break label$5;
    };
    return 1 | 0;
   }
   $5 = 0;
  }
  return $5 | 0;
 }
 
 function strncmp($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $4 = 0, $3 = 0, $5 = 0;
  label$1 : {
   if ($2) {
    break label$1
   }
   return 0 | 0;
  }
  $3 = 0;
  label$2 : {
   $4 = HEAPU8[$0 >> 0] | 0;
   if (!$4) {
    break label$2
   }
   label$3 : {
    label$4 : while (1) {
     $5 = HEAPU8[$1 >> 0] | 0;
     if (!$5) {
      break label$3
     }
     $2 = $2 + -1 | 0;
     if (!$2) {
      break label$3
     }
     if (($4 & 255 | 0 | 0) != ($5 | 0)) {
      break label$3
     }
     $1 = $1 + 1 | 0;
     $4 = HEAPU8[($0 + 1 | 0) >> 0] | 0;
     $0 = $0 + 1 | 0;
     if ($4) {
      continue label$4
     }
     break label$2;
    };
   }
   $3 = $4;
  }
  return ($3 & 255 | 0) - (HEAPU8[$1 >> 0] | 0) | 0 | 0;
 }
 
 function __uflow($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  $2 = -1;
  label$1 : {
   if (__toread($0 | 0) | 0) {
    break label$1
   }
   if ((FUNCTION_TABLE[HEAP32[($0 + 32 | 0) >> 2] | 0 | 0]($0, $1 + 15 | 0, 1) | 0 | 0) != (1 | 0)) {
    break label$1
   }
   $2 = HEAPU8[($1 + 15 | 0) >> 0] | 0;
  }
  __stack_pointer = $1 + 16 | 0;
  return $2 | 0;
 }
 
 function __shlim($0, $1, $1$hi) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $1$hi = $1$hi | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $2 = 0, $3 = 0, $4 = 0, $4$hi = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $21 = 0, $22 = 0;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$1 = $0;
  HEAP32[(i64toi32_i32$1 + 112 | 0) >> 2] = $1;
  HEAP32[(i64toi32_i32$1 + 116 | 0) >> 2] = $1$hi;
  $2 = HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] | 0;
  $3 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
  i64toi32_i32$1 = $2 - $3 | 0;
  i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
  $4 = i64toi32_i32$1;
  $4$hi = i64toi32_i32$0;
  i64toi32_i32$1 = $0;
  HEAP32[(i64toi32_i32$1 + 120 | 0) >> 2] = $4;
  HEAP32[(i64toi32_i32$1 + 124 | 0) >> 2] = i64toi32_i32$0;
  $17 = i64toi32_i32$1;
  i64toi32_i32$0 = $1$hi;
  $21 = $3 + $1 | 0;
  $22 = $2;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$2 = $4;
  i64toi32_i32$1 = $1$hi;
  i64toi32_i32$3 = $1;
  if ((i64toi32_i32$0 | 0) > (i64toi32_i32$1 | 0)) {
   $14 = 1
  } else {
   if ((i64toi32_i32$0 | 0) >= (i64toi32_i32$1 | 0)) {
    if (i64toi32_i32$2 >>> 0 <= i64toi32_i32$3 >>> 0) {
     $15 = 0
    } else {
     $15 = 1
    }
    $16 = $15;
   } else {
    $16 = 0
   }
   $14 = $16;
  }
  i64toi32_i32$2 = $1$hi;
  i64toi32_i32$3 = $1;
  i64toi32_i32$0 = 0;
  i64toi32_i32$1 = 0;
  HEAP32[($17 + 104 | 0) >> 2] = ($1 | 0) != (i64toi32_i32$1 | 0) | ($1$hi | 0) != (i64toi32_i32$0 | 0) | 0 ? ($14 ? $21 : $22) : $2;
 }
 
 function __shgetc($0) {
  $0 = $0 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$5 = 0, i64toi32_i32$3 = 0, $1$hi = 0, i64toi32_i32$4 = 0, $4 = 0, $1 = 0, $3 = 0, $2 = 0, $23 = 0, $24 = 0, $25 = 0, $5 = 0, $26 = 0, $27 = 0, $28 = 0, $11$hi = 0, $30 = 0, $30$hi = 0, $38 = 0, $38$hi = 0, $50 = 0, $52 = 0, $52$hi = 0, $57 = 0, $57$hi = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     i64toi32_i32$2 = $0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 112 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 116 | 0) >> 2] | 0;
     $1 = i64toi32_i32$0;
     $1$hi = i64toi32_i32$1;
     if (!(i64toi32_i32$0 | i64toi32_i32$1 | 0)) {
      break label$3
     }
     i64toi32_i32$2 = $0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 120 | 0) >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 124 | 0) >> 2] | 0;
     $11$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$0 = $11$hi;
     i64toi32_i32$2 = i64toi32_i32$1;
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$3 = $1;
     if ((i64toi32_i32$0 | 0) > (i64toi32_i32$1 | 0)) {
      $23 = 1
     } else {
      if ((i64toi32_i32$0 | 0) >= (i64toi32_i32$1 | 0)) {
       if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
        $24 = 0
       } else {
        $24 = 1
       }
       $25 = $24;
      } else {
       $25 = 0
      }
      $23 = $25;
     }
     if ($23) {
      break label$2
     }
    }
    $2 = __uflow($0 | 0) | 0;
    if (($2 | 0) > (-1 | 0)) {
     break label$1
    }
   }
   HEAP32[($0 + 104 | 0) >> 2] = 0;
   return -1 | 0;
  }
  $3 = HEAP32[($0 + 8 | 0) >> 2] | 0;
  $4 = $3;
  label$4 : {
   i64toi32_i32$3 = $0;
   i64toi32_i32$2 = HEAP32[($0 + 112 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($0 + 116 | 0) >> 2] | 0;
   $1 = i64toi32_i32$2;
   $1$hi = i64toi32_i32$0;
   if (!(i64toi32_i32$2 | i64toi32_i32$0 | 0)) {
    break label$4
   }
   $4 = $3;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$3 = $0;
   i64toi32_i32$0 = HEAP32[($0 + 120 | 0) >> 2] | 0;
   i64toi32_i32$2 = HEAP32[($0 + 124 | 0) >> 2] | 0;
   i64toi32_i32$3 = i64toi32_i32$0;
   i64toi32_i32$0 = -1;
   i64toi32_i32$1 = -1;
   i64toi32_i32$0 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
   $30 = i64toi32_i32$3 ^ i64toi32_i32$1 | 0;
   $30$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$2 = $1;
   i64toi32_i32$3 = $30$hi;
   i64toi32_i32$1 = $30;
   i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
   i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
   if (i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   $1 = i64toi32_i32$4;
   $1$hi = i64toi32_i32$5;
   $5 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   i64toi32_i32$2 = $3 - $5 | 0;
   i64toi32_i32$5 = i64toi32_i32$2 >> 31 | 0;
   $38 = i64toi32_i32$2;
   $38$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $1$hi;
   i64toi32_i32$0 = i64toi32_i32$4;
   i64toi32_i32$2 = $38$hi;
   i64toi32_i32$1 = $38;
   if ((i64toi32_i32$5 | 0) > (i64toi32_i32$2 | 0)) {
    $26 = 1
   } else {
    if ((i64toi32_i32$5 | 0) >= (i64toi32_i32$2 | 0)) {
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0) {
      $27 = 0
     } else {
      $27 = 1
     }
     $28 = $27;
    } else {
     $28 = 0
    }
    $26 = $28;
   }
   if ($26) {
    break label$4
   }
   i64toi32_i32$0 = $1$hi;
   $4 = $5 + $1 | 0;
  }
  HEAP32[($0 + 104 | 0) >> 2] = $4;
  $4 = HEAP32[($0 + 4 | 0) >> 2] | 0;
  label$5 : {
   if (!$3) {
    break label$5
   }
   $50 = $0;
   i64toi32_i32$1 = $0;
   i64toi32_i32$0 = HEAP32[($0 + 120 | 0) >> 2] | 0;
   i64toi32_i32$5 = HEAP32[($0 + 124 | 0) >> 2] | 0;
   $52 = i64toi32_i32$0;
   $52$hi = i64toi32_i32$5;
   i64toi32_i32$0 = ($3 - $4 | 0) + 1 | 0;
   i64toi32_i32$5 = i64toi32_i32$0 >> 31 | 0;
   $57 = i64toi32_i32$0;
   $57$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $52$hi;
   i64toi32_i32$1 = $52;
   i64toi32_i32$0 = $57$hi;
   i64toi32_i32$2 = $57;
   i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
   i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
   if (i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
   }
   i64toi32_i32$1 = $50;
   HEAP32[(i64toi32_i32$1 + 120 | 0) >> 2] = i64toi32_i32$3;
   HEAP32[(i64toi32_i32$1 + 124 | 0) >> 2] = i64toi32_i32$4;
  }
  label$6 : {
   $0 = $4 + -1 | 0;
   if (($2 | 0) == (HEAPU8[$0 >> 0] | 0 | 0)) {
    break label$6
   }
   HEAP8[$0 >> 0] = $2;
  }
  return $2 | 0;
 }
 
 function isspace($0) {
  $0 = $0 | 0;
  return ($0 | 0) == (32 | 0) | ($0 + -9 | 0) >>> 0 < 5 >>> 0 | 0 | 0;
 }
 
 function __extendsftf2($0, $1) {
  $0 = $0 | 0;
  $1 = Math_fround($1);
  var i64toi32_i32$1 = 0, i64toi32_i32$5 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, $4 = 0, i64toi32_i32$4 = 0, $2 = 0, $5 = 0, $5$hi = 0, $6 = 0, $6$hi = 0, $3 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $30 = 0, $38 = 0, $38$hi = 0, $42$hi = 0, $48 = 0, $49 = 0, $49$hi = 0, $53$hi = 0, $54 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  label$1 : {
   label$2 : {
    $3 = (wasm2js_scratch_store_f32($1), wasm2js_scratch_load_i32(2));
    $4 = $3 & 2147483647 | 0;
    if (($4 + -8388608 | 0) >>> 0 > 2130706431 >>> 0) {
     break label$2
    }
    i64toi32_i32$0 = 0;
    i64toi32_i32$2 = $4;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = 25;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
     $24 = 0;
    } else {
     i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
     $24 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
    }
    i64toi32_i32$0 = $24;
    i64toi32_i32$2 = 1065353216;
    i64toi32_i32$3 = 0;
    i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
    i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    $5 = i64toi32_i32$4;
    $5$hi = i64toi32_i32$5;
    i64toi32_i32$5 = 0;
    $6 = 0;
    $6$hi = i64toi32_i32$5;
    break label$1;
   }
   label$3 : {
    if ($4 >>> 0 < 2139095040 >>> 0) {
     break label$3
    }
    i64toi32_i32$5 = 0;
    i64toi32_i32$1 = $3;
    i64toi32_i32$0 = 0;
    i64toi32_i32$3 = 25;
    i64toi32_i32$2 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$2 | 0;
     $25 = 0;
    } else {
     i64toi32_i32$0 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$2 | 0) | 0;
     $25 = i64toi32_i32$1 << i64toi32_i32$2 | 0;
    }
    i64toi32_i32$5 = $25;
    i64toi32_i32$1 = 2147418112;
    i64toi32_i32$3 = 0;
    i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
    $5 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
    $5$hi = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    $6 = 0;
    $6$hi = i64toi32_i32$1;
    break label$1;
   }
   label$4 : {
    if ($4) {
     break label$4
    }
    i64toi32_i32$1 = 0;
    $6 = 0;
    $6$hi = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    $5 = 0;
    $5$hi = i64toi32_i32$1;
    break label$1;
   }
   i64toi32_i32$1 = 0;
   $30 = $4;
   $4 = Math_clz32($4);
   i64toi32_i32$5 = 0;
   __ashlti3($2 | 0, $30 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$5 | 0, $4 + 81 | 0 | 0);
   i64toi32_i32$0 = $2 + 8 | 0;
   i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
   i64toi32_i32$0 = i64toi32_i32$5;
   i64toi32_i32$5 = 65536;
   i64toi32_i32$3 = 0;
   i64toi32_i32$5 = i64toi32_i32$1 ^ i64toi32_i32$5 | 0;
   $38 = i64toi32_i32$0 ^ i64toi32_i32$3 | 0;
   $38$hi = i64toi32_i32$5;
   i64toi32_i32$5 = 0;
   i64toi32_i32$1 = 16265 - $4 | 0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$3 = 48;
   i64toi32_i32$2 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$2 | 0;
    $26 = 0;
   } else {
    i64toi32_i32$0 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$2 | 0) | 0;
    $26 = i64toi32_i32$1 << i64toi32_i32$2 | 0;
   }
   $42$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $38$hi;
   i64toi32_i32$5 = $38;
   i64toi32_i32$1 = $42$hi;
   i64toi32_i32$3 = $26;
   i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
   $5 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
   $5$hi = i64toi32_i32$1;
   i64toi32_i32$0 = $2;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$0 >> 2] | 0;
   i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
   $6 = i64toi32_i32$1;
   $6$hi = i64toi32_i32$5;
  }
  i64toi32_i32$5 = $6$hi;
  i64toi32_i32$1 = $0;
  HEAP32[i64toi32_i32$1 >> 2] = $6;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$5;
  $48 = i64toi32_i32$1;
  i64toi32_i32$5 = $5$hi;
  $49 = $5;
  $49$hi = i64toi32_i32$5;
  i64toi32_i32$5 = 0;
  i64toi32_i32$0 = $3 & -2147483648 | 0;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$2 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$0 << i64toi32_i32$2 | 0;
   $27 = 0;
  } else {
   i64toi32_i32$1 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$2 | 0) | 0;
   $27 = i64toi32_i32$0 << i64toi32_i32$2 | 0;
  }
  $53$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $49$hi;
  i64toi32_i32$5 = $49;
  i64toi32_i32$0 = $53$hi;
  i64toi32_i32$3 = $27;
  i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
  $54 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
  i64toi32_i32$5 = $48;
  HEAP32[(i64toi32_i32$5 + 8 | 0) >> 2] = $54;
  HEAP32[(i64toi32_i32$5 + 12 | 0) >> 2] = i64toi32_i32$0;
  __stack_pointer = $2 + 16 | 0;
 }
 
 function __floatsitf($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$5 = 0, i64toi32_i32$3 = 0, $5 = 0, i64toi32_i32$4 = 0, $2 = 0, $3 = 0, $3$hi = 0, $4 = 0, $4$hi = 0, $21 = 0, $22 = 0, $19 = 0, $27 = 0, $27$hi = 0, $31$hi = 0, $32 = 0, $32$hi = 0, $36$hi = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  label$1 : {
   label$2 : {
    if ($1) {
     break label$2
    }
    i64toi32_i32$0 = 0;
    $3 = 0;
    $3$hi = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    $4 = 0;
    $4$hi = i64toi32_i32$0;
    break label$1;
   }
   $5 = $1 >> 31 | 0;
   $5 = ($1 + $5 | 0) ^ $5 | 0;
   i64toi32_i32$0 = 0;
   $19 = $5;
   $5 = Math_clz32($5);
   i64toi32_i32$1 = 0;
   __ashlti3($2 | 0, $19 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$1 | 0, $5 + 81 | 0 | 0);
   i64toi32_i32$2 = $2 + 8 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   i64toi32_i32$2 = i64toi32_i32$1;
   i64toi32_i32$1 = 65536;
   i64toi32_i32$3 = 0;
   i64toi32_i32$1 = i64toi32_i32$0 ^ i64toi32_i32$1 | 0;
   $27 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
   $27$hi = i64toi32_i32$1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$0 = 16414 - $5 | 0;
   i64toi32_i32$2 = 0;
   i64toi32_i32$3 = 48;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    $21 = 0;
   } else {
    i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
    $21 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
   }
   $31$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $27$hi;
   i64toi32_i32$1 = $27;
   i64toi32_i32$0 = $31$hi;
   i64toi32_i32$3 = $21;
   i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
   i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
   if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   $32 = i64toi32_i32$4;
   $32$hi = i64toi32_i32$5;
   i64toi32_i32$5 = 0;
   i64toi32_i32$2 = $1 & -2147483648 | 0;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 32;
   i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$0 | 0;
    $22 = 0;
   } else {
    i64toi32_i32$1 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$0 | 0) | 0;
    $22 = i64toi32_i32$2 << i64toi32_i32$0 | 0;
   }
   $36$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $32$hi;
   i64toi32_i32$5 = $32;
   i64toi32_i32$2 = $36$hi;
   i64toi32_i32$3 = $22;
   i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
   $4 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
   $4$hi = i64toi32_i32$2;
   i64toi32_i32$1 = $2;
   i64toi32_i32$2 = HEAP32[i64toi32_i32$1 >> 2] | 0;
   i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
   $3 = i64toi32_i32$2;
   $3$hi = i64toi32_i32$5;
  }
  i64toi32_i32$5 = $3$hi;
  i64toi32_i32$2 = $0;
  HEAP32[i64toi32_i32$2 >> 2] = $3;
  HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$5;
  i64toi32_i32$5 = $4$hi;
  HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] = $4;
  HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] = i64toi32_i32$5;
  __stack_pointer = $2 + 16 | 0;
 }
 
 function __multf3($0, $1, $1$hi, $2, $2$hi, $3, $3$hi, $4, $4$hi) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $1$hi = $1$hi | 0;
  $2 = $2 | 0;
  $2$hi = $2$hi | 0;
  $3 = $3 | 0;
  $3$hi = $3$hi | 0;
  $4 = $4 | 0;
  $4$hi = $4$hi | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$5 = 0, i64toi32_i32$4 = 0, $5 = 0, $10$hi = 0, $10 = 0, $8$hi = 0, $7$hi = 0, $6$hi = 0, $11$hi = 0, $8 = 0, $14 = 0, $11 = 0, $7 = 0, $6 = 0, $17$hi = 0, $16 = 0, $17 = 0, $9$hi = 0, $12$hi = 0, $13$hi = 0, $15 = 0, $9 = 0, $12 = 0, $13 = 0, $19$hi = 0, $22$hi = 0, $19 = 0, $18 = 0, $20$hi = 0, $21$hi = 0, $23$hi = 0, $24$hi = 0, $228 = 0, $229 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $237 = 0, $238 = 0, $239 = 0, $240 = 0, $241 = 0, $242 = 0, $244 = 0, $246 = 0, $248 = 0, $249 = 0, $251 = 0, $252 = 0, $254 = 0, $256 = 0, $20 = 0, $257 = 0, $258 = 0, $21 = 0, $22 = 0, $259 = 0, $24 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $278 = 0, $29 = 0, $29$hi = 0, $31$hi = 0, $34 = 0, $34$hi = 0, $36$hi = 0, $39 = 0, $39$hi = 0, $43$hi = 0, $70 = 0, $74 = 0, $81 = 0, $85 = 0, $94 = 0, $94$hi = 0, $106 = 0, $106$hi = 0, $128 = 0, $129 = 0, $129$hi = 0, $130 = 0, $130$hi = 0, $137$hi = 0, $140$hi = 0, $150 = 0, $150$hi = 0, $155$hi = 0, $162 = 0, $163 = 0, $163$hi = 0, $164 = 0, $164$hi = 0, $171$hi = 0, $174$hi = 0, $186 = 0, $186$hi = 0, $191$hi = 0, $194 = 0, $194$hi = 0, $196$hi = 0, $207 = 0, $207$hi = 0, $215 = 0, $215$hi = 0, $222 = 0, $222$hi = 0, $227 = 0, $227$hi = 0, $236 = 0, $236$hi = 0, $243 = 0, $243$hi = 0, $245 = 0, $245$hi = 0, $247 = 0, $247$hi = 0, $250 = 0, $252$hi = 0, $253 = 0, $253$hi = 0, $255 = 0, $255$hi = 0, $264 = 0, $264$hi = 0, $269 = 0, $269$hi = 0, $277 = 0, $277$hi = 0, $280$hi = 0, $23 = 0, $296 = 0, $296$hi = 0, $300 = 0, $301 = 0, $301$hi = 0, $305 = 0, $305$hi = 0, $309 = 0, $310$hi = 0, $311 = 0, $311$hi = 0, $312 = 0, $312$hi = 0, $315 = 0, $316$hi = 0, $319 = 0, $320$hi = 0, $321$hi = 0, $325 = 0, $326$hi = 0, $327$hi = 0, $330 = 0, $330$hi = 0, $331 = 0, $331$hi = 0, $338 = 0, $338$hi = 0, $344 = 0, $344$hi = 0, $346$hi = 0, $347 = 0, $347$hi = 0, $348 = 0, $348$hi = 0, $349 = 0, $349$hi = 0, $351$hi = 0, $355 = 0, $356$hi = 0, $357 = 0, $357$hi = 0, $358 = 0, $358$hi = 0, $360 = 0, $360$hi = 0, $363 = 0, $364$hi = 0, $367 = 0, $368$hi = 0, $369$hi = 0, $372 = 0, $373$hi = 0, $375$hi = 0, $376 = 0, $376$hi = 0, $380 = 0, $381$hi = 0, $382 = 0, $382$hi = 0, $383 = 0, $383$hi = 0, $386 = 0, $387$hi = 0, $390 = 0, $391$hi = 0, $392$hi = 0, $396 = 0, $397$hi = 0, $407 = 0, $407$hi = 0, $409$hi = 0, $412 = 0, $412$hi = 0, $414$hi = 0, $418 = 0, $418$hi = 0, $420$hi = 0, $454 = 0, $454$hi = 0, $456 = 0, $456$hi = 0, $457 = 0, $457$hi = 0, $459 = 0, $459$hi = 0, $463 = 0, $463$hi = 0, $465 = 0, $466$hi = 0, $471 = 0, $471$hi = 0, $475 = 0, $475$hi = 0, $484$hi = 0, $486 = 0, $486$hi = 0, $492 = 0, $498 = 0, $498$hi = 0, $503 = 0, $504$hi = 0, $508 = 0, $508$hi = 0, $512 = 0, $512$hi = 0, $515 = 0, $515$hi = 0, $519 = 0, $520$hi = 0;
  $5 = __stack_pointer - 96 | 0;
  __stack_pointer = $5;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$2 = $1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = 0;
   $228 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $228 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
  }
  $29 = $228;
  $29$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $2$hi;
  i64toi32_i32$0 = $2;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
   $229 = 0;
  } else {
   i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
   $229 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
  }
  $31$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $29$hi;
  i64toi32_i32$1 = $29;
  i64toi32_i32$0 = $31$hi;
  i64toi32_i32$3 = $229;
  i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
  $6 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
  $6$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $3$hi;
  i64toi32_i32$2 = $3;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 17;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = 0;
   $230 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $230 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
  }
  $34 = $230;
  $34$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $4$hi;
  i64toi32_i32$0 = $4;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 47;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
   $231 = 0;
  } else {
   i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
   $231 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
  }
  $36$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $34$hi;
  i64toi32_i32$1 = $34;
  i64toi32_i32$0 = $36$hi;
  i64toi32_i32$3 = $231;
  i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
  $7 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
  $7$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $3$hi;
  i64toi32_i32$2 = $3;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 49;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = 0;
   $232 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $232 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
  }
  $39 = $232;
  $39$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $4$hi;
  i64toi32_i32$0 = $4;
  i64toi32_i32$2 = 65535;
  i64toi32_i32$3 = -1;
  i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
  $8 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
  $8$hi = i64toi32_i32$2;
  i64toi32_i32$1 = $8;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = 15;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
   $233 = 0;
  } else {
   i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
   $233 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
  }
  $43$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $39$hi;
  i64toi32_i32$2 = $39;
  i64toi32_i32$1 = $43$hi;
  i64toi32_i32$3 = $233;
  i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
  $9 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
  $9$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $4$hi;
  i64toi32_i32$1 = $2$hi;
  i64toi32_i32$1 = $4$hi;
  i64toi32_i32$0 = $4;
  i64toi32_i32$2 = $2$hi;
  i64toi32_i32$3 = $2;
  i64toi32_i32$2 = i64toi32_i32$1 ^ i64toi32_i32$2 | 0;
  i64toi32_i32$1 = i64toi32_i32$0 ^ i64toi32_i32$3 | 0;
  i64toi32_i32$0 = -2147483648;
  i64toi32_i32$3 = 0;
  i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
  $10 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
  $10$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $2$hi;
  i64toi32_i32$2 = $2;
  i64toi32_i32$1 = 65535;
  i64toi32_i32$3 = -1;
  i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
  $11 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
  $11$hi = i64toi32_i32$1;
  i64toi32_i32$0 = $11;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = 0;
   $234 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
   $234 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
  }
  $12 = $234;
  $12$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $8$hi;
  i64toi32_i32$1 = $8;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = 17;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$0 = 0;
   $235 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
   $235 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
  }
  $13 = $235;
  $13$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$2 = $4;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 48;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = 0;
   $237 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $237 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
  }
  $14 = $237 & 32767 | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$0 = $2;
     i64toi32_i32$2 = 0;
     i64toi32_i32$3 = 48;
     i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$2 = 0;
      $238 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
     } else {
      i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
      $238 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
     }
     $15 = $238 & 32767 | 0;
     if (($15 + -1 | 0) >>> 0 > 32765 >>> 0) {
      break label$3
     }
     $16 = 0;
     if (($14 + -1 | 0) >>> 0 < 32766 >>> 0) {
      break label$2
     }
    }
    label$4 : {
     i64toi32_i32$2 = $1$hi;
     $70 = !($1 | i64toi32_i32$2 | 0);
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$1 = $2;
     i64toi32_i32$0 = 2147483647;
     i64toi32_i32$3 = -1;
     i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
     $17 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
     $17$hi = i64toi32_i32$0;
     i64toi32_i32$2 = $17;
     i64toi32_i32$1 = 2147418112;
     i64toi32_i32$3 = 0;
     $74 = i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
     i64toi32_i32$2 = i64toi32_i32$0;
     i64toi32_i32$2 = i64toi32_i32$0;
     i64toi32_i32$3 = $17;
     i64toi32_i32$0 = 2147418112;
     i64toi32_i32$1 = 0;
     if ((i64toi32_i32$3 | 0) == (i64toi32_i32$1 | 0) & (i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) | 0 ? $70 : $74) {
      break label$4
     }
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$1 = $2;
     i64toi32_i32$2 = 32768;
     i64toi32_i32$0 = 0;
     i64toi32_i32$2 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
     $10 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
     $10$hi = i64toi32_i32$2;
     break label$1;
    }
    label$5 : {
     i64toi32_i32$2 = $3$hi;
     $81 = !($3 | i64toi32_i32$2 | 0);
     i64toi32_i32$2 = $4$hi;
     i64toi32_i32$3 = $4;
     i64toi32_i32$1 = 2147483647;
     i64toi32_i32$0 = -1;
     i64toi32_i32$1 = i64toi32_i32$2 & i64toi32_i32$1 | 0;
     $2 = i64toi32_i32$3 & i64toi32_i32$0 | 0;
     $2$hi = i64toi32_i32$1;
     i64toi32_i32$2 = $2;
     i64toi32_i32$3 = 2147418112;
     i64toi32_i32$0 = 0;
     $85 = i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
     i64toi32_i32$2 = i64toi32_i32$1;
     i64toi32_i32$0 = $2;
     i64toi32_i32$1 = 2147418112;
     i64toi32_i32$3 = 0;
     if ((i64toi32_i32$0 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$2 | 0) == (i64toi32_i32$1 | 0) | 0 ? $81 : $85) {
      break label$5
     }
     i64toi32_i32$0 = $4$hi;
     i64toi32_i32$3 = $4;
     i64toi32_i32$2 = 32768;
     i64toi32_i32$1 = 0;
     i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
     $10 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
     $10$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $3$hi;
     $1 = $3;
     $1$hi = i64toi32_i32$2;
     break label$1;
    }
    label$6 : {
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$2 = $17$hi;
     i64toi32_i32$0 = $17;
     i64toi32_i32$3 = 2147418112;
     i64toi32_i32$1 = 0;
     i64toi32_i32$3 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
     $94 = i64toi32_i32$0 ^ i64toi32_i32$1 | 0;
     $94$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $1$hi;
     i64toi32_i32$2 = $1;
     i64toi32_i32$0 = $94$hi;
     i64toi32_i32$1 = $94;
     i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
     i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
     i64toi32_i32$2 = 0;
     i64toi32_i32$1 = 0;
     if ((i64toi32_i32$3 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$2 | 0) | 0) {
      break label$6
     }
     label$7 : {
      i64toi32_i32$3 = $3$hi;
      i64toi32_i32$3 = $2$hi;
      i64toi32_i32$3 = $3$hi;
      i64toi32_i32$1 = $3;
      i64toi32_i32$0 = $2$hi;
      i64toi32_i32$2 = $2;
      i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
      if (!!(i64toi32_i32$1 | i64toi32_i32$2 | 0 | i64toi32_i32$0 | 0)) {
       break label$7
      }
      i64toi32_i32$0 = 2147450880;
      $10 = 0;
      $10$hi = i64toi32_i32$0;
      i64toi32_i32$0 = 0;
      $1 = 0;
      $1$hi = i64toi32_i32$0;
      break label$1;
     }
     i64toi32_i32$0 = $10$hi;
     i64toi32_i32$3 = $10;
     i64toi32_i32$1 = 2147418112;
     i64toi32_i32$2 = 0;
     i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
     $10 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
     $10$hi = i64toi32_i32$1;
     i64toi32_i32$1 = 0;
     $1 = 0;
     $1$hi = i64toi32_i32$1;
     break label$1;
    }
    label$8 : {
     i64toi32_i32$1 = $3$hi;
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$0 = $2;
     i64toi32_i32$3 = 2147418112;
     i64toi32_i32$2 = 0;
     i64toi32_i32$3 = i64toi32_i32$1 ^ i64toi32_i32$3 | 0;
     $106 = i64toi32_i32$0 ^ i64toi32_i32$2 | 0;
     $106$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$1 = $3;
     i64toi32_i32$0 = $106$hi;
     i64toi32_i32$2 = $106;
     i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
     i64toi32_i32$3 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
     i64toi32_i32$1 = 0;
     i64toi32_i32$2 = 0;
     if ((i64toi32_i32$3 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$1 | 0) | 0) {
      break label$8
     }
     i64toi32_i32$3 = $1$hi;
     i64toi32_i32$3 = $17$hi;
     i64toi32_i32$3 = $1$hi;
     i64toi32_i32$2 = $1;
     i64toi32_i32$0 = $17$hi;
     i64toi32_i32$1 = $17;
     i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
     $2 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
     $2$hi = i64toi32_i32$0;
     i64toi32_i32$0 = 0;
     $1 = 0;
     $1$hi = i64toi32_i32$0;
     label$9 : {
      i64toi32_i32$0 = $2$hi;
      if (!!($2 | i64toi32_i32$0 | 0)) {
       break label$9
      }
      i64toi32_i32$0 = 2147450880;
      $10 = 0;
      $10$hi = i64toi32_i32$0;
      break label$1;
     }
     i64toi32_i32$0 = $10$hi;
     i64toi32_i32$3 = $10;
     i64toi32_i32$2 = 2147418112;
     i64toi32_i32$1 = 0;
     i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
     $10 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
     $10$hi = i64toi32_i32$2;
     break label$1;
    }
    label$10 : {
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$2 = $17$hi;
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$0 = $1;
     i64toi32_i32$3 = $17$hi;
     i64toi32_i32$1 = $17;
     i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
     i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
     i64toi32_i32$0 = 0;
     i64toi32_i32$1 = 0;
     if ((i64toi32_i32$2 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | 0) {
      break label$10
     }
     i64toi32_i32$2 = 0;
     $1 = 0;
     $1$hi = i64toi32_i32$2;
     break label$1;
    }
    label$11 : {
     i64toi32_i32$2 = $3$hi;
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$2 = $3$hi;
     i64toi32_i32$1 = $3;
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$0 = $2;
     i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
     i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
     i64toi32_i32$1 = 0;
     i64toi32_i32$0 = 0;
     if ((i64toi32_i32$2 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$1 | 0) | 0) {
      break label$11
     }
     i64toi32_i32$2 = 0;
     $1 = 0;
     $1$hi = i64toi32_i32$2;
     break label$1;
    }
    $16 = 0;
    label$12 : {
     i64toi32_i32$2 = $17$hi;
     i64toi32_i32$0 = $17;
     i64toi32_i32$3 = 65535;
     i64toi32_i32$1 = -1;
     if (i64toi32_i32$2 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$0 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0) {
      break label$12
     }
     $128 = $5 + 80 | 0;
     i64toi32_i32$0 = $1$hi;
     $129 = $1;
     $129$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $11$hi;
     $130 = $11;
     $130$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$0 = $11$hi;
     $16 = !($11 | i64toi32_i32$0 | 0);
     i64toi32_i32$4 = $16;
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$2 = $11$hi;
     i64toi32_i32$3 = i64toi32_i32$4 ? $1 : $11;
     i64toi32_i32$1 = i64toi32_i32$4 ? i64toi32_i32$0 : i64toi32_i32$2;
     i64toi32_i32$0 = Math_clz32(i64toi32_i32$1);
     i64toi32_i32$4 = 0;
     if ((i64toi32_i32$0 | 0) == (32 | 0)) {
      $239 = Math_clz32(i64toi32_i32$3) + 32 | 0
     } else {
      $239 = i64toi32_i32$0
     }
     $137$hi = i64toi32_i32$4;
     i64toi32_i32$4 = 0;
     $140$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $137$hi;
     i64toi32_i32$3 = $239;
     i64toi32_i32$1 = $140$hi;
     i64toi32_i32$0 = $16 << 6 | 0;
     i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
     i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $16 = i64toi32_i32$2;
     i64toi32_i32$5 = $129$hi;
     i64toi32_i32$3 = $130$hi;
     __ashlti3($128 | 0, $129 | 0, i64toi32_i32$5 | 0, $130 | 0, i64toi32_i32$3 | 0, i64toi32_i32$2 + -15 | 0 | 0);
     $16 = 16 - i64toi32_i32$2 | 0;
     i64toi32_i32$4 = $5;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 80 | 0) >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 84 | 0) >> 2] | 0;
     $1 = i64toi32_i32$3;
     $1$hi = i64toi32_i32$5;
     i64toi32_i32$4 = i64toi32_i32$3;
     i64toi32_i32$3 = 0;
     i64toi32_i32$0 = 32;
     i64toi32_i32$1 = i64toi32_i32$0 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = 0;
      $240 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
     } else {
      i64toi32_i32$3 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
      $240 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$1 | 0) | 0;
     }
     $150 = $240;
     $150$hi = i64toi32_i32$3;
     i64toi32_i32$5 = $5 + 88 | 0;
     i64toi32_i32$3 = HEAP32[i64toi32_i32$5 >> 2] | 0;
     i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
     $11 = i64toi32_i32$3;
     $11$hi = i64toi32_i32$4;
     i64toi32_i32$5 = i64toi32_i32$3;
     i64toi32_i32$3 = 0;
     i64toi32_i32$0 = 32;
     i64toi32_i32$1 = i64toi32_i32$0 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$5 << i64toi32_i32$1 | 0;
      $241 = 0;
     } else {
      i64toi32_i32$3 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$1 | 0) | 0;
      $241 = i64toi32_i32$5 << i64toi32_i32$1 | 0;
     }
     $155$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $150$hi;
     i64toi32_i32$4 = $150;
     i64toi32_i32$5 = $155$hi;
     i64toi32_i32$0 = $241;
     i64toi32_i32$5 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
     $6 = i64toi32_i32$4 | i64toi32_i32$0 | 0;
     $6$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $11$hi;
     i64toi32_i32$3 = $11;
     i64toi32_i32$4 = 0;
     i64toi32_i32$0 = 32;
     i64toi32_i32$1 = i64toi32_i32$0 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
      i64toi32_i32$4 = 0;
      $242 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
     } else {
      i64toi32_i32$4 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
      $242 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$1 | 0) | 0;
     }
     $12 = $242;
     $12$hi = i64toi32_i32$4;
    }
    i64toi32_i32$4 = $2$hi;
    i64toi32_i32$5 = $2;
    i64toi32_i32$3 = 65535;
    i64toi32_i32$0 = -1;
    if (i64toi32_i32$4 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$5 >>> 0 > i64toi32_i32$0 >>> 0 | 0) | 0) {
     break label$2
    }
    $162 = $5 + 64 | 0;
    i64toi32_i32$5 = $3$hi;
    $163 = $3;
    $163$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $8$hi;
    $164 = $8;
    $164$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$5 = $8$hi;
    $18 = !($8 | i64toi32_i32$5 | 0);
    i64toi32_i32$1 = $18;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$4 = $8$hi;
    i64toi32_i32$3 = i64toi32_i32$1 ? $3 : $8;
    i64toi32_i32$0 = i64toi32_i32$1 ? i64toi32_i32$5 : i64toi32_i32$4;
    i64toi32_i32$5 = Math_clz32(i64toi32_i32$0);
    i64toi32_i32$1 = 0;
    if ((i64toi32_i32$5 | 0) == (32 | 0)) {
     $244 = Math_clz32(i64toi32_i32$3) + 32 | 0
    } else {
     $244 = i64toi32_i32$5
    }
    $171$hi = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    $174$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $171$hi;
    i64toi32_i32$3 = $244;
    i64toi32_i32$0 = $174$hi;
    i64toi32_i32$5 = $18 << 6 | 0;
    i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
    i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
    }
    $18 = i64toi32_i32$4;
    i64toi32_i32$2 = $163$hi;
    i64toi32_i32$3 = $164$hi;
    __ashlti3($162 | 0, $163 | 0, i64toi32_i32$2 | 0, $164 | 0, i64toi32_i32$3 | 0, i64toi32_i32$4 + -15 | 0 | 0);
    $16 = ($16 - i64toi32_i32$4 | 0) + 16 | 0;
    i64toi32_i32$1 = $5;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 64 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 68 | 0) >> 2] | 0;
    $3 = i64toi32_i32$3;
    $3$hi = i64toi32_i32$2;
    i64toi32_i32$1 = i64toi32_i32$3;
    i64toi32_i32$3 = 0;
    i64toi32_i32$5 = 49;
    i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = 0;
     $246 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
    } else {
     i64toi32_i32$3 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
     $246 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$0 | 0) | 0;
    }
    $186 = $246;
    $186$hi = i64toi32_i32$3;
    i64toi32_i32$2 = $5 + 72 | 0;
    i64toi32_i32$3 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $2 = i64toi32_i32$3;
    $2$hi = i64toi32_i32$1;
    i64toi32_i32$2 = i64toi32_i32$3;
    i64toi32_i32$3 = 0;
    i64toi32_i32$5 = 15;
    i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = i64toi32_i32$2 << i64toi32_i32$0 | 0;
     $248 = 0;
    } else {
     i64toi32_i32$3 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$0 | 0) | 0;
     $248 = i64toi32_i32$2 << i64toi32_i32$0 | 0;
    }
    $191$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $186$hi;
    i64toi32_i32$1 = $186;
    i64toi32_i32$2 = $191$hi;
    i64toi32_i32$5 = $248;
    i64toi32_i32$2 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
    $9 = i64toi32_i32$1 | i64toi32_i32$5 | 0;
    $9$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$3 = $3;
    i64toi32_i32$1 = 0;
    i64toi32_i32$5 = 17;
    i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $249 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
     $249 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$0 | 0) | 0;
    }
    $194 = $249;
    $194$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$2 = $2;
    i64toi32_i32$3 = 0;
    i64toi32_i32$5 = 47;
    i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = i64toi32_i32$2 << i64toi32_i32$0 | 0;
     $251 = 0;
    } else {
     i64toi32_i32$3 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$0 | 0) | 0;
     $251 = i64toi32_i32$2 << i64toi32_i32$0 | 0;
    }
    $196$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $194$hi;
    i64toi32_i32$1 = $194;
    i64toi32_i32$2 = $196$hi;
    i64toi32_i32$5 = $251;
    i64toi32_i32$2 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
    $7 = i64toi32_i32$1 | i64toi32_i32$5 | 0;
    $7$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$3 = $2;
    i64toi32_i32$1 = 0;
    i64toi32_i32$5 = 17;
    i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $252 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
     $252 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$0 | 0) | 0;
    }
    $13 = $252;
    $13$hi = i64toi32_i32$1;
   }
   i64toi32_i32$1 = $7$hi;
   i64toi32_i32$2 = $7;
   i64toi32_i32$3 = 0;
   i64toi32_i32$5 = -1;
   i64toi32_i32$3 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
   $2 = i64toi32_i32$2 & i64toi32_i32$5 | 0;
   $2$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $1$hi;
   i64toi32_i32$1 = $1;
   i64toi32_i32$2 = 0;
   i64toi32_i32$5 = -1;
   i64toi32_i32$2 = i64toi32_i32$3 & i64toi32_i32$2 | 0;
   $4 = i64toi32_i32$1 & i64toi32_i32$5 | 0;
   $4$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$1 = __wasm_i64_mul($2 | 0, i64toi32_i32$2 | 0, $4 | 0, i64toi32_i32$1 | 0) | 0;
   i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
   $19 = i64toi32_i32$1;
   $19$hi = i64toi32_i32$2;
   $207 = i64toi32_i32$1;
   $207$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$3 = $3;
   i64toi32_i32$1 = 0;
   i64toi32_i32$5 = 15;
   i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = i64toi32_i32$3 << i64toi32_i32$0 | 0;
    $254 = 0;
   } else {
    i64toi32_i32$1 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$0 | 0) | 0;
    $254 = i64toi32_i32$3 << i64toi32_i32$0 | 0;
   }
   i64toi32_i32$2 = $254;
   i64toi32_i32$3 = 0;
   i64toi32_i32$5 = -32768;
   i64toi32_i32$3 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
   $1 = i64toi32_i32$2 & i64toi32_i32$5 | 0;
   $1$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $6$hi;
   i64toi32_i32$1 = $6;
   i64toi32_i32$2 = 0;
   i64toi32_i32$5 = -1;
   i64toi32_i32$2 = i64toi32_i32$3 & i64toi32_i32$2 | 0;
   $3 = i64toi32_i32$1 & i64toi32_i32$5 | 0;
   $3$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$1 = __wasm_i64_mul($1 | 0, i64toi32_i32$2 | 0, $3 | 0, i64toi32_i32$1 | 0) | 0;
   i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
   $215 = i64toi32_i32$1;
   $215$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $207$hi;
   i64toi32_i32$3 = $207;
   i64toi32_i32$1 = $215$hi;
   i64toi32_i32$5 = $215;
   i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
   i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
   if (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
   }
   $6 = i64toi32_i32$0;
   $6$hi = i64toi32_i32$4;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$3 = 0;
   i64toi32_i32$5 = 32;
   i64toi32_i32$1 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$3 = i64toi32_i32$2 << i64toi32_i32$1 | 0;
    $256 = 0;
   } else {
    i64toi32_i32$3 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$1 | 0) | 0;
    $256 = i64toi32_i32$2 << i64toi32_i32$1 | 0;
   }
   $8 = $256;
   $8$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $1$hi;
   i64toi32_i32$3 = $4$hi;
   i64toi32_i32$3 = $1$hi;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$2 = __wasm_i64_mul($1 | 0, i64toi32_i32$3 | 0, $4 | 0, i64toi32_i32$2 | 0) | 0;
   i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
   $222 = i64toi32_i32$2;
   $222$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $8$hi;
   i64toi32_i32$4 = $8;
   i64toi32_i32$2 = $222$hi;
   i64toi32_i32$5 = $222;
   i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
   i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
   if (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0) {
    i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
   }
   $7 = i64toi32_i32$1;
   $7$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $8$hi;
   i64toi32_i32$0 = $7$hi;
   i64toi32_i32$3 = i64toi32_i32$1;
   i64toi32_i32$4 = $8$hi;
   i64toi32_i32$5 = $8;
   i64toi32_i32$3 = 0;
   $227 = i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
   $227$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$3 = $3$hi;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$0 = __wasm_i64_mul($2 | 0, i64toi32_i32$3 | 0, $3 | 0, i64toi32_i32$0 | 0) | 0;
   i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
   $20 = i64toi32_i32$0;
   $20$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $1$hi;
   i64toi32_i32$3 = $11$hi;
   i64toi32_i32$5 = $11;
   i64toi32_i32$0 = 0;
   i64toi32_i32$4 = -1;
   i64toi32_i32$0 = i64toi32_i32$3 & i64toi32_i32$0 | 0;
   $8 = i64toi32_i32$5 & i64toi32_i32$4 | 0;
   $8$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$5 = $8$hi;
   i64toi32_i32$5 = __wasm_i64_mul($1 | 0, i64toi32_i32$0 | 0, $8 | 0, i64toi32_i32$5 | 0) | 0;
   i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
   $236 = i64toi32_i32$5;
   $236$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $20$hi;
   i64toi32_i32$3 = $20;
   i64toi32_i32$5 = $236$hi;
   i64toi32_i32$4 = $236;
   i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$4 | 0;
   i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
   if (i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0) {
    i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
   }
   $17 = i64toi32_i32$2;
   $17$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $9$hi;
   i64toi32_i32$0 = $9;
   i64toi32_i32$3 = 0;
   i64toi32_i32$4 = -1;
   i64toi32_i32$3 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
   $11 = i64toi32_i32$0 & i64toi32_i32$4 | 0;
   $11$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $4$hi;
   i64toi32_i32$3 = $11$hi;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$0 = __wasm_i64_mul($11 | 0, i64toi32_i32$3 | 0, $4 | 0, i64toi32_i32$0 | 0) | 0;
   i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
   $243 = i64toi32_i32$0;
   $243$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $17$hi;
   i64toi32_i32$1 = i64toi32_i32$2;
   i64toi32_i32$0 = $243$hi;
   i64toi32_i32$4 = $243;
   i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
   i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
   if (i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
   }
   $9 = i64toi32_i32$5;
   $9$hi = i64toi32_i32$2;
   $245 = i64toi32_i32$5;
   $245$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $6$hi;
   i64toi32_i32$3 = $6;
   i64toi32_i32$1 = 0;
   i64toi32_i32$4 = 32;
   i64toi32_i32$0 = i64toi32_i32$4 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = 0;
    $257 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
   } else {
    i64toi32_i32$1 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
    $257 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$0 | 0) | 0;
   }
   $247 = $257;
   $247$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $6$hi;
   i64toi32_i32$1 = $19$hi;
   i64toi32_i32$1 = $6$hi;
   i64toi32_i32$2 = $6;
   i64toi32_i32$3 = $19$hi;
   i64toi32_i32$4 = $19;
   $250 = i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
   i64toi32_i32$2 = 0;
   i64toi32_i32$4 = $250;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 32;
   i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = i64toi32_i32$4 << i64toi32_i32$0 | 0;
    $258 = 0;
   } else {
    i64toi32_i32$1 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$4 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$0 | 0) | 0;
    $258 = i64toi32_i32$4 << i64toi32_i32$0 | 0;
   }
   $252$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $247$hi;
   i64toi32_i32$2 = $247;
   i64toi32_i32$4 = $252$hi;
   i64toi32_i32$3 = $258;
   i64toi32_i32$4 = i64toi32_i32$1 | i64toi32_i32$4 | 0;
   $253 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
   $253$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $245$hi;
   i64toi32_i32$1 = $245;
   i64toi32_i32$2 = $253$hi;
   i64toi32_i32$3 = $253;
   i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
   i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
   if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   $19 = i64toi32_i32$0;
   $19$hi = i64toi32_i32$5;
   $255 = i64toi32_i32$0;
   $255$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $2$hi;
   i64toi32_i32$5 = $8$hi;
   i64toi32_i32$5 = $2$hi;
   i64toi32_i32$1 = $8$hi;
   i64toi32_i32$1 = __wasm_i64_mul($2 | 0, i64toi32_i32$5 | 0, $8 | 0, i64toi32_i32$1 | 0) | 0;
   i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
   $21 = i64toi32_i32$1;
   $21$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $1$hi;
   i64toi32_i32$5 = $12$hi;
   i64toi32_i32$4 = $12;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 65536;
   i64toi32_i32$1 = i64toi32_i32$5 | i64toi32_i32$1 | 0;
   $6 = i64toi32_i32$4 | i64toi32_i32$3 | 0;
   $6$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$4 = $6$hi;
   i64toi32_i32$4 = __wasm_i64_mul($1 | 0, i64toi32_i32$1 | 0, $6 | 0, i64toi32_i32$4 | 0) | 0;
   i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
   $264 = i64toi32_i32$4;
   $264$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $21$hi;
   i64toi32_i32$5 = $21;
   i64toi32_i32$4 = $264$hi;
   i64toi32_i32$3 = $264;
   i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
   i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
   if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
   }
   $12 = i64toi32_i32$2;
   $12$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $11$hi;
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$0 = $11$hi;
   i64toi32_i32$5 = $3$hi;
   i64toi32_i32$5 = __wasm_i64_mul($11 | 0, i64toi32_i32$0 | 0, $3 | 0, i64toi32_i32$5 | 0) | 0;
   i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
   $269 = i64toi32_i32$5;
   $269$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $12$hi;
   i64toi32_i32$1 = i64toi32_i32$2;
   i64toi32_i32$5 = $269$hi;
   i64toi32_i32$3 = $269;
   i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
   i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
   if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
   }
   $22 = i64toi32_i32$4;
   $22$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $13$hi;
   i64toi32_i32$0 = $13;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 2147483647;
   i64toi32_i32$1 = i64toi32_i32$2 & i64toi32_i32$1 | 0;
   i64toi32_i32$2 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$3 = -2147483648;
   i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
   $1 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
   $1$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$2 = __wasm_i64_mul($1 | 0, i64toi32_i32$0 | 0, $4 | 0, i64toi32_i32$2 | 0) | 0;
   i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
   $277 = i64toi32_i32$2;
   $277$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $22$hi;
   i64toi32_i32$1 = i64toi32_i32$4;
   i64toi32_i32$2 = $277$hi;
   i64toi32_i32$3 = $277;
   i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
   i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
   if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
   }
   $13 = i64toi32_i32$5;
   $13$hi = i64toi32_i32$4;
   i64toi32_i32$0 = i64toi32_i32$5;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 32;
   i64toi32_i32$2 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = i64toi32_i32$0 << i64toi32_i32$2 | 0;
    $259 = 0;
   } else {
    i64toi32_i32$1 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$2 | 0) | 0;
    $259 = i64toi32_i32$0 << i64toi32_i32$2 | 0;
   }
   $280$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $255$hi;
   i64toi32_i32$4 = $255;
   i64toi32_i32$0 = $280$hi;
   i64toi32_i32$3 = $259;
   i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
   i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
   if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   $23 = i64toi32_i32$2;
   $23$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $227$hi;
   i64toi32_i32$1 = $227;
   i64toi32_i32$4 = $23$hi;
   i64toi32_i32$3 = i64toi32_i32$2;
   i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
   i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
   if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
   }
   $4 = i64toi32_i32$0;
   $4$hi = i64toi32_i32$2;
   $14 = (($15 + $14 | 0) + $16 | 0) + -16383 | 0;
   label$13 : {
    label$14 : {
     i64toi32_i32$2 = $11$hi;
     i64toi32_i32$2 = $8$hi;
     i64toi32_i32$2 = $11$hi;
     i64toi32_i32$1 = $8$hi;
     i64toi32_i32$1 = __wasm_i64_mul($11 | 0, i64toi32_i32$2 | 0, $8 | 0, i64toi32_i32$1 | 0) | 0;
     i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
     $24 = i64toi32_i32$1;
     $24$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$2 = $6$hi;
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$1 = $6$hi;
     i64toi32_i32$1 = __wasm_i64_mul($2 | 0, i64toi32_i32$2 | 0, $6 | 0, i64toi32_i32$1 | 0) | 0;
     i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
     $296 = i64toi32_i32$1;
     $296$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $24$hi;
     i64toi32_i32$5 = $24;
     i64toi32_i32$1 = $296$hi;
     i64toi32_i32$3 = $296;
     i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
     i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     $2 = i64toi32_i32$4;
     $2$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $24$hi;
     i64toi32_i32$0 = $2$hi;
     i64toi32_i32$2 = i64toi32_i32$4;
     i64toi32_i32$5 = $24$hi;
     i64toi32_i32$3 = $24;
     $300 = i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
     i64toi32_i32$2 = 0;
     $301 = $300;
     $301$hi = i64toi32_i32$2;
     i64toi32_i32$2 = i64toi32_i32$0;
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$2 = $3$hi;
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$0 = $3$hi;
     i64toi32_i32$0 = __wasm_i64_mul($1 | 0, i64toi32_i32$2 | 0, $3 | 0, i64toi32_i32$0 | 0) | 0;
     i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
     $305 = i64toi32_i32$0;
     $305$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$3 = i64toi32_i32$4;
     i64toi32_i32$0 = $305$hi;
     i64toi32_i32$5 = $305;
     i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
     i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $3 = i64toi32_i32$1;
     $3$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $2$hi;
     i64toi32_i32$4 = $3$hi;
     i64toi32_i32$2 = i64toi32_i32$1;
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$5 = $2;
     $309 = i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
     i64toi32_i32$2 = 0;
     $310$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $301$hi;
     i64toi32_i32$5 = $301;
     i64toi32_i32$4 = $310$hi;
     i64toi32_i32$3 = $309;
     i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
     i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
     }
     $311 = i64toi32_i32$0;
     $311$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $3$hi;
     $312 = $3;
     $312$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $17$hi;
     i64toi32_i32$1 = $20$hi;
     i64toi32_i32$1 = $17$hi;
     i64toi32_i32$2 = $17;
     i64toi32_i32$5 = $20$hi;
     i64toi32_i32$3 = $20;
     $315 = i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
     i64toi32_i32$2 = 0;
     $316$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $9$hi;
     i64toi32_i32$2 = i64toi32_i32$1;
     i64toi32_i32$2 = $9$hi;
     i64toi32_i32$3 = $9;
     i64toi32_i32$5 = $17;
     $319 = i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
     i64toi32_i32$3 = 0;
     $320$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $316$hi;
     i64toi32_i32$5 = $315;
     i64toi32_i32$2 = $320$hi;
     i64toi32_i32$1 = $319;
     i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
     i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     $321$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $312$hi;
     i64toi32_i32$3 = $312;
     i64toi32_i32$5 = $321$hi;
     i64toi32_i32$1 = i64toi32_i32$4;
     i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
     i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $2 = i64toi32_i32$2;
     $2$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $3$hi;
     i64toi32_i32$4 = $2$hi;
     i64toi32_i32$0 = i64toi32_i32$2;
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$1 = $3;
     $325 = i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
     i64toi32_i32$0 = 0;
     $326$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $311$hi;
     i64toi32_i32$1 = $311;
     i64toi32_i32$4 = $326$hi;
     i64toi32_i32$3 = $325;
     i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
     i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $327$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$2 = $6$hi;
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$1 = $6$hi;
     i64toi32_i32$1 = __wasm_i64_mul($1 | 0, i64toi32_i32$2 | 0, $6 | 0, i64toi32_i32$1 | 0) | 0;
     i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
     $330 = i64toi32_i32$1;
     $330$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $327$hi;
     i64toi32_i32$0 = i64toi32_i32$5;
     i64toi32_i32$1 = $330$hi;
     i64toi32_i32$3 = $330;
     i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
     i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $331 = i64toi32_i32$4;
     $331$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $1$hi;
     i64toi32_i32$5 = $8$hi;
     i64toi32_i32$5 = $1$hi;
     i64toi32_i32$0 = $8$hi;
     i64toi32_i32$0 = __wasm_i64_mul($1 | 0, i64toi32_i32$5 | 0, $8 | 0, i64toi32_i32$0 | 0) | 0;
     i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
     $3 = i64toi32_i32$0;
     $3$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $11$hi;
     i64toi32_i32$5 = $6$hi;
     i64toi32_i32$5 = $11$hi;
     i64toi32_i32$0 = $6$hi;
     i64toi32_i32$0 = __wasm_i64_mul($11 | 0, i64toi32_i32$5 | 0, $6 | 0, i64toi32_i32$0 | 0) | 0;
     i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
     $338 = i64toi32_i32$0;
     $338$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $3$hi;
     i64toi32_i32$2 = $3;
     i64toi32_i32$0 = $338$hi;
     i64toi32_i32$3 = $338;
     i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
     i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $1 = i64toi32_i32$1;
     $1$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $3$hi;
     i64toi32_i32$4 = $1$hi;
     i64toi32_i32$5 = i64toi32_i32$1;
     i64toi32_i32$2 = $3$hi;
     i64toi32_i32$3 = $3;
     i64toi32_i32$5 = 0;
     i64toi32_i32$3 = i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
     i64toi32_i32$4 = 0;
     i64toi32_i32$2 = 32;
     i64toi32_i32$0 = i64toi32_i32$2 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$3 << i64toi32_i32$0 | 0;
      $260 = 0;
     } else {
      i64toi32_i32$4 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$0 | 0) | 0;
      $260 = i64toi32_i32$3 << i64toi32_i32$0 | 0;
     }
     $344 = $260;
     $344$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $1$hi;
     i64toi32_i32$5 = $1;
     i64toi32_i32$3 = 0;
     i64toi32_i32$2 = 32;
     i64toi32_i32$0 = i64toi32_i32$2 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = 0;
      $261 = i64toi32_i32$4 >>> i64toi32_i32$0 | 0;
     } else {
      i64toi32_i32$3 = i64toi32_i32$4 >>> i64toi32_i32$0 | 0;
      $261 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$0 | 0) | 0;
     }
     $346$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $344$hi;
     i64toi32_i32$4 = $344;
     i64toi32_i32$5 = $346$hi;
     i64toi32_i32$2 = $261;
     i64toi32_i32$5 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
     $347 = i64toi32_i32$4 | i64toi32_i32$2 | 0;
     $347$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $331$hi;
     i64toi32_i32$3 = $331;
     i64toi32_i32$4 = $347$hi;
     i64toi32_i32$2 = $347;
     i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
     i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
     }
     $348 = i64toi32_i32$0;
     $348$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $2$hi;
     $349 = $2;
     $349$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$5 = $1;
     i64toi32_i32$3 = 0;
     i64toi32_i32$2 = 32;
     i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
      $262 = 0;
     } else {
      i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
      $262 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
     }
     $351$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $349$hi;
     i64toi32_i32$1 = $349;
     i64toi32_i32$5 = $351$hi;
     i64toi32_i32$2 = $262;
     i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
     i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     $1 = i64toi32_i32$4;
     $1$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $2$hi;
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$3 = i64toi32_i32$4;
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$2 = $2;
     $355 = i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
     i64toi32_i32$3 = 0;
     $356$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $348$hi;
     i64toi32_i32$2 = $348;
     i64toi32_i32$0 = $356$hi;
     i64toi32_i32$1 = $355;
     i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
     i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $357 = i64toi32_i32$5;
     $357$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $1$hi;
     $358 = $1;
     $358$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $13$hi;
     i64toi32_i32$3 = $13;
     i64toi32_i32$2 = 0;
     i64toi32_i32$1 = 32;
     i64toi32_i32$0 = i64toi32_i32$1 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
      i64toi32_i32$2 = 0;
      $263 = i64toi32_i32$4 >>> i64toi32_i32$0 | 0;
     } else {
      i64toi32_i32$2 = i64toi32_i32$4 >>> i64toi32_i32$0 | 0;
      $263 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$0 | 0) | 0;
     }
     $360 = $263;
     $360$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $12$hi;
     i64toi32_i32$2 = $21$hi;
     i64toi32_i32$2 = $12$hi;
     i64toi32_i32$4 = $12;
     i64toi32_i32$3 = $21$hi;
     i64toi32_i32$1 = $21;
     $363 = i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
     i64toi32_i32$4 = 0;
     $364$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $22$hi;
     i64toi32_i32$4 = i64toi32_i32$2;
     i64toi32_i32$4 = $22$hi;
     i64toi32_i32$1 = $22;
     i64toi32_i32$3 = $12;
     $367 = i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
     i64toi32_i32$1 = 0;
     $368$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $364$hi;
     i64toi32_i32$3 = $363;
     i64toi32_i32$4 = $368$hi;
     i64toi32_i32$2 = $367;
     i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
     i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $369$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $13$hi;
     i64toi32_i32$5 = $22$hi;
     i64toi32_i32$5 = $13$hi;
     i64toi32_i32$1 = $13;
     i64toi32_i32$3 = $22$hi;
     i64toi32_i32$2 = $22;
     $372 = i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
     i64toi32_i32$1 = 0;
     $373$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $369$hi;
     i64toi32_i32$2 = i64toi32_i32$0;
     i64toi32_i32$5 = $373$hi;
     i64toi32_i32$3 = $372;
     i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
     i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     i64toi32_i32$1 = i64toi32_i32$4;
     i64toi32_i32$2 = 0;
     i64toi32_i32$3 = 32;
     i64toi32_i32$5 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$1 << i64toi32_i32$5 | 0;
      $265 = 0;
     } else {
      i64toi32_i32$2 = ((1 << i64toi32_i32$5 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$5 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$5 | 0) | 0;
      $265 = i64toi32_i32$1 << i64toi32_i32$5 | 0;
     }
     $375$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $360$hi;
     i64toi32_i32$0 = $360;
     i64toi32_i32$1 = $375$hi;
     i64toi32_i32$3 = $265;
     i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
     $376 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
     $376$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $358$hi;
     i64toi32_i32$2 = $358;
     i64toi32_i32$0 = $376$hi;
     i64toi32_i32$3 = $376;
     i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
     i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $3 = i64toi32_i32$5;
     $3$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $1$hi;
     i64toi32_i32$4 = $3$hi;
     i64toi32_i32$1 = i64toi32_i32$5;
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$3 = $1;
     $380 = i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
     i64toi32_i32$1 = 0;
     $381$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $357$hi;
     i64toi32_i32$3 = $357;
     i64toi32_i32$4 = $381$hi;
     i64toi32_i32$2 = $380;
     i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
     i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $382 = i64toi32_i32$0;
     $382$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $3$hi;
     $383 = $3;
     $383$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $19$hi;
     i64toi32_i32$5 = $9$hi;
     i64toi32_i32$5 = $19$hi;
     i64toi32_i32$1 = $19;
     i64toi32_i32$3 = $9$hi;
     i64toi32_i32$2 = $9;
     $386 = i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
     i64toi32_i32$1 = 0;
     $387$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $23$hi;
     i64toi32_i32$1 = i64toi32_i32$5;
     i64toi32_i32$1 = $23$hi;
     i64toi32_i32$2 = $23;
     i64toi32_i32$3 = $19;
     $390 = i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
     i64toi32_i32$2 = 0;
     $391$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $387$hi;
     i64toi32_i32$3 = $386;
     i64toi32_i32$1 = $391$hi;
     i64toi32_i32$5 = $390;
     i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
     i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     $392$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $383$hi;
     i64toi32_i32$2 = $383;
     i64toi32_i32$3 = $392$hi;
     i64toi32_i32$5 = i64toi32_i32$4;
     i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
     i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $2 = i64toi32_i32$1;
     $2$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $3$hi;
     i64toi32_i32$4 = $2$hi;
     i64toi32_i32$0 = i64toi32_i32$1;
     i64toi32_i32$2 = $3$hi;
     i64toi32_i32$5 = $3;
     $396 = i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
     i64toi32_i32$0 = 0;
     $397$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $382$hi;
     i64toi32_i32$5 = $382;
     i64toi32_i32$4 = $397$hi;
     i64toi32_i32$2 = $396;
     i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
     i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
     }
     $1 = i64toi32_i32$3;
     $1$hi = i64toi32_i32$1;
     i64toi32_i32$0 = i64toi32_i32$3;
     i64toi32_i32$5 = 65536;
     i64toi32_i32$2 = 0;
     i64toi32_i32$5 = i64toi32_i32$1 & i64toi32_i32$5 | 0;
     if (!(i64toi32_i32$0 & i64toi32_i32$2 | 0 | i64toi32_i32$5 | 0)) {
      break label$14
     }
     $14 = $14 + 1 | 0;
     break label$13;
    }
    i64toi32_i32$5 = $7$hi;
    i64toi32_i32$1 = $7;
    i64toi32_i32$0 = 0;
    i64toi32_i32$2 = 63;
    i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = 0;
     $266 = i64toi32_i32$5 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$0 = i64toi32_i32$5 >>> i64toi32_i32$4 | 0;
     $266 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
    }
    $3 = $266;
    $3$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$5 = $1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$2 = 1;
    i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
     $267 = 0;
    } else {
     i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
     $267 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
    }
    $407 = $267;
    $407$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$0 = $2;
    i64toi32_i32$5 = 0;
    i64toi32_i32$2 = 63;
    i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$5 = 0;
     $268 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$5 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
     $268 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
    }
    $409$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $407$hi;
    i64toi32_i32$1 = $407;
    i64toi32_i32$0 = $409$hi;
    i64toi32_i32$2 = $268;
    i64toi32_i32$0 = i64toi32_i32$5 | i64toi32_i32$0 | 0;
    $1 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
    $1$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$5 = $2;
    i64toi32_i32$1 = 0;
    i64toi32_i32$2 = 1;
    i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
     $270 = 0;
    } else {
     i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
     $270 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
    }
    $412 = $270;
    $412$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $4$hi;
    i64toi32_i32$0 = $4;
    i64toi32_i32$5 = 0;
    i64toi32_i32$2 = 63;
    i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$5 = 0;
     $271 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$5 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
     $271 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
    }
    $414$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $412$hi;
    i64toi32_i32$1 = $412;
    i64toi32_i32$0 = $414$hi;
    i64toi32_i32$2 = $271;
    i64toi32_i32$0 = i64toi32_i32$5 | i64toi32_i32$0 | 0;
    $2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
    $2$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $7$hi;
    i64toi32_i32$5 = $7;
    i64toi32_i32$1 = 0;
    i64toi32_i32$2 = 1;
    i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
     $272 = 0;
    } else {
     i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
     $272 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
    }
    $7 = $272;
    $7$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $3$hi;
    $418 = $3;
    $418$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $4$hi;
    i64toi32_i32$0 = $4;
    i64toi32_i32$5 = 0;
    i64toi32_i32$2 = 1;
    i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
     $273 = 0;
    } else {
     i64toi32_i32$5 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
     $273 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    }
    $420$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $418$hi;
    i64toi32_i32$1 = $418;
    i64toi32_i32$0 = $420$hi;
    i64toi32_i32$2 = $273;
    i64toi32_i32$0 = i64toi32_i32$5 | i64toi32_i32$0 | 0;
    $4 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
    $4$hi = i64toi32_i32$0;
   }
   label$15 : {
    if (($14 | 0) < (32767 | 0)) {
     break label$15
    }
    i64toi32_i32$0 = $10$hi;
    i64toi32_i32$5 = $10;
    i64toi32_i32$1 = 2147418112;
    i64toi32_i32$2 = 0;
    i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
    $10 = i64toi32_i32$5 | i64toi32_i32$2 | 0;
    $10$hi = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    $1 = 0;
    $1$hi = i64toi32_i32$1;
    break label$1;
   }
   label$16 : {
    label$17 : {
     if (($14 | 0) > (0 | 0)) {
      break label$17
     }
     label$18 : {
      $15 = 1 - $14 | 0;
      if ($15 >>> 0 < 128 >>> 0) {
       break label$18
      }
      i64toi32_i32$1 = 0;
      $1 = 0;
      $1$hi = i64toi32_i32$1;
      break label$1;
     }
     i64toi32_i32$1 = $7$hi;
     i64toi32_i32$1 = $4$hi;
     $14 = $14 + 127 | 0;
     i64toi32_i32$1 = $7$hi;
     i64toi32_i32$5 = $4$hi;
     __ashlti3($5 + 48 | 0 | 0, $7 | 0, i64toi32_i32$1 | 0, $4 | 0, i64toi32_i32$5 | 0, $14 | 0);
     i64toi32_i32$5 = $2$hi;
     i64toi32_i32$5 = $1$hi;
     i64toi32_i32$5 = $2$hi;
     i64toi32_i32$1 = $1$hi;
     __ashlti3($5 + 32 | 0 | 0, $2 | 0, i64toi32_i32$5 | 0, $1 | 0, i64toi32_i32$1 | 0, $14 | 0);
     i64toi32_i32$1 = $7$hi;
     i64toi32_i32$1 = $4$hi;
     i64toi32_i32$1 = $7$hi;
     i64toi32_i32$5 = $4$hi;
     __lshrti3($5 + 16 | 0 | 0, $7 | 0, i64toi32_i32$1 | 0, $4 | 0, i64toi32_i32$5 | 0, $15 | 0);
     i64toi32_i32$5 = $2$hi;
     i64toi32_i32$5 = $1$hi;
     i64toi32_i32$5 = $2$hi;
     i64toi32_i32$1 = $1$hi;
     __lshrti3($5 | 0, $2 | 0, i64toi32_i32$5 | 0, $1 | 0, i64toi32_i32$1 | 0, $15 | 0);
     i64toi32_i32$0 = $5;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 32 | 0) >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 36 | 0) >> 2] | 0;
     $454 = i64toi32_i32$1;
     $454$hi = i64toi32_i32$5;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 16 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 20 | 0) >> 2] | 0;
     $456 = i64toi32_i32$5;
     $456$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $454$hi;
     i64toi32_i32$0 = $454;
     i64toi32_i32$5 = $456$hi;
     i64toi32_i32$2 = $456;
     i64toi32_i32$5 = i64toi32_i32$1 | i64toi32_i32$5 | 0;
     $457 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
     $457$hi = i64toi32_i32$5;
     i64toi32_i32$1 = $5;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 48 | 0) >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 52 | 0) >> 2] | 0;
     $459 = i64toi32_i32$5;
     $459$hi = i64toi32_i32$0;
     i64toi32_i32$1 = (i64toi32_i32$1 + 48 | 0) + 8 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$1 >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
     $463 = i64toi32_i32$0;
     $463$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $459$hi;
     i64toi32_i32$1 = $459;
     i64toi32_i32$0 = $463$hi;
     i64toi32_i32$2 = $463;
     i64toi32_i32$0 = i64toi32_i32$5 | i64toi32_i32$0 | 0;
     i64toi32_i32$5 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
     i64toi32_i32$1 = 0;
     i64toi32_i32$2 = 0;
     $465 = (i64toi32_i32$5 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$1 | 0) | 0;
     i64toi32_i32$5 = 0;
     $466$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $457$hi;
     i64toi32_i32$2 = $457;
     i64toi32_i32$0 = $466$hi;
     i64toi32_i32$1 = $465;
     i64toi32_i32$0 = i64toi32_i32$5 | i64toi32_i32$0 | 0;
     $7 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
     $7$hi = i64toi32_i32$0;
     i64toi32_i32$5 = ($5 + 32 | 0) + 8 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$5 >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
     $471 = i64toi32_i32$0;
     $471$hi = i64toi32_i32$2;
     i64toi32_i32$5 = ($5 + 16 | 0) + 8 | 0;
     i64toi32_i32$2 = HEAP32[i64toi32_i32$5 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
     $475 = i64toi32_i32$2;
     $475$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $471$hi;
     i64toi32_i32$5 = $471;
     i64toi32_i32$2 = $475$hi;
     i64toi32_i32$1 = $475;
     i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
     $4 = i64toi32_i32$5 | i64toi32_i32$1 | 0;
     $4$hi = i64toi32_i32$2;
     i64toi32_i32$0 = $5 + 8 | 0;
     i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
     $1 = i64toi32_i32$2;
     $1$hi = i64toi32_i32$5;
     i64toi32_i32$0 = $5;
     i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
     $2 = i64toi32_i32$5;
     $2$hi = i64toi32_i32$2;
     break label$16;
    }
    i64toi32_i32$2 = 0;
    i64toi32_i32$0 = $14;
    i64toi32_i32$5 = 0;
    i64toi32_i32$1 = 48;
    i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
     $274 = 0;
    } else {
     i64toi32_i32$5 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
     $274 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    }
    $484$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $1$hi;
    i64toi32_i32$2 = $1;
    i64toi32_i32$0 = 65535;
    i64toi32_i32$1 = -1;
    i64toi32_i32$0 = i64toi32_i32$5 & i64toi32_i32$0 | 0;
    $486 = i64toi32_i32$2 & i64toi32_i32$1 | 0;
    $486$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $484$hi;
    i64toi32_i32$5 = $274;
    i64toi32_i32$2 = $486$hi;
    i64toi32_i32$1 = $486;
    i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
    $1 = i64toi32_i32$5 | i64toi32_i32$1 | 0;
    $1$hi = i64toi32_i32$2;
   }
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$2 = $10$hi;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$0 = $1;
   i64toi32_i32$5 = $10$hi;
   i64toi32_i32$1 = $10;
   i64toi32_i32$5 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
   $10 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
   $10$hi = i64toi32_i32$5;
   label$19 : {
    i64toi32_i32$5 = $7$hi;
    $492 = !($7 | i64toi32_i32$5 | 0);
    i64toi32_i32$5 = $4$hi;
    i64toi32_i32$2 = $4;
    i64toi32_i32$0 = -1;
    i64toi32_i32$1 = -1;
    if ((i64toi32_i32$5 | 0) > (i64toi32_i32$0 | 0)) {
     $275 = 1
    } else {
     if ((i64toi32_i32$5 | 0) >= (i64toi32_i32$0 | 0)) {
      if (i64toi32_i32$2 >>> 0 <= i64toi32_i32$1 >>> 0) {
       $276 = 0
      } else {
       $276 = 1
      }
      $278 = $276;
     } else {
      $278 = 0
     }
     $275 = $278;
    }
    i64toi32_i32$2 = $4$hi;
    i64toi32_i32$1 = $4;
    i64toi32_i32$5 = -2147483648;
    i64toi32_i32$0 = 0;
    if ((i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) & (i64toi32_i32$2 | 0) == (i64toi32_i32$5 | 0) | 0 ? $492 : $275) {
     break label$19
    }
    i64toi32_i32$1 = $10$hi;
    $498 = $10;
    $498$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$0 = $2;
    i64toi32_i32$2 = 0;
    i64toi32_i32$5 = 1;
    i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
    i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0) {
     i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
    }
    $1 = i64toi32_i32$4;
    $1$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$1 = i64toi32_i32$4;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$5 = $2;
    $503 = i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
    i64toi32_i32$1 = 0;
    $504$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $498$hi;
    i64toi32_i32$5 = $498;
    i64toi32_i32$3 = $504$hi;
    i64toi32_i32$0 = $503;
    i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
    i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
    if (i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
    }
    $10 = i64toi32_i32$2;
    $10$hi = i64toi32_i32$4;
    break label$1;
   }
   label$20 : {
    i64toi32_i32$4 = $7$hi;
    i64toi32_i32$4 = $4$hi;
    i64toi32_i32$1 = $4;
    i64toi32_i32$5 = -2147483648;
    i64toi32_i32$0 = 0;
    i64toi32_i32$5 = i64toi32_i32$4 ^ i64toi32_i32$5 | 0;
    $508 = i64toi32_i32$1 ^ i64toi32_i32$0 | 0;
    $508$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $7$hi;
    i64toi32_i32$4 = $7;
    i64toi32_i32$1 = $508$hi;
    i64toi32_i32$0 = $508;
    i64toi32_i32$1 = i64toi32_i32$5 | i64toi32_i32$1 | 0;
    i64toi32_i32$5 = i64toi32_i32$4 | i64toi32_i32$0 | 0;
    i64toi32_i32$4 = 0;
    i64toi32_i32$0 = 0;
    if ((i64toi32_i32$5 | 0) == (i64toi32_i32$0 | 0) & (i64toi32_i32$1 | 0) == (i64toi32_i32$4 | 0) | 0) {
     break label$20
    }
    i64toi32_i32$5 = $2$hi;
    $1 = $2;
    $1$hi = i64toi32_i32$5;
    break label$1;
   }
   i64toi32_i32$5 = $10$hi;
   $512 = $10;
   $512$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $2$hi;
   i64toi32_i32$0 = $2;
   i64toi32_i32$1 = 0;
   i64toi32_i32$4 = 1;
   i64toi32_i32$1 = i64toi32_i32$5 & i64toi32_i32$1 | 0;
   $515 = i64toi32_i32$0 & i64toi32_i32$4 | 0;
   $515$hi = i64toi32_i32$1;
   i64toi32_i32$1 = i64toi32_i32$5;
   i64toi32_i32$5 = i64toi32_i32$0;
   i64toi32_i32$0 = $515$hi;
   i64toi32_i32$4 = $515;
   i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
   i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
   if (i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
   }
   $1 = i64toi32_i32$3;
   $1$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$1 = i64toi32_i32$3;
   i64toi32_i32$5 = $2$hi;
   i64toi32_i32$4 = $2;
   $519 = i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
   i64toi32_i32$1 = 0;
   $520$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $512$hi;
   i64toi32_i32$4 = $512;
   i64toi32_i32$2 = $520$hi;
   i64toi32_i32$5 = $519;
   i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
   i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
   if (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0) {
    i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
   }
   $10 = i64toi32_i32$0;
   $10$hi = i64toi32_i32$3;
  }
  i64toi32_i32$3 = $1$hi;
  i64toi32_i32$4 = $0;
  HEAP32[i64toi32_i32$4 >> 2] = $1;
  HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] = i64toi32_i32$3;
  i64toi32_i32$3 = $10$hi;
  HEAP32[(i64toi32_i32$4 + 8 | 0) >> 2] = $10;
  HEAP32[(i64toi32_i32$4 + 12 | 0) >> 2] = i64toi32_i32$3;
  __stack_pointer = $5 + 96 | 0;
 }
 
 function __fe_getround() {
  return 0 | 0;
 }
 
 function __fe_raise_inexact() {
  return 0 | 0;
 }
 
 function __addtf3($0, $1, $1$hi, $2, $2$hi, $3, $3$hi, $4, $4$hi) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $1$hi = $1$hi | 0;
  $2 = $2 | 0;
  $2$hi = $2$hi | 0;
  $3 = $3 | 0;
  $3$hi = $3$hi | 0;
  $4 = $4 | 0;
  $4$hi = $4$hi | 0;
  var i64toi32_i32$5 = 0, i64toi32_i32$4 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$0 = 0, $9 = 0, $10 = 0, $5 = 0, $6$hi = 0, $6 = 0, $7$hi = 0, $8$hi = 0, $7 = 0, $8 = 0, i64toi32_i32$6 = 0, $12$hi = 0, $11 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $12 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $150 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $21 = 0, $27 = 0, $28$hi = 0, $32 = 0, $39 = 0, $43 = 0, $44$hi = 0, $48 = 0, $53 = 0, $55 = 0, $63 = 0, $65 = 0, $73 = 0, $73$hi = 0, $79 = 0, $79$hi = 0, $83 = 0, $83$hi = 0, $93 = 0, $93$hi = 0, $121 = 0, $124 = 0, $151 = 0, $152 = 0, $152$hi = 0, $153 = 0, $153$hi = 0, $160$hi = 0, $163$hi = 0, $183 = 0, $184 = 0, $184$hi = 0, $185 = 0, $185$hi = 0, $192$hi = 0, $195$hi = 0, $208 = 0, $208$hi = 0, $210$hi = 0, $214 = 0, $214$hi = 0, $216$hi = 0, $242 = 0, $242$hi = 0, $244 = 0, $244$hi = 0, $248 = 0, $248$hi = 0, $250 = 0, $251$hi = 0, $269$hi = 0, $272 = 0, $273$hi = 0, $282 = 0, $283 = 0, $283$hi = 0, $284 = 0, $284$hi = 0, $291$hi = 0, $294$hi = 0, $309 = 0, $309$hi = 0, $315 = 0, $316$hi = 0, $322 = 0, $322$hi = 0, $324$hi = 0, $325 = 0, $325$hi = 0, $327 = 0, $327$hi = 0, $354 = 0, $354$hi = 0, $356 = 0, $356$hi = 0, $360 = 0, $360$hi = 0, $362 = 0, $363$hi = 0, $369 = 0, $369$hi = 0, $371$hi = 0, $375 = 0, $375$hi = 0, $378 = 0, $378$hi = 0, $379$hi = 0, $386 = 0, $386$hi = 0, $390$hi = 0, $394 = 0, $395$hi = 0, $400 = 0, $400$hi = 0, $408 = 0, $409$hi = 0, $411 = 0, $411$hi = 0, $417 = 0, $418$hi = 0, $422 = 0, $423$hi = 0, $426 = 0, $426$hi = 0, $432 = 0, $433$hi = 0, $437 = 0, $438$hi = 0;
  $5 = __stack_pointer - 112 | 0;
  __stack_pointer = $5;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$2 = $4;
  i64toi32_i32$1 = 2147483647;
  i64toi32_i32$3 = -1;
  i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
  $6 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
  $6$hi = i64toi32_i32$1;
  label$1 : {
   label$2 : {
    label$3 : {
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$0 = $1;
     i64toi32_i32$2 = -1;
     i64toi32_i32$3 = -1;
     i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
     i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $7 = i64toi32_i32$4;
     $7$hi = i64toi32_i32$5;
     i64toi32_i32$1 = i64toi32_i32$4;
     i64toi32_i32$0 = -1;
     i64toi32_i32$3 = -1;
     $21 = (i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$5 | 0) == (i64toi32_i32$0 | 0) | 0;
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$3 = $2;
     i64toi32_i32$5 = 2147483647;
     i64toi32_i32$0 = -1;
     i64toi32_i32$5 = i64toi32_i32$1 & i64toi32_i32$5 | 0;
     $8 = i64toi32_i32$3 & i64toi32_i32$0 | 0;
     $8$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $7$hi;
     i64toi32_i32$5 = $1$hi;
     i64toi32_i32$5 = $7$hi;
     i64toi32_i32$1 = i64toi32_i32$4;
     i64toi32_i32$3 = $1$hi;
     i64toi32_i32$0 = $1;
     $27 = i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
     i64toi32_i32$1 = 0;
     $28$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $8$hi;
     i64toi32_i32$0 = $8;
     i64toi32_i32$5 = $28$hi;
     i64toi32_i32$3 = $27;
     i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
     i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     i64toi32_i32$1 = i64toi32_i32$2;
     i64toi32_i32$0 = -1;
     i64toi32_i32$3 = -1;
     i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
     i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $7 = i64toi32_i32$5;
     $7$hi = i64toi32_i32$2;
     i64toi32_i32$4 = i64toi32_i32$5;
     i64toi32_i32$1 = 2147418111;
     i64toi32_i32$3 = -1;
     $32 = i64toi32_i32$2 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$5 >>> 0 > i64toi32_i32$3 >>> 0 | 0) | 0;
     i64toi32_i32$4 = i64toi32_i32$2;
     i64toi32_i32$3 = i64toi32_i32$5;
     i64toi32_i32$2 = 2147418111;
     i64toi32_i32$1 = -1;
     if ((i64toi32_i32$5 | 0) == (i64toi32_i32$1 | 0) & (i64toi32_i32$4 | 0) == (i64toi32_i32$2 | 0) | 0 ? $21 : $32) {
      break label$3
     }
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$1 = $3;
     i64toi32_i32$4 = -1;
     i64toi32_i32$2 = -1;
     i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
     i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $7 = i64toi32_i32$0;
     $7$hi = i64toi32_i32$5;
     i64toi32_i32$3 = i64toi32_i32$0;
     i64toi32_i32$1 = -1;
     i64toi32_i32$2 = -1;
     $39 = (i64toi32_i32$0 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$5 | 0) != (i64toi32_i32$1 | 0) | 0;
     i64toi32_i32$3 = $6$hi;
     i64toi32_i32$3 = i64toi32_i32$5;
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$3 = i64toi32_i32$5;
     i64toi32_i32$2 = i64toi32_i32$0;
     i64toi32_i32$5 = $3$hi;
     i64toi32_i32$1 = $3;
     $43 = i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
     i64toi32_i32$2 = 0;
     $44$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $6$hi;
     i64toi32_i32$1 = $6;
     i64toi32_i32$3 = $44$hi;
     i64toi32_i32$5 = $43;
     i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
     i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     i64toi32_i32$2 = i64toi32_i32$4;
     i64toi32_i32$1 = -1;
     i64toi32_i32$5 = -1;
     i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
     i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $7 = i64toi32_i32$3;
     $7$hi = i64toi32_i32$4;
     i64toi32_i32$0 = i64toi32_i32$3;
     i64toi32_i32$2 = 2147418111;
     i64toi32_i32$5 = -1;
     $48 = i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
     i64toi32_i32$0 = i64toi32_i32$4;
     i64toi32_i32$0 = i64toi32_i32$4;
     i64toi32_i32$5 = i64toi32_i32$3;
     i64toi32_i32$4 = 2147418111;
     i64toi32_i32$2 = -1;
     if ((i64toi32_i32$5 | 0) == (i64toi32_i32$2 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$4 | 0) | 0 ? $39 : $48) {
      break label$2
     }
    }
    label$4 : {
     i64toi32_i32$5 = $1$hi;
     $53 = !($1 | i64toi32_i32$5 | 0);
     i64toi32_i32$5 = $8$hi;
     i64toi32_i32$2 = $8;
     i64toi32_i32$0 = 2147418112;
     i64toi32_i32$4 = 0;
     $55 = i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
     i64toi32_i32$2 = i64toi32_i32$5;
     i64toi32_i32$2 = i64toi32_i32$5;
     i64toi32_i32$4 = $8;
     i64toi32_i32$5 = 2147418112;
     i64toi32_i32$0 = 0;
     if ((i64toi32_i32$4 | 0) == (i64toi32_i32$0 | 0) & (i64toi32_i32$2 | 0) == (i64toi32_i32$5 | 0) | 0 ? $53 : $55) {
      break label$4
     }
     i64toi32_i32$4 = $2$hi;
     i64toi32_i32$0 = $2;
     i64toi32_i32$2 = 32768;
     i64toi32_i32$5 = 0;
     i64toi32_i32$2 = i64toi32_i32$4 | i64toi32_i32$2 | 0;
     $4 = i64toi32_i32$0 | i64toi32_i32$5 | 0;
     $4$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $1$hi;
     $3 = $1;
     $3$hi = i64toi32_i32$2;
     break label$1;
    }
    label$5 : {
     i64toi32_i32$2 = $3$hi;
     $63 = !($3 | i64toi32_i32$2 | 0);
     i64toi32_i32$2 = $6$hi;
     i64toi32_i32$4 = $6;
     i64toi32_i32$0 = 2147418112;
     i64toi32_i32$5 = 0;
     $65 = i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
     i64toi32_i32$4 = i64toi32_i32$2;
     i64toi32_i32$5 = $6;
     i64toi32_i32$2 = 2147418112;
     i64toi32_i32$0 = 0;
     if ((i64toi32_i32$5 | 0) == (i64toi32_i32$0 | 0) & (i64toi32_i32$4 | 0) == (i64toi32_i32$2 | 0) | 0 ? $63 : $65) {
      break label$5
     }
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$0 = $4;
     i64toi32_i32$4 = 32768;
     i64toi32_i32$2 = 0;
     i64toi32_i32$4 = i64toi32_i32$5 | i64toi32_i32$4 | 0;
     $4 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
     $4$hi = i64toi32_i32$4;
     break label$1;
    }
    label$6 : {
     i64toi32_i32$4 = $1$hi;
     i64toi32_i32$4 = $8$hi;
     i64toi32_i32$5 = $8;
     i64toi32_i32$0 = 2147418112;
     i64toi32_i32$2 = 0;
     i64toi32_i32$0 = i64toi32_i32$4 ^ i64toi32_i32$0 | 0;
     $73 = i64toi32_i32$5 ^ i64toi32_i32$2 | 0;
     $73$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$4 = $1;
     i64toi32_i32$5 = $73$hi;
     i64toi32_i32$2 = $73;
     i64toi32_i32$5 = i64toi32_i32$0 | i64toi32_i32$5 | 0;
     i64toi32_i32$0 = i64toi32_i32$4 | i64toi32_i32$2 | 0;
     i64toi32_i32$4 = 0;
     i64toi32_i32$2 = 0;
     if ((i64toi32_i32$0 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$5 | 0) != (i64toi32_i32$4 | 0) | 0) {
      break label$6
     }
     i64toi32_i32$0 = $2$hi;
     i64toi32_i32$0 = $3$hi;
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$0 = $3$hi;
     i64toi32_i32$2 = $3;
     i64toi32_i32$5 = $1$hi;
     i64toi32_i32$4 = $1;
     i64toi32_i32$5 = i64toi32_i32$0 ^ i64toi32_i32$5 | 0;
     $79 = i64toi32_i32$2 ^ i64toi32_i32$4 | 0;
     $79$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$5 = $2$hi;
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$0 = $4;
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$4 = $2;
     i64toi32_i32$2 = i64toi32_i32$5 ^ i64toi32_i32$2 | 0;
     i64toi32_i32$5 = i64toi32_i32$0 ^ i64toi32_i32$4 | 0;
     i64toi32_i32$0 = -2147483648;
     i64toi32_i32$4 = 0;
     i64toi32_i32$0 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
     $83 = i64toi32_i32$5 ^ i64toi32_i32$4 | 0;
     $83$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $79$hi;
     i64toi32_i32$2 = $79;
     i64toi32_i32$5 = $83$hi;
     i64toi32_i32$4 = $83;
     i64toi32_i32$5 = i64toi32_i32$0 | i64toi32_i32$5 | 0;
     $9 = !(i64toi32_i32$2 | i64toi32_i32$4 | 0 | i64toi32_i32$5 | 0);
     i64toi32_i32$1 = $9;
     i64toi32_i32$5 = 2147450880;
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$4 = i64toi32_i32$1 ? 0 : $2;
     i64toi32_i32$0 = i64toi32_i32$1 ? i64toi32_i32$5 : i64toi32_i32$2;
     $4 = i64toi32_i32$4;
     $4$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$2 = i64toi32_i32$1;
     i64toi32_i32$0 = 0;
     i64toi32_i32$4 = $1$hi;
     i64toi32_i32$5 = i64toi32_i32$1 ? 0 : $1;
     i64toi32_i32$1 = i64toi32_i32$1 ? i64toi32_i32$0 : i64toi32_i32$4;
     $3 = i64toi32_i32$5;
     $3$hi = i64toi32_i32$1;
     break label$1;
    }
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$1 = $6$hi;
    i64toi32_i32$2 = $6;
    i64toi32_i32$5 = 2147418112;
    i64toi32_i32$0 = 0;
    i64toi32_i32$5 = i64toi32_i32$1 ^ i64toi32_i32$5 | 0;
    $93 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
    $93$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$1 = $3;
    i64toi32_i32$2 = $93$hi;
    i64toi32_i32$0 = $93;
    i64toi32_i32$2 = i64toi32_i32$5 | i64toi32_i32$2 | 0;
    if (!(i64toi32_i32$1 | i64toi32_i32$0 | 0 | i64toi32_i32$2 | 0)) {
     break label$1
    }
    label$7 : {
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$2 = $8$hi;
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$5 = $1;
     i64toi32_i32$1 = $8$hi;
     i64toi32_i32$0 = $8;
     i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
     i64toi32_i32$2 = i64toi32_i32$5 | i64toi32_i32$0 | 0;
     i64toi32_i32$5 = 0;
     i64toi32_i32$0 = 0;
     if ((i64toi32_i32$2 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$5 | 0) | 0) {
      break label$7
     }
     i64toi32_i32$2 = $3$hi;
     i64toi32_i32$2 = $6$hi;
     i64toi32_i32$2 = $3$hi;
     i64toi32_i32$0 = $3;
     i64toi32_i32$1 = $6$hi;
     i64toi32_i32$5 = $6;
     i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
     i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$5 | 0;
     i64toi32_i32$0 = 0;
     i64toi32_i32$5 = 0;
     if ((i64toi32_i32$2 | 0) != (i64toi32_i32$5 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$0 | 0) | 0) {
      break label$1
     }
     i64toi32_i32$2 = $3$hi;
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$2 = $3$hi;
     i64toi32_i32$5 = $3;
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$0 = $1;
     i64toi32_i32$1 = i64toi32_i32$2 & i64toi32_i32$1 | 0;
     $3 = i64toi32_i32$5 & i64toi32_i32$0 | 0;
     $3$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $4$hi;
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$1 = $4$hi;
     i64toi32_i32$2 = $4;
     i64toi32_i32$5 = $2$hi;
     i64toi32_i32$0 = $2;
     i64toi32_i32$5 = i64toi32_i32$1 & i64toi32_i32$5 | 0;
     $4 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
     $4$hi = i64toi32_i32$5;
     break label$1;
    }
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$5 = $6$hi;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$1 = $3;
    i64toi32_i32$2 = $6$hi;
    i64toi32_i32$0 = $6;
    i64toi32_i32$2 = i64toi32_i32$5 | i64toi32_i32$2 | 0;
    if (!!(i64toi32_i32$1 | i64toi32_i32$0 | 0 | i64toi32_i32$2 | 0)) {
     break label$2
    }
    i64toi32_i32$2 = $1$hi;
    $3 = $1;
    $3$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $2$hi;
    $4 = $2;
    $4$hi = i64toi32_i32$2;
    break label$1;
   }
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$5 = $3;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$0 = $1;
   $121 = i64toi32_i32$2 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$5 >>> 0 > i64toi32_i32$0 >>> 0 | 0) | 0;
   i64toi32_i32$5 = $6$hi;
   i64toi32_i32$5 = $8$hi;
   i64toi32_i32$5 = $6$hi;
   i64toi32_i32$0 = $6;
   i64toi32_i32$2 = $8$hi;
   i64toi32_i32$1 = $8;
   $124 = i64toi32_i32$5 >>> 0 > i64toi32_i32$2 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$0 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0;
   i64toi32_i32$0 = i64toi32_i32$5;
   i64toi32_i32$0 = i64toi32_i32$2;
   i64toi32_i32$0 = i64toi32_i32$5;
   i64toi32_i32$1 = $6;
   i64toi32_i32$5 = i64toi32_i32$2;
   i64toi32_i32$2 = $8;
   $10 = (i64toi32_i32$1 | 0) == (i64toi32_i32$2 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$5 | 0) | 0 ? $121 : $124;
   i64toi32_i32$4 = $10;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$5 = i64toi32_i32$4 ? $3 : $1;
   i64toi32_i32$2 = i64toi32_i32$4 ? i64toi32_i32$1 : i64toi32_i32$0;
   $6 = i64toi32_i32$5;
   $6$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$0 = i64toi32_i32$4;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$5 = $2$hi;
   i64toi32_i32$1 = i64toi32_i32$4 ? $4 : $2;
   i64toi32_i32$4 = i64toi32_i32$4 ? i64toi32_i32$2 : i64toi32_i32$5;
   $8 = i64toi32_i32$1;
   $8$hi = i64toi32_i32$4;
   i64toi32_i32$0 = i64toi32_i32$1;
   i64toi32_i32$1 = 65535;
   i64toi32_i32$2 = -1;
   i64toi32_i32$1 = i64toi32_i32$4 & i64toi32_i32$1 | 0;
   $7 = i64toi32_i32$0 & i64toi32_i32$2 | 0;
   $7$hi = i64toi32_i32$1;
   i64toi32_i32$1 = i64toi32_i32$5;
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$5 = $10;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$2 = i64toi32_i32$5 ? $2 : $4;
   i64toi32_i32$4 = i64toi32_i32$5 ? i64toi32_i32$1 : i64toi32_i32$0;
   $2 = i64toi32_i32$2;
   $2$hi = i64toi32_i32$4;
   i64toi32_i32$5 = i64toi32_i32$2;
   i64toi32_i32$2 = 0;
   i64toi32_i32$1 = 48;
   i64toi32_i32$0 = i64toi32_i32$1 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = 0;
    $136 = i64toi32_i32$4 >>> i64toi32_i32$0 | 0;
   } else {
    i64toi32_i32$2 = i64toi32_i32$4 >>> i64toi32_i32$0 | 0;
    $136 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$0 | 0) | 0;
   }
   $11 = $136 & 32767 | 0;
   label$8 : {
    i64toi32_i32$2 = $8$hi;
    i64toi32_i32$4 = $8;
    i64toi32_i32$5 = 0;
    i64toi32_i32$1 = 48;
    i64toi32_i32$0 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$5 = 0;
     $137 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
    } else {
     i64toi32_i32$5 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
     $137 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$0 | 0) | 0;
    }
    $9 = $137 & 32767 | 0;
    if ($9) {
     break label$8
    }
    $151 = $5 + 96 | 0;
    i64toi32_i32$5 = $6$hi;
    $152 = $6;
    $152$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $7$hi;
    $153 = $7;
    $153$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $6$hi;
    i64toi32_i32$5 = $7$hi;
    $9 = !($7 | i64toi32_i32$5 | 0);
    i64toi32_i32$0 = $9;
    i64toi32_i32$5 = $6$hi;
    i64toi32_i32$4 = $7$hi;
    i64toi32_i32$1 = i64toi32_i32$0 ? $6 : $7;
    i64toi32_i32$2 = i64toi32_i32$0 ? i64toi32_i32$5 : i64toi32_i32$4;
    i64toi32_i32$5 = Math_clz32(i64toi32_i32$2);
    i64toi32_i32$0 = 0;
    if ((i64toi32_i32$5 | 0) == (32 | 0)) {
     $138 = Math_clz32(i64toi32_i32$1) + 32 | 0
    } else {
     $138 = i64toi32_i32$5
    }
    $160$hi = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    $163$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $160$hi;
    i64toi32_i32$1 = $138;
    i64toi32_i32$2 = $163$hi;
    i64toi32_i32$5 = $9 << 6 | 0;
    i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
    i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0) {
     i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
    }
    $9 = i64toi32_i32$4;
    i64toi32_i32$3 = $152$hi;
    i64toi32_i32$1 = $153$hi;
    __ashlti3($151 | 0, $152 | 0, i64toi32_i32$3 | 0, $153 | 0, i64toi32_i32$1 | 0, i64toi32_i32$4 + -15 | 0 | 0);
    $9 = 16 - i64toi32_i32$4 | 0;
    i64toi32_i32$0 = $5 + 104 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$0 >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
    $7 = i64toi32_i32$1;
    $7$hi = i64toi32_i32$3;
    i64toi32_i32$0 = $5;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 96 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 100 | 0) >> 2] | 0;
    $6 = i64toi32_i32$3;
    $6$hi = i64toi32_i32$1;
   }
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$2 = $10;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$3 = $3$hi;
   i64toi32_i32$5 = i64toi32_i32$2 ? $1 : $3;
   i64toi32_i32$0 = i64toi32_i32$2 ? i64toi32_i32$1 : i64toi32_i32$3;
   $3 = i64toi32_i32$5;
   $3$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $2$hi;
   i64toi32_i32$2 = $2;
   i64toi32_i32$5 = 65535;
   i64toi32_i32$1 = -1;
   i64toi32_i32$5 = i64toi32_i32$0 & i64toi32_i32$5 | 0;
   $4 = i64toi32_i32$2 & i64toi32_i32$1 | 0;
   $4$hi = i64toi32_i32$5;
   label$9 : {
    if ($11) {
     break label$9
    }
    $183 = $5 + 80 | 0;
    i64toi32_i32$5 = $3$hi;
    $184 = $3;
    $184$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $4$hi;
    $185 = $4;
    $185$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$5 = $4$hi;
    $10 = !($4 | i64toi32_i32$5 | 0);
    i64toi32_i32$3 = $10;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$2 = $4$hi;
    i64toi32_i32$1 = i64toi32_i32$3 ? $3 : $4;
    i64toi32_i32$0 = i64toi32_i32$3 ? i64toi32_i32$5 : i64toi32_i32$2;
    i64toi32_i32$5 = Math_clz32(i64toi32_i32$0);
    i64toi32_i32$3 = 0;
    if ((i64toi32_i32$5 | 0) == (32 | 0)) {
     $139 = Math_clz32(i64toi32_i32$1) + 32 | 0
    } else {
     $139 = i64toi32_i32$5
    }
    $192$hi = i64toi32_i32$3;
    i64toi32_i32$3 = 0;
    $195$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $192$hi;
    i64toi32_i32$1 = $139;
    i64toi32_i32$0 = $195$hi;
    i64toi32_i32$5 = $10 << 6 | 0;
    i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
    i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
    if (i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
    }
    $10 = i64toi32_i32$2;
    i64toi32_i32$4 = $184$hi;
    i64toi32_i32$1 = $185$hi;
    __ashlti3($183 | 0, $184 | 0, i64toi32_i32$4 | 0, $185 | 0, i64toi32_i32$1 | 0, i64toi32_i32$2 + -15 | 0 | 0);
    $11 = 16 - i64toi32_i32$2 | 0;
    i64toi32_i32$3 = $5 + 88 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$3 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
    $4 = i64toi32_i32$1;
    $4$hi = i64toi32_i32$4;
    i64toi32_i32$3 = $5;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 80 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 84 | 0) >> 2] | 0;
    $3 = i64toi32_i32$4;
    $3$hi = i64toi32_i32$1;
   }
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$3 = $4;
   i64toi32_i32$4 = 0;
   i64toi32_i32$5 = 3;
   i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$3 << i64toi32_i32$0 | 0;
    $140 = 0;
   } else {
    i64toi32_i32$4 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$0 | 0) | 0;
    $140 = i64toi32_i32$3 << i64toi32_i32$0 | 0;
   }
   $208 = $140;
   $208$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $3$hi;
   i64toi32_i32$1 = $3;
   i64toi32_i32$3 = 0;
   i64toi32_i32$5 = 61;
   i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$3 = 0;
    $141 = i64toi32_i32$4 >>> i64toi32_i32$0 | 0;
   } else {
    i64toi32_i32$3 = i64toi32_i32$4 >>> i64toi32_i32$0 | 0;
    $141 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$0 | 0) | 0;
   }
   $210$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $208$hi;
   i64toi32_i32$4 = $208;
   i64toi32_i32$1 = $210$hi;
   i64toi32_i32$5 = $141;
   i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
   i64toi32_i32$3 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
   i64toi32_i32$4 = 524288;
   i64toi32_i32$5 = 0;
   i64toi32_i32$4 = i64toi32_i32$1 | i64toi32_i32$4 | 0;
   $4 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
   $4$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $7$hi;
   i64toi32_i32$1 = $7;
   i64toi32_i32$3 = 0;
   i64toi32_i32$5 = 3;
   i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$3 = i64toi32_i32$1 << i64toi32_i32$0 | 0;
    $142 = 0;
   } else {
    i64toi32_i32$3 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$0 | 0) | 0;
    $142 = i64toi32_i32$1 << i64toi32_i32$0 | 0;
   }
   $214 = $142;
   $214$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $6$hi;
   i64toi32_i32$4 = $6;
   i64toi32_i32$1 = 0;
   i64toi32_i32$5 = 61;
   i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = 0;
    $143 = i64toi32_i32$3 >>> i64toi32_i32$0 | 0;
   } else {
    i64toi32_i32$1 = i64toi32_i32$3 >>> i64toi32_i32$0 | 0;
    $143 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$0 | 0) | 0;
   }
   $216$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $214$hi;
   i64toi32_i32$3 = $214;
   i64toi32_i32$4 = $216$hi;
   i64toi32_i32$5 = $143;
   i64toi32_i32$4 = i64toi32_i32$1 | i64toi32_i32$4 | 0;
   $1 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
   $1$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $3$hi;
   i64toi32_i32$1 = $3;
   i64toi32_i32$3 = 0;
   i64toi32_i32$5 = 3;
   i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$3 = i64toi32_i32$1 << i64toi32_i32$0 | 0;
    $144 = 0;
   } else {
    i64toi32_i32$3 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$0 | 0) | 0;
    $144 = i64toi32_i32$1 << i64toi32_i32$0 | 0;
   }
   $3 = $144;
   $3$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $8$hi;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$3 = $8$hi;
   i64toi32_i32$4 = $8;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$5 = $2;
   i64toi32_i32$1 = i64toi32_i32$3 ^ i64toi32_i32$1 | 0;
   $7 = i64toi32_i32$4 ^ i64toi32_i32$5 | 0;
   $7$hi = i64toi32_i32$1;
   label$10 : {
    $10 = $9 - $11 | 0;
    if (!$10) {
     break label$10
    }
    label$11 : {
     if ($10 >>> 0 <= 127 >>> 0) {
      break label$11
     }
     i64toi32_i32$1 = 0;
     $4 = 0;
     $4$hi = i64toi32_i32$1;
     i64toi32_i32$1 = 0;
     $3 = 1;
     $3$hi = i64toi32_i32$1;
     break label$10;
    }
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$1 = $4$hi;
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$4 = $4$hi;
    __ashlti3($5 + 64 | 0 | 0, $3 | 0, i64toi32_i32$1 | 0, $4 | 0, i64toi32_i32$4 | 0, 128 - $10 | 0 | 0);
    i64toi32_i32$4 = i64toi32_i32$1;
    i64toi32_i32$4 = $4$hi;
    i64toi32_i32$4 = i64toi32_i32$1;
    i64toi32_i32$1 = $4$hi;
    __lshrti3($5 + 48 | 0 | 0, $3 | 0, i64toi32_i32$4 | 0, $4 | 0, i64toi32_i32$1 | 0, $10 | 0);
    i64toi32_i32$3 = $5;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 48 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 52 | 0) >> 2] | 0;
    $242 = i64toi32_i32$1;
    $242$hi = i64toi32_i32$4;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 64 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 68 | 0) >> 2] | 0;
    $244 = i64toi32_i32$4;
    $244$hi = i64toi32_i32$1;
    i64toi32_i32$3 = (i64toi32_i32$3 + 64 | 0) + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$3 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
    $248 = i64toi32_i32$1;
    $248$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $244$hi;
    i64toi32_i32$3 = $244;
    i64toi32_i32$1 = $248$hi;
    i64toi32_i32$5 = $248;
    i64toi32_i32$1 = i64toi32_i32$4 | i64toi32_i32$1 | 0;
    i64toi32_i32$4 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
    i64toi32_i32$3 = 0;
    i64toi32_i32$5 = 0;
    $250 = (i64toi32_i32$4 | 0) != (i64toi32_i32$5 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$3 | 0) | 0;
    i64toi32_i32$4 = 0;
    $251$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $242$hi;
    i64toi32_i32$5 = $242;
    i64toi32_i32$1 = $251$hi;
    i64toi32_i32$3 = $250;
    i64toi32_i32$1 = i64toi32_i32$4 | i64toi32_i32$1 | 0;
    $3 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
    $3$hi = i64toi32_i32$1;
    i64toi32_i32$4 = ($5 + 48 | 0) + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$4 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
    $4 = i64toi32_i32$1;
    $4$hi = i64toi32_i32$5;
   }
   i64toi32_i32$5 = $1$hi;
   i64toi32_i32$4 = $1;
   i64toi32_i32$1 = 524288;
   i64toi32_i32$3 = 0;
   i64toi32_i32$1 = i64toi32_i32$5 | i64toi32_i32$1 | 0;
   $12 = i64toi32_i32$4 | i64toi32_i32$3 | 0;
   $12$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $6$hi;
   i64toi32_i32$5 = $6;
   i64toi32_i32$4 = 0;
   i64toi32_i32$3 = 3;
   i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$5 << i64toi32_i32$0 | 0;
    $145 = 0;
   } else {
    i64toi32_i32$4 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$0 | 0) | 0;
    $145 = i64toi32_i32$5 << i64toi32_i32$0 | 0;
   }
   $2 = $145;
   $2$hi = i64toi32_i32$4;
   label$12 : {
    label$13 : {
     i64toi32_i32$4 = $7$hi;
     i64toi32_i32$1 = $7;
     i64toi32_i32$5 = -1;
     i64toi32_i32$3 = -1;
     if ((i64toi32_i32$4 | 0) > (i64toi32_i32$5 | 0)) {
      $146 = 1
     } else {
      if ((i64toi32_i32$4 | 0) >= (i64toi32_i32$5 | 0)) {
       if (i64toi32_i32$1 >>> 0 <= i64toi32_i32$3 >>> 0) {
        $147 = 0
       } else {
        $147 = 1
       }
       $148 = $147;
      } else {
       $148 = 0
      }
      $146 = $148;
     }
     if ($146) {
      break label$13
     }
     label$14 : {
      i64toi32_i32$1 = $2$hi;
      i64toi32_i32$1 = $3$hi;
      i64toi32_i32$1 = $2$hi;
      i64toi32_i32$3 = $2;
      i64toi32_i32$4 = $3$hi;
      i64toi32_i32$5 = $3;
      i64toi32_i32$0 = i64toi32_i32$3 - i64toi32_i32$5 | 0;
      i64toi32_i32$6 = i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0;
      i64toi32_i32$2 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
      i64toi32_i32$2 = i64toi32_i32$1 - i64toi32_i32$2 | 0;
      $1 = i64toi32_i32$0;
      $1$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $12$hi;
      i64toi32_i32$2 = $4$hi;
      i64toi32_i32$2 = $12$hi;
      i64toi32_i32$1 = $12;
      i64toi32_i32$3 = $4$hi;
      i64toi32_i32$5 = $4;
      i64toi32_i32$4 = i64toi32_i32$1 - i64toi32_i32$5 | 0;
      i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0;
      i64toi32_i32$0 = i64toi32_i32$6 + i64toi32_i32$3 | 0;
      i64toi32_i32$0 = i64toi32_i32$2 - i64toi32_i32$0 | 0;
      $269$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $2$hi;
      i64toi32_i32$0 = $3$hi;
      i64toi32_i32$0 = $2$hi;
      i64toi32_i32$2 = $2;
      i64toi32_i32$1 = $3$hi;
      i64toi32_i32$5 = $3;
      $272 = i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
      i64toi32_i32$2 = 0;
      $273$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $269$hi;
      i64toi32_i32$5 = i64toi32_i32$4;
      i64toi32_i32$0 = $273$hi;
      i64toi32_i32$1 = $272;
      i64toi32_i32$3 = i64toi32_i32$5 - i64toi32_i32$1 | 0;
      i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0;
      i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$0 | 0;
      i64toi32_i32$4 = i64toi32_i32$2 - i64toi32_i32$4 | 0;
      $4 = i64toi32_i32$3;
      $4$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $1$hi;
      i64toi32_i32$2 = $1;
      i64toi32_i32$5 = $4$hi;
      i64toi32_i32$1 = i64toi32_i32$3;
      i64toi32_i32$5 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
      if (!!(i64toi32_i32$2 | i64toi32_i32$1 | 0 | i64toi32_i32$5 | 0)) {
       break label$14
      }
      i64toi32_i32$5 = 0;
      $3 = 0;
      $3$hi = i64toi32_i32$5;
      i64toi32_i32$5 = 0;
      $4 = 0;
      $4$hi = i64toi32_i32$5;
      break label$1;
     }
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$4 = $4;
     i64toi32_i32$2 = 524287;
     i64toi32_i32$1 = -1;
     if (i64toi32_i32$5 >>> 0 > i64toi32_i32$2 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$4 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0) {
      break label$12
     }
     $282 = $5 + 32 | 0;
     i64toi32_i32$4 = $1$hi;
     $283 = $1;
     $283$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $4$hi;
     $284 = $4;
     $284$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $1$hi;
     i64toi32_i32$4 = $4$hi;
     $10 = !($4 | i64toi32_i32$4 | 0);
     i64toi32_i32$0 = $10;
     i64toi32_i32$4 = $1$hi;
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$2 = i64toi32_i32$0 ? $1 : $4;
     i64toi32_i32$1 = i64toi32_i32$0 ? i64toi32_i32$4 : i64toi32_i32$5;
     i64toi32_i32$4 = Math_clz32(i64toi32_i32$1);
     i64toi32_i32$0 = 0;
     if ((i64toi32_i32$4 | 0) == (32 | 0)) {
      $149 = Math_clz32(i64toi32_i32$2) + 32 | 0
     } else {
      $149 = i64toi32_i32$4
     }
     $291$hi = i64toi32_i32$0;
     i64toi32_i32$0 = 0;
     $294$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $291$hi;
     i64toi32_i32$2 = $149;
     i64toi32_i32$1 = $294$hi;
     i64toi32_i32$4 = $10 << 6 | 0;
     i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
     i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
     }
     $10 = i64toi32_i32$5 + -12 | 0;
     i64toi32_i32$3 = $283$hi;
     i64toi32_i32$2 = $284$hi;
     __ashlti3($282 | 0, $283 | 0, i64toi32_i32$3 | 0, $284 | 0, i64toi32_i32$2 | 0, $10 | 0);
     $9 = $9 - $10 | 0;
     i64toi32_i32$0 = $5 + 40 | 0;
     i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
     $4 = i64toi32_i32$2;
     $4$hi = i64toi32_i32$3;
     i64toi32_i32$0 = $5;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 32 | 0) >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 36 | 0) >> 2] | 0;
     $1 = i64toi32_i32$3;
     $1$hi = i64toi32_i32$2;
     break label$12;
    }
    i64toi32_i32$2 = $4$hi;
    i64toi32_i32$2 = $12$hi;
    i64toi32_i32$2 = $4$hi;
    i64toi32_i32$0 = $4;
    i64toi32_i32$3 = $12$hi;
    i64toi32_i32$4 = $12;
    i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
    i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
    if (i64toi32_i32$1 >>> 0 < i64toi32_i32$4 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    $309 = i64toi32_i32$1;
    $309$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$5 = $2$hi;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$2 = $3;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$4 = $2;
    i64toi32_i32$3 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
    i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
    if (i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
    }
    $1 = i64toi32_i32$3;
    $1$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$5 = i64toi32_i32$3;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$4 = $3;
    $315 = i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
    i64toi32_i32$5 = 0;
    $316$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $309$hi;
    i64toi32_i32$4 = $309;
    i64toi32_i32$1 = $316$hi;
    i64toi32_i32$2 = $315;
    i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
    i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
    if (i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0) {
     i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
    }
    $4 = i64toi32_i32$0;
    $4$hi = i64toi32_i32$3;
    i64toi32_i32$5 = i64toi32_i32$0;
    i64toi32_i32$4 = 1048576;
    i64toi32_i32$2 = 0;
    i64toi32_i32$4 = i64toi32_i32$3 & i64toi32_i32$4 | 0;
    if (!(i64toi32_i32$5 & i64toi32_i32$2 | 0 | i64toi32_i32$4 | 0)) {
     break label$12
    }
    i64toi32_i32$4 = $1$hi;
    i64toi32_i32$3 = $1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$2 = 1;
    i64toi32_i32$1 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$5 = 0;
     $150 = i64toi32_i32$4 >>> i64toi32_i32$1 | 0;
    } else {
     i64toi32_i32$5 = i64toi32_i32$4 >>> i64toi32_i32$1 | 0;
     $150 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$1 | 0) | 0;
    }
    $322 = $150;
    $322$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $4$hi;
    i64toi32_i32$4 = $4;
    i64toi32_i32$3 = 0;
    i64toi32_i32$2 = 63;
    i64toi32_i32$1 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = i64toi32_i32$4 << i64toi32_i32$1 | 0;
     $154 = 0;
    } else {
     i64toi32_i32$3 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$4 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$1 | 0) | 0;
     $154 = i64toi32_i32$4 << i64toi32_i32$1 | 0;
    }
    $324$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $322$hi;
    i64toi32_i32$5 = $322;
    i64toi32_i32$4 = $324$hi;
    i64toi32_i32$2 = $154;
    i64toi32_i32$4 = i64toi32_i32$3 | i64toi32_i32$4 | 0;
    $325 = i64toi32_i32$5 | i64toi32_i32$2 | 0;
    $325$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $1$hi;
    i64toi32_i32$3 = $1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$2 = 1;
    i64toi32_i32$5 = i64toi32_i32$4 & i64toi32_i32$5 | 0;
    $327 = i64toi32_i32$3 & i64toi32_i32$2 | 0;
    $327$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $325$hi;
    i64toi32_i32$4 = $325;
    i64toi32_i32$3 = $327$hi;
    i64toi32_i32$2 = $327;
    i64toi32_i32$3 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
    $1 = i64toi32_i32$4 | i64toi32_i32$2 | 0;
    $1$hi = i64toi32_i32$3;
    $9 = $9 + 1 | 0;
    i64toi32_i32$3 = $4$hi;
    i64toi32_i32$5 = $4;
    i64toi32_i32$4 = 0;
    i64toi32_i32$2 = 1;
    i64toi32_i32$1 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$4 = 0;
     $155 = i64toi32_i32$3 >>> i64toi32_i32$1 | 0;
    } else {
     i64toi32_i32$4 = i64toi32_i32$3 >>> i64toi32_i32$1 | 0;
     $155 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$1 | 0) | 0;
    }
    $4 = $155;
    $4$hi = i64toi32_i32$4;
   }
   i64toi32_i32$4 = $8$hi;
   i64toi32_i32$3 = $8;
   i64toi32_i32$5 = -2147483648;
   i64toi32_i32$2 = 0;
   i64toi32_i32$5 = i64toi32_i32$4 & i64toi32_i32$5 | 0;
   $2 = i64toi32_i32$3 & i64toi32_i32$2 | 0;
   $2$hi = i64toi32_i32$5;
   label$15 : {
    if (($9 | 0) < (32767 | 0)) {
     break label$15
    }
    i64toi32_i32$5 = $2$hi;
    i64toi32_i32$4 = $2;
    i64toi32_i32$3 = 2147418112;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
    $4 = i64toi32_i32$4 | i64toi32_i32$2 | 0;
    $4$hi = i64toi32_i32$3;
    i64toi32_i32$3 = 0;
    $3 = 0;
    $3$hi = i64toi32_i32$3;
    break label$1;
   }
   $10 = 0;
   label$16 : {
    label$17 : {
     if (($9 | 0) <= (0 | 0)) {
      break label$17
     }
     $10 = $9;
     break label$16;
    }
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$3 = $4$hi;
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$4 = $4$hi;
    __ashlti3($5 + 16 | 0 | 0, $1 | 0, i64toi32_i32$3 | 0, $4 | 0, i64toi32_i32$4 | 0, $9 + 127 | 0 | 0);
    i64toi32_i32$4 = i64toi32_i32$3;
    i64toi32_i32$4 = $4$hi;
    i64toi32_i32$4 = i64toi32_i32$3;
    i64toi32_i32$3 = $4$hi;
    __lshrti3($5 | 0, $1 | 0, i64toi32_i32$4 | 0, $4 | 0, i64toi32_i32$3 | 0, 1 - $9 | 0 | 0);
    i64toi32_i32$5 = $5;
    i64toi32_i32$3 = HEAP32[i64toi32_i32$5 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
    $354 = i64toi32_i32$3;
    $354$hi = i64toi32_i32$4;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 16 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$5 + 20 | 0) >> 2] | 0;
    $356 = i64toi32_i32$4;
    $356$hi = i64toi32_i32$3;
    i64toi32_i32$5 = (i64toi32_i32$5 + 16 | 0) + 8 | 0;
    i64toi32_i32$3 = HEAP32[i64toi32_i32$5 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
    $360 = i64toi32_i32$3;
    $360$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $356$hi;
    i64toi32_i32$5 = $356;
    i64toi32_i32$3 = $360$hi;
    i64toi32_i32$2 = $360;
    i64toi32_i32$3 = i64toi32_i32$4 | i64toi32_i32$3 | 0;
    i64toi32_i32$4 = i64toi32_i32$5 | i64toi32_i32$2 | 0;
    i64toi32_i32$5 = 0;
    i64toi32_i32$2 = 0;
    $362 = (i64toi32_i32$4 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$5 | 0) | 0;
    i64toi32_i32$4 = 0;
    $363$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $354$hi;
    i64toi32_i32$2 = $354;
    i64toi32_i32$3 = $363$hi;
    i64toi32_i32$5 = $362;
    i64toi32_i32$3 = i64toi32_i32$4 | i64toi32_i32$3 | 0;
    $1 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
    $1$hi = i64toi32_i32$3;
    i64toi32_i32$4 = $5 + 8 | 0;
    i64toi32_i32$3 = HEAP32[i64toi32_i32$4 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
    $4 = i64toi32_i32$3;
    $4$hi = i64toi32_i32$2;
   }
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$4 = $1;
   i64toi32_i32$3 = 0;
   i64toi32_i32$5 = 3;
   i64toi32_i32$1 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$3 = 0;
    $156 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
   } else {
    i64toi32_i32$3 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
    $156 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$1 | 0) | 0;
   }
   $369 = $156;
   $369$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $4$hi;
   i64toi32_i32$2 = $4;
   i64toi32_i32$4 = 0;
   i64toi32_i32$5 = 61;
   i64toi32_i32$1 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$2 << i64toi32_i32$1 | 0;
    $157 = 0;
   } else {
    i64toi32_i32$4 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$1 | 0) | 0;
    $157 = i64toi32_i32$2 << i64toi32_i32$1 | 0;
   }
   $371$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $369$hi;
   i64toi32_i32$3 = $369;
   i64toi32_i32$2 = $371$hi;
   i64toi32_i32$5 = $157;
   i64toi32_i32$2 = i64toi32_i32$4 | i64toi32_i32$2 | 0;
   $3 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
   $3$hi = i64toi32_i32$2;
   i64toi32_i32$2 = 0;
   i64toi32_i32$4 = $10;
   i64toi32_i32$3 = 0;
   i64toi32_i32$5 = 48;
   i64toi32_i32$1 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$3 = i64toi32_i32$4 << i64toi32_i32$1 | 0;
    $158 = 0;
   } else {
    i64toi32_i32$3 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$4 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$1 | 0) | 0;
    $158 = i64toi32_i32$4 << i64toi32_i32$1 | 0;
   }
   $375 = $158;
   $375$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $4$hi;
   i64toi32_i32$2 = $4;
   i64toi32_i32$4 = 0;
   i64toi32_i32$5 = 3;
   i64toi32_i32$1 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$4 = 0;
    $159 = i64toi32_i32$3 >>> i64toi32_i32$1 | 0;
   } else {
    i64toi32_i32$4 = i64toi32_i32$3 >>> i64toi32_i32$1 | 0;
    $159 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$1 | 0) | 0;
   }
   i64toi32_i32$3 = $159;
   i64toi32_i32$2 = 65535;
   i64toi32_i32$5 = -1;
   i64toi32_i32$2 = i64toi32_i32$4 & i64toi32_i32$2 | 0;
   $378 = i64toi32_i32$3 & i64toi32_i32$5 | 0;
   $378$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $375$hi;
   i64toi32_i32$4 = $375;
   i64toi32_i32$3 = $378$hi;
   i64toi32_i32$5 = $378;
   i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
   $379$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$3 = $379$hi;
   i64toi32_i32$2 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
   i64toi32_i32$4 = $2$hi;
   i64toi32_i32$5 = $2;
   i64toi32_i32$4 = i64toi32_i32$3 | i64toi32_i32$4 | 0;
   $4 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
   $4$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $1$hi;
   $9 = $1 & 7 | 0;
   label$18 : {
    label$19 : {
     label$20 : {
      switch (__fe_getround() | 0 | 0) {
      case 0:
       i64toi32_i32$4 = $4$hi;
       $386 = $4;
       $386$hi = i64toi32_i32$4;
       i64toi32_i32$4 = $3$hi;
       i64toi32_i32$4 = 0;
       $390$hi = i64toi32_i32$4;
       i64toi32_i32$4 = $3$hi;
       i64toi32_i32$3 = $3;
       i64toi32_i32$2 = $390$hi;
       i64toi32_i32$5 = $9 >>> 0 > 4 >>> 0;
       i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
       i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
       if (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0) {
        i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
       }
       $1 = i64toi32_i32$1;
       $1$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $3$hi;
       i64toi32_i32$0 = $1$hi;
       i64toi32_i32$4 = i64toi32_i32$1;
       i64toi32_i32$3 = $3$hi;
       i64toi32_i32$5 = $3;
       $394 = i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
       i64toi32_i32$4 = 0;
       $395$hi = i64toi32_i32$4;
       i64toi32_i32$4 = $386$hi;
       i64toi32_i32$5 = $386;
       i64toi32_i32$0 = $395$hi;
       i64toi32_i32$3 = $394;
       i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
       i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
       if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
       }
       $4 = i64toi32_i32$2;
       $4$hi = i64toi32_i32$1;
       label$23 : {
        if (($9 | 0) == (4 | 0)) {
         break label$23
        }
        i64toi32_i32$1 = $1$hi;
        $3 = $1;
        $3$hi = i64toi32_i32$1;
        break label$19;
       }
       i64toi32_i32$1 = $4$hi;
       $400 = $4;
       $400$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $1$hi;
       i64toi32_i32$4 = $1;
       i64toi32_i32$5 = 0;
       i64toi32_i32$3 = 1;
       i64toi32_i32$5 = i64toi32_i32$1 & i64toi32_i32$5 | 0;
       $2 = i64toi32_i32$4 & i64toi32_i32$3 | 0;
       $2$hi = i64toi32_i32$5;
       i64toi32_i32$5 = i64toi32_i32$1;
       i64toi32_i32$5 = $2$hi;
       i64toi32_i32$1 = $2;
       i64toi32_i32$4 = $1$hi;
       i64toi32_i32$3 = $1;
       i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
       i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
       if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
       }
       $3 = i64toi32_i32$0;
       $3$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $2$hi;
       i64toi32_i32$2 = $3$hi;
       i64toi32_i32$5 = i64toi32_i32$0;
       i64toi32_i32$1 = $2$hi;
       i64toi32_i32$3 = $2;
       $408 = i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
       i64toi32_i32$5 = 0;
       $409$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $400$hi;
       i64toi32_i32$3 = $400;
       i64toi32_i32$2 = $409$hi;
       i64toi32_i32$1 = $408;
       i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
       i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
       if (i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0) {
        i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
       }
       $4 = i64toi32_i32$4;
       $4$hi = i64toi32_i32$0;
       break label$18;
      case 1:
       i64toi32_i32$0 = $4$hi;
       $411 = $4;
       $411$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $3$hi;
       i64toi32_i32$0 = $2$hi;
       i64toi32_i32$5 = $2;
       i64toi32_i32$3 = 0;
       i64toi32_i32$1 = 0;
       $417 = ((i64toi32_i32$5 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$3 | 0) | 0) & ($9 | 0) != (0 | 0) | 0;
       i64toi32_i32$5 = 0;
       $418$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $3$hi;
       i64toi32_i32$1 = $3;
       i64toi32_i32$0 = $418$hi;
       i64toi32_i32$3 = $417;
       i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
       i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
       if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
       }
       $1 = i64toi32_i32$2;
       $1$hi = i64toi32_i32$4;
       i64toi32_i32$4 = $3$hi;
       i64toi32_i32$4 = $1$hi;
       i64toi32_i32$5 = i64toi32_i32$2;
       i64toi32_i32$1 = $3$hi;
       i64toi32_i32$3 = $3;
       $422 = i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
       i64toi32_i32$5 = 0;
       $423$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $411$hi;
       i64toi32_i32$3 = $411;
       i64toi32_i32$4 = $423$hi;
       i64toi32_i32$1 = $422;
       i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
       i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
       if (i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0) {
        i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
       }
       $4 = i64toi32_i32$0;
       $4$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $1$hi;
       $3 = $1;
       $3$hi = i64toi32_i32$2;
       break label$19;
      case 2:
       break label$20;
      default:
       break label$19;
      };
     }
     i64toi32_i32$2 = $4$hi;
     $426 = $4;
     $426$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $3$hi;
     i64toi32_i32$2 = $2$hi;
     $432 = !($2 | i64toi32_i32$2 | 0) & ($9 | 0) != (0 | 0) | 0;
     i64toi32_i32$2 = 0;
     $433$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $3$hi;
     i64toi32_i32$5 = $3;
     i64toi32_i32$3 = $433$hi;
     i64toi32_i32$1 = $432;
     i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
     i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     $1 = i64toi32_i32$4;
     $1$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $3$hi;
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$2 = i64toi32_i32$4;
     i64toi32_i32$5 = $3$hi;
     i64toi32_i32$1 = $3;
     $437 = i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
     i64toi32_i32$2 = 0;
     $438$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $426$hi;
     i64toi32_i32$1 = $426;
     i64toi32_i32$0 = $438$hi;
     i64toi32_i32$5 = $437;
     i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
     i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $4 = i64toi32_i32$3;
     $4$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $1$hi;
     $3 = $1;
     $3$hi = i64toi32_i32$4;
    }
    if (!$9) {
     break label$1
    }
   }
   __fe_raise_inexact() | 0;
  }
  i64toi32_i32$4 = $3$hi;
  i64toi32_i32$1 = $0;
  HEAP32[i64toi32_i32$1 >> 2] = $3;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$4;
  i64toi32_i32$4 = $4$hi;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $4;
  HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$4;
  __stack_pointer = $5 + 112 | 0;
 }
 
 function __extenddftf2($0, $1) {
  $0 = $0 | 0;
  $1 = +$1;
  var i64toi32_i32$3 = 0, i64toi32_i32$5 = 0, i64toi32_i32$4 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $4 = 0, $4$hi = 0, $2 = 0, $3 = 0, $3$hi = 0, $5 = 0, $5$hi = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $6 = 0, $31 = 0, $32 = 0, $33 = 0, $33$hi = 0, $37 = 0, $50 = 0, $50$hi = 0, $54$hi = 0, $63 = 0, $63$hi = 0, $64 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  label$1 : {
   label$2 : {
    wasm2js_scratch_store_f64(+$1);
    i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
    $3 = wasm2js_scratch_load_i32(0 | 0) | 0;
    $3$hi = i64toi32_i32$0;
    i64toi32_i32$2 = $3;
    i64toi32_i32$1 = 2147483647;
    i64toi32_i32$3 = -1;
    i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
    $4 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
    $4$hi = i64toi32_i32$1;
    i64toi32_i32$0 = $4;
    i64toi32_i32$2 = -1048576;
    i64toi32_i32$3 = 0;
    i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
    i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    i64toi32_i32$1 = i64toi32_i32$4;
    i64toi32_i32$0 = 2145386495;
    i64toi32_i32$3 = -1;
    if (i64toi32_i32$5 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$1 >>> 0 > i64toi32_i32$3 >>> 0 | 0) | 0) {
     break label$2
    }
    i64toi32_i32$1 = $4$hi;
    i64toi32_i32$3 = $4;
    i64toi32_i32$5 = 0;
    i64toi32_i32$0 = 60;
    i64toi32_i32$2 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$3 << i64toi32_i32$2 | 0;
     $26 = 0;
    } else {
     i64toi32_i32$5 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$2 | 0) | 0;
     $26 = i64toi32_i32$3 << i64toi32_i32$2 | 0;
    }
    $5 = $26;
    $5$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $4$hi;
    i64toi32_i32$1 = $4;
    i64toi32_i32$3 = 0;
    i64toi32_i32$0 = 4;
    i64toi32_i32$2 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = 0;
     $27 = i64toi32_i32$5 >>> i64toi32_i32$2 | 0;
    } else {
     i64toi32_i32$3 = i64toi32_i32$5 >>> i64toi32_i32$2 | 0;
     $27 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$2 | 0) | 0;
    }
    i64toi32_i32$5 = $27;
    i64toi32_i32$1 = 1006632960;
    i64toi32_i32$0 = 0;
    i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
    i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
    if (i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
    }
    $4 = i64toi32_i32$2;
    $4$hi = i64toi32_i32$4;
    break label$1;
   }
   label$3 : {
    i64toi32_i32$4 = $4$hi;
    i64toi32_i32$3 = $4;
    i64toi32_i32$5 = 2146435072;
    i64toi32_i32$0 = 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0) {
     break label$3
    }
    i64toi32_i32$3 = $3$hi;
    i64toi32_i32$0 = $3;
    i64toi32_i32$4 = 0;
    i64toi32_i32$5 = 60;
    i64toi32_i32$1 = i64toi32_i32$5 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$0 << i64toi32_i32$1 | 0;
     $28 = 0;
    } else {
     i64toi32_i32$4 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$1 | 0) | 0;
     $28 = i64toi32_i32$0 << i64toi32_i32$1 | 0;
    }
    $5 = $28;
    $5$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $3$hi;
    i64toi32_i32$3 = $3;
    i64toi32_i32$0 = 0;
    i64toi32_i32$5 = 4;
    i64toi32_i32$1 = i64toi32_i32$5 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = 0;
     $29 = i64toi32_i32$4 >>> i64toi32_i32$1 | 0;
    } else {
     i64toi32_i32$0 = i64toi32_i32$4 >>> i64toi32_i32$1 | 0;
     $29 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$1 | 0) | 0;
    }
    i64toi32_i32$4 = $29;
    i64toi32_i32$3 = 2147418112;
    i64toi32_i32$5 = 0;
    i64toi32_i32$3 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
    $4 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
    $4$hi = i64toi32_i32$3;
    break label$1;
   }
   label$4 : {
    i64toi32_i32$3 = $4$hi;
    if (!!($4 | i64toi32_i32$3 | 0)) {
     break label$4
    }
    i64toi32_i32$3 = 0;
    $5 = 0;
    $5$hi = i64toi32_i32$3;
    i64toi32_i32$3 = 0;
    $4 = 0;
    $4$hi = i64toi32_i32$3;
    break label$1;
   }
   $32 = $2;
   i64toi32_i32$3 = $4$hi;
   $33 = $4;
   $33$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $3$hi;
   $37 = Math_clz32($3) + 32 | 0;
   i64toi32_i32$3 = $4$hi;
   i64toi32_i32$0 = $4;
   i64toi32_i32$4 = 0;
   i64toi32_i32$5 = 32;
   i64toi32_i32$1 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$4 = 0;
    $30 = i64toi32_i32$3 >>> i64toi32_i32$1 | 0;
   } else {
    i64toi32_i32$4 = i64toi32_i32$3 >>> i64toi32_i32$1 | 0;
    $30 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$1 | 0) | 0;
   }
   i64toi32_i32$4 = $4$hi;
   i64toi32_i32$3 = $4;
   i64toi32_i32$0 = 1;
   i64toi32_i32$5 = 0;
   $6 = i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0 ? $37 : Math_clz32($30);
   i64toi32_i32$3 = $33$hi;
   i64toi32_i32$4 = 0;
   __ashlti3($32 | 0, $33 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$4 | 0, $6 + 49 | 0 | 0);
   i64toi32_i32$5 = $2 + 8 | 0;
   i64toi32_i32$4 = HEAP32[i64toi32_i32$5 >> 2] | 0;
   i64toi32_i32$3 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
   i64toi32_i32$5 = i64toi32_i32$4;
   i64toi32_i32$4 = 65536;
   i64toi32_i32$0 = 0;
   i64toi32_i32$4 = i64toi32_i32$3 ^ i64toi32_i32$4 | 0;
   $50 = i64toi32_i32$5 ^ i64toi32_i32$0 | 0;
   $50$hi = i64toi32_i32$4;
   i64toi32_i32$4 = 0;
   i64toi32_i32$3 = 15372 - $6 | 0;
   i64toi32_i32$5 = 0;
   i64toi32_i32$0 = 48;
   i64toi32_i32$1 = i64toi32_i32$0 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$3 << i64toi32_i32$1 | 0;
    $31 = 0;
   } else {
    i64toi32_i32$5 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$1 | 0) | 0;
    $31 = i64toi32_i32$3 << i64toi32_i32$1 | 0;
   }
   $54$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $50$hi;
   i64toi32_i32$4 = $50;
   i64toi32_i32$3 = $54$hi;
   i64toi32_i32$0 = $31;
   i64toi32_i32$3 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
   $4 = i64toi32_i32$4 | i64toi32_i32$0 | 0;
   $4$hi = i64toi32_i32$3;
   i64toi32_i32$5 = $2;
   i64toi32_i32$3 = HEAP32[i64toi32_i32$5 >> 2] | 0;
   i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
   $5 = i64toi32_i32$3;
   $5$hi = i64toi32_i32$4;
  }
  i64toi32_i32$4 = $5$hi;
  i64toi32_i32$3 = $0;
  HEAP32[i64toi32_i32$3 >> 2] = $5;
  HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] = i64toi32_i32$4;
  i64toi32_i32$4 = $4$hi;
  i64toi32_i32$4 = $3$hi;
  i64toi32_i32$5 = $3;
  i64toi32_i32$3 = -2147483648;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = i64toi32_i32$4 & i64toi32_i32$3 | 0;
  $63 = i64toi32_i32$5 & i64toi32_i32$0 | 0;
  $63$hi = i64toi32_i32$3;
  i64toi32_i32$3 = $4$hi;
  i64toi32_i32$4 = $4;
  i64toi32_i32$5 = $63$hi;
  i64toi32_i32$0 = $63;
  i64toi32_i32$5 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
  $64 = i64toi32_i32$4 | i64toi32_i32$0 | 0;
  i64toi32_i32$4 = $0;
  HEAP32[(i64toi32_i32$4 + 8 | 0) >> 2] = $64;
  HEAP32[(i64toi32_i32$4 + 12 | 0) >> 2] = i64toi32_i32$5;
  __stack_pointer = $2 + 16 | 0;
 }
 
 function __letf2($0, $0$hi, $1, $1$hi, $2, $2$hi, $3, $3$hi) {
  $0 = $0 | 0;
  $0$hi = $0$hi | 0;
  $1 = $1 | 0;
  $1$hi = $1$hi | 0;
  $2 = $2 | 0;
  $2$hi = $2$hi | 0;
  $3 = $3 | 0;
  $3$hi = $3$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$1 = 0, $4 = 0, $5 = 0, $6 = 0, $5$hi = 0, $6$hi = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $8 = 0, $12 = 0, $17 = 0, $21 = 0, $27 = 0, $27$hi = 0, $30 = 0, $30$hi = 0, $40 = 0, $50 = 0, $50$hi = 0, $53 = 0, $53$hi = 0, $58 = 0, $68 = 0, $68$hi = 0, $71 = 0, $71$hi = 0;
  $4 = 1;
  label$1 : {
   i64toi32_i32$0 = $0$hi;
   i64toi32_i32$2 = $0;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 0;
   $8 = (i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$1 | 0) | 0;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$3 = $1;
   i64toi32_i32$0 = 2147483647;
   i64toi32_i32$1 = -1;
   i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
   $5 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
   $5$hi = i64toi32_i32$0;
   i64toi32_i32$2 = $5;
   i64toi32_i32$3 = 2147418112;
   i64toi32_i32$1 = 0;
   $12 = i64toi32_i32$0 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$1 = $5;
   i64toi32_i32$0 = 2147418112;
   i64toi32_i32$3 = 0;
   if ((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) | 0 ? $8 : $12) {
    break label$1
   }
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$3 = $2;
   i64toi32_i32$2 = 0;
   i64toi32_i32$0 = 0;
   $17 = (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$2 | 0) | 0;
   i64toi32_i32$3 = $3$hi;
   i64toi32_i32$0 = $3;
   i64toi32_i32$1 = 2147483647;
   i64toi32_i32$2 = -1;
   i64toi32_i32$1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
   $6 = i64toi32_i32$0 & i64toi32_i32$2 | 0;
   $6$hi = i64toi32_i32$1;
   i64toi32_i32$3 = $6;
   i64toi32_i32$0 = 2147418112;
   i64toi32_i32$2 = 0;
   $21 = i64toi32_i32$1 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$3 >>> 0 > i64toi32_i32$2 >>> 0 | 0) | 0;
   i64toi32_i32$3 = i64toi32_i32$1;
   i64toi32_i32$2 = $6;
   i64toi32_i32$1 = 2147418112;
   i64toi32_i32$0 = 0;
   if ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & (i64toi32_i32$3 | 0) == (i64toi32_i32$1 | 0) | 0 ? $17 : $21) {
    break label$1
   }
   label$2 : {
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$0 = $2;
    i64toi32_i32$3 = $0$hi;
    i64toi32_i32$1 = $0;
    i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
    $27 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
    $27$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $6$hi;
    i64toi32_i32$3 = $5$hi;
    i64toi32_i32$3 = $6$hi;
    i64toi32_i32$2 = $6;
    i64toi32_i32$0 = $5$hi;
    i64toi32_i32$1 = $5;
    i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
    $30 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
    $30$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $27$hi;
    i64toi32_i32$3 = $27;
    i64toi32_i32$2 = $30$hi;
    i64toi32_i32$1 = $30;
    i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
    if (!!(i64toi32_i32$3 | i64toi32_i32$1 | 0 | i64toi32_i32$2 | 0)) {
     break label$2
    }
    return 0 | 0;
   }
   label$3 : {
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$2 = $1$hi;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$0 = $3;
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$1 = $1;
    i64toi32_i32$3 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
    i64toi32_i32$2 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = 0;
    if ((i64toi32_i32$3 | 0) < (i64toi32_i32$0 | 0)) {
     $35 = 1
    } else {
     if ((i64toi32_i32$3 | 0) <= (i64toi32_i32$0 | 0)) {
      if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$1 >>> 0) {
       $36 = 0
      } else {
       $36 = 1
      }
      $37 = $36;
     } else {
      $37 = 0
     }
     $35 = $37;
    }
    if ($35) {
     break label$3
    }
    $4 = -1;
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$1 = $0;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$0 = $2;
    $40 = i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$0 = $1;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$3 = $3;
    if ((i64toi32_i32$1 | 0) < (i64toi32_i32$2 | 0)) {
     $38 = 1
    } else {
     if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$2 | 0)) {
      if (i64toi32_i32$0 >>> 0 >= i64toi32_i32$3 >>> 0) {
       $39 = 0
      } else {
       $39 = 1
      }
      $41 = $39;
     } else {
      $41 = 0
     }
     $38 = $41;
    }
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$0 = $3$hi;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$3 = $1;
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$2 = $3;
    if ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) | 0 ? $40 : $38) {
     break label$1
    }
    i64toi32_i32$3 = $0$hi;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$3 = $0$hi;
    i64toi32_i32$2 = $0;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$1 = $2;
    i64toi32_i32$0 = i64toi32_i32$3 ^ i64toi32_i32$0 | 0;
    $50 = i64toi32_i32$2 ^ i64toi32_i32$1 | 0;
    $50$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$0 = $3$hi;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$3 = $1;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$1 = $3;
    i64toi32_i32$2 = i64toi32_i32$0 ^ i64toi32_i32$2 | 0;
    $53 = i64toi32_i32$3 ^ i64toi32_i32$1 | 0;
    $53$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $50$hi;
    i64toi32_i32$0 = $50;
    i64toi32_i32$3 = $53$hi;
    i64toi32_i32$1 = $53;
    i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
    i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = 0;
    return (i64toi32_i32$2 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | 0 | 0;
   }
   $4 = -1;
   i64toi32_i32$2 = $0$hi;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$2 = $0$hi;
   i64toi32_i32$1 = $0;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$0 = $2;
   $58 = i64toi32_i32$2 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 > i64toi32_i32$0 >>> 0 | 0) | 0;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$0 = $1;
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$3 = $3;
   if ((i64toi32_i32$1 | 0) > (i64toi32_i32$2 | 0)) {
    $42 = 1
   } else {
    if ((i64toi32_i32$1 | 0) >= (i64toi32_i32$2 | 0)) {
     if (i64toi32_i32$0 >>> 0 <= i64toi32_i32$3 >>> 0) {
      $43 = 0
     } else {
      $43 = 1
     }
     $44 = $43;
    } else {
     $44 = 0
    }
    $42 = $44;
   }
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$3 = $1;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$2 = $3;
   if ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) | 0 ? $58 : $42) {
    break label$1
   }
   i64toi32_i32$3 = $0$hi;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$3 = $0$hi;
   i64toi32_i32$2 = $0;
   i64toi32_i32$0 = $2$hi;
   i64toi32_i32$1 = $2;
   i64toi32_i32$0 = i64toi32_i32$3 ^ i64toi32_i32$0 | 0;
   $68 = i64toi32_i32$2 ^ i64toi32_i32$1 | 0;
   $68$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$3 = $1;
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$1 = $3;
   i64toi32_i32$2 = i64toi32_i32$0 ^ i64toi32_i32$2 | 0;
   $71 = i64toi32_i32$3 ^ i64toi32_i32$1 | 0;
   $71$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $68$hi;
   i64toi32_i32$0 = $68;
   i64toi32_i32$3 = $71$hi;
   i64toi32_i32$1 = $71;
   i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
   i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$1 = 0;
   $4 = (i64toi32_i32$2 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | 0;
  }
  return $4 | 0;
 }
 
 function __getf2($0, $0$hi, $1, $1$hi, $2, $2$hi, $3, $3$hi) {
  $0 = $0 | 0;
  $0$hi = $0$hi | 0;
  $1 = $1 | 0;
  $1$hi = $1$hi | 0;
  $2 = $2 | 0;
  $2$hi = $2$hi | 0;
  $3 = $3 | 0;
  $3$hi = $3$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$1 = 0, $5 = 0, $6 = 0, $4 = 0, $5$hi = 0, $6$hi = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $8 = 0, $12 = 0, $17 = 0, $21 = 0, $27 = 0, $27$hi = 0, $30 = 0, $30$hi = 0, $40 = 0, $50 = 0, $50$hi = 0, $53 = 0, $53$hi = 0, $58 = 0, $68 = 0, $68$hi = 0, $71 = 0, $71$hi = 0;
  $4 = -1;
  label$1 : {
   i64toi32_i32$0 = $0$hi;
   i64toi32_i32$2 = $0;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 0;
   $8 = (i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$1 | 0) | 0;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$3 = $1;
   i64toi32_i32$0 = 2147483647;
   i64toi32_i32$1 = -1;
   i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
   $5 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
   $5$hi = i64toi32_i32$0;
   i64toi32_i32$2 = $5;
   i64toi32_i32$3 = 2147418112;
   i64toi32_i32$1 = 0;
   $12 = i64toi32_i32$0 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$1 = $5;
   i64toi32_i32$0 = 2147418112;
   i64toi32_i32$3 = 0;
   if ((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) | 0 ? $8 : $12) {
    break label$1
   }
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$3 = $2;
   i64toi32_i32$2 = 0;
   i64toi32_i32$0 = 0;
   $17 = (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$2 | 0) | 0;
   i64toi32_i32$3 = $3$hi;
   i64toi32_i32$0 = $3;
   i64toi32_i32$1 = 2147483647;
   i64toi32_i32$2 = -1;
   i64toi32_i32$1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
   $6 = i64toi32_i32$0 & i64toi32_i32$2 | 0;
   $6$hi = i64toi32_i32$1;
   i64toi32_i32$3 = $6;
   i64toi32_i32$0 = 2147418112;
   i64toi32_i32$2 = 0;
   $21 = i64toi32_i32$1 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$3 >>> 0 > i64toi32_i32$2 >>> 0 | 0) | 0;
   i64toi32_i32$3 = i64toi32_i32$1;
   i64toi32_i32$2 = $6;
   i64toi32_i32$1 = 2147418112;
   i64toi32_i32$0 = 0;
   if ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & (i64toi32_i32$3 | 0) == (i64toi32_i32$1 | 0) | 0 ? $17 : $21) {
    break label$1
   }
   label$2 : {
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$0 = $2;
    i64toi32_i32$3 = $0$hi;
    i64toi32_i32$1 = $0;
    i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
    $27 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
    $27$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $6$hi;
    i64toi32_i32$3 = $5$hi;
    i64toi32_i32$3 = $6$hi;
    i64toi32_i32$2 = $6;
    i64toi32_i32$0 = $5$hi;
    i64toi32_i32$1 = $5;
    i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
    $30 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
    $30$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $27$hi;
    i64toi32_i32$3 = $27;
    i64toi32_i32$2 = $30$hi;
    i64toi32_i32$1 = $30;
    i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
    if (!!(i64toi32_i32$3 | i64toi32_i32$1 | 0 | i64toi32_i32$2 | 0)) {
     break label$2
    }
    return 0 | 0;
   }
   label$3 : {
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$2 = $1$hi;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$0 = $3;
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$1 = $1;
    i64toi32_i32$3 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
    i64toi32_i32$2 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = 0;
    if ((i64toi32_i32$3 | 0) < (i64toi32_i32$0 | 0)) {
     $35 = 1
    } else {
     if ((i64toi32_i32$3 | 0) <= (i64toi32_i32$0 | 0)) {
      if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$1 >>> 0) {
       $36 = 0
      } else {
       $36 = 1
      }
      $37 = $36;
     } else {
      $37 = 0
     }
     $35 = $37;
    }
    if ($35) {
     break label$3
    }
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$1 = $0;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$0 = $2;
    $40 = i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$0 = $1;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$3 = $3;
    if ((i64toi32_i32$1 | 0) < (i64toi32_i32$2 | 0)) {
     $38 = 1
    } else {
     if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$2 | 0)) {
      if (i64toi32_i32$0 >>> 0 >= i64toi32_i32$3 >>> 0) {
       $39 = 0
      } else {
       $39 = 1
      }
      $41 = $39;
     } else {
      $41 = 0
     }
     $38 = $41;
    }
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$0 = $3$hi;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$3 = $1;
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$2 = $3;
    if ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) | 0 ? $40 : $38) {
     break label$1
    }
    i64toi32_i32$3 = $0$hi;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$3 = $0$hi;
    i64toi32_i32$2 = $0;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$1 = $2;
    i64toi32_i32$0 = i64toi32_i32$3 ^ i64toi32_i32$0 | 0;
    $50 = i64toi32_i32$2 ^ i64toi32_i32$1 | 0;
    $50$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$0 = $3$hi;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$3 = $1;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$1 = $3;
    i64toi32_i32$2 = i64toi32_i32$0 ^ i64toi32_i32$2 | 0;
    $53 = i64toi32_i32$3 ^ i64toi32_i32$1 | 0;
    $53$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $50$hi;
    i64toi32_i32$0 = $50;
    i64toi32_i32$3 = $53$hi;
    i64toi32_i32$1 = $53;
    i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
    i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = 0;
    return (i64toi32_i32$2 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | 0 | 0;
   }
   i64toi32_i32$2 = $0$hi;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$2 = $0$hi;
   i64toi32_i32$1 = $0;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$0 = $2;
   $58 = i64toi32_i32$2 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 > i64toi32_i32$0 >>> 0 | 0) | 0;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$0 = $1;
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$3 = $3;
   if ((i64toi32_i32$1 | 0) > (i64toi32_i32$2 | 0)) {
    $42 = 1
   } else {
    if ((i64toi32_i32$1 | 0) >= (i64toi32_i32$2 | 0)) {
     if (i64toi32_i32$0 >>> 0 <= i64toi32_i32$3 >>> 0) {
      $43 = 0
     } else {
      $43 = 1
     }
     $44 = $43;
    } else {
     $44 = 0
    }
    $42 = $44;
   }
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$3 = $1;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$2 = $3;
   if ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) | 0 ? $58 : $42) {
    break label$1
   }
   i64toi32_i32$3 = $0$hi;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$3 = $0$hi;
   i64toi32_i32$2 = $0;
   i64toi32_i32$0 = $2$hi;
   i64toi32_i32$1 = $2;
   i64toi32_i32$0 = i64toi32_i32$3 ^ i64toi32_i32$0 | 0;
   $68 = i64toi32_i32$2 ^ i64toi32_i32$1 | 0;
   $68$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$3 = $1;
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$1 = $3;
   i64toi32_i32$2 = i64toi32_i32$0 ^ i64toi32_i32$2 | 0;
   $71 = i64toi32_i32$3 ^ i64toi32_i32$1 | 0;
   $71$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $68$hi;
   i64toi32_i32$0 = $68;
   i64toi32_i32$3 = $71$hi;
   i64toi32_i32$1 = $71;
   i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
   i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$1 = 0;
   $4 = (i64toi32_i32$2 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | 0;
  }
  return $4 | 0;
 }
 
 function scalbn($0, $1) {
  $0 = +$0;
  $1 = $1 | 0;
  var i64toi32_i32$4 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $8 = 0, $32 = 0.0, i64toi32_i32$0 = 0;
  label$1 : {
   label$2 : {
    if (($1 | 0) < (1024 | 0)) {
     break label$2
    }
    $0 = $0 * 8988465674311579538646525.0e283;
    label$3 : {
     if (($1 | 0) >= (2047 | 0)) {
      break label$3
     }
     $1 = $1 + -1023 | 0;
     break label$1;
    }
    $0 = $0 * 8988465674311579538646525.0e283;
    $1 = (($1 | 0) < (3069 | 0) ? $1 : 3069) + -2046 | 0;
    break label$1;
   }
   if (($1 | 0) > (-1023 | 0)) {
    break label$1
   }
   $0 = $0 * 2.2250738585072014e-308;
   label$4 : {
    if (($1 | 0) <= (-2045 | 0)) {
     break label$4
    }
    $1 = $1 + 1022 | 0;
    break label$1;
   }
   $0 = $0 * 2.2250738585072014e-308;
   $1 = (($1 | 0) > (-3066 | 0) ? $1 : -3066) + 2044 | 0;
  }
  $32 = $0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$2 = $1 + 1023 | 0;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 52;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   $8 = 0;
  } else {
   i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
   $8 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
  }
  wasm2js_scratch_store_i32(0 | 0, $8 | 0);
  wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$1 | 0);
  return +($32 * +wasm2js_scratch_load_f64());
 }
 
 function copysignl($0, $1, $1$hi, $2, $2$hi, $3, $3$hi, $4, $4$hi) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $1$hi = $1$hi | 0;
  $2 = $2 | 0;
  $2$hi = $2$hi | 0;
  $3 = $3 | 0;
  $3$hi = $3$hi | 0;
  $4 = $4 | 0;
  $4$hi = $4$hi | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, $22 = 0, $23 = 0, $24 = 0, $7 = 0, $11 = 0, $18$hi = 0, $20 = 0, $20$hi = 0, $21 = 0;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$1 = $0;
  HEAP32[i64toi32_i32$1 >> 2] = $1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $7 = i64toi32_i32$1;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$2 = $4;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 48;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = 0;
   $22 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $22 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
  }
  $11 = $22 & 32768 | 0;
  i64toi32_i32$1 = $2$hi;
  i64toi32_i32$0 = $2;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 48;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = 0;
   $23 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
   $23 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
  }
  i64toi32_i32$2 = 0;
  i64toi32_i32$1 = $11 | ($23 & 32767 | 0) | 0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = 48;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
   $24 = 0;
  } else {
   i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
   $24 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
  }
  $18$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $2$hi;
  i64toi32_i32$2 = $2;
  i64toi32_i32$1 = 65535;
  i64toi32_i32$3 = -1;
  i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
  $20 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
  $20$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $18$hi;
  i64toi32_i32$0 = $24;
  i64toi32_i32$2 = $20$hi;
  i64toi32_i32$3 = $20;
  i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
  $21 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
  i64toi32_i32$0 = $7;
  HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $21;
  HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$2;
 }
 
 function __floatunsitf($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$5 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $2 = 0, $3 = 0, $3$hi = 0, $4 = 0, $4$hi = 0, $17 = 0, $11 = 0, $19 = 0, $19$hi = 0, $23$hi = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  label$1 : {
   label$2 : {
    if ($1) {
     break label$2
    }
    i64toi32_i32$0 = 0;
    $3 = 0;
    $3$hi = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    $4 = 0;
    $4$hi = i64toi32_i32$0;
    break label$1;
   }
   i64toi32_i32$0 = 0;
   $11 = $1;
   $1 = Math_clz32($1);
   i64toi32_i32$1 = 0;
   __ashlti3($2 | 0, $11 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$1 | 0, $1 + 81 | 0 | 0);
   i64toi32_i32$2 = $2 + 8 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   i64toi32_i32$2 = i64toi32_i32$1;
   i64toi32_i32$1 = 65536;
   i64toi32_i32$3 = 0;
   i64toi32_i32$1 = i64toi32_i32$0 ^ i64toi32_i32$1 | 0;
   $19 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
   $19$hi = i64toi32_i32$1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$0 = 16414 - $1 | 0;
   i64toi32_i32$2 = 0;
   i64toi32_i32$3 = 48;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    $17 = 0;
   } else {
    i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
    $17 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
   }
   $23$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $19$hi;
   i64toi32_i32$1 = $19;
   i64toi32_i32$0 = $23$hi;
   i64toi32_i32$3 = $17;
   i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
   i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
   if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   $4 = i64toi32_i32$4;
   $4$hi = i64toi32_i32$5;
   i64toi32_i32$2 = $2;
   i64toi32_i32$5 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $3 = i64toi32_i32$5;
   $3$hi = i64toi32_i32$1;
  }
  i64toi32_i32$1 = $3$hi;
  i64toi32_i32$5 = $0;
  HEAP32[i64toi32_i32$5 >> 2] = $3;
  HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$1 = $4$hi;
  HEAP32[(i64toi32_i32$5 + 8 | 0) >> 2] = $4;
  HEAP32[(i64toi32_i32$5 + 12 | 0) >> 2] = i64toi32_i32$1;
  __stack_pointer = $2 + 16 | 0;
 }
 
 function __subtf3($0, $1, $1$hi, $2, $2$hi, $3, $3$hi, $4, $4$hi) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $1$hi = $1$hi | 0;
  $2 = $2 | 0;
  $2$hi = $2$hi | 0;
  $3 = $3 | 0;
  $3$hi = $3$hi | 0;
  $4 = $4 | 0;
  $4$hi = $4$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, $5 = 0, i64toi32_i32$1 = 0, $14 = 0, $14$hi = 0, $20 = 0;
  $5 = __stack_pointer - 16 | 0;
  __stack_pointer = $5;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$0 = $2$hi;
  i64toi32_i32$0 = $3$hi;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$2 = $4;
  i64toi32_i32$1 = -2147483648;
  i64toi32_i32$3 = 0;
  i64toi32_i32$1 = i64toi32_i32$0 ^ i64toi32_i32$1 | 0;
  $14 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
  $14$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $1$hi;
  i64toi32_i32$2 = $2$hi;
  i64toi32_i32$0 = $3$hi;
  i64toi32_i32$3 = $14$hi;
  __addtf3($5 | 0, $1 | 0, $1$hi | 0, $2 | 0, i64toi32_i32$2 | 0, $3 | 0, i64toi32_i32$0 | 0, $14 | 0, i64toi32_i32$3 | 0);
  i64toi32_i32$2 = $5;
  i64toi32_i32$3 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $1 = i64toi32_i32$3;
  $1$hi = i64toi32_i32$0;
  i64toi32_i32$2 = i64toi32_i32$2 + 8 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $20 = i64toi32_i32$0;
  i64toi32_i32$0 = $0;
  HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $20;
  HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$3;
  i64toi32_i32$3 = $1$hi;
  HEAP32[i64toi32_i32$0 >> 2] = $1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$3;
  __stack_pointer = $5 + 16 | 0;
 }
 
 function scalbnl($0, $1, $1$hi, $2, $2$hi, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $1$hi = $1$hi | 0;
  $2 = $2 | 0;
  $2$hi = $2$hi | 0;
  $3 = $3 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $4 = 0, i64toi32_i32$4 = 0, $20 = 0, $70 = 0, $71 = 0, $71$hi = 0, $72 = 0, $72$hi = 0, $76$hi = 0, $80 = 0, $83 = 0;
  $4 = __stack_pointer - 80 | 0;
  __stack_pointer = $4;
  label$1 : {
   label$2 : {
    if (($3 | 0) < (16384 | 0)) {
     break label$2
    }
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 2147352576;
    __multf3($4 + 32 | 0 | 0, $1 | 0, i64toi32_i32$0 | 0, $2 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$3 | 0);
    i64toi32_i32$1 = ($4 + 32 | 0) + 8 | 0;
    i64toi32_i32$3 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $2 = i64toi32_i32$3;
    $2$hi = i64toi32_i32$2;
    i64toi32_i32$1 = $4;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 32 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 36 | 0) >> 2] | 0;
    $1 = i64toi32_i32$2;
    $1$hi = i64toi32_i32$3;
    label$3 : {
     if (($3 | 0) >= (32767 | 0)) {
      break label$3
     }
     $3 = $3 + -16383 | 0;
     break label$1;
    }
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$1 = 0;
    i64toi32_i32$0 = 2147352576;
    __multf3($4 + 16 | 0 | 0, $1 | 0, i64toi32_i32$3 | 0, $2 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$0 | 0);
    $3 = (($3 | 0) < (49149 | 0) ? $3 : 49149) + -32766 | 0;
    i64toi32_i32$2 = ($4 + 16 | 0) + 8 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $2 = i64toi32_i32$0;
    $2$hi = i64toi32_i32$1;
    i64toi32_i32$2 = $4;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 16 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 20 | 0) >> 2] | 0;
    $1 = i64toi32_i32$1;
    $1$hi = i64toi32_i32$0;
    break label$1;
   }
   if (($3 | 0) > (-16383 | 0)) {
    break label$1
   }
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$0 = $2$hi;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$2 = 0;
   i64toi32_i32$3 = 65536;
   __multf3($4 + 64 | 0 | 0, $1 | 0, i64toi32_i32$0 | 0, $2 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$3 | 0);
   i64toi32_i32$1 = ($4 + 64 | 0) + 8 | 0;
   i64toi32_i32$3 = HEAP32[i64toi32_i32$1 >> 2] | 0;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
   $2 = i64toi32_i32$3;
   $2$hi = i64toi32_i32$2;
   i64toi32_i32$1 = $4;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 64 | 0) >> 2] | 0;
   i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 68 | 0) >> 2] | 0;
   $1 = i64toi32_i32$2;
   $1$hi = i64toi32_i32$3;
   label$4 : {
    if (($3 | 0) <= (-32765 | 0)) {
     break label$4
    }
    $3 = $3 + 16382 | 0;
    break label$1;
   }
   i64toi32_i32$3 = $1$hi;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$3 = $1$hi;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$1 = 0;
   i64toi32_i32$0 = 65536;
   __multf3($4 + 48 | 0 | 0, $1 | 0, i64toi32_i32$3 | 0, $2 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$0 | 0);
   $3 = (($3 | 0) > (-49146 | 0) ? $3 : -49146) + 32764 | 0;
   i64toi32_i32$2 = ($4 + 48 | 0) + 8 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $2 = i64toi32_i32$0;
   $2$hi = i64toi32_i32$1;
   i64toi32_i32$2 = $4;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 48 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 52 | 0) >> 2] | 0;
   $1 = i64toi32_i32$1;
   $1$hi = i64toi32_i32$0;
  }
  $70 = $4;
  i64toi32_i32$0 = $1$hi;
  $71 = $1;
  $71$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $2$hi;
  $72 = $2;
  $72$hi = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$2 = $3 + 16383 | 0;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 48;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   $20 = 0;
  } else {
   i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
   $20 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
  }
  $76$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $71$hi;
  i64toi32_i32$2 = $72$hi;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = $76$hi;
  __multf3($70 | 0, $71 | 0, i64toi32_i32$1 | 0, $72 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$0 | 0, $20 | 0, i64toi32_i32$3 | 0);
  i64toi32_i32$2 = $4 + 8 | 0;
  i64toi32_i32$3 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $80 = i64toi32_i32$3;
  i64toi32_i32$3 = $0;
  HEAP32[(i64toi32_i32$3 + 8 | 0) >> 2] = $80;
  HEAP32[(i64toi32_i32$3 + 12 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = $4;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $83 = i64toi32_i32$0;
  i64toi32_i32$0 = $0;
  HEAP32[i64toi32_i32$0 >> 2] = $83;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$3;
  __stack_pointer = i64toi32_i32$2 + 80 | 0;
 }
 
 function __multi3($0, $1, $1$hi, $2, $2$hi, $3, $3$hi, $4, $4$hi) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $1$hi = $1$hi | 0;
  $2 = $2 | 0;
  $2$hi = $2$hi | 0;
  $3 = $3 | 0;
  $3$hi = $3$hi | 0;
  $4 = $4 | 0;
  $4$hi = $4$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$5 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $46 = 0, $48 = 0, $49 = 0, $50 = 0, $53 = 0, $54 = 0, $6 = 0, $9 = 0, $9$hi = 0, $12 = 0, $12$hi = 0, $13 = 0, $13$hi = 0, $16 = 0, $16$hi = 0, $20 = 0, $20$hi = 0, $21 = 0, $21$hi = 0, $5 = 0, $5$hi = 0, $30$hi = 0, $33 = 0, $33$hi = 0, $36$hi = 0, $37 = 0, $37$hi = 0, $39 = 0, $39$hi = 0, $42 = 0, $42$hi = 0, $45$hi = 0, $47 = 0, $49$hi = 0, $51 = 0, $51$hi = 0, $52 = 0;
  $6 = $0;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$1 = $1$hi;
  i64toi32_i32$1 = __wasm_i64_mul($4 | 0, i64toi32_i32$0 | 0, $1 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $9 = i64toi32_i32$1;
  $9$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $2$hi;
  i64toi32_i32$0 = $3$hi;
  i64toi32_i32$0 = $2$hi;
  i64toi32_i32$1 = $3$hi;
  i64toi32_i32$1 = __wasm_i64_mul($2 | 0, i64toi32_i32$0 | 0, $3 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $12 = i64toi32_i32$1;
  $12$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $9$hi;
  i64toi32_i32$2 = $9;
  i64toi32_i32$1 = $12$hi;
  i64toi32_i32$3 = $12;
  i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
  i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
  if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
  }
  $13 = i64toi32_i32$4;
  $13$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $3$hi;
  i64toi32_i32$0 = $3;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = 0;
   $46 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
  } else {
   i64toi32_i32$2 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
   $46 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$1 | 0) | 0;
  }
  $4 = $46;
  $4$hi = i64toi32_i32$2;
  $16 = $4;
  $16$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $1$hi;
  i64toi32_i32$5 = $1;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$0 = 0;
   $48 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
  } else {
   i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
   $48 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$1 | 0) | 0;
  }
  $2 = $48;
  $2$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $16$hi;
  i64toi32_i32$5 = $2$hi;
  i64toi32_i32$5 = __wasm_i64_mul($16 | 0, i64toi32_i32$0 | 0, $2 | 0, i64toi32_i32$5 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $20 = i64toi32_i32$5;
  $20$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $13$hi;
  i64toi32_i32$2 = $13;
  i64toi32_i32$5 = $20$hi;
  i64toi32_i32$3 = $20;
  i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
  i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
  if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
  }
  $21 = i64toi32_i32$1;
  $21$hi = i64toi32_i32$4;
  i64toi32_i32$4 = $3$hi;
  i64toi32_i32$0 = $3;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = -1;
  i64toi32_i32$2 = i64toi32_i32$4 & i64toi32_i32$2 | 0;
  $3 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
  $3$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $1$hi;
  i64toi32_i32$4 = $1;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = -1;
  i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
  $1 = i64toi32_i32$4 & i64toi32_i32$3 | 0;
  $1$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $3$hi;
  i64toi32_i32$4 = $1$hi;
  i64toi32_i32$4 = __wasm_i64_mul($3 | 0, i64toi32_i32$0 | 0, $1 | 0, i64toi32_i32$4 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $5 = i64toi32_i32$4;
  $5$hi = i64toi32_i32$0;
  i64toi32_i32$2 = i64toi32_i32$4;
  i64toi32_i32$4 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$5 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$4 = 0;
   $49 = i64toi32_i32$0 >>> i64toi32_i32$5 | 0;
  } else {
   i64toi32_i32$4 = i64toi32_i32$0 >>> i64toi32_i32$5 | 0;
   $49 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$5 | 0) | 0;
  }
  $30$hi = i64toi32_i32$4;
  i64toi32_i32$4 = $3$hi;
  i64toi32_i32$4 = $2$hi;
  i64toi32_i32$4 = $3$hi;
  i64toi32_i32$2 = $2$hi;
  i64toi32_i32$2 = __wasm_i64_mul($3 | 0, i64toi32_i32$4 | 0, $2 | 0, i64toi32_i32$2 | 0) | 0;
  i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
  $33 = i64toi32_i32$2;
  $33$hi = i64toi32_i32$4;
  i64toi32_i32$4 = $30$hi;
  i64toi32_i32$0 = $49;
  i64toi32_i32$2 = $33$hi;
  i64toi32_i32$3 = $33;
  i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
  i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
  if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
  }
  $3 = i64toi32_i32$5;
  $3$hi = i64toi32_i32$1;
  i64toi32_i32$4 = i64toi32_i32$5;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$2 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$0 = 0;
   $50 = i64toi32_i32$1 >>> i64toi32_i32$2 | 0;
  } else {
   i64toi32_i32$0 = i64toi32_i32$1 >>> i64toi32_i32$2 | 0;
   $50 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$2 | 0) | 0;
  }
  $36$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $21$hi;
  i64toi32_i32$1 = $21;
  i64toi32_i32$4 = $36$hi;
  i64toi32_i32$3 = $50;
  i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
  i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
  if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
  }
  $37 = i64toi32_i32$2;
  $37$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $3$hi;
  i64toi32_i32$0 = $3;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = -1;
  i64toi32_i32$1 = i64toi32_i32$5 & i64toi32_i32$1 | 0;
  $39 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
  $39$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $4$hi;
  i64toi32_i32$1 = $1$hi;
  i64toi32_i32$1 = $4$hi;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$0 = __wasm_i64_mul($4 | 0, i64toi32_i32$1 | 0, $1 | 0, i64toi32_i32$0 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  $42 = i64toi32_i32$0;
  $42$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $39$hi;
  i64toi32_i32$5 = $39;
  i64toi32_i32$0 = $42$hi;
  i64toi32_i32$3 = $42;
  i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
  i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
  if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
  }
  $3 = i64toi32_i32$4;
  $3$hi = i64toi32_i32$2;
  i64toi32_i32$1 = i64toi32_i32$4;
  i64toi32_i32$5 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$5 = 0;
   $53 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
  } else {
   i64toi32_i32$5 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
   $53 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$0 | 0) | 0;
  }
  $45$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $37$hi;
  i64toi32_i32$2 = $37;
  i64toi32_i32$1 = $45$hi;
  i64toi32_i32$3 = $53;
  i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
  i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
  if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
  }
  i64toi32_i32$2 = $6;
  HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] = i64toi32_i32$4;
  $47 = $0;
  i64toi32_i32$4 = $3$hi;
  i64toi32_i32$5 = $3;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = i64toi32_i32$5 << i64toi32_i32$1 | 0;
   $54 = 0;
  } else {
   i64toi32_i32$2 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$1 | 0) | 0;
   $54 = i64toi32_i32$5 << i64toi32_i32$1 | 0;
  }
  $49$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $5$hi;
  i64toi32_i32$4 = $5;
  i64toi32_i32$5 = 0;
  i64toi32_i32$3 = -1;
  i64toi32_i32$5 = i64toi32_i32$2 & i64toi32_i32$5 | 0;
  $51 = i64toi32_i32$4 & i64toi32_i32$3 | 0;
  $51$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $49$hi;
  i64toi32_i32$2 = $54;
  i64toi32_i32$4 = $51$hi;
  i64toi32_i32$3 = $51;
  i64toi32_i32$4 = i64toi32_i32$5 | i64toi32_i32$4 | 0;
  $52 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
  i64toi32_i32$2 = $47;
  HEAP32[i64toi32_i32$2 >> 2] = $52;
  HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$4;
 }
 
 function __divtf3($0, $1, $1$hi, $2, $2$hi, $3, $3$hi, $4, $4$hi) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $1$hi = $1$hi | 0;
  $2 = $2 | 0;
  $2$hi = $2$hi | 0;
  $3 = $3 | 0;
  $3$hi = $3$hi | 0;
  $4 = $4 | 0;
  $4$hi = $4$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, i64toi32_i32$2 = 0, i64toi32_i32$5 = 0, $5 = 0, i64toi32_i32$6 = 0, $12$hi = 0, $6$hi = 0, $12 = 0, $6 = 0, $16$hi = 0, $15$hi = 0, $8$hi = 0, $20$hi = 0, $15 = 0, $7$hi = 0, $8 = 0, $9 = 0, $16 = 0, $17$hi = 0, $7 = 0, $14$hi = 0, $11 = 0, $18$hi = 0, $20 = 0, $14 = 0, $17 = 0, $23$hi = 0, $18 = 0, $23 = 0, $19 = 0, $19$hi = 0, $13 = 0, $22 = 0, $22$hi = 0, $324 = 0, $325 = 0, $10 = 0, $326 = 0, $327 = 0, $329 = 0, $330 = 0, $331 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $338 = 0, $339 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $347 = 0, $348 = 0, $349 = 0, $350 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $21 = 0, $21$hi = 0, $356 = 0, $357 = 0, $359 = 0, $360 = 0, $361 = 0, $362 = 0, $365 = 0, $366 = 0, $368 = 0, $369 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $377 = 0, $378 = 0, $379 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $387 = 0, $50 = 0, $54 = 0, $61 = 0, $65 = 0, $74 = 0, $74$hi = 0, $79 = 0, $79$hi = 0, $87 = 0, $87$hi = 0, $109 = 0, $110 = 0, $110$hi = 0, $111 = 0, $111$hi = 0, $118$hi = 0, $121$hi = 0, $136 = 0, $137 = 0, $137$hi = 0, $138 = 0, $138$hi = 0, $145$hi = 0, $148$hi = 0, $163 = 0, $165 = 0, $165$hi = 0, $169$hi = 0, $180 = 0, $180$hi = 0, $181$hi = 0, $184 = 0, $187 = 0, $187$hi = 0, $192$hi = 0, $202 = 0, $202$hi = 0, $203$hi = 0, $205 = 0, $208 = 0, $208$hi = 0, $213$hi = 0, $223 = 0, $223$hi = 0, $224$hi = 0, $226 = 0, $229 = 0, $229$hi = 0, $234$hi = 0, $244 = 0, $244$hi = 0, $245$hi = 0, $247 = 0, $248 = 0, $248$hi = 0, $251 = 0, $251$hi = 0, $256$hi = 0, $261 = 0, $263$hi = 0, $266 = 0, $267 = 0, $267$hi = 0, $271 = 0, $271$hi = 0, $278 = 0, $278$hi = 0, $282 = 0, $283$hi = 0, $284$hi = 0, $286 = 0, $287$hi = 0, $288$hi = 0, $289$hi = 0, $293$hi = 0, $304 = 0, $304$hi = 0, $307 = 0, $307$hi = 0, $313$hi = 0, $314 = 0, $314$hi = 0, $320 = 0, $320$hi = 0, $328 = 0, $328$hi = 0, $332 = 0, $332$hi = 0, $337 = 0, $337$hi = 0, $339$hi = 0, $340 = 0, $340$hi = 0, $342$hi = 0, $343$hi = 0, $346 = 0, $347$hi = 0, $348$hi = 0, $351 = 0, $352$hi = 0, $358 = 0, $358$hi = 0, $363 = 0, $363$hi = 0, $364 = 0, $364$hi = 0, $367 = 0, $367$hi = 0, $370 = 0, $370$hi = 0, $372$hi = 0, $376 = 0, $376$hi = 0, $380 = 0, $381$hi = 0, $382$hi = 0, $385 = 0, $385$hi = 0, $386 = 0, $386$hi = 0, $393 = 0, $393$hi = 0, $397 = 0, $399 = 0, $399$hi = 0, $401$hi = 0, $402 = 0, $402$hi = 0, $403 = 0, $403$hi = 0, $404 = 0, $404$hi = 0, $406$hi = 0, $410 = 0, $411$hi = 0, $412 = 0, $412$hi = 0, $413 = 0, $413$hi = 0, $414 = 0, $414$hi = 0, $426 = 0, $426$hi = 0, $430 = 0, $431 = 0, $431$hi = 0, $435 = 0, $435$hi = 0, $439 = 0, $440$hi = 0, $441$hi = 0, $445 = 0, $446$hi = 0, $447 = 0, $447$hi = 0, $448 = 0, $448$hi = 0, $455 = 0, $455$hi = 0, $460 = 0, $460$hi = 0, $465 = 0, $465$hi = 0, $468 = 0, $468$hi = 0, $471 = 0, $472$hi = 0, $475 = 0, $476$hi = 0, $477$hi = 0, $480 = 0, $481$hi = 0, $483$hi = 0, $484 = 0, $484$hi = 0, $488 = 0, $489$hi = 0, $490 = 0, $490$hi = 0, $491 = 0, $491$hi = 0, $492 = 0, $492$hi = 0, $499 = 0, $499$hi = 0, $502 = 0, $502$hi = 0, $505 = 0, $507$hi = 0, $508 = 0, $508$hi = 0, $513 = 0, $513$hi = 0, $514 = 0, $514$hi = 0, $516$hi = 0, $517$hi = 0, $519 = 0, $520$hi = 0, $521$hi = 0, $525 = 0, $526$hi = 0, $531$hi = 0, $541$hi = 0, $545 = 0, $545$hi = 0, $546$hi = 0, $550 = 0, $551$hi = 0, $558 = 0, $560 = 0, $560$hi = 0, $562$hi = 0, $564 = 0, $564$hi = 0, $571$hi = 0, $575 = 0, $575$hi = 0, $576$hi = 0, $580 = 0, $581$hi = 0, $595 = 0, $595$hi = 0, $597$hi = 0, $601$hi = 0, $603 = 0, $603$hi = 0, $636 = 0, $636$hi = 0, $641 = 0, $641$hi = 0, $645$hi = 0, $646 = 0, $646$hi = 0, $647 = 0, $647$hi = 0, $650 = 0, $650$hi = 0, $654 = 0, $655$hi = 0, $667 = 0, $667$hi = 0, $668 = 0, $668$hi = 0, $676 = 0, $680 = 0, $681$hi = 0, $685 = 0, $689 = 0, $690$hi = 0, $694 = 0, $695$hi = 0, $697 = 0, $697$hi = 0, $700 = 0, $703 = 0, $703$hi = 0, $704 = 0, $711 = 0, $716 = 0, $717$hi = 0, $721 = 0, $722$hi = 0, $724 = 0, $724$hi = 0, $727 = 0, $730 = 0, $730$hi = 0, $731 = 0, $737 = 0, $742 = 0, $743$hi = 0, $747 = 0, $748$hi = 0, $749$hi = 0;
  $5 = __stack_pointer - 336 | 0;
  __stack_pointer = $5;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$2 = $4;
  i64toi32_i32$1 = 65535;
  i64toi32_i32$3 = -1;
  i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
  $6 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
  $6$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $2$hi;
  i64toi32_i32$0 = $2;
  i64toi32_i32$2 = 65535;
  i64toi32_i32$3 = -1;
  i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
  $7 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
  $7$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $4$hi;
  i64toi32_i32$2 = i64toi32_i32$1;
  i64toi32_i32$2 = $4$hi;
  i64toi32_i32$1 = $4;
  i64toi32_i32$0 = $2$hi;
  i64toi32_i32$3 = $2;
  i64toi32_i32$0 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
  i64toi32_i32$2 = i64toi32_i32$1 ^ i64toi32_i32$3 | 0;
  i64toi32_i32$1 = -2147483648;
  i64toi32_i32$3 = 0;
  i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
  $8 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
  $8$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $4$hi;
  i64toi32_i32$0 = $4;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 48;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = 0;
   $324 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
   $324 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
  }
  $9 = $324 & 32767 | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$1 = $2;
     i64toi32_i32$0 = 0;
     i64toi32_i32$3 = 48;
     i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$0 = 0;
      $325 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
     } else {
      i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
      $325 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
     }
     $10 = $325 & 32767 | 0;
     if (($10 + -1 | 0) >>> 0 > 32765 >>> 0) {
      break label$3
     }
     $11 = 0;
     if (($9 + -1 | 0) >>> 0 < 32766 >>> 0) {
      break label$2
     }
    }
    label$4 : {
     i64toi32_i32$0 = $1$hi;
     $50 = !($1 | i64toi32_i32$0 | 0);
     i64toi32_i32$0 = $2$hi;
     i64toi32_i32$2 = $2;
     i64toi32_i32$1 = 2147483647;
     i64toi32_i32$3 = -1;
     i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
     $12 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
     $12$hi = i64toi32_i32$1;
     i64toi32_i32$0 = $12;
     i64toi32_i32$2 = 2147418112;
     i64toi32_i32$3 = 0;
     $54 = i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
     i64toi32_i32$0 = i64toi32_i32$1;
     i64toi32_i32$3 = $12;
     i64toi32_i32$1 = 2147418112;
     i64toi32_i32$2 = 0;
     if ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) | 0 ? $50 : $54) {
      break label$4
     }
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$2 = $2;
     i64toi32_i32$0 = 32768;
     i64toi32_i32$1 = 0;
     i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
     $8 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
     $8$hi = i64toi32_i32$0;
     break label$1;
    }
    label$5 : {
     i64toi32_i32$0 = $3$hi;
     $61 = !($3 | i64toi32_i32$0 | 0);
     i64toi32_i32$0 = $4$hi;
     i64toi32_i32$3 = $4;
     i64toi32_i32$2 = 2147483647;
     i64toi32_i32$1 = -1;
     i64toi32_i32$2 = i64toi32_i32$0 & i64toi32_i32$2 | 0;
     $2 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
     $2$hi = i64toi32_i32$2;
     i64toi32_i32$0 = $2;
     i64toi32_i32$3 = 2147418112;
     i64toi32_i32$1 = 0;
     $65 = i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
     i64toi32_i32$0 = i64toi32_i32$2;
     i64toi32_i32$1 = $2;
     i64toi32_i32$2 = 2147418112;
     i64toi32_i32$3 = 0;
     if ((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$2 | 0) | 0 ? $61 : $65) {
      break label$5
     }
     i64toi32_i32$1 = $4$hi;
     i64toi32_i32$3 = $4;
     i64toi32_i32$0 = 32768;
     i64toi32_i32$2 = 0;
     i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
     $8 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
     $8$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $3$hi;
     $1 = $3;
     $1$hi = i64toi32_i32$0;
     break label$1;
    }
    label$6 : {
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$0 = $12$hi;
     i64toi32_i32$1 = $12;
     i64toi32_i32$3 = 2147418112;
     i64toi32_i32$2 = 0;
     i64toi32_i32$3 = i64toi32_i32$0 ^ i64toi32_i32$3 | 0;
     $74 = i64toi32_i32$1 ^ i64toi32_i32$2 | 0;
     $74$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $1$hi;
     i64toi32_i32$0 = $1;
     i64toi32_i32$1 = $74$hi;
     i64toi32_i32$2 = $74;
     i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
     i64toi32_i32$3 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
     i64toi32_i32$0 = 0;
     i64toi32_i32$2 = 0;
     if ((i64toi32_i32$3 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$0 | 0) | 0) {
      break label$6
     }
     label$7 : {
      i64toi32_i32$3 = $3$hi;
      i64toi32_i32$3 = $2$hi;
      i64toi32_i32$2 = $2;
      i64toi32_i32$1 = 2147418112;
      i64toi32_i32$0 = 0;
      i64toi32_i32$1 = i64toi32_i32$3 ^ i64toi32_i32$1 | 0;
      $79 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
      $79$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $3$hi;
      i64toi32_i32$3 = $3;
      i64toi32_i32$2 = $79$hi;
      i64toi32_i32$0 = $79;
      i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
      if (!!(i64toi32_i32$3 | i64toi32_i32$0 | 0 | i64toi32_i32$2 | 0)) {
       break label$7
      }
      i64toi32_i32$2 = 0;
      $1 = 0;
      $1$hi = i64toi32_i32$2;
      i64toi32_i32$2 = 2147450880;
      $8 = 0;
      $8$hi = i64toi32_i32$2;
      break label$1;
     }
     i64toi32_i32$2 = $8$hi;
     i64toi32_i32$1 = $8;
     i64toi32_i32$3 = 2147418112;
     i64toi32_i32$0 = 0;
     i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
     $8 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
     $8$hi = i64toi32_i32$3;
     i64toi32_i32$3 = 0;
     $1 = 0;
     $1$hi = i64toi32_i32$3;
     break label$1;
    }
    label$8 : {
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$2 = $2;
     i64toi32_i32$1 = 2147418112;
     i64toi32_i32$0 = 0;
     i64toi32_i32$1 = i64toi32_i32$3 ^ i64toi32_i32$1 | 0;
     $87 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
     $87$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $3$hi;
     i64toi32_i32$3 = $3;
     i64toi32_i32$2 = $87$hi;
     i64toi32_i32$0 = $87;
     i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
     i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
     i64toi32_i32$3 = 0;
     i64toi32_i32$0 = 0;
     if ((i64toi32_i32$1 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | 0) {
      break label$8
     }
     i64toi32_i32$1 = 0;
     $1 = 0;
     $1$hi = i64toi32_i32$1;
     break label$1;
    }
    label$9 : {
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$1 = $12$hi;
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$0 = $1;
     i64toi32_i32$2 = $12$hi;
     i64toi32_i32$3 = $12;
     i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
     i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
     i64toi32_i32$0 = 0;
     i64toi32_i32$3 = 0;
     if ((i64toi32_i32$1 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$0 | 0) | 0) {
      break label$9
     }
     i64toi32_i32$1 = $8$hi;
     i64toi32_i32$1 = $3$hi;
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$1 = $3$hi;
     i64toi32_i32$3 = $3;
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$0 = $2;
     i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
     i64toi32_i32$4 = !(i64toi32_i32$3 | i64toi32_i32$0 | 0 | i64toi32_i32$2 | 0);
     i64toi32_i32$2 = 2147450880;
     i64toi32_i32$3 = $8$hi;
     i64toi32_i32$0 = i64toi32_i32$4 ? 0 : $8;
     i64toi32_i32$1 = i64toi32_i32$4 ? i64toi32_i32$2 : i64toi32_i32$3;
     $8 = i64toi32_i32$0;
     $8$hi = i64toi32_i32$1;
     i64toi32_i32$1 = 0;
     $1 = 0;
     $1$hi = i64toi32_i32$1;
     break label$1;
    }
    label$10 : {
     i64toi32_i32$1 = $3$hi;
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$1 = $3$hi;
     i64toi32_i32$4 = $3;
     i64toi32_i32$0 = $2$hi;
     i64toi32_i32$2 = $2;
     i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
     i64toi32_i32$1 = i64toi32_i32$4 | i64toi32_i32$2 | 0;
     i64toi32_i32$4 = 0;
     i64toi32_i32$2 = 0;
     if ((i64toi32_i32$1 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$4 | 0) | 0) {
      break label$10
     }
     i64toi32_i32$1 = $8$hi;
     i64toi32_i32$2 = $8;
     i64toi32_i32$0 = 2147418112;
     i64toi32_i32$4 = 0;
     i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
     $8 = i64toi32_i32$2 | i64toi32_i32$4 | 0;
     $8$hi = i64toi32_i32$0;
     i64toi32_i32$0 = 0;
     $1 = 0;
     $1$hi = i64toi32_i32$0;
     break label$1;
    }
    $11 = 0;
    label$11 : {
     i64toi32_i32$0 = $12$hi;
     i64toi32_i32$1 = $12;
     i64toi32_i32$2 = 65535;
     i64toi32_i32$4 = -1;
     if (i64toi32_i32$0 >>> 0 > i64toi32_i32$2 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$1 >>> 0 > i64toi32_i32$4 >>> 0 | 0) | 0) {
      break label$11
     }
     $109 = $5 + 320 | 0;
     i64toi32_i32$1 = $1$hi;
     $110 = $1;
     $110$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $7$hi;
     $111 = $7;
     $111$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$1 = $7$hi;
     $11 = !($7 | i64toi32_i32$1 | 0);
     i64toi32_i32$3 = $11;
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$0 = $7$hi;
     i64toi32_i32$2 = i64toi32_i32$3 ? $1 : $7;
     i64toi32_i32$4 = i64toi32_i32$3 ? i64toi32_i32$1 : i64toi32_i32$0;
     i64toi32_i32$1 = Math_clz32(i64toi32_i32$4);
     i64toi32_i32$3 = 0;
     if ((i64toi32_i32$1 | 0) == (32 | 0)) {
      $326 = Math_clz32(i64toi32_i32$2) + 32 | 0
     } else {
      $326 = i64toi32_i32$1
     }
     $118$hi = i64toi32_i32$3;
     i64toi32_i32$3 = 0;
     $121$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $118$hi;
     i64toi32_i32$2 = $326;
     i64toi32_i32$4 = $121$hi;
     i64toi32_i32$1 = $11 << 6 | 0;
     i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
     i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $11 = i64toi32_i32$0;
     i64toi32_i32$5 = $110$hi;
     i64toi32_i32$2 = $111$hi;
     __ashlti3($109 | 0, $110 | 0, i64toi32_i32$5 | 0, $111 | 0, i64toi32_i32$2 | 0, i64toi32_i32$0 + -15 | 0 | 0);
     $11 = 16 - i64toi32_i32$0 | 0;
     i64toi32_i32$3 = $5 + 328 | 0;
     i64toi32_i32$2 = HEAP32[i64toi32_i32$3 >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
     $7 = i64toi32_i32$2;
     $7$hi = i64toi32_i32$5;
     i64toi32_i32$3 = $5;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 320 | 0) >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 324 | 0) >> 2] | 0;
     $1 = i64toi32_i32$5;
     $1$hi = i64toi32_i32$2;
    }
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$3 = $2;
    i64toi32_i32$5 = 65535;
    i64toi32_i32$1 = -1;
    if (i64toi32_i32$2 >>> 0 > i64toi32_i32$5 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$3 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0) {
     break label$2
    }
    $136 = $5 + 304 | 0;
    i64toi32_i32$3 = $3$hi;
    $137 = $3;
    $137$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $6$hi;
    $138 = $6;
    $138$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $3$hi;
    i64toi32_i32$3 = $6$hi;
    $13 = !($6 | i64toi32_i32$3 | 0);
    i64toi32_i32$4 = $13;
    i64toi32_i32$3 = $3$hi;
    i64toi32_i32$2 = $6$hi;
    i64toi32_i32$5 = i64toi32_i32$4 ? $3 : $6;
    i64toi32_i32$1 = i64toi32_i32$4 ? i64toi32_i32$3 : i64toi32_i32$2;
    i64toi32_i32$3 = Math_clz32(i64toi32_i32$1);
    i64toi32_i32$4 = 0;
    if ((i64toi32_i32$3 | 0) == (32 | 0)) {
     $327 = Math_clz32(i64toi32_i32$5) + 32 | 0
    } else {
     $327 = i64toi32_i32$3
    }
    $145$hi = i64toi32_i32$4;
    i64toi32_i32$4 = 0;
    $148$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $145$hi;
    i64toi32_i32$5 = $327;
    i64toi32_i32$1 = $148$hi;
    i64toi32_i32$3 = $13 << 6 | 0;
    i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
    i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
    if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
    }
    $13 = i64toi32_i32$2;
    i64toi32_i32$0 = $137$hi;
    i64toi32_i32$5 = $138$hi;
    __ashlti3($136 | 0, $137 | 0, i64toi32_i32$0 | 0, $138 | 0, i64toi32_i32$5 | 0, i64toi32_i32$2 + -15 | 0 | 0);
    $11 = (i64toi32_i32$2 + $11 | 0) + -16 | 0;
    i64toi32_i32$4 = $5 + 312 | 0;
    i64toi32_i32$5 = HEAP32[i64toi32_i32$4 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
    $6 = i64toi32_i32$5;
    $6$hi = i64toi32_i32$0;
    i64toi32_i32$4 = $5;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 304 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 308 | 0) >> 2] | 0;
    $3 = i64toi32_i32$0;
    $3$hi = i64toi32_i32$5;
   }
   $163 = $5 + 288 | 0;
   i64toi32_i32$5 = $3$hi;
   i64toi32_i32$4 = $3;
   i64toi32_i32$0 = 0;
   i64toi32_i32$3 = 49;
   i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = 0;
    $329 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
   } else {
    i64toi32_i32$0 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
    $329 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$1 | 0) | 0;
   }
   $165 = $329;
   $165$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $6$hi;
   i64toi32_i32$5 = $6;
   i64toi32_i32$4 = 65536;
   i64toi32_i32$3 = 0;
   i64toi32_i32$4 = i64toi32_i32$0 | i64toi32_i32$4 | 0;
   $14 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
   $14$hi = i64toi32_i32$4;
   i64toi32_i32$0 = $14;
   i64toi32_i32$5 = 0;
   i64toi32_i32$3 = 15;
   i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$0 << i64toi32_i32$1 | 0;
    $330 = 0;
   } else {
    i64toi32_i32$5 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$1 | 0) | 0;
    $330 = i64toi32_i32$0 << i64toi32_i32$1 | 0;
   }
   $169$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $165$hi;
   i64toi32_i32$4 = $165;
   i64toi32_i32$0 = $169$hi;
   i64toi32_i32$3 = $330;
   i64toi32_i32$0 = i64toi32_i32$5 | i64toi32_i32$0 | 0;
   $2 = i64toi32_i32$4 | i64toi32_i32$3 | 0;
   $2$hi = i64toi32_i32$0;
   i64toi32_i32$0 = 1963258675;
   i64toi32_i32$5 = 0;
   i64toi32_i32$4 = $2$hi;
   i64toi32_i32$3 = $2;
   i64toi32_i32$1 = i64toi32_i32$5 - i64toi32_i32$3 | 0;
   i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0;
   i64toi32_i32$2 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
   i64toi32_i32$2 = i64toi32_i32$0 - i64toi32_i32$2 | 0;
   $4 = i64toi32_i32$1;
   $4$hi = i64toi32_i32$2;
   i64toi32_i32$2 = i64toi32_i32$4;
   i64toi32_i32$5 = 0;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$3 = 0;
   __multi3($163 | 0, $2 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$5 | 0, i64toi32_i32$1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$3 | 0);
   i64toi32_i32$5 = ($5 + 288 | 0) + 8 | 0;
   i64toi32_i32$3 = HEAP32[i64toi32_i32$5 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
   $180 = i64toi32_i32$3;
   $180$hi = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$5 = 0;
   i64toi32_i32$3 = $180$hi;
   i64toi32_i32$2 = $180;
   i64toi32_i32$4 = i64toi32_i32$5 - i64toi32_i32$2 | 0;
   i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0;
   i64toi32_i32$1 = i64toi32_i32$6 + i64toi32_i32$3 | 0;
   i64toi32_i32$1 = i64toi32_i32$0 - i64toi32_i32$1 | 0;
   $181$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$1 = $181$hi;
   i64toi32_i32$5 = 0;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$2 = 0;
   __multi3($5 + 272 | 0 | 0, i64toi32_i32$4 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$5 | 0, $4 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$2 | 0);
   $184 = $5 + 256 | 0;
   i64toi32_i32$5 = $5;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 272 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 276 | 0) >> 2] | 0;
   i64toi32_i32$5 = i64toi32_i32$2;
   i64toi32_i32$2 = 0;
   i64toi32_i32$1 = 63;
   i64toi32_i32$3 = i64toi32_i32$1 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = 0;
    $331 = i64toi32_i32$0 >>> i64toi32_i32$3 | 0;
   } else {
    i64toi32_i32$2 = i64toi32_i32$0 >>> i64toi32_i32$3 | 0;
    $331 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$3 | 0) | 0;
   }
   $187 = $331;
   $187$hi = i64toi32_i32$2;
   i64toi32_i32$0 = ($5 + 272 | 0) + 8 | 0;
   i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
   i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
   i64toi32_i32$0 = i64toi32_i32$2;
   i64toi32_i32$2 = 0;
   i64toi32_i32$1 = 1;
   i64toi32_i32$3 = i64toi32_i32$1 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$3 | 0;
    $333 = 0;
   } else {
    i64toi32_i32$2 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$3 | 0) | 0;
    $333 = i64toi32_i32$0 << i64toi32_i32$3 | 0;
   }
   $192$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $187$hi;
   i64toi32_i32$5 = $187;
   i64toi32_i32$0 = $192$hi;
   i64toi32_i32$1 = $333;
   i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
   $4 = i64toi32_i32$5 | i64toi32_i32$1 | 0;
   $4$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $2$hi;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$5 = 0;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$1 = 0;
   __multi3($184 | 0, $4 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$5 | 0, $2 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$1 | 0);
   i64toi32_i32$1 = i64toi32_i32$0;
   i64toi32_i32$5 = ($5 + 256 | 0) + 8 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$5 >> 2] | 0;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
   $202 = i64toi32_i32$1;
   $202$hi = i64toi32_i32$2;
   i64toi32_i32$2 = 0;
   i64toi32_i32$5 = 0;
   i64toi32_i32$1 = $202$hi;
   i64toi32_i32$0 = $202;
   i64toi32_i32$3 = i64toi32_i32$5 - i64toi32_i32$0 | 0;
   i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0;
   i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$1 | 0;
   i64toi32_i32$4 = i64toi32_i32$2 - i64toi32_i32$4 | 0;
   $203$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $4$hi;
   i64toi32_i32$5 = 0;
   i64toi32_i32$2 = $203$hi;
   i64toi32_i32$0 = 0;
   __multi3($5 + 240 | 0 | 0, $4 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$5 | 0, i64toi32_i32$3 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$0 | 0);
   $205 = $5 + 224 | 0;
   i64toi32_i32$5 = $5;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 240 | 0) >> 2] | 0;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 244 | 0) >> 2] | 0;
   i64toi32_i32$5 = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$4 = 63;
   i64toi32_i32$1 = i64toi32_i32$4 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = 0;
    $334 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
   } else {
    i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
    $334 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$1 | 0) | 0;
   }
   $208 = $334;
   $208$hi = i64toi32_i32$0;
   i64toi32_i32$2 = ($5 + 240 | 0) + 8 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$5 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$4 = 1;
   i64toi32_i32$1 = i64toi32_i32$4 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = i64toi32_i32$2 << i64toi32_i32$1 | 0;
    $335 = 0;
   } else {
    i64toi32_i32$0 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$1 | 0) | 0;
    $335 = i64toi32_i32$2 << i64toi32_i32$1 | 0;
   }
   $213$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $208$hi;
   i64toi32_i32$5 = $208;
   i64toi32_i32$2 = $213$hi;
   i64toi32_i32$4 = $335;
   i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
   $4 = i64toi32_i32$5 | i64toi32_i32$4 | 0;
   $4$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$5 = 0;
   i64toi32_i32$0 = $2$hi;
   i64toi32_i32$4 = 0;
   __multi3($205 | 0, $4 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$5 | 0, $2 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$4 | 0);
   i64toi32_i32$4 = i64toi32_i32$2;
   i64toi32_i32$5 = ($5 + 224 | 0) + 8 | 0;
   i64toi32_i32$4 = HEAP32[i64toi32_i32$5 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
   $223 = i64toi32_i32$4;
   $223$hi = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$5 = 0;
   i64toi32_i32$4 = $223$hi;
   i64toi32_i32$2 = $223;
   i64toi32_i32$1 = i64toi32_i32$5 - i64toi32_i32$2 | 0;
   i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0;
   i64toi32_i32$3 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
   i64toi32_i32$3 = i64toi32_i32$0 - i64toi32_i32$3 | 0;
   $224$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $4$hi;
   i64toi32_i32$5 = 0;
   i64toi32_i32$0 = $224$hi;
   i64toi32_i32$2 = 0;
   __multi3($5 + 208 | 0 | 0, $4 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$5 | 0, i64toi32_i32$1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$2 | 0);
   $226 = $5 + 192 | 0;
   i64toi32_i32$5 = $5;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 208 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 212 | 0) >> 2] | 0;
   i64toi32_i32$5 = i64toi32_i32$2;
   i64toi32_i32$2 = 0;
   i64toi32_i32$3 = 63;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = 0;
    $336 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$2 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    $336 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$4 | 0) | 0;
   }
   $229 = $336;
   $229$hi = i64toi32_i32$2;
   i64toi32_i32$0 = ($5 + 208 | 0) + 8 | 0;
   i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
   i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
   i64toi32_i32$0 = i64toi32_i32$2;
   i64toi32_i32$2 = 0;
   i64toi32_i32$3 = 1;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    $338 = 0;
   } else {
    i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$4 | 0) | 0;
    $338 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
   }
   $234$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $229$hi;
   i64toi32_i32$5 = $229;
   i64toi32_i32$0 = $234$hi;
   i64toi32_i32$3 = $338;
   i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
   $4 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
   $4$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $2$hi;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$5 = 0;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$3 = 0;
   __multi3($226 | 0, $4 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$5 | 0, $2 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$3 | 0);
   i64toi32_i32$3 = i64toi32_i32$0;
   i64toi32_i32$5 = ($5 + 192 | 0) + 8 | 0;
   i64toi32_i32$3 = HEAP32[i64toi32_i32$5 >> 2] | 0;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
   $244 = i64toi32_i32$3;
   $244$hi = i64toi32_i32$2;
   i64toi32_i32$2 = 0;
   i64toi32_i32$5 = 0;
   i64toi32_i32$3 = $244$hi;
   i64toi32_i32$0 = $244;
   i64toi32_i32$4 = i64toi32_i32$5 - i64toi32_i32$0 | 0;
   i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0;
   i64toi32_i32$1 = i64toi32_i32$6 + i64toi32_i32$3 | 0;
   i64toi32_i32$1 = i64toi32_i32$2 - i64toi32_i32$1 | 0;
   $245$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$5 = 0;
   i64toi32_i32$2 = $245$hi;
   i64toi32_i32$0 = 0;
   __multi3($5 + 176 | 0 | 0, $4 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$5 | 0, i64toi32_i32$4 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$0 | 0);
   $247 = $5 + 160 | 0;
   i64toi32_i32$0 = $2$hi;
   $248 = $2;
   $248$hi = i64toi32_i32$0;
   i64toi32_i32$5 = $5;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 176 | 0) >> 2] | 0;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 180 | 0) >> 2] | 0;
   i64toi32_i32$5 = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$1 = 63;
   i64toi32_i32$3 = i64toi32_i32$1 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = 0;
    $339 = i64toi32_i32$2 >>> i64toi32_i32$3 | 0;
   } else {
    i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$3 | 0;
    $339 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$3 | 0) | 0;
   }
   $251 = $339;
   $251$hi = i64toi32_i32$0;
   i64toi32_i32$2 = ($5 + 176 | 0) + 8 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$5 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$1 = 1;
   i64toi32_i32$3 = i64toi32_i32$1 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
    $341 = 0;
   } else {
    i64toi32_i32$0 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$3 | 0) | 0;
    $341 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
   }
   $256$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $251$hi;
   i64toi32_i32$5 = $251;
   i64toi32_i32$2 = $256$hi;
   i64toi32_i32$1 = $341;
   i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
   i64toi32_i32$0 = i64toi32_i32$5 | i64toi32_i32$1 | 0;
   i64toi32_i32$5 = -1;
   i64toi32_i32$1 = -1;
   i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
   i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
   if (i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
   }
   $4 = i64toi32_i32$3;
   $4$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $248$hi;
   i64toi32_i32$0 = 0;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$1 = 0;
   __multi3($247 | 0, $248 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$0 | 0, i64toi32_i32$3 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$1 | 0);
   $261 = $5 + 144 | 0;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$0 = $3;
   i64toi32_i32$2 = 0;
   i64toi32_i32$4 = 15;
   i64toi32_i32$5 = i64toi32_i32$4 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$5 | 0;
    $342 = 0;
   } else {
    i64toi32_i32$2 = ((1 << i64toi32_i32$5 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$5 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$5 | 0) | 0;
    $342 = i64toi32_i32$0 << i64toi32_i32$5 | 0;
   }
   $263$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$2 = $263$hi;
   i64toi32_i32$0 = 0;
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$4 = 0;
   __multi3($261 | 0, $342 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$0 | 0, $4 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$4 | 0);
   $266 = $5 + 112 | 0;
   i64toi32_i32$4 = i64toi32_i32$1;
   $267 = $4;
   $267$hi = i64toi32_i32$4;
   i64toi32_i32$0 = ($5 + 160 | 0) + 8 | 0;
   i64toi32_i32$4 = HEAP32[i64toi32_i32$0 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
   $271 = i64toi32_i32$4;
   $271$hi = i64toi32_i32$1;
   i64toi32_i32$0 = $5;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 160 | 0) >> 2] | 0;
   i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 164 | 0) >> 2] | 0;
   $6 = i64toi32_i32$1;
   $6$hi = i64toi32_i32$4;
   i64toi32_i32$0 = (i64toi32_i32$0 + 144 | 0) + 8 | 0;
   i64toi32_i32$4 = HEAP32[i64toi32_i32$0 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
   $278 = i64toi32_i32$4;
   $278$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $6$hi;
   i64toi32_i32$0 = $6;
   i64toi32_i32$4 = $278$hi;
   i64toi32_i32$2 = $278;
   i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
   i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
   if (i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0) {
    i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
   }
   $2 = i64toi32_i32$5;
   $2$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $6$hi;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$1 = i64toi32_i32$5;
   i64toi32_i32$0 = $6$hi;
   i64toi32_i32$2 = $6;
   $282 = i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
   i64toi32_i32$1 = 0;
   $283$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $271$hi;
   i64toi32_i32$2 = $271;
   i64toi32_i32$3 = $283$hi;
   i64toi32_i32$0 = $282;
   i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
   i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
   if (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   $284$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $2$hi;
   i64toi32_i32$1 = $2;
   i64toi32_i32$2 = 0;
   i64toi32_i32$0 = 1;
   $286 = i64toi32_i32$5 >>> 0 > i64toi32_i32$2 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$1 >>> 0 > i64toi32_i32$0 >>> 0 | 0) | 0;
   i64toi32_i32$1 = 0;
   $287$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $284$hi;
   i64toi32_i32$0 = i64toi32_i32$4;
   i64toi32_i32$5 = $287$hi;
   i64toi32_i32$2 = $286;
   i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
   i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
   if (i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
   }
   $288$hi = i64toi32_i32$4;
   i64toi32_i32$4 = 0;
   i64toi32_i32$1 = 0;
   i64toi32_i32$0 = $288$hi;
   i64toi32_i32$2 = i64toi32_i32$3;
   i64toi32_i32$5 = i64toi32_i32$1 - i64toi32_i32$3 | 0;
   i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0;
   i64toi32_i32$3 = i64toi32_i32$6 + i64toi32_i32$0 | 0;
   i64toi32_i32$3 = i64toi32_i32$4 - i64toi32_i32$3 | 0;
   $289$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $267$hi;
   i64toi32_i32$1 = 0;
   i64toi32_i32$4 = $289$hi;
   i64toi32_i32$2 = 0;
   __multi3($266 | 0, $267 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$1 | 0, i64toi32_i32$5 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$2 | 0);
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$2 = 0;
   i64toi32_i32$1 = 1;
   i64toi32_i32$4 = $2$hi;
   i64toi32_i32$3 = $2;
   i64toi32_i32$0 = i64toi32_i32$1 - i64toi32_i32$3 | 0;
   i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0;
   i64toi32_i32$5 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
   i64toi32_i32$5 = i64toi32_i32$2 - i64toi32_i32$5 | 0;
   $293$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $4$hi;
   i64toi32_i32$5 = $293$hi;
   i64toi32_i32$1 = 0;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$3 = 0;
   __multi3($5 + 128 | 0 | 0, i64toi32_i32$0 | 0, i64toi32_i32$5 | 0, 0 | 0, i64toi32_i32$1 | 0, $4 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$3 | 0);
   $9 = $11 + ($10 - $9 | 0) | 0;
   label$12 : {
    label$13 : {
     i64toi32_i32$1 = $5;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 112 | 0) >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 116 | 0) >> 2] | 0;
     $15 = i64toi32_i32$3;
     $15$hi = i64toi32_i32$2;
     i64toi32_i32$1 = i64toi32_i32$3;
     i64toi32_i32$3 = 0;
     i64toi32_i32$5 = 1;
     i64toi32_i32$4 = i64toi32_i32$5 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
      $343 = 0;
     } else {
      i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
      $343 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
     }
     $16 = $343;
     $16$hi = i64toi32_i32$3;
     $304 = $16;
     $304$hi = i64toi32_i32$3;
     i64toi32_i32$2 = $5;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 128 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 132 | 0) >> 2] | 0;
     i64toi32_i32$2 = i64toi32_i32$3;
     i64toi32_i32$3 = 0;
     i64toi32_i32$5 = 63;
     i64toi32_i32$4 = i64toi32_i32$5 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = 0;
      $344 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
     } else {
      i64toi32_i32$3 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
      $344 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
     }
     $307 = $344;
     $307$hi = i64toi32_i32$3;
     i64toi32_i32$1 = ($5 + 128 | 0) + 8 | 0;
     i64toi32_i32$3 = HEAP32[i64toi32_i32$1 >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
     $17 = i64toi32_i32$3;
     $17$hi = i64toi32_i32$2;
     i64toi32_i32$1 = i64toi32_i32$3;
     i64toi32_i32$3 = 0;
     i64toi32_i32$5 = 1;
     i64toi32_i32$4 = i64toi32_i32$5 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
      $345 = 0;
     } else {
      i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
      $345 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
     }
     $313$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $307$hi;
     i64toi32_i32$2 = $307;
     i64toi32_i32$1 = $313$hi;
     i64toi32_i32$5 = $345;
     i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
     $314 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
     $314$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $304$hi;
     i64toi32_i32$3 = $304;
     i64toi32_i32$2 = $314$hi;
     i64toi32_i32$5 = $314;
     i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
     i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     $12 = i64toi32_i32$4;
     $12$hi = i64toi32_i32$0;
     i64toi32_i32$1 = i64toi32_i32$4;
     i64toi32_i32$3 = -1;
     i64toi32_i32$5 = -13927;
     i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
     i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $18 = i64toi32_i32$2;
     $18$hi = i64toi32_i32$4;
     i64toi32_i32$0 = i64toi32_i32$2;
     i64toi32_i32$1 = 0;
     i64toi32_i32$5 = 32;
     i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = 0;
      $347 = i64toi32_i32$4 >>> i64toi32_i32$3 | 0;
     } else {
      i64toi32_i32$1 = i64toi32_i32$4 >>> i64toi32_i32$3 | 0;
      $347 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$3 | 0) | 0;
     }
     $2 = $347;
     $2$hi = i64toi32_i32$1;
     $320 = $2;
     $320$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $7$hi;
     i64toi32_i32$4 = $7;
     i64toi32_i32$0 = 65536;
     i64toi32_i32$5 = 0;
     i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
     $19 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
     $19$hi = i64toi32_i32$0;
     i64toi32_i32$1 = $19;
     i64toi32_i32$4 = 0;
     i64toi32_i32$5 = 31;
     i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$4 = 0;
      $348 = i64toi32_i32$0 >>> i64toi32_i32$3 | 0;
     } else {
      i64toi32_i32$4 = i64toi32_i32$0 >>> i64toi32_i32$3 | 0;
      $348 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$3 | 0) | 0;
     }
     i64toi32_i32$0 = $348;
     i64toi32_i32$1 = 0;
     i64toi32_i32$5 = -1;
     i64toi32_i32$1 = i64toi32_i32$4 & i64toi32_i32$1 | 0;
     $4 = i64toi32_i32$0 & i64toi32_i32$5 | 0;
     $4$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $320$hi;
     i64toi32_i32$0 = $4$hi;
     i64toi32_i32$0 = __wasm_i64_mul($320 | 0, i64toi32_i32$1 | 0, $4 | 0, i64toi32_i32$0 | 0) | 0;
     i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
     $20 = i64toi32_i32$0;
     $20$hi = i64toi32_i32$1;
     $328 = i64toi32_i32$0;
     $328$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$4 = $1;
     i64toi32_i32$0 = 0;
     i64toi32_i32$5 = 31;
     i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$0 = 0;
      $349 = i64toi32_i32$1 >>> i64toi32_i32$3 | 0;
     } else {
      i64toi32_i32$0 = i64toi32_i32$1 >>> i64toi32_i32$3 | 0;
      $349 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$3 | 0) | 0;
     }
     i64toi32_i32$1 = $349;
     i64toi32_i32$4 = 0;
     i64toi32_i32$5 = -1;
     i64toi32_i32$4 = i64toi32_i32$0 & i64toi32_i32$4 | 0;
     $6 = i64toi32_i32$1 & i64toi32_i32$5 | 0;
     $6$hi = i64toi32_i32$4;
     $332 = $6;
     $332$hi = i64toi32_i32$4;
     i64toi32_i32$0 = ($5 + 112 | 0) + 8 | 0;
     i64toi32_i32$4 = HEAP32[i64toi32_i32$0 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
     i64toi32_i32$0 = i64toi32_i32$4;
     i64toi32_i32$4 = 0;
     i64toi32_i32$5 = 1;
     i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$0 << i64toi32_i32$3 | 0;
      $350 = 0;
     } else {
      i64toi32_i32$4 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$3 | 0) | 0;
      $350 = i64toi32_i32$0 << i64toi32_i32$3 | 0;
     }
     $337 = $350;
     $337$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $15$hi;
     i64toi32_i32$1 = $15;
     i64toi32_i32$0 = 0;
     i64toi32_i32$5 = 63;
     i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$0 = 0;
      $352 = i64toi32_i32$4 >>> i64toi32_i32$3 | 0;
     } else {
      i64toi32_i32$0 = i64toi32_i32$4 >>> i64toi32_i32$3 | 0;
      $352 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$3 | 0) | 0;
     }
     $339$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $337$hi;
     i64toi32_i32$4 = $337;
     i64toi32_i32$1 = $339$hi;
     i64toi32_i32$5 = $352;
     i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
     $340 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
     $340$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $17$hi;
     i64toi32_i32$0 = $17;
     i64toi32_i32$4 = 0;
     i64toi32_i32$5 = 63;
     i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$4 = 0;
      $353 = i64toi32_i32$1 >>> i64toi32_i32$3 | 0;
     } else {
      i64toi32_i32$4 = i64toi32_i32$1 >>> i64toi32_i32$3 | 0;
      $353 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$3 | 0) | 0;
     }
     $342$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $340$hi;
     i64toi32_i32$1 = $340;
     i64toi32_i32$0 = $342$hi;
     i64toi32_i32$5 = $353;
     i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
     i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $343$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $12$hi;
     i64toi32_i32$2 = $16$hi;
     i64toi32_i32$2 = $12$hi;
     i64toi32_i32$4 = $12;
     i64toi32_i32$1 = $16$hi;
     i64toi32_i32$5 = $16;
     $346 = i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
     i64toi32_i32$4 = 0;
     $347$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $343$hi;
     i64toi32_i32$5 = i64toi32_i32$3;
     i64toi32_i32$2 = $347$hi;
     i64toi32_i32$1 = $346;
     i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
     i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
     }
     $348$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $18$hi;
     i64toi32_i32$3 = $12$hi;
     i64toi32_i32$3 = $18$hi;
     i64toi32_i32$4 = $18;
     i64toi32_i32$5 = $12$hi;
     i64toi32_i32$1 = $12;
     $351 = i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
     i64toi32_i32$4 = 0;
     $352$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $348$hi;
     i64toi32_i32$1 = i64toi32_i32$0;
     i64toi32_i32$3 = $352$hi;
     i64toi32_i32$5 = $351;
     i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
     i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     i64toi32_i32$4 = i64toi32_i32$2;
     i64toi32_i32$1 = -1;
     i64toi32_i32$5 = -1;
     i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
     i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $15 = i64toi32_i32$3;
     $15$hi = i64toi32_i32$2;
     i64toi32_i32$0 = i64toi32_i32$3;
     i64toi32_i32$4 = 0;
     i64toi32_i32$5 = 32;
     i64toi32_i32$1 = i64toi32_i32$5 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$4 = 0;
      $354 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
     } else {
      i64toi32_i32$4 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
      $354 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$1 | 0) | 0;
     }
     $12 = $354;
     $12$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $332$hi;
     i64toi32_i32$0 = $12$hi;
     i64toi32_i32$0 = __wasm_i64_mul($332 | 0, i64toi32_i32$4 | 0, $12 | 0, i64toi32_i32$0 | 0) | 0;
     i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
     $358 = i64toi32_i32$0;
     $358$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $328$hi;
     i64toi32_i32$2 = $328;
     i64toi32_i32$0 = $358$hi;
     i64toi32_i32$5 = $358;
     i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
     i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
     }
     $16 = i64toi32_i32$1;
     $16$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $20$hi;
     i64toi32_i32$3 = $16$hi;
     i64toi32_i32$4 = i64toi32_i32$1;
     i64toi32_i32$2 = $20$hi;
     i64toi32_i32$5 = $20;
     i64toi32_i32$4 = 0;
     $363 = i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
     $363$hi = i64toi32_i32$4;
     i64toi32_i32$4 = i64toi32_i32$3;
     $364 = i64toi32_i32$1;
     $364$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $15$hi;
     i64toi32_i32$5 = $15;
     i64toi32_i32$3 = 0;
     i64toi32_i32$2 = -1;
     i64toi32_i32$3 = i64toi32_i32$4 & i64toi32_i32$3 | 0;
     $15 = i64toi32_i32$5 & i64toi32_i32$2 | 0;
     $15$hi = i64toi32_i32$3;
     $367 = $15;
     $367$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $1$hi;
     i64toi32_i32$4 = $1;
     i64toi32_i32$5 = 0;
     i64toi32_i32$2 = 63;
     i64toi32_i32$0 = i64toi32_i32$2 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
      i64toi32_i32$5 = 0;
      $355 = i64toi32_i32$3 >>> i64toi32_i32$0 | 0;
     } else {
      i64toi32_i32$5 = i64toi32_i32$3 >>> i64toi32_i32$0 | 0;
      $355 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$0 | 0) | 0;
     }
     $21 = $355;
     $21$hi = i64toi32_i32$5;
     $370 = $21;
     $370$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $7$hi;
     i64toi32_i32$3 = $7;
     i64toi32_i32$4 = 0;
     i64toi32_i32$2 = 1;
     i64toi32_i32$0 = i64toi32_i32$2 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$3 << i64toi32_i32$0 | 0;
      $356 = 0;
     } else {
      i64toi32_i32$4 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$0 | 0) | 0;
      $356 = i64toi32_i32$3 << i64toi32_i32$0 | 0;
     }
     $372$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $370$hi;
     i64toi32_i32$5 = $370;
     i64toi32_i32$3 = $372$hi;
     i64toi32_i32$2 = $356;
     i64toi32_i32$3 = i64toi32_i32$4 | i64toi32_i32$3 | 0;
     i64toi32_i32$4 = i64toi32_i32$5 | i64toi32_i32$2 | 0;
     i64toi32_i32$5 = 0;
     i64toi32_i32$2 = -1;
     i64toi32_i32$5 = i64toi32_i32$3 & i64toi32_i32$5 | 0;
     $7 = i64toi32_i32$4 & i64toi32_i32$2 | 0;
     $7$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $367$hi;
     i64toi32_i32$4 = $7$hi;
     i64toi32_i32$4 = __wasm_i64_mul($367 | 0, i64toi32_i32$5 | 0, $7 | 0, i64toi32_i32$4 | 0) | 0;
     i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
     $376 = i64toi32_i32$4;
     $376$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $364$hi;
     i64toi32_i32$3 = $364;
     i64toi32_i32$4 = $376$hi;
     i64toi32_i32$2 = $376;
     i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
     i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
     }
     $17 = i64toi32_i32$0;
     $17$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $16$hi;
     i64toi32_i32$1 = $17$hi;
     i64toi32_i32$5 = i64toi32_i32$0;
     i64toi32_i32$3 = $16$hi;
     i64toi32_i32$2 = $16;
     $380 = i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
     i64toi32_i32$5 = 0;
     $381$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $363$hi;
     i64toi32_i32$2 = $363;
     i64toi32_i32$1 = $381$hi;
     i64toi32_i32$3 = $380;
     i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
     i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     $382$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $4$hi;
     i64toi32_i32$0 = $12$hi;
     i64toi32_i32$0 = $4$hi;
     i64toi32_i32$2 = $12$hi;
     i64toi32_i32$2 = __wasm_i64_mul($4 | 0, i64toi32_i32$0 | 0, $12 | 0, i64toi32_i32$2 | 0) | 0;
     i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
     $385 = i64toi32_i32$2;
     $385$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $382$hi;
     i64toi32_i32$5 = i64toi32_i32$4;
     i64toi32_i32$2 = $385$hi;
     i64toi32_i32$3 = $385;
     i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
     i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $386 = i64toi32_i32$1;
     $386$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $15$hi;
     i64toi32_i32$4 = $4$hi;
     i64toi32_i32$4 = $15$hi;
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$5 = __wasm_i64_mul($15 | 0, i64toi32_i32$4 | 0, $4 | 0, i64toi32_i32$5 | 0) | 0;
     i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
     $20 = i64toi32_i32$5;
     $20$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $7$hi;
     i64toi32_i32$4 = $12$hi;
     i64toi32_i32$4 = $7$hi;
     i64toi32_i32$5 = $12$hi;
     i64toi32_i32$5 = __wasm_i64_mul($7 | 0, i64toi32_i32$4 | 0, $12 | 0, i64toi32_i32$5 | 0) | 0;
     i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
     $393 = i64toi32_i32$5;
     $393$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $20$hi;
     i64toi32_i32$0 = $20;
     i64toi32_i32$5 = $393$hi;
     i64toi32_i32$3 = $393;
     i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
     i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
     }
     $16 = i64toi32_i32$2;
     $16$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $20$hi;
     i64toi32_i32$1 = $16$hi;
     i64toi32_i32$4 = i64toi32_i32$2;
     i64toi32_i32$0 = $20$hi;
     i64toi32_i32$3 = $20;
     $397 = i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
     i64toi32_i32$4 = 0;
     i64toi32_i32$3 = $397;
     i64toi32_i32$1 = 0;
     i64toi32_i32$0 = 32;
     i64toi32_i32$5 = i64toi32_i32$0 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$3 << i64toi32_i32$5 | 0;
      $357 = 0;
     } else {
      i64toi32_i32$1 = ((1 << i64toi32_i32$5 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$5 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$5 | 0) | 0;
      $357 = i64toi32_i32$3 << i64toi32_i32$5 | 0;
     }
     $399 = $357;
     $399$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $16$hi;
     i64toi32_i32$4 = $16;
     i64toi32_i32$3 = 0;
     i64toi32_i32$0 = 32;
     i64toi32_i32$5 = i64toi32_i32$0 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = 0;
      $359 = i64toi32_i32$1 >>> i64toi32_i32$5 | 0;
     } else {
      i64toi32_i32$3 = i64toi32_i32$1 >>> i64toi32_i32$5 | 0;
      $359 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$5 | 0) | 0;
     }
     $401$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $399$hi;
     i64toi32_i32$1 = $399;
     i64toi32_i32$4 = $401$hi;
     i64toi32_i32$0 = $359;
     i64toi32_i32$4 = i64toi32_i32$3 | i64toi32_i32$4 | 0;
     $402 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
     $402$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $386$hi;
     i64toi32_i32$3 = $386;
     i64toi32_i32$1 = $402$hi;
     i64toi32_i32$0 = $402;
     i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
     i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $403 = i64toi32_i32$5;
     $403$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $17$hi;
     $404 = $17;
     $404$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $16$hi;
     i64toi32_i32$4 = $16;
     i64toi32_i32$3 = 0;
     i64toi32_i32$0 = 32;
     i64toi32_i32$1 = i64toi32_i32$0 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$4 << i64toi32_i32$1 | 0;
      $360 = 0;
     } else {
      i64toi32_i32$3 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$4 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$1 | 0) | 0;
      $360 = i64toi32_i32$4 << i64toi32_i32$1 | 0;
     }
     $406$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $404$hi;
     i64toi32_i32$2 = $404;
     i64toi32_i32$4 = $406$hi;
     i64toi32_i32$0 = $360;
     i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
     i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $16 = i64toi32_i32$1;
     $16$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $17$hi;
     i64toi32_i32$5 = $16$hi;
     i64toi32_i32$3 = i64toi32_i32$1;
     i64toi32_i32$2 = $17$hi;
     i64toi32_i32$0 = $17;
     $410 = i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
     i64toi32_i32$3 = 0;
     $411$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $403$hi;
     i64toi32_i32$0 = $403;
     i64toi32_i32$5 = $411$hi;
     i64toi32_i32$2 = $410;
     i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
     i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
     }
     $412 = i64toi32_i32$4;
     $412$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $16$hi;
     $413 = $16;
     $413$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $15$hi;
     $414 = $15;
     $414$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$3 = $1;
     i64toi32_i32$0 = 0;
     i64toi32_i32$2 = 1;
     i64toi32_i32$5 = i64toi32_i32$2 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$3 << i64toi32_i32$5 | 0;
      $361 = 0;
     } else {
      i64toi32_i32$0 = ((1 << i64toi32_i32$5 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$5 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$5 | 0) | 0;
      $361 = i64toi32_i32$3 << i64toi32_i32$5 | 0;
     }
     $22 = $361;
     $22$hi = i64toi32_i32$0;
     i64toi32_i32$1 = $22;
     i64toi32_i32$3 = 0;
     i64toi32_i32$2 = -2;
     i64toi32_i32$3 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
     $17 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
     $17$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $414$hi;
     i64toi32_i32$1 = $17$hi;
     i64toi32_i32$1 = __wasm_i64_mul($414 | 0, i64toi32_i32$3 | 0, $17 | 0, i64toi32_i32$1 | 0) | 0;
     i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
     $23 = i64toi32_i32$1;
     $23$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $18$hi;
     i64toi32_i32$0 = $18;
     i64toi32_i32$1 = 0;
     i64toi32_i32$2 = -1;
     i64toi32_i32$1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
     $18 = i64toi32_i32$0 & i64toi32_i32$2 | 0;
     $18$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $7$hi;
     i64toi32_i32$1 = $18$hi;
     i64toi32_i32$0 = $7$hi;
     i64toi32_i32$0 = __wasm_i64_mul($18 | 0, i64toi32_i32$1 | 0, $7 | 0, i64toi32_i32$0 | 0) | 0;
     i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
     $426 = i64toi32_i32$0;
     $426$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $23$hi;
     i64toi32_i32$3 = $23;
     i64toi32_i32$0 = $426$hi;
     i64toi32_i32$2 = $426;
     i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
     i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $20 = i64toi32_i32$5;
     $20$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $23$hi;
     i64toi32_i32$4 = $20$hi;
     i64toi32_i32$1 = i64toi32_i32$5;
     i64toi32_i32$3 = $23$hi;
     i64toi32_i32$2 = $23;
     $430 = i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
     i64toi32_i32$1 = 0;
     $431 = $430;
     $431$hi = i64toi32_i32$1;
     i64toi32_i32$1 = i64toi32_i32$4;
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$1 = $6$hi;
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$4 = $6$hi;
     i64toi32_i32$4 = __wasm_i64_mul($2 | 0, i64toi32_i32$1 | 0, $6 | 0, i64toi32_i32$4 | 0) | 0;
     i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
     $435 = i64toi32_i32$4;
     $435$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $20$hi;
     i64toi32_i32$2 = i64toi32_i32$5;
     i64toi32_i32$4 = $435$hi;
     i64toi32_i32$3 = $435;
     i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
     i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $23 = i64toi32_i32$0;
     $23$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $20$hi;
     i64toi32_i32$5 = $23$hi;
     i64toi32_i32$1 = i64toi32_i32$0;
     i64toi32_i32$2 = $20$hi;
     i64toi32_i32$3 = $20;
     $439 = i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
     i64toi32_i32$1 = 0;
     $440$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $431$hi;
     i64toi32_i32$3 = $431;
     i64toi32_i32$5 = $440$hi;
     i64toi32_i32$2 = $439;
     i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
     i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     $441$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $413$hi;
     i64toi32_i32$1 = $413;
     i64toi32_i32$3 = $441$hi;
     i64toi32_i32$2 = i64toi32_i32$4;
     i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
     i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $20 = i64toi32_i32$5;
     $20$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $16$hi;
     i64toi32_i32$4 = $20$hi;
     i64toi32_i32$0 = i64toi32_i32$5;
     i64toi32_i32$1 = $16$hi;
     i64toi32_i32$2 = $16;
     $445 = i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
     i64toi32_i32$0 = 0;
     $446$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $412$hi;
     i64toi32_i32$2 = $412;
     i64toi32_i32$4 = $446$hi;
     i64toi32_i32$1 = $445;
     i64toi32_i32$3 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
     i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $447 = i64toi32_i32$3;
     $447$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $20$hi;
     $448 = $20;
     $448$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $18$hi;
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$5 = $18$hi;
     i64toi32_i32$2 = $4$hi;
     i64toi32_i32$2 = __wasm_i64_mul($18 | 0, i64toi32_i32$5 | 0, $4 | 0, i64toi32_i32$2 | 0) | 0;
     i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
     $16 = i64toi32_i32$2;
     $16$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $17$hi;
     i64toi32_i32$5 = $12$hi;
     i64toi32_i32$5 = $17$hi;
     i64toi32_i32$2 = $12$hi;
     i64toi32_i32$2 = __wasm_i64_mul($17 | 0, i64toi32_i32$5 | 0, $12 | 0, i64toi32_i32$2 | 0) | 0;
     i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
     $455 = i64toi32_i32$2;
     $455$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $16$hi;
     i64toi32_i32$0 = $16;
     i64toi32_i32$2 = $455$hi;
     i64toi32_i32$1 = $455;
     i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
     i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
     }
     $4 = i64toi32_i32$4;
     $4$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $15$hi;
     i64toi32_i32$3 = $6$hi;
     i64toi32_i32$3 = $15$hi;
     i64toi32_i32$0 = $6$hi;
     i64toi32_i32$0 = __wasm_i64_mul($15 | 0, i64toi32_i32$3 | 0, $6 | 0, i64toi32_i32$0 | 0) | 0;
     i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
     $460 = i64toi32_i32$0;
     $460$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $4$hi;
     i64toi32_i32$5 = i64toi32_i32$4;
     i64toi32_i32$0 = $460$hi;
     i64toi32_i32$1 = $460;
     i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
     i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $12 = i64toi32_i32$2;
     $12$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $2$hi;
     i64toi32_i32$4 = $7$hi;
     i64toi32_i32$4 = $2$hi;
     i64toi32_i32$5 = $7$hi;
     i64toi32_i32$5 = __wasm_i64_mul($2 | 0, i64toi32_i32$4 | 0, $7 | 0, i64toi32_i32$5 | 0) | 0;
     i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
     $465 = i64toi32_i32$5;
     $465$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $12$hi;
     i64toi32_i32$3 = i64toi32_i32$2;
     i64toi32_i32$5 = $465$hi;
     i64toi32_i32$1 = $465;
     i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
     i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $15 = i64toi32_i32$0;
     $15$hi = i64toi32_i32$2;
     i64toi32_i32$4 = i64toi32_i32$0;
     i64toi32_i32$3 = 0;
     i64toi32_i32$1 = 32;
     i64toi32_i32$5 = i64toi32_i32$1 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = 0;
      $362 = i64toi32_i32$2 >>> i64toi32_i32$5 | 0;
     } else {
      i64toi32_i32$3 = i64toi32_i32$2 >>> i64toi32_i32$5 | 0;
      $362 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$5 | 0) | 0;
     }
     $468 = $362;
     $468$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $4$hi;
     i64toi32_i32$3 = $16$hi;
     i64toi32_i32$3 = $4$hi;
     i64toi32_i32$2 = $4;
     i64toi32_i32$4 = $16$hi;
     i64toi32_i32$1 = $16;
     $471 = i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
     i64toi32_i32$2 = 0;
     $472$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $12$hi;
     i64toi32_i32$2 = i64toi32_i32$3;
     i64toi32_i32$2 = $12$hi;
     i64toi32_i32$1 = $12;
     i64toi32_i32$4 = $4;
     $475 = i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
     i64toi32_i32$1 = 0;
     $476$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $472$hi;
     i64toi32_i32$4 = $471;
     i64toi32_i32$2 = $476$hi;
     i64toi32_i32$3 = $475;
     i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
     i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     $477$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $15$hi;
     i64toi32_i32$0 = $12$hi;
     i64toi32_i32$0 = $15$hi;
     i64toi32_i32$1 = $15;
     i64toi32_i32$4 = $12$hi;
     i64toi32_i32$3 = $12;
     $480 = i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
     i64toi32_i32$1 = 0;
     $481$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $477$hi;
     i64toi32_i32$3 = i64toi32_i32$5;
     i64toi32_i32$0 = $481$hi;
     i64toi32_i32$4 = $480;
     i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$4 | 0;
     i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     i64toi32_i32$1 = i64toi32_i32$2;
     i64toi32_i32$3 = 0;
     i64toi32_i32$4 = 32;
     i64toi32_i32$0 = i64toi32_i32$4 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$1 << i64toi32_i32$0 | 0;
      $365 = 0;
     } else {
      i64toi32_i32$3 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$0 | 0) | 0;
      $365 = i64toi32_i32$1 << i64toi32_i32$0 | 0;
     }
     $483$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $468$hi;
     i64toi32_i32$5 = $468;
     i64toi32_i32$1 = $483$hi;
     i64toi32_i32$4 = $365;
     i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
     $484 = i64toi32_i32$5 | i64toi32_i32$4 | 0;
     $484$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $448$hi;
     i64toi32_i32$3 = $448;
     i64toi32_i32$5 = $484$hi;
     i64toi32_i32$4 = $484;
     i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$4 | 0;
     i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $4 = i64toi32_i32$0;
     $4$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $20$hi;
     i64toi32_i32$2 = $4$hi;
     i64toi32_i32$1 = i64toi32_i32$0;
     i64toi32_i32$3 = $20$hi;
     i64toi32_i32$4 = $20;
     $488 = i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
     i64toi32_i32$1 = 0;
     $489$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $447$hi;
     i64toi32_i32$4 = $447;
     i64toi32_i32$2 = $489$hi;
     i64toi32_i32$3 = $488;
     i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
     i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     $490 = i64toi32_i32$5;
     $490$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $4$hi;
     $491 = $4;
     $491$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $23$hi;
     $492 = $23;
     $492$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $2$hi;
     i64toi32_i32$0 = $17$hi;
     i64toi32_i32$0 = $2$hi;
     i64toi32_i32$4 = $17$hi;
     i64toi32_i32$4 = __wasm_i64_mul($2 | 0, i64toi32_i32$0 | 0, $17 | 0, i64toi32_i32$4 | 0) | 0;
     i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
     $2 = i64toi32_i32$4;
     $2$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $18$hi;
     i64toi32_i32$0 = $6$hi;
     i64toi32_i32$0 = $18$hi;
     i64toi32_i32$4 = $6$hi;
     i64toi32_i32$4 = __wasm_i64_mul($18 | 0, i64toi32_i32$0 | 0, $6 | 0, i64toi32_i32$4 | 0) | 0;
     i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
     $499 = i64toi32_i32$4;
     $499$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $2$hi;
     i64toi32_i32$1 = $2;
     i64toi32_i32$4 = $499$hi;
     i64toi32_i32$3 = $499;
     i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
     i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $6 = i64toi32_i32$2;
     $6$hi = i64toi32_i32$5;
     i64toi32_i32$0 = i64toi32_i32$2;
     i64toi32_i32$1 = 0;
     i64toi32_i32$3 = 32;
     i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = 0;
      $366 = i64toi32_i32$5 >>> i64toi32_i32$4 | 0;
     } else {
      i64toi32_i32$1 = i64toi32_i32$5 >>> i64toi32_i32$4 | 0;
      $366 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
     }
     $502 = $366;
     $502$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $6$hi;
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$1 = $6$hi;
     i64toi32_i32$5 = $6;
     i64toi32_i32$0 = $2$hi;
     i64toi32_i32$3 = $2;
     $505 = i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
     i64toi32_i32$5 = 0;
     i64toi32_i32$3 = $505;
     i64toi32_i32$1 = 0;
     i64toi32_i32$0 = 32;
     i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
      $368 = 0;
     } else {
      i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$4 | 0) | 0;
      $368 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
     }
     $507$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $502$hi;
     i64toi32_i32$5 = $502;
     i64toi32_i32$3 = $507$hi;
     i64toi32_i32$0 = $368;
     i64toi32_i32$3 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
     $508 = i64toi32_i32$5 | i64toi32_i32$0 | 0;
     $508$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $492$hi;
     i64toi32_i32$1 = $492;
     i64toi32_i32$5 = $508$hi;
     i64toi32_i32$0 = $508;
     i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
     i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $2 = i64toi32_i32$4;
     $2$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $23$hi;
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$3 = i64toi32_i32$4;
     i64toi32_i32$1 = $23$hi;
     i64toi32_i32$0 = $23;
     i64toi32_i32$3 = 0;
     $513 = i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
     $513$hi = i64toi32_i32$3;
     i64toi32_i32$3 = i64toi32_i32$2;
     $514 = i64toi32_i32$4;
     $514$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $15$hi;
     i64toi32_i32$0 = $15;
     i64toi32_i32$2 = 0;
     i64toi32_i32$1 = 32;
     i64toi32_i32$5 = i64toi32_i32$1 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$5 | 0;
      $369 = 0;
     } else {
      i64toi32_i32$2 = ((1 << i64toi32_i32$5 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$5 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$5 | 0) | 0;
      $369 = i64toi32_i32$0 << i64toi32_i32$5 | 0;
     }
     $516$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $514$hi;
     i64toi32_i32$3 = $514;
     i64toi32_i32$0 = $516$hi;
     i64toi32_i32$1 = $369;
     i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
     i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $517$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $2$hi;
     i64toi32_i32$4 = $517$hi;
     i64toi32_i32$2 = i64toi32_i32$5;
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$1 = $2;
     $519 = i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
     i64toi32_i32$2 = 0;
     $520$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $513$hi;
     i64toi32_i32$1 = $513;
     i64toi32_i32$4 = $520$hi;
     i64toi32_i32$3 = $519;
     i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
     i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $521$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $491$hi;
     i64toi32_i32$2 = $491;
     i64toi32_i32$1 = $521$hi;
     i64toi32_i32$3 = i64toi32_i32$0;
     i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
     i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     $2 = i64toi32_i32$4;
     $2$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $4$hi;
     i64toi32_i32$0 = $2$hi;
     i64toi32_i32$5 = i64toi32_i32$4;
     i64toi32_i32$2 = $4$hi;
     i64toi32_i32$3 = $4;
     $525 = i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
     i64toi32_i32$5 = 0;
     $526$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $490$hi;
     i64toi32_i32$3 = $490;
     i64toi32_i32$0 = $526$hi;
     i64toi32_i32$2 = $525;
     i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
     i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $4 = i64toi32_i32$1;
     $4$hi = i64toi32_i32$4;
     i64toi32_i32$5 = i64toi32_i32$1;
     i64toi32_i32$3 = 131071;
     i64toi32_i32$2 = -1;
     if (i64toi32_i32$4 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 > i64toi32_i32$2 >>> 0 | 0) | 0) {
      break label$13
     }
     i64toi32_i32$5 = $19$hi;
     i64toi32_i32$2 = $19;
     i64toi32_i32$4 = 0;
     i64toi32_i32$3 = 1;
     i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$2 << i64toi32_i32$0 | 0;
      $371 = 0;
     } else {
      i64toi32_i32$4 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$0 | 0) | 0;
      $371 = i64toi32_i32$2 << i64toi32_i32$0 | 0;
     }
     $531$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $21$hi;
     i64toi32_i32$4 = $531$hi;
     i64toi32_i32$5 = $371;
     i64toi32_i32$2 = $21$hi;
     i64toi32_i32$3 = $21;
     i64toi32_i32$2 = i64toi32_i32$4 | i64toi32_i32$2 | 0;
     $19 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
     $19$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$2 = $4$hi;
     i64toi32_i32$2 = $3$hi;
     i64toi32_i32$2 = $14$hi;
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$4 = $3$hi;
     i64toi32_i32$3 = $14$hi;
     __multi3($5 + 80 | 0 | 0, $2 | 0, i64toi32_i32$2 | 0, $4 | 0, i64toi32_i32$5 | 0, $3 | 0, i64toi32_i32$4 | 0, $14 | 0, i64toi32_i32$3 | 0);
     i64toi32_i32$3 = $1$hi;
     i64toi32_i32$5 = $1;
     i64toi32_i32$4 = 0;
     i64toi32_i32$2 = 49;
     i64toi32_i32$0 = i64toi32_i32$2 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$5 << i64toi32_i32$0 | 0;
      $372 = 0;
     } else {
      i64toi32_i32$4 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$0 | 0) | 0;
      $372 = i64toi32_i32$5 << i64toi32_i32$0 | 0;
     }
     $541$hi = i64toi32_i32$4;
     i64toi32_i32$3 = ($5 + 80 | 0) + 8 | 0;
     i64toi32_i32$4 = HEAP32[i64toi32_i32$3 >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
     $545 = i64toi32_i32$4;
     $545$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $541$hi;
     i64toi32_i32$3 = $372;
     i64toi32_i32$4 = $545$hi;
     i64toi32_i32$2 = $545;
     i64toi32_i32$0 = i64toi32_i32$3 - i64toi32_i32$2 | 0;
     i64toi32_i32$6 = i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0;
     i64toi32_i32$1 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
     i64toi32_i32$1 = i64toi32_i32$5 - i64toi32_i32$1 | 0;
     $546$hi = i64toi32_i32$1;
     i64toi32_i32$5 = $5;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 80 | 0) >> 2] | 0;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$5 + 84 | 0) >> 2] | 0;
     $1 = i64toi32_i32$1;
     $1$hi = i64toi32_i32$3;
     i64toi32_i32$5 = i64toi32_i32$1;
     i64toi32_i32$1 = 0;
     i64toi32_i32$2 = 0;
     $550 = (i64toi32_i32$5 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$1 | 0) | 0;
     i64toi32_i32$5 = 0;
     $551$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $546$hi;
     i64toi32_i32$2 = i64toi32_i32$0;
     i64toi32_i32$3 = $551$hi;
     i64toi32_i32$1 = $550;
     i64toi32_i32$4 = i64toi32_i32$0 - i64toi32_i32$1 | 0;
     i64toi32_i32$6 = i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0;
     i64toi32_i32$0 = i64toi32_i32$6 + i64toi32_i32$3 | 0;
     i64toi32_i32$0 = i64toi32_i32$5 - i64toi32_i32$0 | 0;
     $12 = i64toi32_i32$4;
     $12$hi = i64toi32_i32$0;
     $9 = $9 + 16382 | 0;
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$0 = 0;
     i64toi32_i32$5 = 0;
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$1 = $1;
     i64toi32_i32$3 = i64toi32_i32$5 - i64toi32_i32$1 | 0;
     i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0;
     i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$2 | 0;
     i64toi32_i32$4 = i64toi32_i32$0 - i64toi32_i32$4 | 0;
     $6 = i64toi32_i32$3;
     $6$hi = i64toi32_i32$4;
     break label$12;
    }
    $558 = $5 + 96 | 0;
    i64toi32_i32$4 = $2$hi;
    i64toi32_i32$0 = $2;
    i64toi32_i32$5 = 0;
    i64toi32_i32$1 = 1;
    i64toi32_i32$2 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$5 = 0;
     $373 = i64toi32_i32$4 >>> i64toi32_i32$2 | 0;
    } else {
     i64toi32_i32$5 = i64toi32_i32$4 >>> i64toi32_i32$2 | 0;
     $373 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$2 | 0) | 0;
    }
    $560 = $373;
    $560$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $4$hi;
    i64toi32_i32$4 = $4;
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = 63;
    i64toi32_i32$2 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = i64toi32_i32$4 << i64toi32_i32$2 | 0;
     $374 = 0;
    } else {
     i64toi32_i32$0 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$4 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$2 | 0) | 0;
     $374 = i64toi32_i32$4 << i64toi32_i32$2 | 0;
    }
    $562$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $560$hi;
    i64toi32_i32$5 = $560;
    i64toi32_i32$4 = $562$hi;
    i64toi32_i32$1 = $374;
    i64toi32_i32$4 = i64toi32_i32$0 | i64toi32_i32$4 | 0;
    $2 = i64toi32_i32$5 | i64toi32_i32$1 | 0;
    $2$hi = i64toi32_i32$4;
    $564 = $2;
    $564$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $4$hi;
    i64toi32_i32$0 = $4;
    i64toi32_i32$5 = 0;
    i64toi32_i32$1 = 1;
    i64toi32_i32$2 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$5 = 0;
     $375 = i64toi32_i32$4 >>> i64toi32_i32$2 | 0;
    } else {
     i64toi32_i32$5 = i64toi32_i32$4 >>> i64toi32_i32$2 | 0;
     $375 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$2 | 0) | 0;
    }
    $4 = $375;
    $4$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$5 = $14$hi;
    i64toi32_i32$5 = $564$hi;
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$4 = $3$hi;
    i64toi32_i32$1 = $14$hi;
    __multi3($558 | 0, $564 | 0, i64toi32_i32$5 | 0, $4 | 0, i64toi32_i32$0 | 0, $3 | 0, i64toi32_i32$4 | 0, $14 | 0, i64toi32_i32$1 | 0);
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$0 = $1;
    i64toi32_i32$4 = 0;
    i64toi32_i32$5 = 48;
    i64toi32_i32$2 = i64toi32_i32$5 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$0 << i64toi32_i32$2 | 0;
     $377 = 0;
    } else {
     i64toi32_i32$4 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$2 | 0) | 0;
     $377 = i64toi32_i32$0 << i64toi32_i32$2 | 0;
    }
    $571$hi = i64toi32_i32$4;
    i64toi32_i32$1 = ($5 + 96 | 0) + 8 | 0;
    i64toi32_i32$4 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $575 = i64toi32_i32$4;
    $575$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $571$hi;
    i64toi32_i32$1 = $377;
    i64toi32_i32$4 = $575$hi;
    i64toi32_i32$5 = $575;
    i64toi32_i32$2 = i64toi32_i32$1 - i64toi32_i32$5 | 0;
    i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0;
    i64toi32_i32$3 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
    i64toi32_i32$3 = i64toi32_i32$0 - i64toi32_i32$3 | 0;
    $576$hi = i64toi32_i32$3;
    i64toi32_i32$0 = $5;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 96 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 100 | 0) >> 2] | 0;
    $6 = i64toi32_i32$3;
    $6$hi = i64toi32_i32$1;
    i64toi32_i32$0 = i64toi32_i32$3;
    i64toi32_i32$3 = 0;
    i64toi32_i32$5 = 0;
    $580 = (i64toi32_i32$0 | 0) != (i64toi32_i32$5 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$3 | 0) | 0;
    i64toi32_i32$0 = 0;
    $581$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $576$hi;
    i64toi32_i32$5 = i64toi32_i32$2;
    i64toi32_i32$1 = $581$hi;
    i64toi32_i32$3 = $580;
    i64toi32_i32$4 = i64toi32_i32$2 - i64toi32_i32$3 | 0;
    i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0;
    i64toi32_i32$2 = i64toi32_i32$6 + i64toi32_i32$1 | 0;
    i64toi32_i32$2 = i64toi32_i32$0 - i64toi32_i32$2 | 0;
    $12 = i64toi32_i32$4;
    $12$hi = i64toi32_i32$2;
    $9 = $9 + 16383 | 0;
    i64toi32_i32$2 = $6$hi;
    i64toi32_i32$2 = 0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$5 = $6$hi;
    i64toi32_i32$3 = $6;
    i64toi32_i32$1 = i64toi32_i32$0 - i64toi32_i32$3 | 0;
    i64toi32_i32$6 = i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0;
    i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$5 | 0;
    i64toi32_i32$4 = i64toi32_i32$2 - i64toi32_i32$4 | 0;
    $6 = i64toi32_i32$1;
    $6$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $1$hi;
    $22 = $1;
    $22$hi = i64toi32_i32$4;
   }
   label$14 : {
    if (($9 | 0) < (32767 | 0)) {
     break label$14
    }
    i64toi32_i32$4 = $8$hi;
    i64toi32_i32$2 = $8;
    i64toi32_i32$0 = 2147418112;
    i64toi32_i32$3 = 0;
    i64toi32_i32$0 = i64toi32_i32$4 | i64toi32_i32$0 | 0;
    $8 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
    $8$hi = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    $1 = 0;
    $1$hi = i64toi32_i32$0;
    break label$1;
   }
   label$15 : {
    label$16 : {
     if (($9 | 0) < (1 | 0)) {
      break label$16
     }
     i64toi32_i32$0 = $12$hi;
     i64toi32_i32$4 = $12;
     i64toi32_i32$2 = 0;
     i64toi32_i32$3 = 1;
     i64toi32_i32$5 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$4 << i64toi32_i32$5 | 0;
      $378 = 0;
     } else {
      i64toi32_i32$2 = ((1 << i64toi32_i32$5 | 0) - 1 | 0) & (i64toi32_i32$4 >>> (32 - i64toi32_i32$5 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$5 | 0) | 0;
      $378 = i64toi32_i32$4 << i64toi32_i32$5 | 0;
     }
     $595 = $378;
     $595$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $6$hi;
     i64toi32_i32$0 = $6;
     i64toi32_i32$4 = 0;
     i64toi32_i32$3 = 63;
     i64toi32_i32$5 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$4 = 0;
      $379 = i64toi32_i32$2 >>> i64toi32_i32$5 | 0;
     } else {
      i64toi32_i32$4 = i64toi32_i32$2 >>> i64toi32_i32$5 | 0;
      $379 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$5 | 0) | 0;
     }
     $597$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $595$hi;
     i64toi32_i32$2 = $595;
     i64toi32_i32$0 = $597$hi;
     i64toi32_i32$3 = $379;
     i64toi32_i32$0 = i64toi32_i32$4 | i64toi32_i32$0 | 0;
     $12 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
     $12$hi = i64toi32_i32$0;
     i64toi32_i32$0 = 0;
     i64toi32_i32$4 = $9;
     i64toi32_i32$2 = 0;
     i64toi32_i32$3 = 48;
     i64toi32_i32$5 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$4 << i64toi32_i32$5 | 0;
      $381 = 0;
     } else {
      i64toi32_i32$2 = ((1 << i64toi32_i32$5 | 0) - 1 | 0) & (i64toi32_i32$4 >>> (32 - i64toi32_i32$5 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$5 | 0) | 0;
      $381 = i64toi32_i32$4 << i64toi32_i32$5 | 0;
     }
     $601$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $4$hi;
     i64toi32_i32$0 = $4;
     i64toi32_i32$4 = 65535;
     i64toi32_i32$3 = -1;
     i64toi32_i32$4 = i64toi32_i32$2 & i64toi32_i32$4 | 0;
     $603 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
     $603$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $601$hi;
     i64toi32_i32$2 = $381;
     i64toi32_i32$0 = $603$hi;
     i64toi32_i32$3 = $603;
     i64toi32_i32$0 = i64toi32_i32$4 | i64toi32_i32$0 | 0;
     $15 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
     $15$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $6$hi;
     i64toi32_i32$4 = $6;
     i64toi32_i32$2 = 0;
     i64toi32_i32$3 = 1;
     i64toi32_i32$5 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$4 << i64toi32_i32$5 | 0;
      $382 = 0;
     } else {
      i64toi32_i32$2 = ((1 << i64toi32_i32$5 | 0) - 1 | 0) & (i64toi32_i32$4 >>> (32 - i64toi32_i32$5 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$5 | 0) | 0;
      $382 = i64toi32_i32$4 << i64toi32_i32$5 | 0;
     }
     $4 = $382;
     $4$hi = i64toi32_i32$2;
     break label$15;
    }
    label$17 : {
     if (($9 | 0) > (-113 | 0)) {
      break label$17
     }
     i64toi32_i32$2 = 0;
     $1 = 0;
     $1$hi = i64toi32_i32$2;
     break label$1;
    }
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$2 = $4$hi;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$4 = $4$hi;
    __lshrti3($5 + 64 | 0 | 0, $2 | 0, i64toi32_i32$2 | 0, $4 | 0, i64toi32_i32$4 | 0, 1 - $9 | 0 | 0);
    i64toi32_i32$4 = $22$hi;
    i64toi32_i32$4 = $19$hi;
    i64toi32_i32$4 = $22$hi;
    i64toi32_i32$2 = $19$hi;
    __ashlti3($5 + 48 | 0 | 0, $22 | 0, i64toi32_i32$4 | 0, $19 | 0, i64toi32_i32$2 | 0, $9 + 112 | 0 | 0);
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$2 = $14$hi;
    i64toi32_i32$0 = $5;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 64 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 68 | 0) >> 2] | 0;
    $2 = i64toi32_i32$2;
    $2$hi = i64toi32_i32$4;
    i64toi32_i32$0 = (i64toi32_i32$0 + 64 | 0) + 8 | 0;
    i64toi32_i32$4 = HEAP32[i64toi32_i32$0 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
    $15 = i64toi32_i32$4;
    $15$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$4 = $14$hi;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$3 = $15$hi;
    __multi3($5 + 32 | 0 | 0, $3 | 0, i64toi32_i32$2 | 0, $14 | 0, i64toi32_i32$4 | 0, $2 | 0, i64toi32_i32$0 | 0, $15 | 0, i64toi32_i32$3 | 0);
    i64toi32_i32$4 = ($5 + 48 | 0) + 8 | 0;
    i64toi32_i32$3 = HEAP32[i64toi32_i32$4 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
    $636 = i64toi32_i32$3;
    $636$hi = i64toi32_i32$0;
    i64toi32_i32$4 = ($5 + 32 | 0) + 8 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$4 >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
    i64toi32_i32$4 = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$2 = 1;
    i64toi32_i32$5 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = i64toi32_i32$4 << i64toi32_i32$5 | 0;
     $383 = 0;
    } else {
     i64toi32_i32$0 = ((1 << i64toi32_i32$5 | 0) - 1 | 0) & (i64toi32_i32$4 >>> (32 - i64toi32_i32$5 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$5 | 0) | 0;
     $383 = i64toi32_i32$4 << i64toi32_i32$5 | 0;
    }
    $641 = $383;
    $641$hi = i64toi32_i32$0;
    i64toi32_i32$3 = $5;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 32 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 36 | 0) >> 2] | 0;
    $1 = i64toi32_i32$0;
    $1$hi = i64toi32_i32$4;
    i64toi32_i32$3 = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$2 = 63;
    i64toi32_i32$5 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = 0;
     $384 = i64toi32_i32$4 >>> i64toi32_i32$5 | 0;
    } else {
     i64toi32_i32$0 = i64toi32_i32$4 >>> i64toi32_i32$5 | 0;
     $384 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$5 | 0) | 0;
    }
    $645$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $641$hi;
    i64toi32_i32$4 = $641;
    i64toi32_i32$3 = $645$hi;
    i64toi32_i32$2 = $384;
    i64toi32_i32$3 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
    $646 = i64toi32_i32$4 | i64toi32_i32$2 | 0;
    $646$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $636$hi;
    i64toi32_i32$0 = $636;
    i64toi32_i32$4 = $646$hi;
    i64toi32_i32$2 = $646;
    i64toi32_i32$5 = i64toi32_i32$0 - i64toi32_i32$2 | 0;
    i64toi32_i32$6 = i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0;
    i64toi32_i32$1 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
    i64toi32_i32$1 = i64toi32_i32$3 - i64toi32_i32$1 | 0;
    $647 = i64toi32_i32$5;
    $647$hi = i64toi32_i32$1;
    i64toi32_i32$3 = $5;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 48 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 52 | 0) >> 2] | 0;
    $4 = i64toi32_i32$1;
    $4$hi = i64toi32_i32$0;
    $650 = i64toi32_i32$1;
    $650$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$3 = $1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$2 = 1;
    i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
     $387 = 0;
    } else {
     i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
     $387 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
    }
    $1 = $387;
    $1$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $650$hi;
    i64toi32_i32$0 = $650;
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$2 = $1;
    $654 = i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
    i64toi32_i32$0 = 0;
    $655$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $647$hi;
    i64toi32_i32$2 = $647;
    i64toi32_i32$1 = $655$hi;
    i64toi32_i32$3 = $654;
    i64toi32_i32$4 = i64toi32_i32$2 - i64toi32_i32$3 | 0;
    i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0;
    i64toi32_i32$5 = i64toi32_i32$6 + i64toi32_i32$1 | 0;
    i64toi32_i32$5 = i64toi32_i32$0 - i64toi32_i32$5 | 0;
    $12 = i64toi32_i32$4;
    $12$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $4$hi;
    i64toi32_i32$5 = $1$hi;
    i64toi32_i32$5 = $4$hi;
    i64toi32_i32$0 = $4;
    i64toi32_i32$2 = $1$hi;
    i64toi32_i32$3 = $1;
    i64toi32_i32$1 = i64toi32_i32$0 - i64toi32_i32$3 | 0;
    i64toi32_i32$6 = i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0;
    i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$2 | 0;
    i64toi32_i32$4 = i64toi32_i32$5 - i64toi32_i32$4 | 0;
    $4 = i64toi32_i32$1;
    $4$hi = i64toi32_i32$4;
   }
   i64toi32_i32$4 = $3$hi;
   i64toi32_i32$4 = $14$hi;
   i64toi32_i32$4 = $3$hi;
   i64toi32_i32$0 = $14$hi;
   i64toi32_i32$5 = 0;
   i64toi32_i32$3 = 0;
   __multi3($5 + 16 | 0 | 0, $3 | 0, i64toi32_i32$4 | 0, $14 | 0, i64toi32_i32$0 | 0, 3 | 0, i64toi32_i32$5 | 0, 0 | 0, i64toi32_i32$3 | 0);
   i64toi32_i32$3 = i64toi32_i32$4;
   i64toi32_i32$3 = i64toi32_i32$0;
   i64toi32_i32$3 = i64toi32_i32$4;
   i64toi32_i32$5 = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$4 = 0;
   __multi3($5 | 0, $3 | 0, i64toi32_i32$3 | 0, $14 | 0, i64toi32_i32$5 | 0, 5 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$4 | 0);
   i64toi32_i32$4 = $15$hi;
   $667 = $15;
   $667$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $2$hi;
   $668 = $2;
   $668$hi = i64toi32_i32$4;
   i64toi32_i32$5 = $2;
   i64toi32_i32$0 = 0;
   i64toi32_i32$3 = 1;
   i64toi32_i32$0 = i64toi32_i32$4 & i64toi32_i32$0 | 0;
   $1 = i64toi32_i32$5 & i64toi32_i32$3 | 0;
   $1$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$4 = $1;
   i64toi32_i32$5 = $4$hi;
   i64toi32_i32$3 = $4;
   i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
   i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
   if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
   }
   $4 = i64toi32_i32$2;
   $4$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$0 = i64toi32_i32$2;
   i64toi32_i32$4 = $3$hi;
   i64toi32_i32$3 = $3;
   $676 = i64toi32_i32$1 >>> 0 > i64toi32_i32$4 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$0 >>> 0 > i64toi32_i32$3 >>> 0 | 0) | 0;
   i64toi32_i32$0 = $12$hi;
   i64toi32_i32$0 = i64toi32_i32$1;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$0 = i64toi32_i32$1;
   i64toi32_i32$3 = i64toi32_i32$2;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$4 = $1;
   $680 = i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
   i64toi32_i32$3 = 0;
   $681$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $12$hi;
   i64toi32_i32$4 = $12;
   i64toi32_i32$0 = $681$hi;
   i64toi32_i32$1 = $680;
   i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
   i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
   if (i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
   }
   $1 = i64toi32_i32$5;
   $1$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $14$hi;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$3 = i64toi32_i32$5;
   i64toi32_i32$4 = $14$hi;
   i64toi32_i32$1 = $14;
   $685 = i64toi32_i32$2 >>> 0 > i64toi32_i32$4 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$3 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0;
   i64toi32_i32$3 = i64toi32_i32$2;
   i64toi32_i32$3 = i64toi32_i32$4;
   i64toi32_i32$3 = i64toi32_i32$2;
   i64toi32_i32$1 = i64toi32_i32$5;
   i64toi32_i32$2 = i64toi32_i32$4;
   i64toi32_i32$4 = $14;
   $689 = (i64toi32_i32$1 | 0) == (i64toi32_i32$4 | 0) & (i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) | 0 ? $676 : $685;
   i64toi32_i32$1 = 0;
   $690$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $668$hi;
   i64toi32_i32$4 = $668;
   i64toi32_i32$3 = $690$hi;
   i64toi32_i32$2 = $689;
   i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
   i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
   if (i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   $3 = i64toi32_i32$0;
   $3$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $2$hi;
   i64toi32_i32$5 = $3$hi;
   i64toi32_i32$1 = i64toi32_i32$0;
   i64toi32_i32$4 = $2$hi;
   i64toi32_i32$2 = $2;
   $694 = i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
   i64toi32_i32$1 = 0;
   $695$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $667$hi;
   i64toi32_i32$2 = $667;
   i64toi32_i32$5 = $695$hi;
   i64toi32_i32$4 = $694;
   i64toi32_i32$3 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
   i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
   if (i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0) {
    i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
   }
   $2 = i64toi32_i32$3;
   $2$hi = i64toi32_i32$0;
   $697 = i64toi32_i32$3;
   $697$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$0 = $2$hi;
   i64toi32_i32$1 = i64toi32_i32$3;
   i64toi32_i32$2 = 2147418112;
   i64toi32_i32$4 = 0;
   $700 = i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$4 = $5;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 16 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 20 | 0) >> 2] | 0;
   $703 = i64toi32_i32$1;
   $703$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$4 = $4;
   i64toi32_i32$1 = $703$hi;
   i64toi32_i32$2 = $703;
   $704 = i64toi32_i32$0 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$4 >>> 0 > i64toi32_i32$2 >>> 0 | 0) | 0;
   i64toi32_i32$4 = $1$hi;
   i64toi32_i32$2 = ($5 + 16 | 0) + 8 | 0;
   i64toi32_i32$4 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $2 = i64toi32_i32$4;
   $2$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$2 = $1;
   i64toi32_i32$4 = $2$hi;
   i64toi32_i32$1 = $2;
   $711 = i64toi32_i32$0 >>> 0 > i64toi32_i32$4 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$2 = i64toi32_i32$4;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$1 = $1;
   i64toi32_i32$0 = i64toi32_i32$4;
   i64toi32_i32$4 = $2;
   $716 = $700 & ((i64toi32_i32$1 | 0) == (i64toi32_i32$4 | 0) & (i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) | 0 ? $704 : $711) | 0;
   i64toi32_i32$1 = 0;
   $717$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$4 = $3;
   i64toi32_i32$2 = $717$hi;
   i64toi32_i32$0 = $716;
   i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
   i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
   if (i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0) {
    i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
   }
   $2 = i64toi32_i32$5;
   $2$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $3$hi;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$1 = i64toi32_i32$5;
   i64toi32_i32$4 = $3$hi;
   i64toi32_i32$0 = $3;
   $721 = i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
   i64toi32_i32$1 = 0;
   $722$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $697$hi;
   i64toi32_i32$0 = $697;
   i64toi32_i32$3 = $722$hi;
   i64toi32_i32$4 = $721;
   i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
   i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
   if (i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   $3 = i64toi32_i32$2;
   $3$hi = i64toi32_i32$5;
   $724 = i64toi32_i32$2;
   $724$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $2$hi;
   i64toi32_i32$5 = $3$hi;
   i64toi32_i32$1 = i64toi32_i32$2;
   i64toi32_i32$0 = 2147418112;
   i64toi32_i32$4 = 0;
   $727 = i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$4 = $5;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$4 >> 2] | 0;
   i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
   $730 = i64toi32_i32$1;
   $730$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $4$hi;
   i64toi32_i32$4 = $4;
   i64toi32_i32$1 = $730$hi;
   i64toi32_i32$0 = $730;
   $731 = i64toi32_i32$5 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$4 >>> 0 > i64toi32_i32$0 >>> 0 | 0) | 0;
   i64toi32_i32$4 = $1$hi;
   i64toi32_i32$0 = $5 + 8 | 0;
   i64toi32_i32$4 = HEAP32[i64toi32_i32$0 >> 2] | 0;
   i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
   $4 = i64toi32_i32$4;
   $4$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $1$hi;
   i64toi32_i32$0 = $1;
   i64toi32_i32$4 = $4$hi;
   i64toi32_i32$1 = $4;
   $737 = i64toi32_i32$5 >>> 0 > i64toi32_i32$4 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$0 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0;
   i64toi32_i32$0 = i64toi32_i32$5;
   i64toi32_i32$0 = i64toi32_i32$4;
   i64toi32_i32$0 = i64toi32_i32$5;
   i64toi32_i32$1 = $1;
   i64toi32_i32$5 = i64toi32_i32$4;
   i64toi32_i32$4 = $4;
   $742 = $727 & ((i64toi32_i32$1 | 0) == (i64toi32_i32$4 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$5 | 0) | 0 ? $731 : $737) | 0;
   i64toi32_i32$1 = 0;
   $743$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$4 = $2;
   i64toi32_i32$0 = $743$hi;
   i64toi32_i32$5 = $742;
   i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
   i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
   if (i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
   }
   $1 = i64toi32_i32$3;
   $1$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$1 = i64toi32_i32$3;
   i64toi32_i32$4 = $2$hi;
   i64toi32_i32$5 = $2;
   $747 = i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
   i64toi32_i32$1 = 0;
   $748$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $724$hi;
   i64toi32_i32$5 = $724;
   i64toi32_i32$2 = $748$hi;
   i64toi32_i32$4 = $747;
   i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
   i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
   if (i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0) {
    i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
   }
   $749$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $8$hi;
   i64toi32_i32$3 = $749$hi;
   i64toi32_i32$1 = i64toi32_i32$0;
   i64toi32_i32$5 = $8$hi;
   i64toi32_i32$4 = $8;
   i64toi32_i32$5 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
   $8 = i64toi32_i32$0 | i64toi32_i32$4 | 0;
   $8$hi = i64toi32_i32$5;
  }
  i64toi32_i32$5 = $1$hi;
  i64toi32_i32$1 = $0;
  HEAP32[i64toi32_i32$1 >> 2] = $1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$5;
  i64toi32_i32$5 = $8$hi;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $8;
  HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$5;
  __stack_pointer = $5 + 336 | 0;
 }
 
 function __fpclassifyl($0, $0$hi, $1, $1$hi) {
  $0 = $0 | 0;
  $0$hi = $0$hi | 0;
  $1 = $1 | 0;
  $1$hi = $1$hi | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, $2$hi = 0, $2 = 0, $13 = 0, $3 = 0, $4 = 0;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$2 = $1;
  i64toi32_i32$1 = 65535;
  i64toi32_i32$3 = -1;
  i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
  $2 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
  $2$hi = i64toi32_i32$1;
  label$1 : {
   label$2 : {
    i64toi32_i32$1 = i64toi32_i32$0;
    i64toi32_i32$0 = i64toi32_i32$2;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 48;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = 0;
     $13 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
     $13 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
    }
    $3 = $13 & 32767 | 0;
    if (($3 | 0) == (32767 | 0)) {
     break label$2
    }
    $4 = 4;
    if ($3) {
     break label$1
    }
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$1 = $2;
    i64toi32_i32$0 = $0$hi;
    i64toi32_i32$3 = $0;
    i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
    return (!(i64toi32_i32$1 | i64toi32_i32$3 | 0 | i64toi32_i32$0 | 0) ? 2 : 3) | 0;
   }
   i64toi32_i32$0 = $2$hi;
   i64toi32_i32$0 = $0$hi;
   i64toi32_i32$0 = $2$hi;
   i64toi32_i32$2 = $2;
   i64toi32_i32$1 = $0$hi;
   i64toi32_i32$3 = $0;
   i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
   $4 = !(i64toi32_i32$2 | i64toi32_i32$3 | 0 | i64toi32_i32$1 | 0);
  }
  return $4 | 0;
 }
 
 function fmodl($0, $1, $1$hi, $2, $2$hi, $3, $3$hi, $4, $4$hi) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $1$hi = $1$hi | 0;
  $2 = $2 | 0;
  $2$hi = $2$hi | 0;
  $3 = $3 | 0;
  $3$hi = $3$hi | 0;
  $4 = $4 | 0;
  $4$hi = $4$hi | 0;
  var i64toi32_i32$3 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, $5 = 0, i64toi32_i32$5 = 0, $10$hi = 0, $10 = 0, $8$hi = 0, $7 = 0, $8 = 0, i64toi32_i32$6 = 0, $9 = 0, $11$hi = 0, $64 = 0, $6 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $70 = 0, $11 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $52 = 0, $52$hi = 0, $55$hi = 0, $57 = 0, $57$hi = 0, $59 = 0, $59$hi = 0, $60 = 0, $60$hi = 0, $67$hi = 0, $69 = 0, $69$hi = 0, $131$hi = 0, $134 = 0, $135$hi = 0, $156 = 0, $156$hi = 0, $158$hi = 0, $161 = 0, $161$hi = 0, $163$hi = 0, $175$hi = 0, $178 = 0, $179$hi = 0, $208 = 0, $208$hi = 0, $210$hi = 0, $219 = 0, $220 = 0, $220$hi = 0, $222 = 0, $222$hi = 0, $228$hi = 0, $229 = 0, $229$hi = 0, $236 = 0, $236$hi = 0, $241$hi = 0;
  $5 = __stack_pointer - 128 | 0;
  __stack_pointer = $5;
  label$1 : {
   label$2 : {
    label$3 : {
     i64toi32_i32$0 = $3$hi;
     i64toi32_i32$0 = $4$hi;
     i64toi32_i32$0 = $3$hi;
     i64toi32_i32$1 = $4$hi;
     i64toi32_i32$2 = 0;
     i64toi32_i32$3 = 0;
     if (!(__letf2($3 | 0, i64toi32_i32$0 | 0, $4 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$3 | 0) | 0)) {
      break label$3
     }
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$3 = $4$hi;
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$2 = $4$hi;
     if (!(__fpclassifyl($3 | 0, i64toi32_i32$3 | 0, $4 | 0, i64toi32_i32$2 | 0) | 0)) {
      break label$3
     }
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$1 = $2;
     i64toi32_i32$3 = 0;
     i64toi32_i32$0 = 48;
     i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = 0;
      $64 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
     } else {
      i64toi32_i32$3 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
      $64 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
     }
     $6 = $64;
     $7 = $6 & 32767 | 0;
     if (($7 | 0) != (32767 | 0)) {
      break label$2
     }
    }
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$3 = $3$hi;
    i64toi32_i32$3 = $4$hi;
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$0 = $4$hi;
    __multf3($5 + 16 | 0 | 0, $1 | 0, i64toi32_i32$3 | 0, $2 | 0, i64toi32_i32$1 | 0, $3 | 0, i64toi32_i32$2 | 0, $4 | 0, i64toi32_i32$0 | 0);
    i64toi32_i32$1 = $5;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 16 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 20 | 0) >> 2] | 0;
    $4 = i64toi32_i32$0;
    $4$hi = i64toi32_i32$2;
    i64toi32_i32$1 = (i64toi32_i32$1 + 16 | 0) + 8 | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $3 = i64toi32_i32$2;
    $3$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$0 = $3$hi;
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$1 = i64toi32_i32$0;
    i64toi32_i32$3 = i64toi32_i32$2;
    __divtf3($5 | 0, $4 | 0, i64toi32_i32$0 | 0, $3 | 0, i64toi32_i32$3 | 0, $4 | 0, i64toi32_i32$0 | 0, $3 | 0, i64toi32_i32$3 | 0);
    i64toi32_i32$2 = $5 + 8 | 0;
    i64toi32_i32$3 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $2 = i64toi32_i32$3;
    $2$hi = i64toi32_i32$1;
    i64toi32_i32$2 = $5;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $4 = i64toi32_i32$1;
    $4$hi = i64toi32_i32$3;
    break label$1;
   }
   label$4 : {
    i64toi32_i32$3 = $1$hi;
    $52 = $1;
    $52$hi = i64toi32_i32$3;
    i64toi32_i32$3 = 0;
    i64toi32_i32$2 = $7;
    i64toi32_i32$1 = 0;
    i64toi32_i32$0 = 48;
    i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
     $65 = 0;
    } else {
     i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
     $65 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
    }
    $55$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$3 = $2;
    i64toi32_i32$2 = 65535;
    i64toi32_i32$0 = -1;
    i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
    $57 = i64toi32_i32$3 & i64toi32_i32$0 | 0;
    $57$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $55$hi;
    i64toi32_i32$1 = $65;
    i64toi32_i32$3 = $57$hi;
    i64toi32_i32$0 = $57;
    i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
    $8 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
    $8$hi = i64toi32_i32$3;
    $59 = $8;
    $59$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $3$hi;
    $60 = $3;
    $60$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $4$hi;
    i64toi32_i32$2 = $4;
    i64toi32_i32$1 = 0;
    i64toi32_i32$0 = 48;
    i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $66 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
     $66 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
    }
    $9 = $66 & 32767 | 0;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = $9;
    i64toi32_i32$2 = 0;
    i64toi32_i32$0 = 48;
    i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
     $67 = 0;
    } else {
     i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
     $67 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
    }
    $67$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $4$hi;
    i64toi32_i32$1 = $4;
    i64toi32_i32$3 = 65535;
    i64toi32_i32$0 = -1;
    i64toi32_i32$3 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
    $69 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
    $69$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $67$hi;
    i64toi32_i32$2 = $67;
    i64toi32_i32$1 = $69$hi;
    i64toi32_i32$0 = $69;
    i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
    $10 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
    $10$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $52$hi;
    i64toi32_i32$2 = $59$hi;
    i64toi32_i32$3 = $60$hi;
    i64toi32_i32$0 = $10$hi;
    if ((__letf2($52 | 0, i64toi32_i32$1 | 0, $59 | 0, i64toi32_i32$2 | 0, $60 | 0, i64toi32_i32$3 | 0, $10 | 0, i64toi32_i32$0 | 0) | 0 | 0) > (0 | 0)) {
     break label$4
    }
    label$5 : {
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$0 = $8$hi;
     i64toi32_i32$0 = $3$hi;
     i64toi32_i32$0 = $10$hi;
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$3 = $8$hi;
     i64toi32_i32$2 = $3$hi;
     i64toi32_i32$1 = $10$hi;
     if (!(__letf2($1 | 0, i64toi32_i32$0 | 0, $8 | 0, i64toi32_i32$3 | 0, $3 | 0, i64toi32_i32$2 | 0, $10 | 0, i64toi32_i32$1 | 0) | 0)) {
      break label$5
     }
     i64toi32_i32$1 = $1$hi;
     $4 = $1;
     $4$hi = i64toi32_i32$1;
     break label$1;
    }
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$3 = 0;
    i64toi32_i32$0 = 0;
    __multf3($5 + 112 | 0 | 0, $1 | 0, i64toi32_i32$1 | 0, $2 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$0 | 0);
    i64toi32_i32$2 = $5 + 120 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $2 = i64toi32_i32$0;
    $2$hi = i64toi32_i32$3;
    i64toi32_i32$2 = $5;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 112 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 116 | 0) >> 2] | 0;
    $4 = i64toi32_i32$3;
    $4$hi = i64toi32_i32$0;
    break label$1;
   }
   label$6 : {
    label$7 : {
     if (!$7) {
      break label$7
     }
     i64toi32_i32$0 = $1$hi;
     $4 = $1;
     $4$hi = i64toi32_i32$0;
     break label$6;
    }
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$0 = $8$hi;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$3 = $8$hi;
    i64toi32_i32$2 = 0;
    i64toi32_i32$1 = 1081540608;
    __multf3($5 + 96 | 0 | 0, $1 | 0, i64toi32_i32$0 | 0, $8 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$1 | 0);
    i64toi32_i32$3 = $5 + 104 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$3 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
    $8 = i64toi32_i32$1;
    $8$hi = i64toi32_i32$2;
    i64toi32_i32$3 = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$0 = 48;
    i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $68 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
     $68 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
    }
    $7 = $68 + -120 | 0;
    i64toi32_i32$2 = $5;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 96 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 100 | 0) >> 2] | 0;
    $4 = i64toi32_i32$1;
    $4$hi = i64toi32_i32$3;
   }
   label$8 : {
    if ($9) {
     break label$8
    }
    i64toi32_i32$3 = $3$hi;
    i64toi32_i32$3 = $10$hi;
    i64toi32_i32$3 = $3$hi;
    i64toi32_i32$1 = $10$hi;
    i64toi32_i32$2 = 0;
    i64toi32_i32$0 = 1081540608;
    __multf3($5 + 80 | 0 | 0, $3 | 0, i64toi32_i32$3 | 0, $10 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$0 | 0);
    i64toi32_i32$1 = $5 + 88 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $10 = i64toi32_i32$0;
    $10$hi = i64toi32_i32$2;
    i64toi32_i32$1 = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$3 = 48;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = 0;
     $70 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
     $70 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
    }
    $9 = $70 + -120 | 0;
    i64toi32_i32$2 = $5;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 80 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 84 | 0) >> 2] | 0;
    $3 = i64toi32_i32$0;
    $3$hi = i64toi32_i32$1;
   }
   i64toi32_i32$1 = $10$hi;
   i64toi32_i32$2 = $10;
   i64toi32_i32$0 = 65535;
   i64toi32_i32$3 = -1;
   i64toi32_i32$0 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
   i64toi32_i32$1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
   i64toi32_i32$2 = 65536;
   i64toi32_i32$3 = 0;
   i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
   $11 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
   $11$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $8$hi;
   i64toi32_i32$0 = $8;
   i64toi32_i32$1 = 65535;
   i64toi32_i32$3 = -1;
   i64toi32_i32$1 = i64toi32_i32$2 & i64toi32_i32$1 | 0;
   i64toi32_i32$2 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
   i64toi32_i32$0 = 65536;
   i64toi32_i32$3 = 0;
   i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
   $8 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
   $8$hi = i64toi32_i32$0;
   label$9 : {
    if (($7 | 0) <= ($9 | 0)) {
     break label$9
    }
    label$10 : while (1) {
     label$11 : {
      label$12 : {
       i64toi32_i32$0 = $8$hi;
       i64toi32_i32$0 = $11$hi;
       i64toi32_i32$0 = $8$hi;
       i64toi32_i32$1 = $8;
       i64toi32_i32$2 = $11$hi;
       i64toi32_i32$3 = $11;
       i64toi32_i32$4 = i64toi32_i32$1 - i64toi32_i32$3 | 0;
       i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0;
       i64toi32_i32$5 = i64toi32_i32$6 + i64toi32_i32$2 | 0;
       i64toi32_i32$5 = i64toi32_i32$0 - i64toi32_i32$5 | 0;
       $131$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $4$hi;
       i64toi32_i32$5 = $3$hi;
       i64toi32_i32$5 = $4$hi;
       i64toi32_i32$0 = $4;
       i64toi32_i32$1 = $3$hi;
       i64toi32_i32$3 = $3;
       $134 = $4$hi >>> 0 < i64toi32_i32$1 >>> 0 | (($4$hi | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
       i64toi32_i32$0 = 0;
       $135$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $131$hi;
       i64toi32_i32$3 = i64toi32_i32$4;
       i64toi32_i32$5 = $135$hi;
       i64toi32_i32$1 = $134;
       i64toi32_i32$2 = i64toi32_i32$3 - i64toi32_i32$1 | 0;
       i64toi32_i32$6 = i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0;
       i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$5 | 0;
       i64toi32_i32$4 = i64toi32_i32$0 - i64toi32_i32$4 | 0;
       $10 = i64toi32_i32$2;
       $10$hi = i64toi32_i32$4;
       i64toi32_i32$0 = i64toi32_i32$2;
       i64toi32_i32$3 = 0;
       i64toi32_i32$1 = 0;
       if ((i64toi32_i32$4 | 0) < (i64toi32_i32$3 | 0)) {
        $71 = 1
       } else {
        if ((i64toi32_i32$4 | 0) <= (i64toi32_i32$3 | 0)) {
         if (i64toi32_i32$0 >>> 0 >= i64toi32_i32$1 >>> 0) {
          $72 = 0
         } else {
          $72 = 1
         }
         $73 = $72;
        } else {
         $73 = 0
        }
        $71 = $73;
       }
       if ($71) {
        break label$12
       }
       label$13 : {
        i64toi32_i32$0 = $10$hi;
        i64toi32_i32$0 = $4$hi;
        i64toi32_i32$0 = $3$hi;
        i64toi32_i32$0 = $4$hi;
        i64toi32_i32$1 = $4;
        i64toi32_i32$4 = $3$hi;
        i64toi32_i32$3 = $3;
        i64toi32_i32$5 = i64toi32_i32$1 - i64toi32_i32$3 | 0;
        i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0;
        i64toi32_i32$2 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
        i64toi32_i32$2 = i64toi32_i32$0 - i64toi32_i32$2 | 0;
        $4 = i64toi32_i32$5;
        $4$hi = i64toi32_i32$2;
        i64toi32_i32$2 = $10$hi;
        i64toi32_i32$0 = $10;
        i64toi32_i32$1 = $4$hi;
        i64toi32_i32$3 = $4;
        i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
        i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
        i64toi32_i32$0 = 0;
        i64toi32_i32$3 = 0;
        if ((i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$0 | 0) | 0) {
         break label$13
        }
        i64toi32_i32$2 = $1$hi;
        i64toi32_i32$2 = $2$hi;
        i64toi32_i32$2 = $1$hi;
        i64toi32_i32$1 = $2$hi;
        i64toi32_i32$3 = 0;
        i64toi32_i32$0 = 0;
        __multf3($5 + 32 | 0 | 0, $1 | 0, i64toi32_i32$2 | 0, $2 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$0 | 0);
        i64toi32_i32$1 = $5 + 40 | 0;
        i64toi32_i32$0 = HEAP32[i64toi32_i32$1 >> 2] | 0;
        i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
        $2 = i64toi32_i32$0;
        $2$hi = i64toi32_i32$3;
        i64toi32_i32$1 = $5;
        i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 32 | 0) >> 2] | 0;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 36 | 0) >> 2] | 0;
        $4 = i64toi32_i32$3;
        $4$hi = i64toi32_i32$0;
        break label$1;
       }
       i64toi32_i32$0 = $10$hi;
       i64toi32_i32$1 = $10;
       i64toi32_i32$3 = 0;
       i64toi32_i32$2 = 1;
       i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
        i64toi32_i32$3 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
        $74 = 0;
       } else {
        i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
        $74 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
       }
       $156 = $74;
       $156$hi = i64toi32_i32$3;
       i64toi32_i32$3 = $4$hi;
       i64toi32_i32$0 = $4;
       i64toi32_i32$1 = 0;
       i64toi32_i32$2 = 63;
       i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
        i64toi32_i32$1 = 0;
        $75 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
       } else {
        i64toi32_i32$1 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
        $75 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
       }
       $158$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $156$hi;
       i64toi32_i32$3 = $156;
       i64toi32_i32$0 = $158$hi;
       i64toi32_i32$2 = $75;
       i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
       $8 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
       $8$hi = i64toi32_i32$0;
       break label$11;
      }
      i64toi32_i32$0 = $8$hi;
      i64toi32_i32$1 = $8;
      i64toi32_i32$3 = 0;
      i64toi32_i32$2 = 1;
      i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
       i64toi32_i32$3 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
       $76 = 0;
      } else {
       i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
       $76 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
      }
      $161 = $76;
      $161$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $4$hi;
      i64toi32_i32$0 = $4;
      i64toi32_i32$1 = 0;
      i64toi32_i32$2 = 63;
      i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
       i64toi32_i32$1 = 0;
       $77 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
      } else {
       i64toi32_i32$1 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
       $77 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
      }
      $163$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $161$hi;
      i64toi32_i32$3 = $161;
      i64toi32_i32$0 = $163$hi;
      i64toi32_i32$2 = $77;
      i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
      $8 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
      $8$hi = i64toi32_i32$0;
     }
     i64toi32_i32$0 = $4$hi;
     i64toi32_i32$1 = $4;
     i64toi32_i32$3 = 0;
     i64toi32_i32$2 = 1;
     i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
      $78 = 0;
     } else {
      i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
      $78 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
     }
     $4 = $78;
     $4$hi = i64toi32_i32$3;
     $7 = $7 + -1 | 0;
     if (($7 | 0) > ($9 | 0)) {
      continue label$10
     }
     break label$10;
    };
    $7 = $9;
   }
   label$14 : {
    label$15 : {
     i64toi32_i32$3 = $8$hi;
     i64toi32_i32$3 = $11$hi;
     i64toi32_i32$3 = $8$hi;
     i64toi32_i32$0 = $8;
     i64toi32_i32$1 = $11$hi;
     i64toi32_i32$2 = $11;
     i64toi32_i32$4 = i64toi32_i32$0 - i64toi32_i32$2 | 0;
     i64toi32_i32$6 = i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0;
     i64toi32_i32$5 = i64toi32_i32$6 + i64toi32_i32$1 | 0;
     i64toi32_i32$5 = i64toi32_i32$3 - i64toi32_i32$5 | 0;
     $175$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$5 = $3$hi;
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$3 = $4;
     i64toi32_i32$0 = $3$hi;
     i64toi32_i32$2 = $3;
     $178 = $4$hi >>> 0 < i64toi32_i32$0 >>> 0 | (($4$hi | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
     i64toi32_i32$3 = 0;
     $179$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $175$hi;
     i64toi32_i32$2 = i64toi32_i32$4;
     i64toi32_i32$5 = $179$hi;
     i64toi32_i32$0 = $178;
     i64toi32_i32$1 = i64toi32_i32$2 - i64toi32_i32$0 | 0;
     i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0;
     i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$5 | 0;
     i64toi32_i32$4 = i64toi32_i32$3 - i64toi32_i32$4 | 0;
     $10 = i64toi32_i32$1;
     $10$hi = i64toi32_i32$4;
     i64toi32_i32$3 = i64toi32_i32$1;
     i64toi32_i32$2 = 0;
     i64toi32_i32$0 = 0;
     if ((i64toi32_i32$4 | 0) > (i64toi32_i32$2 | 0)) {
      $79 = 1
     } else {
      if ((i64toi32_i32$4 | 0) >= (i64toi32_i32$2 | 0)) {
       if (i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0) {
        $80 = 0
       } else {
        $80 = 1
       }
       $81 = $80;
      } else {
       $81 = 0
      }
      $79 = $81;
     }
     if ($79) {
      break label$15
     }
     i64toi32_i32$3 = $8$hi;
     $10 = $8;
     $10$hi = i64toi32_i32$3;
     break label$14;
    }
    i64toi32_i32$3 = $10$hi;
    i64toi32_i32$3 = $4$hi;
    i64toi32_i32$3 = $3$hi;
    i64toi32_i32$3 = $4$hi;
    i64toi32_i32$0 = $4;
    i64toi32_i32$4 = $3$hi;
    i64toi32_i32$2 = $3;
    i64toi32_i32$5 = i64toi32_i32$0 - i64toi32_i32$2 | 0;
    i64toi32_i32$6 = i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0;
    i64toi32_i32$1 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
    i64toi32_i32$1 = i64toi32_i32$3 - i64toi32_i32$1 | 0;
    $4 = i64toi32_i32$5;
    $4$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $10$hi;
    i64toi32_i32$3 = $10;
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$2 = $4;
    i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
    i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
    i64toi32_i32$3 = 0;
    i64toi32_i32$2 = 0;
    if ((i64toi32_i32$1 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$3 | 0) | 0) {
     break label$14
    }
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 0;
    __multf3($5 + 48 | 0 | 0, $1 | 0, i64toi32_i32$1 | 0, $2 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$3 | 0);
    i64toi32_i32$0 = $5 + 56 | 0;
    i64toi32_i32$3 = HEAP32[i64toi32_i32$0 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
    $2 = i64toi32_i32$3;
    $2$hi = i64toi32_i32$2;
    i64toi32_i32$0 = $5;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 48 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 52 | 0) >> 2] | 0;
    $4 = i64toi32_i32$2;
    $4$hi = i64toi32_i32$3;
    break label$1;
   }
   label$16 : {
    i64toi32_i32$3 = $10$hi;
    i64toi32_i32$0 = $10;
    i64toi32_i32$2 = 65535;
    i64toi32_i32$1 = -1;
    if (i64toi32_i32$3 >>> 0 > i64toi32_i32$2 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$0 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0) {
     break label$16
    }
    label$17 : while (1) {
     i64toi32_i32$0 = $4$hi;
     i64toi32_i32$1 = $4;
     i64toi32_i32$3 = 0;
     i64toi32_i32$2 = 63;
     i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = 0;
      $82 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
     } else {
      i64toi32_i32$3 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
      $82 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
     }
     $3 = $82;
     $3$hi = i64toi32_i32$3;
     $7 = $7 + -1 | 0;
     i64toi32_i32$3 = $4$hi;
     i64toi32_i32$0 = $4;
     i64toi32_i32$1 = 0;
     i64toi32_i32$2 = 1;
     i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
      $83 = 0;
     } else {
      i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
      $83 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
     }
     $4 = $83;
     $4$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $3$hi;
     $208 = $3;
     $208$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $10$hi;
     i64toi32_i32$3 = $10;
     i64toi32_i32$0 = 0;
     i64toi32_i32$2 = 1;
     i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
      $84 = 0;
     } else {
      i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
      $84 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
     }
     $210$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $208$hi;
     i64toi32_i32$1 = $208;
     i64toi32_i32$3 = $210$hi;
     i64toi32_i32$2 = $84;
     i64toi32_i32$3 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
     $10 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
     $10$hi = i64toi32_i32$3;
     i64toi32_i32$0 = $10;
     i64toi32_i32$1 = 65536;
     i64toi32_i32$2 = 0;
     if (i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0) {
      continue label$17
     }
     break label$17;
    };
   }
   $9 = $6 & 32768 | 0;
   label$18 : {
    if (($7 | 0) > (0 | 0)) {
     break label$18
    }
    $219 = $5 + 64 | 0;
    i64toi32_i32$0 = $4$hi;
    $220 = $4;
    $220$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $10$hi;
    i64toi32_i32$2 = $10;
    i64toi32_i32$3 = 65535;
    i64toi32_i32$1 = -1;
    i64toi32_i32$3 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
    $222 = i64toi32_i32$2 & i64toi32_i32$1 | 0;
    $222$hi = i64toi32_i32$3;
    i64toi32_i32$3 = 0;
    i64toi32_i32$0 = $7 + 120 | 0 | $9 | 0;
    i64toi32_i32$2 = 0;
    i64toi32_i32$1 = 48;
    i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
     $85 = 0;
    } else {
     i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
     $85 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    }
    $228$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $222$hi;
    i64toi32_i32$3 = $222;
    i64toi32_i32$0 = $228$hi;
    i64toi32_i32$1 = $85;
    i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
    $229 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
    $229$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $220$hi;
    i64toi32_i32$3 = $229$hi;
    i64toi32_i32$2 = 0;
    i64toi32_i32$1 = 1065811968;
    __multf3($219 | 0, $220 | 0, i64toi32_i32$0 | 0, $229 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$1 | 0);
    i64toi32_i32$3 = $5 + 72 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$3 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
    $2 = i64toi32_i32$1;
    $2$hi = i64toi32_i32$2;
    i64toi32_i32$3 = $5;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 64 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 68 | 0) >> 2] | 0;
    $4 = i64toi32_i32$2;
    $4$hi = i64toi32_i32$1;
    break label$1;
   }
   i64toi32_i32$1 = $10$hi;
   i64toi32_i32$3 = $10;
   i64toi32_i32$2 = 65535;
   i64toi32_i32$0 = -1;
   i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
   $236 = i64toi32_i32$3 & i64toi32_i32$0 | 0;
   $236$hi = i64toi32_i32$2;
   i64toi32_i32$2 = 0;
   i64toi32_i32$1 = $7 | $9 | 0;
   i64toi32_i32$3 = 0;
   i64toi32_i32$0 = 48;
   i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
    i64toi32_i32$3 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
    $86 = 0;
   } else {
    i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
    $86 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
   }
   $241$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $236$hi;
   i64toi32_i32$2 = $236;
   i64toi32_i32$1 = $241$hi;
   i64toi32_i32$0 = $86;
   i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
   $2 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
   $2$hi = i64toi32_i32$1;
  }
  i64toi32_i32$1 = $4$hi;
  i64toi32_i32$2 = $0;
  HEAP32[i64toi32_i32$2 >> 2] = $4;
  HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$1 = $2$hi;
  HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] = $2;
  HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] = i64toi32_i32$1;
  __stack_pointer = $5 + 128 | 0;
 }
 
 function fabsl($0, $1, $1$hi, $2, $2$hi) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $1$hi = $1$hi | 0;
  $2 = $2 | 0;
  $2$hi = $2$hi | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $5 = 0;
  i64toi32_i32$0 = $2$hi;
  i64toi32_i32$2 = $2;
  i64toi32_i32$1 = 2147483647;
  i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
  $5 = i64toi32_i32$2 & -1 | 0;
  i64toi32_i32$2 = $0;
  HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] = $5;
  HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$1 = $1$hi;
  HEAP32[i64toi32_i32$2 >> 2] = $1;
  HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$1;
 }
 
 function __floatscan($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $10 = 0, i64toi32_i32$0 = 0, $6 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, $4 = 0, $9 = 0, $11 = 0, $11$hi = 0, $5 = 0, $5$hi = 0, $7 = 0, $8 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $4 = __stack_pointer - 48 | 0;
  __stack_pointer = $4;
  i64toi32_i32$0 = 0;
  $5 = 0;
  $5$hi = i64toi32_i32$0;
  label$1 : {
   label$2 : {
    if ($2 >>> 0 > 2 >>> 0) {
     break label$2
    }
    $6 = $1 + 4 | 0;
    $2 = $2 << 2 | 0;
    $7 = HEAP32[($2 + 7964 | 0) >> 2] | 0;
    $8 = HEAP32[($2 + 7952 | 0) >> 2] | 0;
    label$3 : while (1) {
     label$4 : {
      label$5 : {
       $2 = HEAP32[($1 + 4 | 0) >> 2] | 0;
       if ($2 >>> 0 >= (HEAP32[($1 + 104 | 0) >> 2] | 0) >>> 0) {
        break label$5
       }
       HEAP32[$6 >> 2] = $2 + 1 | 0;
       $2 = HEAPU8[$2 >> 0] | 0;
       break label$4;
      }
      $2 = __shgetc($1 | 0) | 0;
     }
     if (isspace($2 | 0) | 0) {
      continue label$3
     }
     break label$3;
    };
    $9 = 1;
    label$6 : {
     label$7 : {
      switch ($2 + -43 | 0 | 0) {
      case 0:
      case 2:
       break label$7;
      default:
       break label$6;
      };
     }
     $9 = ($2 | 0) == (45 | 0) ? -1 : 1;
     label$8 : {
      $2 = HEAP32[($1 + 4 | 0) >> 2] | 0;
      if ($2 >>> 0 >= (HEAP32[($1 + 104 | 0) >> 2] | 0) >>> 0) {
       break label$8
      }
      HEAP32[$6 >> 2] = $2 + 1 | 0;
      $2 = HEAPU8[$2 >> 0] | 0;
      break label$6;
     }
     $2 = __shgetc($1 | 0) | 0;
    }
    $10 = 0;
    label$9 : {
     label$10 : {
      label$11 : {
       label$12 : while (1) {
        if (($2 | 32 | 0 | 0) != (HEAP8[($10 + 5376 | 0) >> 0] | 0 | 0)) {
         break label$11
        }
        label$13 : {
         if ($10 >>> 0 > 6 >>> 0) {
          break label$13
         }
         label$14 : {
          $2 = HEAP32[($1 + 4 | 0) >> 2] | 0;
          if ($2 >>> 0 >= (HEAP32[($1 + 104 | 0) >> 2] | 0) >>> 0) {
           break label$14
          }
          HEAP32[$6 >> 2] = $2 + 1 | 0;
          $2 = HEAPU8[$2 >> 0] | 0;
          break label$13;
         }
         $2 = __shgetc($1 | 0) | 0;
        }
        $10 = $10 + 1 | 0;
        if (($10 | 0) != (8 | 0)) {
         continue label$12
        }
        break label$10;
       };
      }
      label$15 : {
       if (($10 | 0) == (3 | 0)) {
        break label$15
       }
       if (($10 | 0) == (8 | 0)) {
        break label$10
       }
       if ($10 >>> 0 < 4 >>> 0) {
        break label$9
       }
       if (!$3) {
        break label$9
       }
       if (($10 | 0) == (8 | 0)) {
        break label$10
       }
      }
      label$16 : {
       $1 = HEAP32[($1 + 104 | 0) >> 2] | 0;
       if (!$1) {
        break label$16
       }
       HEAP32[$6 >> 2] = (HEAP32[$6 >> 2] | 0) + -1 | 0;
      }
      if (!$3) {
       break label$10
      }
      if ($10 >>> 0 < 4 >>> 0) {
       break label$10
      }
      label$17 : while (1) {
       label$18 : {
        if (!$1) {
         break label$18
        }
        HEAP32[$6 >> 2] = (HEAP32[$6 >> 2] | 0) + -1 | 0;
       }
       $10 = $10 + -1 | 0;
       if ($10 >>> 0 > 3 >>> 0) {
        continue label$17
       }
       break label$17;
      };
     }
     __extendsftf2($4 | 0, Math_fround(Math_fround(Math_fround($9 | 0) * Math_fround(infinity))));
     i64toi32_i32$2 = $4 + 8 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $11 = i64toi32_i32$0;
     $11$hi = i64toi32_i32$1;
     i64toi32_i32$2 = $4;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $5 = i64toi32_i32$1;
     $5$hi = i64toi32_i32$0;
     break label$1;
    }
    label$19 : {
     label$20 : {
      label$21 : {
       if ($10) {
        break label$21
       }
       $10 = 0;
       label$22 : while (1) {
        if (($2 | 32 | 0 | 0) != (HEAP8[($10 + 5826 | 0) >> 0] | 0 | 0)) {
         break label$21
        }
        label$23 : {
         if ($10 >>> 0 > 1 >>> 0) {
          break label$23
         }
         label$24 : {
          $2 = HEAP32[($1 + 4 | 0) >> 2] | 0;
          if ($2 >>> 0 >= (HEAP32[($1 + 104 | 0) >> 2] | 0) >>> 0) {
           break label$24
          }
          HEAP32[$6 >> 2] = $2 + 1 | 0;
          $2 = HEAPU8[$2 >> 0] | 0;
          break label$23;
         }
         $2 = __shgetc($1 | 0) | 0;
        }
        $10 = $10 + 1 | 0;
        if (($10 | 0) != (3 | 0)) {
         continue label$22
        }
        break label$20;
       };
      }
      label$25 : {
       switch ($10 | 0) {
       case 0:
        label$27 : {
         if (($2 | 0) != (48 | 0)) {
          break label$27
         }
         label$28 : {
          label$29 : {
           $10 = HEAP32[($1 + 4 | 0) >> 2] | 0;
           if ($10 >>> 0 >= (HEAP32[($1 + 104 | 0) >> 2] | 0) >>> 0) {
            break label$29
           }
           HEAP32[$6 >> 2] = $10 + 1 | 0;
           $10 = HEAPU8[$10 >> 0] | 0;
           break label$28;
          }
          $10 = __shgetc($1 | 0) | 0;
         }
         label$30 : {
          if (($10 & -33 | 0 | 0) != (88 | 0)) {
           break label$30
          }
          hexfloat($4 + 16 | 0 | 0, $1 | 0, $8 | 0, $7 | 0, $9 | 0, $3 | 0);
          i64toi32_i32$2 = $4 + 24 | 0;
          i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
          i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
          $11 = i64toi32_i32$0;
          $11$hi = i64toi32_i32$1;
          i64toi32_i32$2 = $4;
          i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 16 | 0) >> 2] | 0;
          i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 20 | 0) >> 2] | 0;
          $5 = i64toi32_i32$1;
          $5$hi = i64toi32_i32$0;
          break label$1;
         }
         if (!(HEAP32[($1 + 104 | 0) >> 2] | 0)) {
          break label$27
         }
         HEAP32[$6 >> 2] = (HEAP32[$6 >> 2] | 0) + -1 | 0;
        }
        decfloat($4 + 32 | 0 | 0, $1 | 0, $2 | 0, $8 | 0, $7 | 0, $9 | 0, $3 | 0);
        i64toi32_i32$2 = $4 + 40 | 0;
        i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
        $11 = i64toi32_i32$0;
        $11$hi = i64toi32_i32$1;
        i64toi32_i32$2 = $4;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 32 | 0) >> 2] | 0;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 36 | 0) >> 2] | 0;
        $5 = i64toi32_i32$1;
        $5$hi = i64toi32_i32$0;
        break label$1;
       case 3:
        break label$20;
       default:
        break label$25;
       };
      }
      label$31 : {
       if (!(HEAP32[($1 + 104 | 0) >> 2] | 0)) {
        break label$31
       }
       HEAP32[$6 >> 2] = (HEAP32[$6 >> 2] | 0) + -1 | 0;
      }
      (wasm2js_i32$0 = __errno_location() | 0, wasm2js_i32$1 = 28), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
      break label$19;
     }
     label$32 : {
      label$33 : {
       $2 = HEAP32[($1 + 4 | 0) >> 2] | 0;
       if ($2 >>> 0 >= (HEAP32[($1 + 104 | 0) >> 2] | 0) >>> 0) {
        break label$33
       }
       HEAP32[$6 >> 2] = $2 + 1 | 0;
       $2 = HEAPU8[$2 >> 0] | 0;
       break label$32;
      }
      $2 = __shgetc($1 | 0) | 0;
     }
     label$34 : {
      label$35 : {
       if (($2 | 0) != (40 | 0)) {
        break label$35
       }
       $10 = 1;
       break label$34;
      }
      i64toi32_i32$0 = 2147450880;
      $11 = 0;
      $11$hi = i64toi32_i32$0;
      if (!(HEAP32[($1 + 104 | 0) >> 2] | 0)) {
       break label$1
      }
      HEAP32[$6 >> 2] = (HEAP32[$6 >> 2] | 0) + -1 | 0;
      break label$1;
     }
     label$36 : while (1) {
      label$37 : {
       label$38 : {
        $2 = HEAP32[($1 + 4 | 0) >> 2] | 0;
        if ($2 >>> 0 >= (HEAP32[($1 + 104 | 0) >> 2] | 0) >>> 0) {
         break label$38
        }
        HEAP32[$6 >> 2] = $2 + 1 | 0;
        $2 = HEAPU8[$2 >> 0] | 0;
        break label$37;
       }
       $2 = __shgetc($1 | 0) | 0;
      }
      $9 = $2 + -65 | 0;
      label$39 : {
       label$40 : {
        if (($2 + -48 | 0) >>> 0 < 10 >>> 0) {
         break label$40
        }
        if ($9 >>> 0 < 26 >>> 0) {
         break label$40
        }
        $9 = $2 + -97 | 0;
        if (($2 | 0) == (95 | 0)) {
         break label$40
        }
        if ($9 >>> 0 >= 26 >>> 0) {
         break label$39
        }
       }
       $10 = $10 + 1 | 0;
       continue label$36;
      }
      break label$36;
     };
     i64toi32_i32$0 = 2147450880;
     $11 = 0;
     $11$hi = i64toi32_i32$0;
     if (($2 | 0) == (41 | 0)) {
      break label$1
     }
     label$41 : {
      $2 = HEAP32[($1 + 104 | 0) >> 2] | 0;
      if (!$2) {
       break label$41
      }
      HEAP32[$6 >> 2] = (HEAP32[$6 >> 2] | 0) + -1 | 0;
     }
     label$42 : {
      if (!$3) {
       break label$42
      }
      if (!$10) {
       break label$1
      }
      label$43 : while (1) {
       $10 = $10 + -1 | 0;
       label$44 : {
        if (!$2) {
         break label$44
        }
        HEAP32[$6 >> 2] = (HEAP32[$6 >> 2] | 0) + -1 | 0;
       }
       if ($10) {
        continue label$43
       }
       break label$1;
      };
     }
     (wasm2js_i32$0 = __errno_location() | 0, wasm2js_i32$1 = 28), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
    }
    i64toi32_i32$0 = 0;
    $5 = 0;
    $5$hi = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    __shlim($1 | 0, 0 | 0, i64toi32_i32$0 | 0);
   }
   i64toi32_i32$0 = 0;
   $11 = 0;
   $11$hi = i64toi32_i32$0;
  }
  i64toi32_i32$0 = $5$hi;
  i64toi32_i32$1 = $0;
  HEAP32[i64toi32_i32$1 >> 2] = $5;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = $11$hi;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $11;
  HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$0;
  __stack_pointer = $4 + 48 | 0;
 }
 
 function hexfloat($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$5 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, i64toi32_i32$2 = 0, $6 = 0, i64toi32_i32$4 = 0, $7 = 0, $13$hi = 0, $17$hi = 0, $13 = 0, $17 = 0, $11$hi = 0, $14$hi = 0, $9$hi = 0, $11 = 0, $14 = 0, $15$hi = 0, $9 = 0, $12 = 0, $15 = 0, $8 = 0, $10 = 0, $20$hi = 0, $20 = 0, $16 = 0, $18 = 0, $19 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $133 = 0, $133$hi = 0, $137 = 0, $137$hi = 0, $142 = 0, $142$hi = 0, $146 = 0, $146$hi = 0, $164 = 0, $164$hi = 0, $168 = 0, $168$hi = 0, $253$hi = 0, $260$hi = 0, $269 = 0, $269$hi = 0, $273 = 0, $273$hi = 0, $277 = 0, $277$hi = 0, $281 = 0, $281$hi = 0, $291 = 0, $291$hi = 0, $308 = 0, $308$hi = 0, $312 = 0, $312$hi = 0, $317 = 0, $317$hi = 0, $319 = 0, $319$hi = 0, $337$hi = 0, $345 = 0, $346 = 0, $349$hi = 0, $373 = 0, $373$hi = 0, $377 = 0, $377$hi = 0, $393 = 0, $413 = 0, $413$hi = 0, $417 = 0, $417$hi = 0, $421 = 0, $421$hi = 0, $425 = 0, $425$hi = 0, $432 = 0, $432$hi = 0, $435 = 0, $435$hi = 0, $441 = 0, $441$hi = 0, $445 = 0, $445$hi = 0, $447 = 0, $447$hi = 0, $451 = 0, $451$hi = 0, $455 = 0, $455$hi = 0, $459 = 0, $459$hi = 0, $491 = 0, $491$hi = 0, $495 = 0, $495$hi = 0, $499 = 0, $499$hi = 0, $503 = 0, $503$hi = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $6 = __stack_pointer - 432 | 0;
  __stack_pointer = $6;
  label$1 : {
   label$2 : {
    $7 = HEAP32[($1 + 4 | 0) >> 2] | 0;
    if ($7 >>> 0 >= (HEAP32[($1 + 104 | 0) >> 2] | 0) >>> 0) {
     break label$2
    }
    HEAP32[($1 + 4 | 0) >> 2] = $7 + 1 | 0;
    $7 = HEAPU8[$7 >> 0] | 0;
    break label$1;
   }
   $7 = __shgetc($1 | 0) | 0;
  }
  $8 = 0;
  i64toi32_i32$0 = 0;
  $9 = 0;
  $9$hi = i64toi32_i32$0;
  $10 = 0;
  label$3 : {
   label$4 : {
    label$5 : {
     label$6 : while (1) {
      label$7 : {
       if (($7 | 0) == (48 | 0)) {
        break label$7
       }
       if (($7 | 0) != (46 | 0)) {
        break label$3
       }
       $7 = HEAP32[($1 + 4 | 0) >> 2] | 0;
       if ($7 >>> 0 >= (HEAP32[($1 + 104 | 0) >> 2] | 0) >>> 0) {
        break label$5
       }
       HEAP32[($1 + 4 | 0) >> 2] = $7 + 1 | 0;
       $7 = HEAPU8[$7 >> 0] | 0;
       break label$4;
      }
      label$8 : {
       $7 = HEAP32[($1 + 4 | 0) >> 2] | 0;
       if ($7 >>> 0 >= (HEAP32[($1 + 104 | 0) >> 2] | 0) >>> 0) {
        break label$8
       }
       $10 = 1;
       HEAP32[($1 + 4 | 0) >> 2] = $7 + 1 | 0;
       $7 = HEAPU8[$7 >> 0] | 0;
       continue label$6;
      }
      $10 = 1;
      $7 = __shgetc($1 | 0) | 0;
      continue label$6;
     };
    }
    $7 = __shgetc($1 | 0) | 0;
   }
   $8 = 1;
   i64toi32_i32$0 = 0;
   $9 = 0;
   $9$hi = i64toi32_i32$0;
   if (($7 | 0) != (48 | 0)) {
    break label$3
   }
   label$9 : while (1) {
    label$10 : {
     label$11 : {
      $7 = HEAP32[($1 + 4 | 0) >> 2] | 0;
      if ($7 >>> 0 >= (HEAP32[($1 + 104 | 0) >> 2] | 0) >>> 0) {
       break label$11
      }
      HEAP32[($1 + 4 | 0) >> 2] = $7 + 1 | 0;
      $7 = HEAPU8[$7 >> 0] | 0;
      break label$10;
     }
     $7 = __shgetc($1 | 0) | 0;
    }
    i64toi32_i32$0 = $9$hi;
    i64toi32_i32$2 = $9;
    i64toi32_i32$1 = -1;
    i64toi32_i32$3 = -1;
    i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
    i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    $9 = i64toi32_i32$4;
    $9$hi = i64toi32_i32$5;
    if (($7 | 0) == (48 | 0)) {
     continue label$9
    }
    break label$9;
   };
   $8 = 1;
   $10 = 1;
  }
  i64toi32_i32$5 = 1073676288;
  $11 = 0;
  $11$hi = i64toi32_i32$5;
  $12 = 0;
  i64toi32_i32$5 = 0;
  $13 = 0;
  $13$hi = i64toi32_i32$5;
  i64toi32_i32$5 = 0;
  $14 = 0;
  $14$hi = i64toi32_i32$5;
  i64toi32_i32$5 = 0;
  $15 = 0;
  $15$hi = i64toi32_i32$5;
  $16 = 0;
  i64toi32_i32$5 = 0;
  $17 = 0;
  $17$hi = i64toi32_i32$5;
  label$12 : {
   label$13 : {
    label$14 : while (1) {
     $18 = $7 | 32 | 0;
     label$15 : {
      label$16 : {
       $19 = $7 + -48 | 0;
       if ($19 >>> 0 < 10 >>> 0) {
        break label$16
       }
       label$17 : {
        if (($18 + -97 | 0) >>> 0 < 6 >>> 0) {
         break label$17
        }
        if (($7 | 0) != (46 | 0)) {
         break label$12
        }
       }
       if (($7 | 0) != (46 | 0)) {
        break label$16
       }
       if ($8) {
        break label$13
       }
       $8 = 1;
       i64toi32_i32$5 = $17$hi;
       $9 = $17;
       $9$hi = i64toi32_i32$5;
       break label$15;
      }
      $7 = ($7 | 0) > (57 | 0) ? $18 + -87 | 0 : $19;
      label$18 : {
       label$19 : {
        i64toi32_i32$5 = $17$hi;
        i64toi32_i32$0 = $17;
        i64toi32_i32$2 = 0;
        i64toi32_i32$3 = 7;
        if ((i64toi32_i32$5 | 0) > (i64toi32_i32$2 | 0)) {
         $107 = 1
        } else {
         if ((i64toi32_i32$5 | 0) >= (i64toi32_i32$2 | 0)) {
          if (i64toi32_i32$0 >>> 0 <= i64toi32_i32$3 >>> 0) {
           $108 = 0
          } else {
           $108 = 1
          }
          $109 = $108;
         } else {
          $109 = 0
         }
         $107 = $109;
        }
        if ($107) {
         break label$19
        }
        $12 = $7 + ($12 << 4 | 0) | 0;
        break label$18;
       }
       label$20 : {
        i64toi32_i32$0 = $17$hi;
        i64toi32_i32$3 = $17;
        i64toi32_i32$5 = 0;
        i64toi32_i32$2 = 28;
        if ((i64toi32_i32$0 | 0) > (i64toi32_i32$5 | 0)) {
         $110 = 1
        } else {
         if ((i64toi32_i32$0 | 0) >= (i64toi32_i32$5 | 0)) {
          if (i64toi32_i32$3 >>> 0 <= i64toi32_i32$2 >>> 0) {
           $111 = 0
          } else {
           $111 = 1
          }
          $112 = $111;
         } else {
          $112 = 0
         }
         $110 = $112;
        }
        if ($110) {
         break label$20
        }
        __floatsitf($6 + 48 | 0 | 0, $7 | 0);
        i64toi32_i32$3 = $15$hi;
        i64toi32_i32$3 = $11$hi;
        i64toi32_i32$3 = $15$hi;
        i64toi32_i32$0 = $11$hi;
        i64toi32_i32$2 = 0;
        i64toi32_i32$5 = 1073414144;
        __multf3($6 + 32 | 0 | 0, $15 | 0, i64toi32_i32$3 | 0, $11 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$5 | 0);
        i64toi32_i32$0 = $6;
        i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 32 | 0) >> 2] | 0;
        i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 36 | 0) >> 2] | 0;
        $15 = i64toi32_i32$5;
        $15$hi = i64toi32_i32$2;
        i64toi32_i32$0 = (i64toi32_i32$0 + 32 | 0) + 8 | 0;
        i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
        i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
        $11 = i64toi32_i32$2;
        $11$hi = i64toi32_i32$5;
        i64toi32_i32$0 = $6;
        i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 48 | 0) >> 2] | 0;
        i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 52 | 0) >> 2] | 0;
        $133 = i64toi32_i32$5;
        $133$hi = i64toi32_i32$2;
        i64toi32_i32$0 = (i64toi32_i32$0 + 48 | 0) + 8 | 0;
        i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
        i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
        $137 = i64toi32_i32$2;
        $137$hi = i64toi32_i32$5;
        i64toi32_i32$5 = $15$hi;
        i64toi32_i32$2 = $11$hi;
        i64toi32_i32$0 = $133$hi;
        i64toi32_i32$3 = $137$hi;
        __multf3($6 + 16 | 0 | 0, $15 | 0, i64toi32_i32$5 | 0, $11 | 0, i64toi32_i32$2 | 0, $133 | 0, i64toi32_i32$0 | 0, $137 | 0, i64toi32_i32$3 | 0);
        i64toi32_i32$3 = $13$hi;
        i64toi32_i32$3 = $14$hi;
        i64toi32_i32$2 = $6;
        i64toi32_i32$3 = HEAP32[($6 + 16 | 0) >> 2] | 0;
        i64toi32_i32$0 = HEAP32[($6 + 20 | 0) >> 2] | 0;
        $142 = i64toi32_i32$3;
        $142$hi = i64toi32_i32$0;
        i64toi32_i32$2 = ($6 + 16 | 0) + 8 | 0;
        i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
        i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
        $146 = i64toi32_i32$0;
        $146$hi = i64toi32_i32$3;
        i64toi32_i32$3 = $13$hi;
        i64toi32_i32$0 = $14$hi;
        i64toi32_i32$2 = $142$hi;
        i64toi32_i32$5 = $146$hi;
        __addtf3($6 | 0, $13 | 0, i64toi32_i32$3 | 0, $14 | 0, i64toi32_i32$0 | 0, $142 | 0, i64toi32_i32$2 | 0, $146 | 0, i64toi32_i32$5 | 0);
        i64toi32_i32$0 = $6 + 8 | 0;
        i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
        i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
        $14 = i64toi32_i32$5;
        $14$hi = i64toi32_i32$2;
        i64toi32_i32$0 = $6;
        i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
        i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
        $13 = i64toi32_i32$2;
        $13$hi = i64toi32_i32$5;
        break label$18;
       }
       if (!$7) {
        break label$18
       }
       if ($16) {
        break label$18
       }
       i64toi32_i32$5 = $15$hi;
       i64toi32_i32$5 = $11$hi;
       i64toi32_i32$5 = $15$hi;
       i64toi32_i32$2 = $11$hi;
       i64toi32_i32$0 = 0;
       i64toi32_i32$3 = 1073610752;
       __multf3($6 + 80 | 0 | 0, $15 | 0, i64toi32_i32$5 | 0, $11 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$3 | 0);
       i64toi32_i32$3 = $13$hi;
       i64toi32_i32$3 = $14$hi;
       i64toi32_i32$2 = $6;
       i64toi32_i32$3 = HEAP32[($6 + 80 | 0) >> 2] | 0;
       i64toi32_i32$0 = HEAP32[($6 + 84 | 0) >> 2] | 0;
       $164 = i64toi32_i32$3;
       $164$hi = i64toi32_i32$0;
       i64toi32_i32$2 = ($6 + 80 | 0) + 8 | 0;
       i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
       $168 = i64toi32_i32$0;
       $168$hi = i64toi32_i32$3;
       i64toi32_i32$3 = $13$hi;
       i64toi32_i32$0 = $14$hi;
       i64toi32_i32$2 = $164$hi;
       i64toi32_i32$5 = $168$hi;
       __addtf3($6 + 64 | 0 | 0, $13 | 0, i64toi32_i32$3 | 0, $14 | 0, i64toi32_i32$0 | 0, $164 | 0, i64toi32_i32$2 | 0, $168 | 0, i64toi32_i32$5 | 0);
       i64toi32_i32$0 = ($6 + 64 | 0) + 8 | 0;
       i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
       i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
       $14 = i64toi32_i32$5;
       $14$hi = i64toi32_i32$2;
       $16 = 1;
       i64toi32_i32$0 = $6;
       i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 64 | 0) >> 2] | 0;
       i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 68 | 0) >> 2] | 0;
       $13 = i64toi32_i32$2;
       $13$hi = i64toi32_i32$5;
      }
      i64toi32_i32$5 = $17$hi;
      i64toi32_i32$0 = $17;
      i64toi32_i32$2 = 0;
      i64toi32_i32$3 = 1;
      i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
      i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $17 = i64toi32_i32$1;
      $17$hi = i64toi32_i32$4;
      $10 = 1;
     }
     label$21 : {
      $7 = HEAP32[($1 + 4 | 0) >> 2] | 0;
      if ($7 >>> 0 >= (HEAP32[($1 + 104 | 0) >> 2] | 0) >>> 0) {
       break label$21
      }
      HEAP32[($1 + 4 | 0) >> 2] = $7 + 1 | 0;
      $7 = HEAPU8[$7 >> 0] | 0;
      continue label$14;
     }
     $7 = __shgetc($1 | 0) | 0;
     continue label$14;
    };
   }
   $7 = 46;
  }
  label$22 : {
   label$23 : {
    label$24 : {
     label$25 : {
      if ($10) {
       break label$25
      }
      label$26 : {
       if (HEAP32[($1 + 104 | 0) >> 2] | 0) {
        break label$26
       }
       if ($5) {
        break label$23
       }
       break label$24;
      }
      $7 = HEAP32[($1 + 4 | 0) >> 2] | 0;
      HEAP32[($1 + 4 | 0) >> 2] = $7 + -1 | 0;
      if (!$5) {
       break label$24
      }
      HEAP32[($1 + 4 | 0) >> 2] = $7 + -2 | 0;
      if (!$8) {
       break label$23
      }
      HEAP32[($1 + 4 | 0) >> 2] = $7 + -3 | 0;
      break label$23;
     }
     label$27 : {
      i64toi32_i32$4 = $17$hi;
      i64toi32_i32$5 = $17;
      i64toi32_i32$0 = 0;
      i64toi32_i32$3 = 7;
      if ((i64toi32_i32$4 | 0) > (i64toi32_i32$0 | 0)) {
       $113 = 1
      } else {
       if ((i64toi32_i32$4 | 0) >= (i64toi32_i32$0 | 0)) {
        if (i64toi32_i32$5 >>> 0 <= i64toi32_i32$3 >>> 0) {
         $114 = 0
        } else {
         $114 = 1
        }
        $115 = $114;
       } else {
        $115 = 0
       }
       $113 = $115;
      }
      if ($113) {
       break label$27
      }
      i64toi32_i32$5 = $17$hi;
      $11 = $17;
      $11$hi = i64toi32_i32$5;
      label$28 : while (1) {
       $12 = $12 << 4 | 0;
       i64toi32_i32$5 = $11$hi;
       i64toi32_i32$3 = $11;
       i64toi32_i32$4 = 0;
       i64toi32_i32$0 = 1;
       i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
       i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
       if (i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0) {
        i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
       }
       $11 = i64toi32_i32$2;
       $11$hi = i64toi32_i32$1;
       i64toi32_i32$5 = i64toi32_i32$2;
       i64toi32_i32$3 = 0;
       i64toi32_i32$0 = 8;
       if ((i64toi32_i32$5 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$3 | 0) | 0) {
        continue label$28
       }
       break label$28;
      };
     }
     label$29 : {
      label$30 : {
       label$31 : {
        label$32 : {
         if (($7 & -33 | 0 | 0) != (80 | 0)) {
          break label$32
         }
         i64toi32_i32$5 = scanexp($1 | 0, $5 | 0) | 0;
         i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
         $11 = i64toi32_i32$5;
         $11$hi = i64toi32_i32$1;
         i64toi32_i32$0 = i64toi32_i32$5;
         i64toi32_i32$5 = -2147483648;
         i64toi32_i32$3 = 0;
         if ((i64toi32_i32$0 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$5 | 0) | 0) {
          break label$29
         }
         label$33 : {
          if (!$5) {
           break label$33
          }
          if (HEAP32[($1 + 104 | 0) >> 2] | 0) {
           break label$31
          }
          break label$30;
         }
         i64toi32_i32$0 = 0;
         $13 = 0;
         $13$hi = i64toi32_i32$0;
         i64toi32_i32$0 = 0;
         __shlim($1 | 0, 0 | 0, i64toi32_i32$0 | 0);
         i64toi32_i32$0 = 0;
         $17 = 0;
         $17$hi = i64toi32_i32$0;
         break label$22;
        }
        if (!(HEAP32[($1 + 104 | 0) >> 2] | 0)) {
         break label$30
        }
       }
       HEAP32[($1 + 4 | 0) >> 2] = (HEAP32[($1 + 4 | 0) >> 2] | 0) + -1 | 0;
      }
      i64toi32_i32$0 = 0;
      $11 = 0;
      $11$hi = i64toi32_i32$0;
     }
     label$34 : {
      if ($12) {
       break label$34
      }
      __extenddftf2($6 + 112 | 0 | 0, +(+($4 | 0) * 0.0));
      i64toi32_i32$3 = $6 + 120 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$3 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
      $17 = i64toi32_i32$0;
      $17$hi = i64toi32_i32$1;
      i64toi32_i32$3 = $6;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 112 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 116 | 0) >> 2] | 0;
      $13 = i64toi32_i32$1;
      $13$hi = i64toi32_i32$0;
      break label$22;
     }
     label$35 : {
      i64toi32_i32$0 = $9$hi;
      i64toi32_i32$0 = $17$hi;
      i64toi32_i32$4 = $8;
      i64toi32_i32$0 = $9$hi;
      i64toi32_i32$1 = $17$hi;
      i64toi32_i32$5 = i64toi32_i32$4 ? $9 : $17;
      i64toi32_i32$3 = i64toi32_i32$4 ? i64toi32_i32$0 : i64toi32_i32$1;
      i64toi32_i32$4 = i64toi32_i32$5;
      i64toi32_i32$5 = 0;
      i64toi32_i32$0 = 2;
      i64toi32_i32$1 = i64toi32_i32$0 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$4 << i64toi32_i32$1 | 0;
       $116 = 0;
      } else {
       i64toi32_i32$5 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$4 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$1 | 0) | 0;
       $116 = i64toi32_i32$4 << i64toi32_i32$1 | 0;
      }
      $253$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $11$hi;
      i64toi32_i32$5 = $253$hi;
      i64toi32_i32$3 = $116;
      i64toi32_i32$4 = $11$hi;
      i64toi32_i32$0 = $11;
      i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
      i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
      }
      i64toi32_i32$5 = i64toi32_i32$1;
      i64toi32_i32$3 = -1;
      i64toi32_i32$0 = -32;
      i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
      i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
      }
      $17 = i64toi32_i32$4;
      $17$hi = i64toi32_i32$1;
      i64toi32_i32$1 = 0;
      $260$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $17$hi;
      i64toi32_i32$2 = i64toi32_i32$4;
      i64toi32_i32$5 = $260$hi;
      i64toi32_i32$0 = 0 - $3 | 0;
      if ((i64toi32_i32$1 | 0) < (i64toi32_i32$5 | 0)) {
       $117 = 1
      } else {
       if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$5 | 0)) {
        if (i64toi32_i32$2 >>> 0 > i64toi32_i32$0 >>> 0) {
         $118 = 0
        } else {
         $118 = 1
        }
        $119 = $118;
       } else {
        $119 = 0
       }
       $117 = $119;
      }
      if ($117) {
       break label$35
      }
      (wasm2js_i32$0 = __errno_location() | 0, wasm2js_i32$1 = 68), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
      __floatsitf($6 + 160 | 0 | 0, $4 | 0);
      i64toi32_i32$0 = $6;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 160 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 164 | 0) >> 2] | 0;
      $269 = i64toi32_i32$2;
      $269$hi = i64toi32_i32$1;
      i64toi32_i32$0 = (i64toi32_i32$0 + 160 | 0) + 8 | 0;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$0 >> 2] | 0;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
      $273 = i64toi32_i32$1;
      $273$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $269$hi;
      i64toi32_i32$1 = $273$hi;
      i64toi32_i32$0 = -1;
      i64toi32_i32$5 = 2147418111;
      __multf3($6 + 144 | 0 | 0, $269 | 0, i64toi32_i32$2 | 0, $273 | 0, i64toi32_i32$1 | 0, -1 | 0, i64toi32_i32$0 | 0, -1 | 0, i64toi32_i32$5 | 0);
      i64toi32_i32$1 = $6;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 144 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 148 | 0) >> 2] | 0;
      $277 = i64toi32_i32$5;
      $277$hi = i64toi32_i32$0;
      i64toi32_i32$1 = (i64toi32_i32$1 + 144 | 0) + 8 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$1 >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
      $281 = i64toi32_i32$0;
      $281$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $277$hi;
      i64toi32_i32$0 = $281$hi;
      i64toi32_i32$1 = -1;
      i64toi32_i32$2 = 2147418111;
      __multf3($6 + 128 | 0 | 0, $277 | 0, i64toi32_i32$5 | 0, $281 | 0, i64toi32_i32$0 | 0, -1 | 0, i64toi32_i32$1 | 0, -1 | 0, i64toi32_i32$2 | 0);
      i64toi32_i32$0 = ($6 + 128 | 0) + 8 | 0;
      i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
      $17 = i64toi32_i32$2;
      $17$hi = i64toi32_i32$1;
      i64toi32_i32$0 = $6;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 128 | 0) >> 2] | 0;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 132 | 0) >> 2] | 0;
      $13 = i64toi32_i32$1;
      $13$hi = i64toi32_i32$2;
      break label$22;
     }
     label$36 : {
      i64toi32_i32$2 = $17$hi;
      i64toi32_i32$1 = $3 + -226 | 0;
      i64toi32_i32$2 = i64toi32_i32$1 >> 31 | 0;
      $291 = i64toi32_i32$1;
      $291$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $17$hi;
      i64toi32_i32$0 = $17;
      i64toi32_i32$1 = $291$hi;
      i64toi32_i32$5 = $291;
      if ((i64toi32_i32$2 | 0) < (i64toi32_i32$1 | 0)) {
       $120 = 1
      } else {
       if ((i64toi32_i32$2 | 0) <= (i64toi32_i32$1 | 0)) {
        if (i64toi32_i32$0 >>> 0 >= i64toi32_i32$5 >>> 0) {
         $121 = 0
        } else {
         $121 = 1
        }
        $122 = $121;
       } else {
        $122 = 0
       }
       $120 = $122;
      }
      if ($120) {
       break label$36
      }
      label$37 : {
       if (($12 | 0) <= (-1 | 0)) {
        break label$37
       }
       label$38 : while (1) {
        i64toi32_i32$0 = $13$hi;
        i64toi32_i32$0 = $14$hi;
        i64toi32_i32$0 = $13$hi;
        i64toi32_i32$2 = $14$hi;
        i64toi32_i32$5 = 0;
        i64toi32_i32$1 = -1073807360;
        __addtf3($6 + 416 | 0 | 0, $13 | 0, i64toi32_i32$0 | 0, $14 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$5 | 0, 0 | 0, i64toi32_i32$1 | 0);
        i64toi32_i32$1 = i64toi32_i32$0;
        i64toi32_i32$1 = i64toi32_i32$2;
        i64toi32_i32$1 = i64toi32_i32$0;
        i64toi32_i32$5 = i64toi32_i32$2;
        i64toi32_i32$2 = 0;
        i64toi32_i32$0 = 1073610752;
        $7 = __getf2($13 | 0, i64toi32_i32$1 | 0, $14 | 0, i64toi32_i32$5 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$0 | 0) | 0;
        i64toi32_i32$0 = i64toi32_i32$1;
        i64toi32_i32$0 = i64toi32_i32$5;
        i64toi32_i32$0 = i64toi32_i32$1;
        i64toi32_i32$5 = $6;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 416 | 0) >> 2] | 0;
        i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 420 | 0) >> 2] | 0;
        $308 = i64toi32_i32$0;
        $308$hi = i64toi32_i32$2;
        $1 = ($7 | 0) < (0 | 0);
        i64toi32_i32$3 = $1;
        i64toi32_i32$2 = i64toi32_i32$1;
        i64toi32_i32$0 = $308$hi;
        i64toi32_i32$1 = i64toi32_i32$3 ? $13 : $308;
        i64toi32_i32$5 = i64toi32_i32$3 ? i64toi32_i32$2 : i64toi32_i32$0;
        $312 = i64toi32_i32$1;
        $312$hi = i64toi32_i32$5;
        i64toi32_i32$5 = $14$hi;
        i64toi32_i32$3 = ($6 + 416 | 0) + 8 | 0;
        i64toi32_i32$5 = HEAP32[i64toi32_i32$3 >> 2] | 0;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
        $317 = i64toi32_i32$5;
        $317$hi = i64toi32_i32$1;
        i64toi32_i32$0 = $1;
        i64toi32_i32$1 = $14$hi;
        i64toi32_i32$5 = $317$hi;
        i64toi32_i32$2 = i64toi32_i32$0 ? $14 : $317;
        i64toi32_i32$3 = i64toi32_i32$0 ? i64toi32_i32$1 : i64toi32_i32$5;
        $319 = i64toi32_i32$2;
        $319$hi = i64toi32_i32$3;
        i64toi32_i32$3 = $13$hi;
        i64toi32_i32$2 = i64toi32_i32$1;
        i64toi32_i32$0 = $312$hi;
        i64toi32_i32$1 = $319$hi;
        __addtf3($6 + 400 | 0 | 0, $13 | 0, i64toi32_i32$3 | 0, $14 | 0, i64toi32_i32$2 | 0, $312 | 0, i64toi32_i32$0 | 0, $319 | 0, i64toi32_i32$1 | 0);
        i64toi32_i32$1 = $17$hi;
        i64toi32_i32$2 = $17;
        i64toi32_i32$0 = -1;
        i64toi32_i32$3 = -1;
        i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
        i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
        if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
         i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
        }
        $17 = i64toi32_i32$5;
        $17$hi = i64toi32_i32$4;
        i64toi32_i32$1 = ($6 + 400 | 0) + 8 | 0;
        i64toi32_i32$4 = HEAP32[i64toi32_i32$1 >> 2] | 0;
        i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
        $14 = i64toi32_i32$4;
        $14$hi = i64toi32_i32$2;
        i64toi32_i32$1 = $6;
        i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 400 | 0) >> 2] | 0;
        i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 404 | 0) >> 2] | 0;
        $13 = i64toi32_i32$2;
        $13$hi = i64toi32_i32$4;
        $12 = $12 << 1 | 0 | ($7 | 0) > (-1 | 0) | 0;
        if (($12 | 0) > (-1 | 0)) {
         continue label$38
        }
        break label$38;
       };
      }
      label$39 : {
       label$40 : {
        i64toi32_i32$4 = $17$hi;
        i64toi32_i32$2 = $3;
        i64toi32_i32$4 = i64toi32_i32$2 >> 31 | 0;
        $337$hi = i64toi32_i32$4;
        i64toi32_i32$4 = $17$hi;
        i64toi32_i32$1 = $17;
        i64toi32_i32$2 = $337$hi;
        i64toi32_i32$3 = $3;
        i64toi32_i32$0 = i64toi32_i32$1 - i64toi32_i32$3 | 0;
        i64toi32_i32$5 = (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) + i64toi32_i32$2 | 0;
        i64toi32_i32$5 = i64toi32_i32$4 - i64toi32_i32$5 | 0;
        i64toi32_i32$4 = i64toi32_i32$0;
        i64toi32_i32$1 = 0;
        i64toi32_i32$3 = 32;
        i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
        i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
        if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
         i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
        }
        $9 = i64toi32_i32$2;
        $9$hi = i64toi32_i32$0;
        $7 = i64toi32_i32$2;
        $345 = (i64toi32_i32$2 | 0) > (0 | 0) ? i64toi32_i32$2 : 0;
        $346 = $2;
        i64toi32_i32$0 = 0;
        $349$hi = i64toi32_i32$0;
        i64toi32_i32$0 = $9$hi;
        i64toi32_i32$5 = i64toi32_i32$2;
        i64toi32_i32$4 = $349$hi;
        i64toi32_i32$3 = $2;
        if ((i64toi32_i32$0 | 0) < (i64toi32_i32$4 | 0)) {
         $123 = 1
        } else {
         if ((i64toi32_i32$0 | 0) <= (i64toi32_i32$4 | 0)) {
          if (i64toi32_i32$5 >>> 0 >= i64toi32_i32$3 >>> 0) {
           $124 = 0
          } else {
           $124 = 1
          }
          $125 = $124;
         } else {
          $125 = 0
         }
         $123 = $125;
        }
        $7 = $123 ? $345 : $346;
        if (($7 | 0) < (113 | 0)) {
         break label$40
        }
        __floatsitf($6 + 384 | 0 | 0, $4 | 0);
        i64toi32_i32$3 = $6 + 392 | 0;
        i64toi32_i32$5 = HEAP32[i64toi32_i32$3 >> 2] | 0;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
        $9 = i64toi32_i32$5;
        $9$hi = i64toi32_i32$0;
        i64toi32_i32$0 = 0;
        $11 = 0;
        $11$hi = i64toi32_i32$0;
        i64toi32_i32$3 = $6;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 384 | 0) >> 2] | 0;
        i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 388 | 0) >> 2] | 0;
        $15 = i64toi32_i32$0;
        $15$hi = i64toi32_i32$5;
        i64toi32_i32$5 = 0;
        $20 = 0;
        $20$hi = i64toi32_i32$5;
        break label$39;
       }
       __extenddftf2($6 + 352 | 0 | 0, +(+scalbn(+(1.0), 144 - $7 | 0 | 0)));
       __floatsitf($6 + 336 | 0 | 0, $4 | 0);
       i64toi32_i32$3 = $6;
       i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 352 | 0) >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 356 | 0) >> 2] | 0;
       $373 = i64toi32_i32$5;
       $373$hi = i64toi32_i32$0;
       i64toi32_i32$3 = (i64toi32_i32$3 + 352 | 0) + 8 | 0;
       i64toi32_i32$0 = HEAP32[i64toi32_i32$3 >> 2] | 0;
       i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
       $377 = i64toi32_i32$0;
       $377$hi = i64toi32_i32$5;
       i64toi32_i32$3 = $6;
       i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 336 | 0) >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 340 | 0) >> 2] | 0;
       $15 = i64toi32_i32$5;
       $15$hi = i64toi32_i32$0;
       i64toi32_i32$3 = (i64toi32_i32$3 + 336 | 0) + 8 | 0;
       i64toi32_i32$0 = HEAP32[i64toi32_i32$3 >> 2] | 0;
       i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
       $9 = i64toi32_i32$0;
       $9$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $373$hi;
       i64toi32_i32$0 = $377$hi;
       i64toi32_i32$3 = $15$hi;
       i64toi32_i32$4 = $9$hi;
       copysignl($6 + 368 | 0 | 0, $373 | 0, i64toi32_i32$5 | 0, $377 | 0, i64toi32_i32$0 | 0, $15 | 0, i64toi32_i32$3 | 0, $9 | 0, i64toi32_i32$4 | 0);
       i64toi32_i32$0 = ($6 + 368 | 0) + 8 | 0;
       i64toi32_i32$4 = HEAP32[i64toi32_i32$0 >> 2] | 0;
       i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
       $20 = i64toi32_i32$4;
       $20$hi = i64toi32_i32$3;
       i64toi32_i32$0 = $6;
       i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 368 | 0) >> 2] | 0;
       i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 372 | 0) >> 2] | 0;
       $11 = i64toi32_i32$3;
       $11$hi = i64toi32_i32$4;
      }
      $393 = $6 + 320 | 0;
      i64toi32_i32$4 = $13$hi;
      i64toi32_i32$4 = $14$hi;
      i64toi32_i32$4 = $13$hi;
      i64toi32_i32$3 = $14$hi;
      i64toi32_i32$0 = 0;
      i64toi32_i32$5 = 0;
      $7 = (($7 | 0) < (32 | 0) & (__letf2($13 | 0, i64toi32_i32$4 | 0, $14 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$5 | 0) | 0 | 0) != (0 | 0) | 0) & !($12 & 1 | 0) | 0;
      __floatunsitf($393 | 0, $12 + $7 | 0 | 0);
      i64toi32_i32$5 = $15$hi;
      i64toi32_i32$5 = $9$hi;
      i64toi32_i32$3 = $6;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 320 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 324 | 0) >> 2] | 0;
      $413 = i64toi32_i32$5;
      $413$hi = i64toi32_i32$0;
      i64toi32_i32$3 = (i64toi32_i32$3 + 320 | 0) + 8 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$3 >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
      $417 = i64toi32_i32$0;
      $417$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $15$hi;
      i64toi32_i32$0 = $9$hi;
      i64toi32_i32$3 = $413$hi;
      i64toi32_i32$4 = $417$hi;
      __multf3($6 + 304 | 0 | 0, $15 | 0, i64toi32_i32$5 | 0, $9 | 0, i64toi32_i32$0 | 0, $413 | 0, i64toi32_i32$3 | 0, $417 | 0, i64toi32_i32$4 | 0);
      i64toi32_i32$0 = $6;
      i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 304 | 0) >> 2] | 0;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 308 | 0) >> 2] | 0;
      $421 = i64toi32_i32$4;
      $421$hi = i64toi32_i32$3;
      i64toi32_i32$0 = (i64toi32_i32$0 + 304 | 0) + 8 | 0;
      i64toi32_i32$3 = HEAP32[i64toi32_i32$0 >> 2] | 0;
      i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
      $425 = i64toi32_i32$3;
      $425$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $11$hi;
      i64toi32_i32$4 = $20$hi;
      i64toi32_i32$4 = $421$hi;
      i64toi32_i32$3 = $425$hi;
      i64toi32_i32$0 = $11$hi;
      i64toi32_i32$5 = $20$hi;
      __addtf3($6 + 272 | 0 | 0, $421 | 0, i64toi32_i32$4 | 0, $425 | 0, i64toi32_i32$3 | 0, $11 | 0, i64toi32_i32$0 | 0, $20 | 0, i64toi32_i32$5 | 0);
      i64toi32_i32$5 = $13$hi;
      i64toi32_i32$1 = $7;
      i64toi32_i32$5 = 0;
      i64toi32_i32$0 = $13$hi;
      i64toi32_i32$4 = i64toi32_i32$1 ? 0 : $13;
      i64toi32_i32$3 = i64toi32_i32$1 ? i64toi32_i32$5 : i64toi32_i32$0;
      $432 = i64toi32_i32$4;
      $432$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $14$hi;
      i64toi32_i32$0 = i64toi32_i32$1;
      i64toi32_i32$3 = 0;
      i64toi32_i32$4 = $14$hi;
      i64toi32_i32$5 = i64toi32_i32$0 ? 0 : $14;
      i64toi32_i32$1 = i64toi32_i32$0 ? i64toi32_i32$3 : i64toi32_i32$4;
      $435 = i64toi32_i32$5;
      $435$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $15$hi;
      i64toi32_i32$1 = $9$hi;
      i64toi32_i32$1 = $432$hi;
      i64toi32_i32$5 = $435$hi;
      i64toi32_i32$0 = $15$hi;
      i64toi32_i32$3 = $9$hi;
      __multf3($6 + 288 | 0 | 0, $432 | 0, i64toi32_i32$1 | 0, $435 | 0, i64toi32_i32$5 | 0, $15 | 0, i64toi32_i32$0 | 0, $9 | 0, i64toi32_i32$3 | 0);
      i64toi32_i32$5 = $6;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$5 + 288 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 292 | 0) >> 2] | 0;
      $441 = i64toi32_i32$3;
      $441$hi = i64toi32_i32$0;
      i64toi32_i32$5 = (i64toi32_i32$5 + 288 | 0) + 8 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$5 >> 2] | 0;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
      $445 = i64toi32_i32$0;
      $445$hi = i64toi32_i32$3;
      i64toi32_i32$5 = $6;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$5 + 272 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 276 | 0) >> 2] | 0;
      $447 = i64toi32_i32$3;
      $447$hi = i64toi32_i32$0;
      i64toi32_i32$5 = (i64toi32_i32$5 + 272 | 0) + 8 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$5 >> 2] | 0;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
      $451 = i64toi32_i32$0;
      $451$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $441$hi;
      i64toi32_i32$0 = $445$hi;
      i64toi32_i32$5 = $447$hi;
      i64toi32_i32$1 = $451$hi;
      __addtf3($6 + 256 | 0 | 0, $441 | 0, i64toi32_i32$3 | 0, $445 | 0, i64toi32_i32$0 | 0, $447 | 0, i64toi32_i32$5 | 0, $451 | 0, i64toi32_i32$1 | 0);
      i64toi32_i32$0 = $6;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 256 | 0) >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 260 | 0) >> 2] | 0;
      $455 = i64toi32_i32$1;
      $455$hi = i64toi32_i32$5;
      i64toi32_i32$0 = (i64toi32_i32$0 + 256 | 0) + 8 | 0;
      i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
      $459 = i64toi32_i32$5;
      $459$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $11$hi;
      i64toi32_i32$1 = $20$hi;
      i64toi32_i32$1 = $455$hi;
      i64toi32_i32$5 = $459$hi;
      i64toi32_i32$0 = $11$hi;
      i64toi32_i32$3 = $20$hi;
      __subtf3($6 + 240 | 0 | 0, $455 | 0, i64toi32_i32$1 | 0, $459 | 0, i64toi32_i32$5 | 0, $11 | 0, i64toi32_i32$0 | 0, $20 | 0, i64toi32_i32$3 | 0);
      label$41 : {
       i64toi32_i32$5 = $6;
       i64toi32_i32$3 = HEAP32[(i64toi32_i32$5 + 240 | 0) >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 244 | 0) >> 2] | 0;
       $13 = i64toi32_i32$3;
       $13$hi = i64toi32_i32$0;
       i64toi32_i32$5 = (i64toi32_i32$5 + 240 | 0) + 8 | 0;
       i64toi32_i32$0 = HEAP32[i64toi32_i32$5 >> 2] | 0;
       i64toi32_i32$3 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
       $14 = i64toi32_i32$0;
       $14$hi = i64toi32_i32$3;
       i64toi32_i32$3 = $13$hi;
       i64toi32_i32$0 = $14$hi;
       i64toi32_i32$5 = 0;
       i64toi32_i32$1 = 0;
       if (__letf2($13 | 0, i64toi32_i32$3 | 0, $14 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$5 | 0, 0 | 0, i64toi32_i32$1 | 0) | 0) {
        break label$41
       }
       (wasm2js_i32$0 = __errno_location() | 0, wasm2js_i32$1 = 68), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
      }
      i64toi32_i32$1 = $13$hi;
      i64toi32_i32$1 = $14$hi;
      i64toi32_i32$1 = $17$hi;
      i64toi32_i32$1 = $13$hi;
      i64toi32_i32$5 = $14$hi;
      scalbnl($6 + 224 | 0 | 0, $13 | 0, i64toi32_i32$1 | 0, $14 | 0, i64toi32_i32$5 | 0, $17 | 0);
      i64toi32_i32$0 = ($6 + 224 | 0) + 8 | 0;
      i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
      $17 = i64toi32_i32$5;
      $17$hi = i64toi32_i32$1;
      i64toi32_i32$0 = $6;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 224 | 0) >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 228 | 0) >> 2] | 0;
      $13 = i64toi32_i32$1;
      $13$hi = i64toi32_i32$5;
      break label$22;
     }
     (wasm2js_i32$0 = __errno_location() | 0, wasm2js_i32$1 = 68), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
     __floatsitf($6 + 208 | 0 | 0, $4 | 0);
     i64toi32_i32$0 = $6;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 208 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 212 | 0) >> 2] | 0;
     $491 = i64toi32_i32$5;
     $491$hi = i64toi32_i32$1;
     i64toi32_i32$0 = (i64toi32_i32$0 + 208 | 0) + 8 | 0;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$0 >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
     $495 = i64toi32_i32$1;
     $495$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $491$hi;
     i64toi32_i32$1 = $495$hi;
     i64toi32_i32$0 = 0;
     i64toi32_i32$3 = 65536;
     __multf3($6 + 192 | 0 | 0, $491 | 0, i64toi32_i32$5 | 0, $495 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$3 | 0);
     i64toi32_i32$1 = $6;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 192 | 0) >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 196 | 0) >> 2] | 0;
     $499 = i64toi32_i32$3;
     $499$hi = i64toi32_i32$0;
     i64toi32_i32$1 = (i64toi32_i32$1 + 192 | 0) + 8 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$1 >> 2] | 0;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
     $503 = i64toi32_i32$0;
     $503$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $499$hi;
     i64toi32_i32$0 = $503$hi;
     i64toi32_i32$1 = 0;
     i64toi32_i32$5 = 65536;
     __multf3($6 + 176 | 0 | 0, $499 | 0, i64toi32_i32$3 | 0, $503 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$5 | 0);
     i64toi32_i32$0 = ($6 + 176 | 0) + 8 | 0;
     i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
     $17 = i64toi32_i32$5;
     $17$hi = i64toi32_i32$1;
     i64toi32_i32$0 = $6;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 176 | 0) >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 180 | 0) >> 2] | 0;
     $13 = i64toi32_i32$1;
     $13$hi = i64toi32_i32$5;
     break label$22;
    }
    i64toi32_i32$5 = 0;
    __shlim($1 | 0, 0 | 0, i64toi32_i32$5 | 0);
   }
   __extenddftf2($6 + 96 | 0 | 0, +(+($4 | 0) * 0.0));
   i64toi32_i32$0 = $6 + 104 | 0;
   i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
   $17 = i64toi32_i32$5;
   $17$hi = i64toi32_i32$1;
   i64toi32_i32$0 = $6;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 96 | 0) >> 2] | 0;
   i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 100 | 0) >> 2] | 0;
   $13 = i64toi32_i32$1;
   $13$hi = i64toi32_i32$5;
  }
  i64toi32_i32$5 = $13$hi;
  i64toi32_i32$1 = $0;
  HEAP32[i64toi32_i32$1 >> 2] = $13;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$5;
  i64toi32_i32$5 = $17$hi;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $17;
  HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$5;
  __stack_pointer = $6 + 432 | 0;
 }
 
 function decfloat($0, $1, $2, $3, $4, $5, $6) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  var i64toi32_i32$1 = 0, $7 = 0, i64toi32_i32$5 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, i64toi32_i32$2 = 0, $11$hi = 0, i64toi32_i32$0 = 0, $11 = 0, $16 = 0, $15$hi = 0, $14 = 0, $15 = 0, $8 = 0, $12 = 0, $17 = 0, $22$hi = 0, $20$hi = 0, $13 = 0, $22 = 0, $20 = 0, $18 = 0, $23$hi = 0, $24$hi = 0, $23 = 0, $24 = 0, $19 = 0, $9 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $21 = 0, $25 = 0.0, $10 = 0, $128 = 0, $236 = 0, $236$hi = 0, $240 = 0, $240$hi = 0, $242 = 0, $242$hi = 0, $246 = 0, $246$hi = 0, $256$hi = 0, $265 = 0, $265$hi = 0, $269 = 0, $269$hi = 0, $273 = 0, $273$hi = 0, $277 = 0, $277$hi = 0, $287 = 0, $287$hi = 0, $296 = 0, $296$hi = 0, $300 = 0, $300$hi = 0, $304 = 0, $304$hi = 0, $308 = 0, $308$hi = 0, $357 = 0, $357$hi = 0, $361 = 0, $361$hi = 0, $363 = 0, $363$hi = 0, $367 = 0, $367$hi = 0, $386 = 0, $386$hi = 0, $390 = 0, $390$hi = 0, $392 = 0, $392$hi = 0, $396 = 0, $396$hi = 0, $407 = 0, $407$hi = 0, $411 = 0, $411$hi = 0, $413 = 0, $413$hi = 0, $417 = 0, $417$hi = 0, $445 = 0, $445$hi = 0, $449 = 0, $449$hi = 0, $451 = 0, $451$hi = 0, $455 = 0, $455$hi = 0, $465 = 0, $465$hi = 0, $469 = 0, $469$hi = 0, $471 = 0, $471$hi = 0, $475 = 0, $475$hi = 0, $514 = 0, $590$hi = 0, $592$hi = 0, $600 = 0, $600$hi = 0, $646 = 0, $648 = 0, $742 = 0, $742$hi = 0, $746 = 0, $746$hi = 0, $748 = 0, $748$hi = 0, $752 = 0, $752$hi = 0, $771 = 0, $771$hi = 0, $775 = 0, $775$hi = 0, $817 = 0, $879 = 0, $879$hi = 0, $883 = 0, $883$hi = 0, $902 = 0, $902$hi = 0, $906 = 0, $906$hi = 0, $924 = 0, $924$hi = 0, $928 = 0, $928$hi = 0, $965 = 0, $965$hi = 0, $969 = 0, $969$hi = 0, $988 = 0, $988$hi = 0, $992 = 0, $992$hi = 0, $1015 = 0, $1015$hi = 0, $1019 = 0, $1019$hi = 0, $1035 = 0, $1035$hi = 0, $1039 = 0, $1039$hi = 0, $1053 = 0, $1053$hi = 0, $1057 = 0, $1057$hi = 0, $1078 = 0, $1078$hi = 0, $1082 = 0, $1082$hi = 0, $1117 = 0, $1117$hi = 0, $1124 = 0, $1124$hi = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $7 = __stack_pointer - 8976 | 0;
  __stack_pointer = $7;
  $8 = 0;
  $9 = $4 + $3 | 0;
  $10 = 0 - $9 | 0;
  i64toi32_i32$0 = 0;
  $11 = 0;
  $11$hi = i64toi32_i32$0;
  $12 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : while (1) {
      label$5 : {
       if (($2 | 0) == (48 | 0)) {
        break label$5
       }
       if (($2 | 0) != (46 | 0)) {
        break label$1
       }
       $2 = HEAP32[($1 + 4 | 0) >> 2] | 0;
       if ($2 >>> 0 >= (HEAP32[($1 + 104 | 0) >> 2] | 0) >>> 0) {
        break label$3
       }
       HEAP32[($1 + 4 | 0) >> 2] = $2 + 1 | 0;
       $2 = HEAPU8[$2 >> 0] | 0;
       break label$2;
      }
      label$6 : {
       $2 = HEAP32[($1 + 4 | 0) >> 2] | 0;
       if ($2 >>> 0 >= (HEAP32[($1 + 104 | 0) >> 2] | 0) >>> 0) {
        break label$6
       }
       $12 = 1;
       HEAP32[($1 + 4 | 0) >> 2] = $2 + 1 | 0;
       $2 = HEAPU8[$2 >> 0] | 0;
       continue label$4;
      }
      $12 = 1;
      $2 = __shgetc($1 | 0) | 0;
      continue label$4;
     };
    }
    $2 = __shgetc($1 | 0) | 0;
   }
   $8 = 1;
   i64toi32_i32$0 = 0;
   $11 = 0;
   $11$hi = i64toi32_i32$0;
   if (($2 | 0) != (48 | 0)) {
    break label$1
   }
   label$7 : while (1) {
    label$8 : {
     label$9 : {
      $2 = HEAP32[($1 + 4 | 0) >> 2] | 0;
      if ($2 >>> 0 >= (HEAP32[($1 + 104 | 0) >> 2] | 0) >>> 0) {
       break label$9
      }
      HEAP32[($1 + 4 | 0) >> 2] = $2 + 1 | 0;
      $2 = HEAPU8[$2 >> 0] | 0;
      break label$8;
     }
     $2 = __shgetc($1 | 0) | 0;
    }
    i64toi32_i32$0 = $11$hi;
    i64toi32_i32$2 = $11;
    i64toi32_i32$1 = -1;
    i64toi32_i32$3 = -1;
    i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
    i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    $11 = i64toi32_i32$4;
    $11$hi = i64toi32_i32$5;
    if (($2 | 0) == (48 | 0)) {
     continue label$7
    }
    break label$7;
   };
   $12 = 1;
   $8 = 1;
  }
  $13 = 0;
  HEAP32[($7 + 784 | 0) >> 2] = 0;
  $14 = $2 + -48 | 0;
  i64toi32_i32$5 = 0;
  $15 = 0;
  $15$hi = i64toi32_i32$5;
  label$10 : {
   label$11 : {
    label$12 : {
     label$13 : {
      label$14 : {
       label$15 : {
        label$16 : {
         label$17 : {
          label$18 : {
           $16 = ($2 | 0) == (46 | 0);
           if (!$16) {
            break label$18
           }
           $17 = 0;
           $18 = 0;
           break label$17;
          }
          $17 = 0;
          $18 = 0;
          if ($14 >>> 0 > 9 >>> 0) {
           break label$16
          }
         }
         label$19 : while (1) {
          label$20 : {
           label$21 : {
            if (!($16 & 1 | 0)) {
             break label$21
            }
            label$22 : {
             if ($8) {
              break label$22
             }
             i64toi32_i32$5 = $15$hi;
             $11 = $15;
             $11$hi = i64toi32_i32$5;
             $8 = 1;
             break label$20;
            }
            $16 = !$12;
            break label$15;
           }
           i64toi32_i32$5 = $15$hi;
           i64toi32_i32$0 = $15;
           i64toi32_i32$2 = 0;
           i64toi32_i32$3 = 1;
           i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
           i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
           if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
            i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
           }
           $15 = i64toi32_i32$1;
           $15$hi = i64toi32_i32$4;
           label$23 : {
            if (($17 | 0) > (2044 | 0)) {
             break label$23
            }
            $12 = ($2 | 0) == (48 | 0);
            i64toi32_i32$4 = $15$hi;
            $19 = $15;
            $16 = ($7 + 784 | 0) + ($17 << 2 | 0) | 0;
            label$24 : {
             if (!$13) {
              break label$24
             }
             $14 = ($2 + Math_imul(HEAP32[$16 >> 2] | 0, 10) | 0) + -48 | 0;
            }
            $18 = $12 ? $18 : $19;
            HEAP32[$16 >> 2] = $14;
            $12 = 1;
            $2 = $13 + 1 | 0;
            $128 = $2;
            $2 = ($2 | 0) == (9 | 0);
            $13 = $2 ? 0 : $128;
            $17 = $17 + $2 | 0;
            break label$20;
           }
           if (($2 | 0) == (48 | 0)) {
            break label$20
           }
           HEAP32[($7 + 8960 | 0) >> 2] = HEAP32[($7 + 8960 | 0) >> 2] | 0 | 1 | 0;
           $18 = 18396;
          }
          label$25 : {
           label$26 : {
            $2 = HEAP32[($1 + 4 | 0) >> 2] | 0;
            if ($2 >>> 0 >= (HEAP32[($1 + 104 | 0) >> 2] | 0) >>> 0) {
             break label$26
            }
            HEAP32[($1 + 4 | 0) >> 2] = $2 + 1 | 0;
            $2 = HEAPU8[$2 >> 0] | 0;
            break label$25;
           }
           $2 = __shgetc($1 | 0) | 0;
          }
          $14 = $2 + -48 | 0;
          $16 = ($2 | 0) == (46 | 0);
          if ($16) {
           continue label$19
          }
          if ($14 >>> 0 < 10 >>> 0) {
           continue label$19
          }
          break label$19;
         };
        }
        i64toi32_i32$4 = $11$hi;
        i64toi32_i32$4 = $15$hi;
        i64toi32_i32$2 = $8;
        i64toi32_i32$4 = $11$hi;
        i64toi32_i32$0 = $15$hi;
        i64toi32_i32$3 = i64toi32_i32$2 ? $11 : $15;
        i64toi32_i32$5 = i64toi32_i32$2 ? i64toi32_i32$4 : i64toi32_i32$0;
        $11 = i64toi32_i32$3;
        $11$hi = i64toi32_i32$5;
        label$27 : {
         if (!$12) {
          break label$27
         }
         if (($2 & -33 | 0 | 0) != (69 | 0)) {
          break label$27
         }
         label$28 : {
          i64toi32_i32$5 = scanexp($1 | 0, $6 | 0) | 0;
          i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
          $20 = i64toi32_i32$5;
          $20$hi = i64toi32_i32$3;
          i64toi32_i32$2 = i64toi32_i32$5;
          i64toi32_i32$5 = -2147483648;
          i64toi32_i32$4 = 0;
          if ((i64toi32_i32$2 | 0) != (i64toi32_i32$4 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$5 | 0) | 0) {
           break label$28
          }
          if (!$6) {
           break label$12
          }
          i64toi32_i32$2 = 0;
          $20 = 0;
          $20$hi = i64toi32_i32$2;
          if (!(HEAP32[($1 + 104 | 0) >> 2] | 0)) {
           break label$28
          }
          HEAP32[($1 + 4 | 0) >> 2] = (HEAP32[($1 + 4 | 0) >> 2] | 0) + -1 | 0;
         }
         if (!$12) {
          break label$13
         }
         i64toi32_i32$2 = $20$hi;
         i64toi32_i32$2 = $11$hi;
         i64toi32_i32$2 = $20$hi;
         i64toi32_i32$4 = $20;
         i64toi32_i32$3 = $11$hi;
         i64toi32_i32$5 = $11;
         i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
         i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
         if (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0) {
          i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
         }
         $11 = i64toi32_i32$0;
         $11$hi = i64toi32_i32$1;
         break label$11;
        }
        $16 = !$12;
        if (($2 | 0) < (0 | 0)) {
         break label$14
        }
       }
       if (!(HEAP32[($1 + 104 | 0) >> 2] | 0)) {
        break label$14
       }
       HEAP32[($1 + 4 | 0) >> 2] = (HEAP32[($1 + 4 | 0) >> 2] | 0) + -1 | 0;
      }
      if (!$16) {
       break label$11
      }
     }
     (wasm2js_i32$0 = __errno_location() | 0, wasm2js_i32$1 = 28), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
    }
    i64toi32_i32$1 = 0;
    $15 = 0;
    $15$hi = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    __shlim($1 | 0, 0 | 0, i64toi32_i32$1 | 0);
    i64toi32_i32$1 = 0;
    $11 = 0;
    $11$hi = i64toi32_i32$1;
    break label$10;
   }
   label$29 : {
    $1 = HEAP32[($7 + 784 | 0) >> 2] | 0;
    if ($1) {
     break label$29
    }
    __extenddftf2($7 | 0, +(+($5 | 0) * 0.0));
    i64toi32_i32$2 = $7 + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $11 = i64toi32_i32$1;
    $11$hi = i64toi32_i32$4;
    i64toi32_i32$2 = $7;
    i64toi32_i32$4 = HEAP32[$7 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($7 + 4 | 0) >> 2] | 0;
    $15 = i64toi32_i32$4;
    $15$hi = i64toi32_i32$1;
    break label$10;
   }
   label$30 : {
    i64toi32_i32$1 = $15$hi;
    i64toi32_i32$2 = $15;
    i64toi32_i32$4 = 0;
    i64toi32_i32$5 = 9;
    if ((i64toi32_i32$1 | 0) > (i64toi32_i32$4 | 0)) {
     $166 = 1
    } else {
     if ((i64toi32_i32$1 | 0) >= (i64toi32_i32$4 | 0)) {
      if (i64toi32_i32$2 >>> 0 <= i64toi32_i32$5 >>> 0) {
       $167 = 0
      } else {
       $167 = 1
      }
      $168 = $167;
     } else {
      $168 = 0
     }
     $166 = $168;
    }
    if ($166) {
     break label$30
    }
    i64toi32_i32$2 = $11$hi;
    i64toi32_i32$2 = $15$hi;
    i64toi32_i32$2 = $11$hi;
    i64toi32_i32$5 = $11;
    i64toi32_i32$1 = $15$hi;
    i64toi32_i32$4 = $15;
    if ((i64toi32_i32$5 | 0) != (i64toi32_i32$4 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$1 | 0) | 0) {
     break label$30
    }
    label$31 : {
     if (($3 | 0) > (30 | 0)) {
      break label$31
     }
     if ($1 >>> $3 | 0) {
      break label$30
     }
    }
    __floatsitf($7 + 48 | 0 | 0, $5 | 0);
    __floatunsitf($7 + 32 | 0 | 0, $1 | 0);
    i64toi32_i32$4 = $7;
    i64toi32_i32$5 = HEAP32[($7 + 48 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[($7 + 52 | 0) >> 2] | 0;
    $236 = i64toi32_i32$5;
    $236$hi = i64toi32_i32$2;
    i64toi32_i32$4 = ($7 + 48 | 0) + 8 | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$4 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
    $240 = i64toi32_i32$2;
    $240$hi = i64toi32_i32$5;
    i64toi32_i32$4 = $7;
    i64toi32_i32$5 = HEAP32[($7 + 32 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[($7 + 36 | 0) >> 2] | 0;
    $242 = i64toi32_i32$5;
    $242$hi = i64toi32_i32$2;
    i64toi32_i32$4 = ($7 + 32 | 0) + 8 | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$4 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
    $246 = i64toi32_i32$2;
    $246$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $236$hi;
    i64toi32_i32$2 = $240$hi;
    i64toi32_i32$4 = $242$hi;
    i64toi32_i32$1 = $246$hi;
    __multf3($7 + 16 | 0 | 0, $236 | 0, i64toi32_i32$5 | 0, $240 | 0, i64toi32_i32$2 | 0, $242 | 0, i64toi32_i32$4 | 0, $246 | 0, i64toi32_i32$1 | 0);
    i64toi32_i32$2 = ($7 + 16 | 0) + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $11 = i64toi32_i32$1;
    $11$hi = i64toi32_i32$4;
    i64toi32_i32$2 = $7;
    i64toi32_i32$4 = HEAP32[($7 + 16 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($7 + 20 | 0) >> 2] | 0;
    $15 = i64toi32_i32$4;
    $15$hi = i64toi32_i32$1;
    break label$10;
   }
   label$32 : {
    i64toi32_i32$1 = $11$hi;
    i64toi32_i32$1 = 0;
    $256$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $11$hi;
    i64toi32_i32$2 = $11;
    i64toi32_i32$4 = $256$hi;
    i64toi32_i32$5 = ($4 | 0) / (-2 | 0) | 0;
    if ((i64toi32_i32$1 | 0) < (i64toi32_i32$4 | 0)) {
     $169 = 1
    } else {
     if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$4 | 0)) {
      if (i64toi32_i32$2 >>> 0 > i64toi32_i32$5 >>> 0) {
       $170 = 0
      } else {
       $170 = 1
      }
      $171 = $170;
     } else {
      $171 = 0
     }
     $169 = $171;
    }
    if ($169) {
     break label$32
    }
    (wasm2js_i32$0 = __errno_location() | 0, wasm2js_i32$1 = 68), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
    __floatsitf($7 + 96 | 0 | 0, $5 | 0);
    i64toi32_i32$5 = $7;
    i64toi32_i32$2 = HEAP32[($7 + 96 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($7 + 100 | 0) >> 2] | 0;
    $265 = i64toi32_i32$2;
    $265$hi = i64toi32_i32$1;
    i64toi32_i32$5 = ($7 + 96 | 0) + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$5 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
    $269 = i64toi32_i32$1;
    $269$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $265$hi;
    i64toi32_i32$1 = $269$hi;
    i64toi32_i32$5 = -1;
    i64toi32_i32$4 = 2147418111;
    __multf3($7 + 80 | 0 | 0, $265 | 0, i64toi32_i32$2 | 0, $269 | 0, i64toi32_i32$1 | 0, -1 | 0, i64toi32_i32$5 | 0, -1 | 0, i64toi32_i32$4 | 0);
    i64toi32_i32$1 = $7;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 80 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 84 | 0) >> 2] | 0;
    $273 = i64toi32_i32$4;
    $273$hi = i64toi32_i32$5;
    i64toi32_i32$1 = (i64toi32_i32$1 + 80 | 0) + 8 | 0;
    i64toi32_i32$5 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $277 = i64toi32_i32$5;
    $277$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $273$hi;
    i64toi32_i32$5 = $277$hi;
    i64toi32_i32$1 = -1;
    i64toi32_i32$2 = 2147418111;
    __multf3($7 + 64 | 0 | 0, $273 | 0, i64toi32_i32$4 | 0, $277 | 0, i64toi32_i32$5 | 0, -1 | 0, i64toi32_i32$1 | 0, -1 | 0, i64toi32_i32$2 | 0);
    i64toi32_i32$5 = ($7 + 64 | 0) + 8 | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$5 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
    $11 = i64toi32_i32$2;
    $11$hi = i64toi32_i32$1;
    i64toi32_i32$5 = $7;
    i64toi32_i32$1 = HEAP32[($7 + 64 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[($7 + 68 | 0) >> 2] | 0;
    $15 = i64toi32_i32$1;
    $15$hi = i64toi32_i32$2;
    break label$10;
   }
   label$33 : {
    i64toi32_i32$2 = $11$hi;
    i64toi32_i32$1 = $4 + -226 | 0;
    i64toi32_i32$2 = i64toi32_i32$1 >> 31 | 0;
    $287 = i64toi32_i32$1;
    $287$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $11$hi;
    i64toi32_i32$5 = $11;
    i64toi32_i32$1 = $287$hi;
    i64toi32_i32$4 = $287;
    if ((i64toi32_i32$2 | 0) > (i64toi32_i32$1 | 0)) {
     $172 = 1
    } else {
     if ((i64toi32_i32$2 | 0) >= (i64toi32_i32$1 | 0)) {
      if (i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0) {
       $173 = 0
      } else {
       $173 = 1
      }
      $174 = $173;
     } else {
      $174 = 0
     }
     $172 = $174;
    }
    if ($172) {
     break label$33
    }
    (wasm2js_i32$0 = __errno_location() | 0, wasm2js_i32$1 = 68), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
    __floatsitf($7 + 144 | 0 | 0, $5 | 0);
    i64toi32_i32$4 = $7;
    i64toi32_i32$5 = HEAP32[($7 + 144 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[($7 + 148 | 0) >> 2] | 0;
    $296 = i64toi32_i32$5;
    $296$hi = i64toi32_i32$2;
    i64toi32_i32$4 = ($7 + 144 | 0) + 8 | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$4 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
    $300 = i64toi32_i32$2;
    $300$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $296$hi;
    i64toi32_i32$2 = $300$hi;
    i64toi32_i32$4 = 0;
    i64toi32_i32$1 = 65536;
    __multf3($7 + 128 | 0 | 0, $296 | 0, i64toi32_i32$5 | 0, $300 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$1 | 0);
    i64toi32_i32$2 = $7;
    i64toi32_i32$1 = HEAP32[($7 + 128 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[($7 + 132 | 0) >> 2] | 0;
    $304 = i64toi32_i32$1;
    $304$hi = i64toi32_i32$4;
    i64toi32_i32$2 = ($7 + 128 | 0) + 8 | 0;
    i64toi32_i32$4 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $308 = i64toi32_i32$4;
    $308$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $304$hi;
    i64toi32_i32$4 = $308$hi;
    i64toi32_i32$2 = 0;
    i64toi32_i32$5 = 65536;
    __multf3($7 + 112 | 0 | 0, $304 | 0, i64toi32_i32$1 | 0, $308 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$5 | 0);
    i64toi32_i32$4 = ($7 + 112 | 0) + 8 | 0;
    i64toi32_i32$5 = HEAP32[i64toi32_i32$4 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
    $11 = i64toi32_i32$5;
    $11$hi = i64toi32_i32$2;
    i64toi32_i32$4 = $7;
    i64toi32_i32$2 = HEAP32[($7 + 112 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[($7 + 116 | 0) >> 2] | 0;
    $15 = i64toi32_i32$2;
    $15$hi = i64toi32_i32$5;
    break label$10;
   }
   label$34 : {
    if (!$13) {
     break label$34
    }
    label$35 : {
     if (($13 | 0) > (8 | 0)) {
      break label$35
     }
     $2 = ($7 + 784 | 0) + ($17 << 2 | 0) | 0;
     $1 = HEAP32[$2 >> 2] | 0;
     label$36 : while (1) {
      $1 = Math_imul($1, 10);
      $13 = $13 + 1 | 0;
      if (($13 | 0) != (9 | 0)) {
       continue label$36
      }
      break label$36;
     };
     HEAP32[$2 >> 2] = $1;
    }
    $17 = $17 + 1 | 0;
   }
   i64toi32_i32$5 = $11$hi;
   $8 = $11;
   label$37 : {
    if (($18 | 0) >= (9 | 0)) {
     break label$37
    }
    if (($18 | 0) > ($8 | 0)) {
     break label$37
    }
    if (($8 | 0) > (17 | 0)) {
     break label$37
    }
    label$38 : {
     if (($8 | 0) != (9 | 0)) {
      break label$38
     }
     __floatsitf($7 + 192 | 0 | 0, $5 | 0);
     __floatunsitf($7 + 176 | 0 | 0, HEAP32[($7 + 784 | 0) >> 2] | 0 | 0);
     i64toi32_i32$4 = $7;
     i64toi32_i32$5 = HEAP32[($7 + 192 | 0) >> 2] | 0;
     i64toi32_i32$2 = HEAP32[($7 + 196 | 0) >> 2] | 0;
     $357 = i64toi32_i32$5;
     $357$hi = i64toi32_i32$2;
     i64toi32_i32$4 = ($7 + 192 | 0) + 8 | 0;
     i64toi32_i32$2 = HEAP32[i64toi32_i32$4 >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
     $361 = i64toi32_i32$2;
     $361$hi = i64toi32_i32$5;
     i64toi32_i32$4 = $7;
     i64toi32_i32$5 = HEAP32[($7 + 176 | 0) >> 2] | 0;
     i64toi32_i32$2 = HEAP32[($7 + 180 | 0) >> 2] | 0;
     $363 = i64toi32_i32$5;
     $363$hi = i64toi32_i32$2;
     i64toi32_i32$4 = ($7 + 176 | 0) + 8 | 0;
     i64toi32_i32$2 = HEAP32[i64toi32_i32$4 >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
     $367 = i64toi32_i32$2;
     $367$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $357$hi;
     i64toi32_i32$2 = $361$hi;
     i64toi32_i32$4 = $363$hi;
     i64toi32_i32$1 = $367$hi;
     __multf3($7 + 160 | 0 | 0, $357 | 0, i64toi32_i32$5 | 0, $361 | 0, i64toi32_i32$2 | 0, $363 | 0, i64toi32_i32$4 | 0, $367 | 0, i64toi32_i32$1 | 0);
     i64toi32_i32$2 = ($7 + 160 | 0) + 8 | 0;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $11 = i64toi32_i32$1;
     $11$hi = i64toi32_i32$4;
     i64toi32_i32$2 = $7;
     i64toi32_i32$4 = HEAP32[($7 + 160 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[($7 + 164 | 0) >> 2] | 0;
     $15 = i64toi32_i32$4;
     $15$hi = i64toi32_i32$1;
     break label$10;
    }
    label$39 : {
     if (($8 | 0) > (8 | 0)) {
      break label$39
     }
     __floatsitf($7 + 272 | 0 | 0, $5 | 0);
     __floatunsitf($7 + 256 | 0 | 0, HEAP32[($7 + 784 | 0) >> 2] | 0 | 0);
     i64toi32_i32$2 = $7;
     i64toi32_i32$1 = HEAP32[($7 + 272 | 0) >> 2] | 0;
     i64toi32_i32$4 = HEAP32[($7 + 276 | 0) >> 2] | 0;
     $386 = i64toi32_i32$1;
     $386$hi = i64toi32_i32$4;
     i64toi32_i32$2 = ($7 + 272 | 0) + 8 | 0;
     i64toi32_i32$4 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $390 = i64toi32_i32$4;
     $390$hi = i64toi32_i32$1;
     i64toi32_i32$2 = $7;
     i64toi32_i32$1 = HEAP32[($7 + 256 | 0) >> 2] | 0;
     i64toi32_i32$4 = HEAP32[($7 + 260 | 0) >> 2] | 0;
     $392 = i64toi32_i32$1;
     $392$hi = i64toi32_i32$4;
     i64toi32_i32$2 = ($7 + 256 | 0) + 8 | 0;
     i64toi32_i32$4 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $396 = i64toi32_i32$4;
     $396$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $386$hi;
     i64toi32_i32$4 = $390$hi;
     i64toi32_i32$2 = $392$hi;
     i64toi32_i32$5 = $396$hi;
     __multf3($7 + 240 | 0 | 0, $386 | 0, i64toi32_i32$1 | 0, $390 | 0, i64toi32_i32$4 | 0, $392 | 0, i64toi32_i32$2 | 0, $396 | 0, i64toi32_i32$5 | 0);
     __floatsitf($7 + 224 | 0 | 0, HEAP32[(((8 - $8 | 0) << 2 | 0) + 7920 | 0) >> 2] | 0 | 0);
     i64toi32_i32$4 = $7;
     i64toi32_i32$5 = HEAP32[($7 + 240 | 0) >> 2] | 0;
     i64toi32_i32$2 = HEAP32[($7 + 244 | 0) >> 2] | 0;
     $407 = i64toi32_i32$5;
     $407$hi = i64toi32_i32$2;
     i64toi32_i32$4 = ($7 + 240 | 0) + 8 | 0;
     i64toi32_i32$2 = HEAP32[i64toi32_i32$4 >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
     $411 = i64toi32_i32$2;
     $411$hi = i64toi32_i32$5;
     i64toi32_i32$4 = $7;
     i64toi32_i32$5 = HEAP32[($7 + 224 | 0) >> 2] | 0;
     i64toi32_i32$2 = HEAP32[($7 + 228 | 0) >> 2] | 0;
     $413 = i64toi32_i32$5;
     $413$hi = i64toi32_i32$2;
     i64toi32_i32$4 = ($7 + 224 | 0) + 8 | 0;
     i64toi32_i32$2 = HEAP32[i64toi32_i32$4 >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
     $417 = i64toi32_i32$2;
     $417$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $407$hi;
     i64toi32_i32$2 = $411$hi;
     i64toi32_i32$4 = $413$hi;
     i64toi32_i32$1 = $417$hi;
     __divtf3($7 + 208 | 0 | 0, $407 | 0, i64toi32_i32$5 | 0, $411 | 0, i64toi32_i32$2 | 0, $413 | 0, i64toi32_i32$4 | 0, $417 | 0, i64toi32_i32$1 | 0);
     i64toi32_i32$2 = ($7 + 208 | 0) + 8 | 0;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $11 = i64toi32_i32$1;
     $11$hi = i64toi32_i32$4;
     i64toi32_i32$2 = $7;
     i64toi32_i32$4 = HEAP32[($7 + 208 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[($7 + 212 | 0) >> 2] | 0;
     $15 = i64toi32_i32$4;
     $15$hi = i64toi32_i32$1;
     break label$10;
    }
    $1 = HEAP32[($7 + 784 | 0) >> 2] | 0;
    label$40 : {
     $2 = ($3 + Math_imul($8, -3) | 0) + 27 | 0;
     if (($2 | 0) > (30 | 0)) {
      break label$40
     }
     if ($1 >>> $2 | 0) {
      break label$37
     }
    }
    __floatsitf($7 + 352 | 0 | 0, $5 | 0);
    __floatunsitf($7 + 336 | 0 | 0, $1 | 0);
    i64toi32_i32$2 = $7;
    i64toi32_i32$1 = HEAP32[($7 + 352 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[($7 + 356 | 0) >> 2] | 0;
    $445 = i64toi32_i32$1;
    $445$hi = i64toi32_i32$4;
    i64toi32_i32$2 = ($7 + 352 | 0) + 8 | 0;
    i64toi32_i32$4 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $449 = i64toi32_i32$4;
    $449$hi = i64toi32_i32$1;
    i64toi32_i32$2 = $7;
    i64toi32_i32$1 = HEAP32[($7 + 336 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[($7 + 340 | 0) >> 2] | 0;
    $451 = i64toi32_i32$1;
    $451$hi = i64toi32_i32$4;
    i64toi32_i32$2 = ($7 + 336 | 0) + 8 | 0;
    i64toi32_i32$4 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $455 = i64toi32_i32$4;
    $455$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $445$hi;
    i64toi32_i32$4 = $449$hi;
    i64toi32_i32$2 = $451$hi;
    i64toi32_i32$5 = $455$hi;
    __multf3($7 + 320 | 0 | 0, $445 | 0, i64toi32_i32$1 | 0, $449 | 0, i64toi32_i32$4 | 0, $451 | 0, i64toi32_i32$2 | 0, $455 | 0, i64toi32_i32$5 | 0);
    __floatsitf($7 + 304 | 0 | 0, HEAP32[(($8 << 2 | 0) + 7880 | 0) >> 2] | 0 | 0);
    i64toi32_i32$4 = $7;
    i64toi32_i32$5 = HEAP32[($7 + 320 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[($7 + 324 | 0) >> 2] | 0;
    $465 = i64toi32_i32$5;
    $465$hi = i64toi32_i32$2;
    i64toi32_i32$4 = ($7 + 320 | 0) + 8 | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$4 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
    $469 = i64toi32_i32$2;
    $469$hi = i64toi32_i32$5;
    i64toi32_i32$4 = $7;
    i64toi32_i32$5 = HEAP32[($7 + 304 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[($7 + 308 | 0) >> 2] | 0;
    $471 = i64toi32_i32$5;
    $471$hi = i64toi32_i32$2;
    i64toi32_i32$4 = ($7 + 304 | 0) + 8 | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$4 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
    $475 = i64toi32_i32$2;
    $475$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $465$hi;
    i64toi32_i32$2 = $469$hi;
    i64toi32_i32$4 = $471$hi;
    i64toi32_i32$1 = $475$hi;
    __multf3($7 + 288 | 0 | 0, $465 | 0, i64toi32_i32$5 | 0, $469 | 0, i64toi32_i32$2 | 0, $471 | 0, i64toi32_i32$4 | 0, $475 | 0, i64toi32_i32$1 | 0);
    i64toi32_i32$2 = ($7 + 288 | 0) + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $11 = i64toi32_i32$1;
    $11$hi = i64toi32_i32$4;
    i64toi32_i32$2 = $7;
    i64toi32_i32$4 = HEAP32[($7 + 288 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($7 + 292 | 0) >> 2] | 0;
    $15 = i64toi32_i32$4;
    $15$hi = i64toi32_i32$1;
    break label$10;
   }
   label$41 : while (1) {
    $2 = $17;
    $17 = $2 + -1 | 0;
    if (!(HEAP32[(($7 + 784 | 0) + ($17 << 2 | 0) | 0) >> 2] | 0)) {
     continue label$41
    }
    break label$41;
   };
   $13 = 0;
   label$42 : {
    label$43 : {
     $1 = ($8 | 0) % (9 | 0) | 0;
     if ($1) {
      break label$43
     }
     $16 = 0;
     break label$42;
    }
    $6 = ($8 | 0) > (-1 | 0) ? $1 : $1 + 9 | 0;
    label$44 : {
     label$45 : {
      if ($2) {
       break label$45
      }
      $16 = 0;
      $2 = 0;
      break label$44;
     }
     $12 = HEAP32[(((8 - $6 | 0) << 2 | 0) + 7920 | 0) >> 2] | 0;
     $19 = (1e9 | 0) / ($12 | 0) | 0;
     $14 = 0;
     $1 = 0;
     $16 = 0;
     label$46 : while (1) {
      $17 = ($7 + 784 | 0) + ($1 << 2 | 0) | 0;
      $514 = $17;
      $17 = HEAP32[$17 >> 2] | 0;
      $18 = ($17 >>> 0) / ($12 >>> 0) | 0;
      $14 = $18 + $14 | 0;
      HEAP32[$514 >> 2] = $14;
      $14 = ($1 | 0) == ($16 | 0) & !$14 | 0;
      $16 = $14 ? ($16 + 1 | 0) & 2047 | 0 : $16;
      $8 = $14 ? $8 + -9 | 0 : $8;
      $14 = Math_imul($19, $17 - Math_imul($18, $12) | 0);
      $1 = $1 + 1 | 0;
      if (($1 | 0) != ($2 | 0)) {
       continue label$46
      }
      break label$46;
     };
     if (!$14) {
      break label$44
     }
     HEAP32[(($7 + 784 | 0) + ($2 << 2 | 0) | 0) >> 2] = $14;
     $2 = $2 + 1 | 0;
    }
    $8 = ($8 - $6 | 0) + 9 | 0;
   }
   label$47 : while (1) {
    $18 = ($7 + 784 | 0) + ($16 << 2 | 0) | 0;
    label$48 : {
     label$49 : while (1) {
      label$50 : {
       if (($8 | 0) < (36 | 0)) {
        break label$50
       }
       if (($8 | 0) != (36 | 0)) {
        break label$48
       }
       if ((HEAP32[$18 >> 2] | 0) >>> 0 >= 10384593 >>> 0) {
        break label$48
       }
      }
      $12 = $2 + 2047 | 0;
      $14 = 0;
      label$51 : while (1) {
       label$52 : {
        label$53 : {
         $1 = $12 & 2047 | 0;
         $12 = ($7 + 784 | 0) + ($1 << 2 | 0) | 0;
         i64toi32_i32$2 = $12;
         i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
         i64toi32_i32$4 = 0;
         i64toi32_i32$2 = i64toi32_i32$1;
         i64toi32_i32$1 = 0;
         i64toi32_i32$5 = 29;
         i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
         if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
          i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
          $175 = 0;
         } else {
          i64toi32_i32$1 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$3 | 0) | 0;
          $175 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
         }
         $590$hi = i64toi32_i32$1;
         i64toi32_i32$1 = 0;
         $592$hi = i64toi32_i32$1;
         i64toi32_i32$1 = $590$hi;
         i64toi32_i32$4 = $175;
         i64toi32_i32$2 = $592$hi;
         i64toi32_i32$5 = $14;
         i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
         i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
         if (i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0) {
          i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
         }
         $11 = i64toi32_i32$3;
         $11$hi = i64toi32_i32$0;
         i64toi32_i32$1 = i64toi32_i32$3;
         i64toi32_i32$4 = 0;
         i64toi32_i32$5 = 1000000001;
         if (i64toi32_i32$0 >>> 0 > i64toi32_i32$4 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$1 >>> 0 >= i64toi32_i32$5 >>> 0 | 0) | 0) {
          break label$53
         }
         $14 = 0;
         break label$52;
        }
        i64toi32_i32$1 = $11$hi;
        i64toi32_i32$0 = 0;
        i64toi32_i32$0 = __wasm_i64_udiv($11 | 0, i64toi32_i32$1 | 0, 1e9 | 0, i64toi32_i32$0 | 0) | 0;
        i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
        $15 = i64toi32_i32$0;
        $15$hi = i64toi32_i32$1;
        i64toi32_i32$0 = 0;
        i64toi32_i32$0 = __wasm_i64_mul($15 | 0, i64toi32_i32$1 | 0, 1e9 | 0, i64toi32_i32$0 | 0) | 0;
        i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
        $600 = i64toi32_i32$0;
        $600$hi = i64toi32_i32$1;
        i64toi32_i32$1 = $11$hi;
        i64toi32_i32$5 = $11;
        i64toi32_i32$0 = $600$hi;
        i64toi32_i32$4 = $600;
        i64toi32_i32$2 = i64toi32_i32$5 - i64toi32_i32$4 | 0;
        i64toi32_i32$3 = (i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0) + i64toi32_i32$0 | 0;
        i64toi32_i32$3 = i64toi32_i32$1 - i64toi32_i32$3 | 0;
        $11 = i64toi32_i32$2;
        $11$hi = i64toi32_i32$3;
        i64toi32_i32$3 = $15$hi;
        $14 = $15;
       }
       i64toi32_i32$3 = $11$hi;
       $17 = $11;
       HEAP32[$12 >> 2] = $11;
       $2 = ($1 | 0) != (($2 + -1 | 0) & 2047 | 0 | 0) ? $2 : ($1 | 0) == ($16 | 0) ? $2 : $11 ? $2 : $1;
       $12 = $1 + -1 | 0;
       if (($1 | 0) != ($16 | 0)) {
        continue label$51
       }
       break label$51;
      };
      $13 = $13 + -29 | 0;
      if (!$14) {
       continue label$49
      }
      break label$49;
     };
     label$54 : {
      $16 = ($16 + -1 | 0) & 2047 | 0;
      if (($16 | 0) != ($2 | 0)) {
       break label$54
      }
      $1 = ($7 + 784 | 0) + ((($2 + 2046 | 0) & 2047 | 0) << 2 | 0) | 0;
      $646 = $1;
      $648 = HEAP32[$1 >> 2] | 0;
      $1 = ($2 + -1 | 0) & 2047 | 0;
      HEAP32[$646 >> 2] = $648 | (HEAP32[(($7 + 784 | 0) + ($1 << 2 | 0) | 0) >> 2] | 0) | 0;
      $2 = $1;
     }
     $8 = $8 + 9 | 0;
     HEAP32[(($7 + 784 | 0) + ($16 << 2 | 0) | 0) >> 2] = $14;
     continue label$47;
    }
    break label$47;
   };
   label$55 : {
    label$56 : while (1) {
     $6 = ($2 + 1 | 0) & 2047 | 0;
     $21 = ($7 + 784 | 0) + ((($2 + -1 | 0) & 2047 | 0) << 2 | 0) | 0;
     label$57 : while (1) {
      $17 = ($8 | 0) > (45 | 0) ? 9 : 1;
      label$58 : {
       label$59 : while (1) {
        $12 = $16;
        $1 = 0;
        label$60 : {
         label$61 : {
          label$62 : while (1) {
           $16 = ($1 + $12 | 0) & 2047 | 0;
           if (($16 | 0) == ($2 | 0)) {
            break label$61
           }
           $16 = HEAP32[(($7 + 784 | 0) + ($16 << 2 | 0) | 0) >> 2] | 0;
           $14 = HEAP32[(($1 << 2 | 0) + 7904 | 0) >> 2] | 0;
           if ($16 >>> 0 < $14 >>> 0) {
            break label$61
           }
           if ($16 >>> 0 > $14 >>> 0) {
            break label$60
           }
           $1 = $1 + 1 | 0;
           if (($1 | 0) != (4 | 0)) {
            continue label$62
           }
           break label$62;
          };
         }
         if (($8 | 0) != (36 | 0)) {
          break label$60
         }
         i64toi32_i32$3 = 0;
         $11 = 0;
         $11$hi = i64toi32_i32$3;
         $1 = 0;
         i64toi32_i32$3 = 0;
         $15 = 0;
         $15$hi = i64toi32_i32$3;
         label$63 : while (1) {
          label$64 : {
           $16 = ($1 + $12 | 0) & 2047 | 0;
           if (($16 | 0) != ($2 | 0)) {
            break label$64
           }
           $2 = ($2 + 1 | 0) & 2047 | 0;
           HEAP32[((($2 << 2 | 0) + ($7 + 784 | 0) | 0) + -4 | 0) >> 2] = 0;
          }
          i64toi32_i32$3 = $11$hi;
          i64toi32_i32$3 = $15$hi;
          i64toi32_i32$3 = $11$hi;
          i64toi32_i32$5 = $15$hi;
          i64toi32_i32$1 = 0;
          i64toi32_i32$4 = 1075633366;
          __multf3($7 + 768 | 0 | 0, $11 | 0, i64toi32_i32$3 | 0, $15 | 0, i64toi32_i32$5 | 0, 0 | 0, i64toi32_i32$1 | 0, 1342177280 | 0, i64toi32_i32$4 | 0);
          __floatunsitf($7 + 752 | 0 | 0, HEAP32[(($7 + 784 | 0) + ($16 << 2 | 0) | 0) >> 2] | 0 | 0);
          i64toi32_i32$5 = $7;
          i64toi32_i32$4 = HEAP32[($7 + 768 | 0) >> 2] | 0;
          i64toi32_i32$1 = HEAP32[($7 + 772 | 0) >> 2] | 0;
          $742 = i64toi32_i32$4;
          $742$hi = i64toi32_i32$1;
          i64toi32_i32$5 = ($7 + 768 | 0) + 8 | 0;
          i64toi32_i32$1 = HEAP32[i64toi32_i32$5 >> 2] | 0;
          i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
          $746 = i64toi32_i32$1;
          $746$hi = i64toi32_i32$4;
          i64toi32_i32$5 = $7;
          i64toi32_i32$4 = HEAP32[($7 + 752 | 0) >> 2] | 0;
          i64toi32_i32$1 = HEAP32[($7 + 756 | 0) >> 2] | 0;
          $748 = i64toi32_i32$4;
          $748$hi = i64toi32_i32$1;
          i64toi32_i32$5 = ($7 + 752 | 0) + 8 | 0;
          i64toi32_i32$1 = HEAP32[i64toi32_i32$5 >> 2] | 0;
          i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
          $752 = i64toi32_i32$1;
          $752$hi = i64toi32_i32$4;
          i64toi32_i32$4 = $742$hi;
          i64toi32_i32$1 = $746$hi;
          i64toi32_i32$5 = $748$hi;
          i64toi32_i32$3 = $752$hi;
          __addtf3($7 + 736 | 0 | 0, $742 | 0, i64toi32_i32$4 | 0, $746 | 0, i64toi32_i32$1 | 0, $748 | 0, i64toi32_i32$5 | 0, $752 | 0, i64toi32_i32$3 | 0);
          i64toi32_i32$1 = ($7 + 736 | 0) + 8 | 0;
          i64toi32_i32$3 = HEAP32[i64toi32_i32$1 >> 2] | 0;
          i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
          $15 = i64toi32_i32$3;
          $15$hi = i64toi32_i32$5;
          i64toi32_i32$1 = $7;
          i64toi32_i32$5 = HEAP32[($7 + 736 | 0) >> 2] | 0;
          i64toi32_i32$3 = HEAP32[($7 + 740 | 0) >> 2] | 0;
          $11 = i64toi32_i32$5;
          $11$hi = i64toi32_i32$3;
          $1 = $1 + 1 | 0;
          if (($1 | 0) != (4 | 0)) {
           continue label$63
          }
          break label$63;
         };
         __floatsitf($7 + 720 | 0 | 0, $5 | 0);
         i64toi32_i32$3 = $11$hi;
         i64toi32_i32$3 = $15$hi;
         i64toi32_i32$1 = $7;
         i64toi32_i32$3 = HEAP32[($7 + 720 | 0) >> 2] | 0;
         i64toi32_i32$5 = HEAP32[($7 + 724 | 0) >> 2] | 0;
         $771 = i64toi32_i32$3;
         $771$hi = i64toi32_i32$5;
         i64toi32_i32$1 = ($7 + 720 | 0) + 8 | 0;
         i64toi32_i32$5 = HEAP32[i64toi32_i32$1 >> 2] | 0;
         i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
         $775 = i64toi32_i32$5;
         $775$hi = i64toi32_i32$3;
         i64toi32_i32$3 = $11$hi;
         i64toi32_i32$5 = $15$hi;
         i64toi32_i32$1 = $771$hi;
         i64toi32_i32$4 = $775$hi;
         __multf3($7 + 704 | 0 | 0, $11 | 0, i64toi32_i32$3 | 0, $15 | 0, i64toi32_i32$5 | 0, $771 | 0, i64toi32_i32$1 | 0, $775 | 0, i64toi32_i32$4 | 0);
         i64toi32_i32$5 = ($7 + 704 | 0) + 8 | 0;
         i64toi32_i32$4 = HEAP32[i64toi32_i32$5 >> 2] | 0;
         i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
         $15 = i64toi32_i32$4;
         $15$hi = i64toi32_i32$1;
         i64toi32_i32$1 = 0;
         $11 = 0;
         $11$hi = i64toi32_i32$1;
         i64toi32_i32$5 = $7;
         i64toi32_i32$1 = HEAP32[($7 + 704 | 0) >> 2] | 0;
         i64toi32_i32$4 = HEAP32[($7 + 708 | 0) >> 2] | 0;
         $20 = i64toi32_i32$1;
         $20$hi = i64toi32_i32$4;
         $14 = $13 + 113 | 0;
         $1 = $14 - $4 | 0;
         $8 = ($1 | 0) < ($3 | 0);
         $16 = $8 ? (($1 | 0) > (0 | 0) ? $1 : 0) : $3;
         if (($16 | 0) <= (112 | 0)) {
          break label$58
         }
         i64toi32_i32$4 = 0;
         $22 = 0;
         $22$hi = i64toi32_i32$4;
         i64toi32_i32$4 = 0;
         $23 = 0;
         $23$hi = i64toi32_i32$4;
         i64toi32_i32$4 = 0;
         $24 = 0;
         $24$hi = i64toi32_i32$4;
         break label$55;
        }
        $13 = $17 + $13 | 0;
        $16 = $2;
        if (($12 | 0) == ($2 | 0)) {
         continue label$59
        }
        break label$59;
       };
       $18 = 1e9 >>> $17 | 0;
       $19 = (-1 << $17 | 0) ^ -1 | 0;
       $1 = 0;
       $16 = $12;
       label$65 : while (1) {
        $14 = ($7 + 784 | 0) + ($12 << 2 | 0) | 0;
        $817 = $14;
        $14 = HEAP32[$14 >> 2] | 0;
        $1 = ($14 >>> $17 | 0) + $1 | 0;
        HEAP32[$817 >> 2] = $1;
        $1 = ($12 | 0) == ($16 | 0) & !$1 | 0;
        $16 = $1 ? ($16 + 1 | 0) & 2047 | 0 : $16;
        $8 = $1 ? $8 + -9 | 0 : $8;
        $1 = Math_imul($14 & $19 | 0, $18);
        $12 = ($12 + 1 | 0) & 2047 | 0;
        if (($12 | 0) != ($2 | 0)) {
         continue label$65
        }
        break label$65;
       };
       if (!$1) {
        continue label$57
       }
       label$66 : {
        if (($6 | 0) == ($16 | 0)) {
         break label$66
        }
        HEAP32[(($7 + 784 | 0) + ($2 << 2 | 0) | 0) >> 2] = $1;
        $2 = $6;
        continue label$56;
       }
       HEAP32[$21 >> 2] = HEAP32[$21 >> 2] | 0 | 1 | 0;
       $16 = $6;
       continue label$57;
      }
      break label$57;
     };
     break label$56;
    };
    __extenddftf2($7 + 656 | 0 | 0, +(+scalbn(+(1.0), 225 - $16 | 0 | 0)));
    i64toi32_i32$5 = $7;
    i64toi32_i32$4 = HEAP32[($7 + 656 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($7 + 660 | 0) >> 2] | 0;
    $879 = i64toi32_i32$4;
    $879$hi = i64toi32_i32$1;
    i64toi32_i32$5 = ($7 + 656 | 0) + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$5 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
    $883 = i64toi32_i32$1;
    $883$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $20$hi;
    i64toi32_i32$4 = $15$hi;
    i64toi32_i32$4 = $879$hi;
    i64toi32_i32$1 = $883$hi;
    i64toi32_i32$5 = $20$hi;
    i64toi32_i32$3 = $15$hi;
    copysignl($7 + 688 | 0 | 0, $879 | 0, i64toi32_i32$4 | 0, $883 | 0, i64toi32_i32$1 | 0, $20 | 0, i64toi32_i32$5 | 0, $15 | 0, i64toi32_i32$3 | 0);
    i64toi32_i32$1 = ($7 + 688 | 0) + 8 | 0;
    i64toi32_i32$3 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $24 = i64toi32_i32$3;
    $24$hi = i64toi32_i32$5;
    i64toi32_i32$1 = $7;
    i64toi32_i32$5 = HEAP32[($7 + 688 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[($7 + 692 | 0) >> 2] | 0;
    $23 = i64toi32_i32$5;
    $23$hi = i64toi32_i32$3;
    __extenddftf2($7 + 640 | 0 | 0, +(+scalbn(+(1.0), 113 - $16 | 0 | 0)));
    i64toi32_i32$3 = $20$hi;
    i64toi32_i32$3 = $15$hi;
    i64toi32_i32$1 = $7;
    i64toi32_i32$3 = HEAP32[($7 + 640 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[($7 + 644 | 0) >> 2] | 0;
    $902 = i64toi32_i32$3;
    $902$hi = i64toi32_i32$5;
    i64toi32_i32$1 = ($7 + 640 | 0) + 8 | 0;
    i64toi32_i32$5 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $906 = i64toi32_i32$5;
    $906$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $20$hi;
    i64toi32_i32$5 = $15$hi;
    i64toi32_i32$1 = $902$hi;
    i64toi32_i32$4 = $906$hi;
    fmodl($7 + 672 | 0 | 0, $20 | 0, i64toi32_i32$3 | 0, $15 | 0, i64toi32_i32$5 | 0, $902 | 0, i64toi32_i32$1 | 0, $906 | 0, i64toi32_i32$4 | 0);
    i64toi32_i32$4 = i64toi32_i32$3;
    i64toi32_i32$4 = i64toi32_i32$5;
    i64toi32_i32$5 = $7;
    i64toi32_i32$4 = HEAP32[($7 + 672 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($7 + 676 | 0) >> 2] | 0;
    $11 = i64toi32_i32$4;
    $11$hi = i64toi32_i32$1;
    i64toi32_i32$5 = ($7 + 672 | 0) + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$5 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
    $22 = i64toi32_i32$1;
    $22$hi = i64toi32_i32$4;
    i64toi32_i32$4 = i64toi32_i32$3;
    i64toi32_i32$1 = $15$hi;
    i64toi32_i32$5 = $11$hi;
    i64toi32_i32$3 = $22$hi;
    __subtf3($7 + 624 | 0 | 0, $20 | 0, i64toi32_i32$4 | 0, $15 | 0, i64toi32_i32$1 | 0, $11 | 0, i64toi32_i32$5 | 0, $22 | 0, i64toi32_i32$3 | 0);
    i64toi32_i32$3 = $23$hi;
    i64toi32_i32$3 = $24$hi;
    i64toi32_i32$1 = $7;
    i64toi32_i32$3 = HEAP32[($7 + 624 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[($7 + 628 | 0) >> 2] | 0;
    $924 = i64toi32_i32$3;
    $924$hi = i64toi32_i32$5;
    i64toi32_i32$1 = ($7 + 624 | 0) + 8 | 0;
    i64toi32_i32$5 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $928 = i64toi32_i32$5;
    $928$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $23$hi;
    i64toi32_i32$5 = $24$hi;
    i64toi32_i32$1 = $924$hi;
    i64toi32_i32$4 = $928$hi;
    __addtf3($7 + 608 | 0 | 0, $23 | 0, i64toi32_i32$3 | 0, $24 | 0, i64toi32_i32$5 | 0, $924 | 0, i64toi32_i32$1 | 0, $928 | 0, i64toi32_i32$4 | 0);
    i64toi32_i32$5 = ($7 + 608 | 0) + 8 | 0;
    i64toi32_i32$4 = HEAP32[i64toi32_i32$5 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
    $15 = i64toi32_i32$4;
    $15$hi = i64toi32_i32$1;
    i64toi32_i32$5 = $7;
    i64toi32_i32$1 = HEAP32[($7 + 608 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[($7 + 612 | 0) >> 2] | 0;
    $20 = i64toi32_i32$1;
    $20$hi = i64toi32_i32$4;
   }
   label$67 : {
    $17 = ($12 + 4 | 0) & 2047 | 0;
    if (($17 | 0) == ($2 | 0)) {
     break label$67
    }
    label$68 : {
     label$69 : {
      $17 = HEAP32[(($7 + 784 | 0) + ($17 << 2 | 0) | 0) >> 2] | 0;
      if ($17 >>> 0 > 499999999 >>> 0) {
       break label$69
      }
      label$70 : {
       if ($17) {
        break label$70
       }
       if ((($12 + 5 | 0) & 2047 | 0 | 0) == ($2 | 0)) {
        break label$68
       }
      }
      __extenddftf2($7 + 496 | 0 | 0, +(+($5 | 0) * .25));
      i64toi32_i32$4 = $11$hi;
      i64toi32_i32$4 = $22$hi;
      i64toi32_i32$5 = $7;
      i64toi32_i32$4 = HEAP32[($7 + 496 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[($7 + 500 | 0) >> 2] | 0;
      $965 = i64toi32_i32$4;
      $965$hi = i64toi32_i32$1;
      i64toi32_i32$5 = ($7 + 496 | 0) + 8 | 0;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$5 >> 2] | 0;
      i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
      $969 = i64toi32_i32$1;
      $969$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $11$hi;
      i64toi32_i32$1 = $22$hi;
      i64toi32_i32$5 = $965$hi;
      i64toi32_i32$3 = $969$hi;
      __addtf3($7 + 480 | 0 | 0, $11 | 0, i64toi32_i32$4 | 0, $22 | 0, i64toi32_i32$1 | 0, $965 | 0, i64toi32_i32$5 | 0, $969 | 0, i64toi32_i32$3 | 0);
      i64toi32_i32$1 = ($7 + 480 | 0) + 8 | 0;
      i64toi32_i32$3 = HEAP32[i64toi32_i32$1 >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
      $22 = i64toi32_i32$3;
      $22$hi = i64toi32_i32$5;
      i64toi32_i32$1 = $7;
      i64toi32_i32$5 = HEAP32[($7 + 480 | 0) >> 2] | 0;
      i64toi32_i32$3 = HEAP32[($7 + 484 | 0) >> 2] | 0;
      $11 = i64toi32_i32$5;
      $11$hi = i64toi32_i32$3;
      break label$68;
     }
     label$71 : {
      if (($17 | 0) == (5e8 | 0)) {
       break label$71
      }
      __extenddftf2($7 + 592 | 0 | 0, +(+($5 | 0) * .75));
      i64toi32_i32$3 = $11$hi;
      i64toi32_i32$3 = $22$hi;
      i64toi32_i32$1 = $7;
      i64toi32_i32$3 = HEAP32[($7 + 592 | 0) >> 2] | 0;
      i64toi32_i32$5 = HEAP32[($7 + 596 | 0) >> 2] | 0;
      $988 = i64toi32_i32$3;
      $988$hi = i64toi32_i32$5;
      i64toi32_i32$1 = ($7 + 592 | 0) + 8 | 0;
      i64toi32_i32$5 = HEAP32[i64toi32_i32$1 >> 2] | 0;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
      $992 = i64toi32_i32$5;
      $992$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $11$hi;
      i64toi32_i32$5 = $22$hi;
      i64toi32_i32$1 = $988$hi;
      i64toi32_i32$4 = $992$hi;
      __addtf3($7 + 576 | 0 | 0, $11 | 0, i64toi32_i32$3 | 0, $22 | 0, i64toi32_i32$5 | 0, $988 | 0, i64toi32_i32$1 | 0, $992 | 0, i64toi32_i32$4 | 0);
      i64toi32_i32$5 = ($7 + 576 | 0) + 8 | 0;
      i64toi32_i32$4 = HEAP32[i64toi32_i32$5 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
      $22 = i64toi32_i32$4;
      $22$hi = i64toi32_i32$1;
      i64toi32_i32$5 = $7;
      i64toi32_i32$1 = HEAP32[($7 + 576 | 0) >> 2] | 0;
      i64toi32_i32$4 = HEAP32[($7 + 580 | 0) >> 2] | 0;
      $11 = i64toi32_i32$1;
      $11$hi = i64toi32_i32$4;
      break label$68;
     }
     $25 = +($5 | 0);
     label$72 : {
      if ((($12 + 5 | 0) & 2047 | 0 | 0) != ($2 | 0)) {
       break label$72
      }
      __extenddftf2($7 + 528 | 0 | 0, +($25 * .5));
      i64toi32_i32$4 = $11$hi;
      i64toi32_i32$4 = $22$hi;
      i64toi32_i32$5 = $7;
      i64toi32_i32$4 = HEAP32[($7 + 528 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[($7 + 532 | 0) >> 2] | 0;
      $1015 = i64toi32_i32$4;
      $1015$hi = i64toi32_i32$1;
      i64toi32_i32$5 = ($7 + 528 | 0) + 8 | 0;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$5 >> 2] | 0;
      i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
      $1019 = i64toi32_i32$1;
      $1019$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $11$hi;
      i64toi32_i32$1 = $22$hi;
      i64toi32_i32$5 = $1015$hi;
      i64toi32_i32$3 = $1019$hi;
      __addtf3($7 + 512 | 0 | 0, $11 | 0, i64toi32_i32$4 | 0, $22 | 0, i64toi32_i32$1 | 0, $1015 | 0, i64toi32_i32$5 | 0, $1019 | 0, i64toi32_i32$3 | 0);
      i64toi32_i32$1 = ($7 + 512 | 0) + 8 | 0;
      i64toi32_i32$3 = HEAP32[i64toi32_i32$1 >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
      $22 = i64toi32_i32$3;
      $22$hi = i64toi32_i32$5;
      i64toi32_i32$1 = $7;
      i64toi32_i32$5 = HEAP32[($7 + 512 | 0) >> 2] | 0;
      i64toi32_i32$3 = HEAP32[($7 + 516 | 0) >> 2] | 0;
      $11 = i64toi32_i32$5;
      $11$hi = i64toi32_i32$3;
      break label$68;
     }
     __extenddftf2($7 + 560 | 0 | 0, +($25 * .75));
     i64toi32_i32$3 = $11$hi;
     i64toi32_i32$3 = $22$hi;
     i64toi32_i32$1 = $7;
     i64toi32_i32$3 = HEAP32[($7 + 560 | 0) >> 2] | 0;
     i64toi32_i32$5 = HEAP32[($7 + 564 | 0) >> 2] | 0;
     $1035 = i64toi32_i32$3;
     $1035$hi = i64toi32_i32$5;
     i64toi32_i32$1 = ($7 + 560 | 0) + 8 | 0;
     i64toi32_i32$5 = HEAP32[i64toi32_i32$1 >> 2] | 0;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
     $1039 = i64toi32_i32$5;
     $1039$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $11$hi;
     i64toi32_i32$5 = $22$hi;
     i64toi32_i32$1 = $1035$hi;
     i64toi32_i32$4 = $1039$hi;
     __addtf3($7 + 544 | 0 | 0, $11 | 0, i64toi32_i32$3 | 0, $22 | 0, i64toi32_i32$5 | 0, $1035 | 0, i64toi32_i32$1 | 0, $1039 | 0, i64toi32_i32$4 | 0);
     i64toi32_i32$5 = ($7 + 544 | 0) + 8 | 0;
     i64toi32_i32$4 = HEAP32[i64toi32_i32$5 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
     $22 = i64toi32_i32$4;
     $22$hi = i64toi32_i32$1;
     i64toi32_i32$5 = $7;
     i64toi32_i32$1 = HEAP32[($7 + 544 | 0) >> 2] | 0;
     i64toi32_i32$4 = HEAP32[($7 + 548 | 0) >> 2] | 0;
     $11 = i64toi32_i32$1;
     $11$hi = i64toi32_i32$4;
    }
    if (($16 | 0) > (111 | 0)) {
     break label$67
    }
    i64toi32_i32$4 = $11$hi;
    i64toi32_i32$4 = $22$hi;
    i64toi32_i32$4 = $11$hi;
    i64toi32_i32$1 = $22$hi;
    i64toi32_i32$5 = 0;
    i64toi32_i32$3 = 1073676288;
    fmodl($7 + 464 | 0 | 0, $11 | 0, i64toi32_i32$4 | 0, $22 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$5 | 0, 0 | 0, i64toi32_i32$3 | 0);
    i64toi32_i32$1 = $7;
    i64toi32_i32$3 = HEAP32[($7 + 464 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[($7 + 468 | 0) >> 2] | 0;
    $1053 = i64toi32_i32$3;
    $1053$hi = i64toi32_i32$5;
    i64toi32_i32$1 = ($7 + 464 | 0) + 8 | 0;
    i64toi32_i32$5 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $1057 = i64toi32_i32$5;
    $1057$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $1053$hi;
    i64toi32_i32$5 = $1057$hi;
    i64toi32_i32$1 = 0;
    i64toi32_i32$4 = 0;
    if (__letf2($1053 | 0, i64toi32_i32$3 | 0, $1057 | 0, i64toi32_i32$5 | 0, 0 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$4 | 0) | 0) {
     break label$67
    }
    i64toi32_i32$4 = $11$hi;
    i64toi32_i32$4 = $22$hi;
    i64toi32_i32$4 = $11$hi;
    i64toi32_i32$1 = $22$hi;
    i64toi32_i32$5 = 0;
    i64toi32_i32$3 = 1073676288;
    __addtf3($7 + 448 | 0 | 0, $11 | 0, i64toi32_i32$4 | 0, $22 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$5 | 0, 0 | 0, i64toi32_i32$3 | 0);
    i64toi32_i32$1 = ($7 + 448 | 0) + 8 | 0;
    i64toi32_i32$3 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $22 = i64toi32_i32$3;
    $22$hi = i64toi32_i32$5;
    i64toi32_i32$1 = $7;
    i64toi32_i32$5 = HEAP32[($7 + 448 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[($7 + 452 | 0) >> 2] | 0;
    $11 = i64toi32_i32$5;
    $11$hi = i64toi32_i32$3;
   }
   i64toi32_i32$3 = $20$hi;
   i64toi32_i32$3 = $15$hi;
   i64toi32_i32$3 = $11$hi;
   i64toi32_i32$3 = $22$hi;
   i64toi32_i32$3 = $20$hi;
   i64toi32_i32$5 = $15$hi;
   i64toi32_i32$1 = $11$hi;
   i64toi32_i32$4 = $22$hi;
   __addtf3($7 + 432 | 0 | 0, $20 | 0, i64toi32_i32$3 | 0, $15 | 0, i64toi32_i32$5 | 0, $11 | 0, i64toi32_i32$1 | 0, $22 | 0, i64toi32_i32$4 | 0);
   i64toi32_i32$5 = $7;
   i64toi32_i32$4 = HEAP32[($7 + 432 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($7 + 436 | 0) >> 2] | 0;
   $1078 = i64toi32_i32$4;
   $1078$hi = i64toi32_i32$1;
   i64toi32_i32$5 = ($7 + 432 | 0) + 8 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$5 >> 2] | 0;
   i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
   $1082 = i64toi32_i32$1;
   $1082$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $23$hi;
   i64toi32_i32$4 = $24$hi;
   i64toi32_i32$4 = $1078$hi;
   i64toi32_i32$1 = $1082$hi;
   i64toi32_i32$5 = $23$hi;
   i64toi32_i32$3 = $24$hi;
   __subtf3($7 + 416 | 0 | 0, $1078 | 0, i64toi32_i32$4 | 0, $1082 | 0, i64toi32_i32$1 | 0, $23 | 0, i64toi32_i32$5 | 0, $24 | 0, i64toi32_i32$3 | 0);
   i64toi32_i32$1 = ($7 + 416 | 0) + 8 | 0;
   i64toi32_i32$3 = HEAP32[i64toi32_i32$1 >> 2] | 0;
   i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
   $15 = i64toi32_i32$3;
   $15$hi = i64toi32_i32$5;
   i64toi32_i32$1 = $7;
   i64toi32_i32$5 = HEAP32[($7 + 416 | 0) >> 2] | 0;
   i64toi32_i32$3 = HEAP32[($7 + 420 | 0) >> 2] | 0;
   $20 = i64toi32_i32$5;
   $20$hi = i64toi32_i32$3;
   label$73 : {
    if (($14 & 2147483647 | 0 | 0) <= (-2 - $9 | 0 | 0)) {
     break label$73
    }
    i64toi32_i32$3 = $20$hi;
    i64toi32_i32$3 = $15$hi;
    i64toi32_i32$3 = $20$hi;
    i64toi32_i32$5 = $15$hi;
    fabsl($7 + 400 | 0 | 0, $20 | 0, i64toi32_i32$3 | 0, $15 | 0, i64toi32_i32$5 | 0);
    i64toi32_i32$5 = i64toi32_i32$3;
    i64toi32_i32$5 = $15$hi;
    i64toi32_i32$5 = i64toi32_i32$3;
    i64toi32_i32$3 = $15$hi;
    i64toi32_i32$1 = 0;
    i64toi32_i32$4 = 1073610752;
    __multf3($7 + 384 | 0 | 0, $20 | 0, i64toi32_i32$5 | 0, $15 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$4 | 0);
    i64toi32_i32$3 = $7;
    i64toi32_i32$4 = HEAP32[($7 + 400 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($7 + 404 | 0) >> 2] | 0;
    $23 = i64toi32_i32$4;
    $23$hi = i64toi32_i32$1;
    i64toi32_i32$3 = ($7 + 400 | 0) + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$3 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
    $24 = i64toi32_i32$1;
    $24$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $23$hi;
    i64toi32_i32$1 = $24$hi;
    i64toi32_i32$3 = 0;
    i64toi32_i32$5 = 1081081856;
    $2 = __getf2($23 | 0, i64toi32_i32$4 | 0, $24 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$5 | 0) | 0;
    i64toi32_i32$5 = $15$hi;
    i64toi32_i32$1 = ($7 + 384 | 0) + 8 | 0;
    i64toi32_i32$5 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $1117 = i64toi32_i32$5;
    $1117$hi = i64toi32_i32$3;
    $14 = ($2 | 0) < (0 | 0);
    i64toi32_i32$0 = $14;
    i64toi32_i32$3 = $15$hi;
    i64toi32_i32$5 = $1117$hi;
    i64toi32_i32$4 = i64toi32_i32$0 ? $15 : $1117;
    i64toi32_i32$1 = i64toi32_i32$0 ? i64toi32_i32$3 : i64toi32_i32$5;
    $15 = i64toi32_i32$4;
    $15$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $20$hi;
    i64toi32_i32$0 = $7;
    i64toi32_i32$1 = HEAP32[($7 + 384 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[($7 + 388 | 0) >> 2] | 0;
    $1124 = i64toi32_i32$1;
    $1124$hi = i64toi32_i32$4;
    i64toi32_i32$5 = $14;
    i64toi32_i32$4 = $20$hi;
    i64toi32_i32$1 = $1124$hi;
    i64toi32_i32$3 = i64toi32_i32$5 ? $20 : $1124;
    i64toi32_i32$0 = i64toi32_i32$5 ? i64toi32_i32$4 : i64toi32_i32$1;
    $20 = i64toi32_i32$3;
    $20$hi = i64toi32_i32$0;
    label$74 : {
     $13 = $13 + (($2 | 0) > (-1 | 0)) | 0;
     if (($13 + 110 | 0 | 0) > ($10 | 0)) {
      break label$74
     }
     i64toi32_i32$0 = $23$hi;
     i64toi32_i32$0 = $24$hi;
     i64toi32_i32$0 = $23$hi;
     i64toi32_i32$3 = $24$hi;
     i64toi32_i32$5 = 0;
     i64toi32_i32$4 = 1081081856;
     if ((((__getf2($23 | 0, i64toi32_i32$0 | 0, $24 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$5 | 0, 0 | 0, i64toi32_i32$4 | 0) | 0 | 0) < (0 | 0) ? $8 : $8 & ($16 | 0) != ($1 | 0) | 0) | 0) != (1 | 0)) {
      break label$73
     }
     i64toi32_i32$4 = $11$hi;
     i64toi32_i32$4 = $22$hi;
     i64toi32_i32$4 = $11$hi;
     i64toi32_i32$5 = $22$hi;
     i64toi32_i32$3 = 0;
     i64toi32_i32$0 = 0;
     if (!(__letf2($11 | 0, i64toi32_i32$4 | 0, $22 | 0, i64toi32_i32$5 | 0, 0 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$0 | 0) | 0)) {
      break label$73
     }
    }
    (wasm2js_i32$0 = __errno_location() | 0, wasm2js_i32$1 = 68), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
   }
   i64toi32_i32$0 = $20$hi;
   i64toi32_i32$0 = $15$hi;
   i64toi32_i32$0 = $20$hi;
   i64toi32_i32$3 = $15$hi;
   scalbnl($7 + 368 | 0 | 0, $20 | 0, i64toi32_i32$0 | 0, $15 | 0, i64toi32_i32$3 | 0, $13 | 0);
   i64toi32_i32$5 = ($7 + 368 | 0) + 8 | 0;
   i64toi32_i32$3 = HEAP32[i64toi32_i32$5 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
   $11 = i64toi32_i32$3;
   $11$hi = i64toi32_i32$0;
   i64toi32_i32$5 = $7;
   i64toi32_i32$0 = HEAP32[($7 + 368 | 0) >> 2] | 0;
   i64toi32_i32$3 = HEAP32[($7 + 372 | 0) >> 2] | 0;
   $15 = i64toi32_i32$0;
   $15$hi = i64toi32_i32$3;
  }
  i64toi32_i32$3 = $15$hi;
  i64toi32_i32$0 = $0;
  HEAP32[i64toi32_i32$0 >> 2] = $15;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$3;
  i64toi32_i32$3 = $11$hi;
  HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $11;
  HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$3;
  __stack_pointer = $7 + 8976 | 0;
 }
 
 function scanexp($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$5 = 0, i64toi32_i32$4 = 0, $5 = 0, i64toi32_i32$3 = 0, $6$hi = 0, $3 = 0, $6 = 0, i64toi32_i32$2 = 0, $4 = 0, $18 = 0, $19 = 0, $20 = 0, $85$hi = 0, $87 = 0, $87$hi = 0, $136$hi = 0;
  label$1 : {
   label$2 : {
    $2 = HEAP32[($0 + 4 | 0) >> 2] | 0;
    if ($2 >>> 0 >= (HEAP32[($0 + 104 | 0) >> 2] | 0) >>> 0) {
     break label$2
    }
    HEAP32[($0 + 4 | 0) >> 2] = $2 + 1 | 0;
    $2 = HEAPU8[$2 >> 0] | 0;
    break label$1;
   }
   $2 = __shgetc($0 | 0) | 0;
  }
  label$3 : {
   label$4 : {
    switch ($2 + -43 | 0 | 0) {
    default:
     $3 = $2 + -48 | 0;
     $4 = 0;
     break label$3;
    case 0:
    case 2:
     break label$4;
    };
   }
   label$6 : {
    label$7 : {
     $5 = HEAP32[($0 + 4 | 0) >> 2] | 0;
     if ($5 >>> 0 >= (HEAP32[($0 + 104 | 0) >> 2] | 0) >>> 0) {
      break label$7
     }
     HEAP32[($0 + 4 | 0) >> 2] = $5 + 1 | 0;
     $5 = HEAPU8[$5 >> 0] | 0;
     break label$6;
    }
    $5 = __shgetc($0 | 0) | 0;
   }
   $4 = ($2 | 0) == (45 | 0);
   label$8 : {
    $3 = $5 + -48 | 0;
    if ($3 >>> 0 < 10 >>> 0) {
     break label$8
    }
    if (!$1) {
     break label$8
    }
    if (!(HEAP32[($0 + 104 | 0) >> 2] | 0)) {
     break label$8
    }
    HEAP32[($0 + 4 | 0) >> 2] = (HEAP32[($0 + 4 | 0) >> 2] | 0) + -1 | 0;
   }
   $2 = $5;
  }
  label$9 : {
   label$10 : {
    if ($3 >>> 0 >= 10 >>> 0) {
     break label$10
    }
    $5 = 0;
    label$11 : while (1) {
     $5 = $2 + Math_imul($5, 10) | 0;
     label$12 : {
      label$13 : {
       $2 = HEAP32[($0 + 4 | 0) >> 2] | 0;
       if ($2 >>> 0 >= (HEAP32[($0 + 104 | 0) >> 2] | 0) >>> 0) {
        break label$13
       }
       HEAP32[($0 + 4 | 0) >> 2] = $2 + 1 | 0;
       $2 = HEAPU8[$2 >> 0] | 0;
       break label$12;
      }
      $2 = __shgetc($0 | 0) | 0;
     }
     $5 = $5 + -48 | 0;
     label$14 : {
      $3 = $2 + -48 | 0;
      if ($3 >>> 0 > 9 >>> 0) {
       break label$14
      }
      if (($5 | 0) < (214748364 | 0)) {
       continue label$11
      }
     }
     break label$11;
    };
    i64toi32_i32$1 = $5;
    i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
    $6 = i64toi32_i32$1;
    $6$hi = i64toi32_i32$0;
    label$15 : {
     if ($3 >>> 0 >= 10 >>> 0) {
      break label$15
     }
     label$16 : while (1) {
      i64toi32_i32$0 = 0;
      $85$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $6$hi;
      i64toi32_i32$1 = 0;
      i64toi32_i32$1 = __wasm_i64_mul($6 | 0, i64toi32_i32$0 | 0, 10 | 0, i64toi32_i32$1 | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
      $87 = i64toi32_i32$1;
      $87$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $85$hi;
      i64toi32_i32$2 = $2;
      i64toi32_i32$1 = $87$hi;
      i64toi32_i32$3 = $87;
      i64toi32_i32$4 = $2 + i64toi32_i32$3 | 0;
      i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $6 = i64toi32_i32$4;
      $6$hi = i64toi32_i32$5;
      label$17 : {
       label$18 : {
        $2 = HEAP32[($0 + 4 | 0) >> 2] | 0;
        if ($2 >>> 0 >= (HEAP32[($0 + 104 | 0) >> 2] | 0) >>> 0) {
         break label$18
        }
        HEAP32[($0 + 4 | 0) >> 2] = $2 + 1 | 0;
        $2 = HEAPU8[$2 >> 0] | 0;
        break label$17;
       }
       $2 = __shgetc($0 | 0) | 0;
      }
      i64toi32_i32$5 = $6$hi;
      i64toi32_i32$0 = $6;
      i64toi32_i32$2 = -1;
      i64toi32_i32$3 = -48;
      i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
      i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $6 = i64toi32_i32$1;
      $6$hi = i64toi32_i32$4;
      $3 = $2 + -48 | 0;
      if ($3 >>> 0 > 9 >>> 0) {
       break label$15
      }
      i64toi32_i32$4 = $6$hi;
      i64toi32_i32$5 = $6;
      i64toi32_i32$0 = 21474836;
      i64toi32_i32$3 = 2061584302;
      if ((i64toi32_i32$4 | 0) < (i64toi32_i32$0 | 0)) {
       $18 = 1
      } else {
       if ((i64toi32_i32$4 | 0) <= (i64toi32_i32$0 | 0)) {
        if (i64toi32_i32$5 >>> 0 >= i64toi32_i32$3 >>> 0) {
         $19 = 0
        } else {
         $19 = 1
        }
        $20 = $19;
       } else {
        $20 = 0
       }
       $18 = $20;
      }
      if ($18) {
       continue label$16
      }
      break label$16;
     };
    }
    label$19 : {
     if ($3 >>> 0 >= 10 >>> 0) {
      break label$19
     }
     label$20 : while (1) {
      label$21 : {
       label$22 : {
        $2 = HEAP32[($0 + 4 | 0) >> 2] | 0;
        if ($2 >>> 0 >= (HEAP32[($0 + 104 | 0) >> 2] | 0) >>> 0) {
         break label$22
        }
        HEAP32[($0 + 4 | 0) >> 2] = $2 + 1 | 0;
        $2 = HEAPU8[$2 >> 0] | 0;
        break label$21;
       }
       $2 = __shgetc($0 | 0) | 0;
      }
      if (($2 + -48 | 0) >>> 0 < 10 >>> 0) {
       continue label$20
      }
      break label$20;
     };
    }
    label$23 : {
     if (!(HEAP32[($0 + 104 | 0) >> 2] | 0)) {
      break label$23
     }
     HEAP32[($0 + 4 | 0) >> 2] = (HEAP32[($0 + 4 | 0) >> 2] | 0) + -1 | 0;
    }
    i64toi32_i32$5 = $6$hi;
    i64toi32_i32$5 = 0;
    i64toi32_i32$3 = 0;
    i64toi32_i32$4 = $6$hi;
    i64toi32_i32$0 = $6;
    i64toi32_i32$2 = i64toi32_i32$3 - i64toi32_i32$0 | 0;
    i64toi32_i32$1 = (i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0) + i64toi32_i32$4 | 0;
    i64toi32_i32$1 = i64toi32_i32$5 - i64toi32_i32$1 | 0;
    $136$hi = i64toi32_i32$1;
    i64toi32_i32$1 = i64toi32_i32$4;
    i64toi32_i32$4 = $4;
    i64toi32_i32$1 = $136$hi;
    i64toi32_i32$3 = $6$hi;
    i64toi32_i32$0 = i64toi32_i32$4 ? i64toi32_i32$2 : i64toi32_i32$0;
    i64toi32_i32$5 = i64toi32_i32$4 ? i64toi32_i32$1 : i64toi32_i32$3;
    $6 = i64toi32_i32$0;
    $6$hi = i64toi32_i32$5;
    break label$9;
   }
   i64toi32_i32$5 = -2147483648;
   $6 = 0;
   $6$hi = i64toi32_i32$5;
   if (!(HEAP32[($0 + 104 | 0) >> 2] | 0)) {
    break label$9
   }
   HEAP32[($0 + 4 | 0) >> 2] = (HEAP32[($0 + 4 | 0) >> 2] | 0) + -1 | 0;
   i64toi32_i32$5 = -2147483648;
   i64toi32_i32$0 = 0;
   i64toi32_i32$HIGH_BITS = i64toi32_i32$5;
   return i64toi32_i32$0 | 0;
  }
  i64toi32_i32$0 = $6$hi;
  i64toi32_i32$5 = $6;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
  return i64toi32_i32$5 | 0;
 }
 
 function strtox($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $5 = 0, $5$hi = 0, $6 = 0, $6$hi = 0;
  $4 = __stack_pointer - 160 | 0;
  __stack_pointer = $4;
  memset($4 + 16 | 0 | 0, 0 | 0, 144 | 0) | 0;
  HEAP32[($4 + 92 | 0) >> 2] = -1;
  HEAP32[($4 + 60 | 0) >> 2] = $1;
  HEAP32[($4 + 24 | 0) >> 2] = -1;
  HEAP32[($4 + 20 | 0) >> 2] = $1;
  i64toi32_i32$0 = 0;
  __shlim($4 + 16 | 0 | 0, 0 | 0, i64toi32_i32$0 | 0);
  __floatscan($4 | 0, $4 + 16 | 0 | 0, $3 | 0, 1 | 0);
  i64toi32_i32$2 = $4 + 8 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $5 = i64toi32_i32$0;
  $5$hi = i64toi32_i32$1;
  i64toi32_i32$2 = $4;
  i64toi32_i32$1 = HEAP32[$4 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($4 + 4 | 0) >> 2] | 0;
  $6 = i64toi32_i32$1;
  $6$hi = i64toi32_i32$0;
  label$1 : {
   if (!$2) {
    break label$1
   }
   HEAP32[$2 >> 2] = $1 + (((HEAP32[($4 + 20 | 0) >> 2] | 0) + (HEAP32[($4 + 136 | 0) >> 2] | 0) | 0) - (HEAP32[($4 + 24 | 0) >> 2] | 0) | 0) | 0;
  }
  i64toi32_i32$0 = $6$hi;
  i64toi32_i32$1 = $0;
  HEAP32[i64toi32_i32$1 >> 2] = $6;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = $5$hi;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $5;
  HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$0;
  __stack_pointer = $4 + 160 | 0;
 }
 
 function strtod($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $11 = 0, $11$hi = 0, $14 = 0, $14$hi = 0, $3 = 0.0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  strtox($2 | 0, $0 | 0, $1 | 0, 1 | 0);
  i64toi32_i32$2 = $2;
  i64toi32_i32$0 = HEAP32[$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($2 + 4 | 0) >> 2] | 0;
  $11 = i64toi32_i32$0;
  $11$hi = i64toi32_i32$1;
  i64toi32_i32$2 = $2 + 8 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $14 = i64toi32_i32$1;
  $14$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $11$hi;
  i64toi32_i32$1 = $14$hi;
  $3 = +__trunctfdf2($11 | 0, i64toi32_i32$0 | 0, $14 | 0, i64toi32_i32$1 | 0);
  __stack_pointer = $2 + 16 | 0;
  return +$3;
 }
 
 function __cos($0, $1) {
  $0 = +$0;
  $1 = +$1;
  var $2 = 0.0, $3 = 0.0, $4 = 0.0, $16 = 0.0;
  $2 = $0 * $0;
  $3 = $2 * .5;
  $4 = 1.0 - $3;
  $16 = 1.0 - $4 - $3;
  $3 = $2 * $2;
  return +($4 + ($16 + ($2 * ($2 * ($2 * ($2 * 2.480158728947673e-05 + -.001388888888887411) + .0416666666666666) + $3 * $3 * ($2 * ($2 * -1.1359647557788195e-11 + 2.087572321298175e-09) + -2.7557314351390663e-07)) - $0 * $1)));
 }
 
 function floor($0) {
  $0 = +$0;
  return +Math_floor($0);
 }
 
 function __rem_pio2_large($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $12 = 0.0, $11 = 0, $6 = 0, $5 = 0, $19 = 0.0, $10 = 0, $14 = 0, $8 = 0, $22 = 0, $9 = 0, $20 = 0, $13 = 0, $18 = 0, $23 = 0.0, $7 = 0, $16 = 0, $21 = 0, $15 = 0, $17 = 0, $204 = 0, $207 = 0, $515 = 0.0, $553 = 0.0;
  $5 = __stack_pointer - 560 | 0;
  __stack_pointer = $5;
  $6 = ($2 + -3 | 0 | 0) / (24 | 0) | 0;
  $7 = ($6 | 0) > (0 | 0) ? $6 : 0;
  $8 = Math_imul($7, -24) + $2 | 0;
  label$1 : {
   $9 = HEAP32[(($4 << 2 | 0) + 7984 | 0) >> 2] | 0;
   $10 = $3 + -1 | 0;
   if (($9 + $10 | 0 | 0) < (0 | 0)) {
    break label$1
   }
   $11 = $9 + $3 | 0;
   $2 = $7 - $10 | 0;
   $6 = 0;
   label$2 : while (1) {
    label$3 : {
     label$4 : {
      if (($2 | 0) >= (0 | 0)) {
       break label$4
      }
      $12 = 0.0;
      break label$3;
     }
     $12 = +(HEAP32[(($2 << 2 | 0) + 8e3 | 0) >> 2] | 0 | 0);
    }
    HEAPF64[(($5 + 320 | 0) + ($6 << 3 | 0) | 0) >> 3] = $12;
    $2 = $2 + 1 | 0;
    $6 = $6 + 1 | 0;
    if (($6 | 0) != ($11 | 0)) {
     continue label$2
    }
    break label$2;
   };
  }
  $13 = $8 + -24 | 0;
  $14 = ($9 | 0) > (0 | 0) ? $9 : 0;
  $11 = 0;
  label$5 : while (1) {
   $12 = 0.0;
   label$6 : {
    if (($3 | 0) <= (0 | 0)) {
     break label$6
    }
    $6 = $11 + $10 | 0;
    $2 = 0;
    label$7 : while (1) {
     $12 = $12 + +HEAPF64[($0 + ($2 << 3 | 0) | 0) >> 3] * +HEAPF64[(($5 + 320 | 0) + (($6 - $2 | 0) << 3 | 0) | 0) >> 3];
     $2 = $2 + 1 | 0;
     if (($2 | 0) != ($3 | 0)) {
      continue label$7
     }
     break label$7;
    };
   }
   HEAPF64[($5 + ($11 << 3 | 0) | 0) >> 3] = $12;
   $2 = ($11 | 0) == ($14 | 0);
   $11 = $11 + 1 | 0;
   if (!$2) {
    continue label$5
   }
   break label$5;
  };
  $15 = 47 - $8 | 0;
  $16 = 48 - $8 | 0;
  $17 = $8 + -25 | 0;
  $11 = $9;
  label$8 : {
   label$9 : while (1) {
    $12 = +HEAPF64[($5 + ($11 << 3 | 0) | 0) >> 3];
    $2 = 0;
    $6 = $11;
    label$10 : {
     $18 = ($11 | 0) < (1 | 0);
     if ($18) {
      break label$10
     }
     label$11 : while (1) {
      $14 = $2 << 2 | 0;
      label$12 : {
       label$13 : {
        $19 = $12 * 5.9604644775390625e-08;
        if (!(Math_abs($19) < 2147483648.0)) {
         break label$13
        }
        $10 = ~~$19;
        break label$12;
       }
       $10 = -2147483648;
      }
      $14 = ($5 + 480 | 0) + $14 | 0;
      label$14 : {
       label$15 : {
        $19 = +($10 | 0);
        $12 = $12 + $19 * -16777216.0;
        if (!(Math_abs($12) < 2147483648.0)) {
         break label$15
        }
        $10 = ~~$12;
        break label$14;
       }
       $10 = -2147483648;
      }
      HEAP32[$14 >> 2] = $10;
      $6 = $6 + -1 | 0;
      $12 = +HEAPF64[($5 + ($6 << 3 | 0) | 0) >> 3] + $19;
      $2 = $2 + 1 | 0;
      if (($2 | 0) != ($11 | 0)) {
       continue label$11
      }
      break label$11;
     };
    }
    $12 = +scalbn(+$12, $13 | 0);
    label$16 : {
     label$17 : {
      $12 = $12 + +floor(+($12 * .125)) * -8.0;
      if (!(Math_abs($12) < 2147483648.0)) {
       break label$17
      }
      $20 = ~~$12;
      break label$16;
     }
     $20 = -2147483648;
    }
    $12 = $12 - +($20 | 0);
    label$18 : {
     label$19 : {
      label$20 : {
       label$21 : {
        label$22 : {
         $21 = ($13 | 0) < (1 | 0);
         if ($21) {
          break label$22
         }
         $2 = (($11 << 2 | 0) + ($5 + 480 | 0) | 0) + -4 | 0;
         $204 = $2;
         $2 = HEAP32[$2 >> 2] | 0;
         $207 = $2;
         $2 = $2 >> $16 | 0;
         $6 = $207 - ($2 << $16 | 0) | 0;
         HEAP32[$204 >> 2] = $6;
         $22 = $6 >> $15 | 0;
         $20 = $2 + $20 | 0;
         break label$21;
        }
        if ($13) {
         break label$20
        }
        $22 = (HEAP32[((($11 << 2 | 0) + ($5 + 480 | 0) | 0) + -4 | 0) >> 2] | 0) >> 23 | 0;
       }
       if (($22 | 0) < (1 | 0)) {
        break label$18
       }
       break label$19;
      }
      $22 = 2;
      if ($12 >= .5) {
       break label$19
      }
      $22 = 0;
      break label$18;
     }
     $2 = 0;
     $10 = 0;
     label$23 : {
      if ($18) {
       break label$23
      }
      label$24 : while (1) {
       $18 = ($5 + 480 | 0) + ($2 << 2 | 0) | 0;
       $6 = HEAP32[$18 >> 2] | 0;
       $14 = 16777215;
       label$25 : {
        label$26 : {
         if ($10) {
          break label$26
         }
         $14 = 16777216;
         if ($6) {
          break label$26
         }
         $10 = 0;
         break label$25;
        }
        HEAP32[$18 >> 2] = $14 - $6 | 0;
        $10 = 1;
       }
       $2 = $2 + 1 | 0;
       if (($2 | 0) != ($11 | 0)) {
        continue label$24
       }
       break label$24;
      };
     }
     label$27 : {
      if ($21) {
       break label$27
      }
      $2 = 8388607;
      label$28 : {
       switch ($17 | 0) {
       case 1:
        $2 = 4194303;
        break;
       case 0:
        break label$28;
       default:
        break label$27;
       };
      }
      $6 = (($11 << 2 | 0) + ($5 + 480 | 0) | 0) + -4 | 0;
      HEAP32[$6 >> 2] = (HEAP32[$6 >> 2] | 0) & $2 | 0;
     }
     $20 = $20 + 1 | 0;
     if (($22 | 0) != (2 | 0)) {
      break label$18
     }
     $12 = 1.0 - $12;
     $22 = 2;
     if (!$10) {
      break label$18
     }
     $12 = $12 - +scalbn(+(1.0), $13 | 0);
    }
    label$30 : {
     if ($12 != 0.0) {
      break label$30
     }
     $6 = 0;
     $2 = $11;
     label$31 : {
      if (($2 | 0) <= ($9 | 0)) {
       break label$31
      }
      label$32 : while (1) {
       $2 = $2 + -1 | 0;
       $6 = HEAP32[(($5 + 480 | 0) + ($2 << 2 | 0) | 0) >> 2] | 0 | $6 | 0;
       if (($2 | 0) > ($9 | 0)) {
        continue label$32
       }
       break label$32;
      };
      if (!$6) {
       break label$31
      }
      $8 = $13;
      label$33 : while (1) {
       $8 = $8 + -24 | 0;
       $11 = $11 + -1 | 0;
       if (!(HEAP32[(($5 + 480 | 0) + ($11 << 2 | 0) | 0) >> 2] | 0)) {
        continue label$33
       }
       break label$8;
      };
     }
     $2 = 1;
     label$34 : while (1) {
      $6 = $2;
      $2 = $2 + 1 | 0;
      if (!(HEAP32[(($5 + 480 | 0) + (($9 - $6 | 0) << 2 | 0) | 0) >> 2] | 0)) {
       continue label$34
      }
      break label$34;
     };
     $14 = $6 + $11 | 0;
     label$35 : while (1) {
      $6 = $11 + $3 | 0;
      $11 = $11 + 1 | 0;
      HEAPF64[(($5 + 320 | 0) + ($6 << 3 | 0) | 0) >> 3] = +(HEAP32[((($11 + $7 | 0) << 2 | 0) + 8e3 | 0) >> 2] | 0 | 0);
      $2 = 0;
      $12 = 0.0;
      label$36 : {
       if (($3 | 0) < (1 | 0)) {
        break label$36
       }
       label$37 : while (1) {
        $12 = $12 + +HEAPF64[($0 + ($2 << 3 | 0) | 0) >> 3] * +HEAPF64[(($5 + 320 | 0) + (($6 - $2 | 0) << 3 | 0) | 0) >> 3];
        $2 = $2 + 1 | 0;
        if (($2 | 0) != ($3 | 0)) {
         continue label$37
        }
        break label$37;
       };
      }
      HEAPF64[($5 + ($11 << 3 | 0) | 0) >> 3] = $12;
      if (($11 | 0) < ($14 | 0)) {
       continue label$35
      }
      break label$35;
     };
     $11 = $14;
     continue label$9;
    }
    break label$9;
   };
   label$38 : {
    label$39 : {
     $12 = +scalbn(+$12, 24 - $8 | 0 | 0);
     if (!($12 >= 16777216.0)) {
      break label$39
     }
     $3 = $11 << 2 | 0;
     label$40 : {
      label$41 : {
       $19 = $12 * 5.9604644775390625e-08;
       if (!(Math_abs($19) < 2147483648.0)) {
        break label$41
       }
       $2 = ~~$19;
       break label$40;
      }
      $2 = -2147483648;
     }
     $3 = ($5 + 480 | 0) + $3 | 0;
     label$42 : {
      label$43 : {
       $12 = $12 + +($2 | 0) * -16777216.0;
       if (!(Math_abs($12) < 2147483648.0)) {
        break label$43
       }
       $6 = ~~$12;
       break label$42;
      }
      $6 = -2147483648;
     }
     HEAP32[$3 >> 2] = $6;
     $11 = $11 + 1 | 0;
     break label$38;
    }
    label$44 : {
     label$45 : {
      if (!(Math_abs($12) < 2147483648.0)) {
       break label$45
      }
      $2 = ~~$12;
      break label$44;
     }
     $2 = -2147483648;
    }
    $8 = $13;
   }
   HEAP32[(($5 + 480 | 0) + ($11 << 2 | 0) | 0) >> 2] = $2;
  }
  $12 = +scalbn(+(1.0), $8 | 0);
  label$46 : {
   if (($11 | 0) <= (-1 | 0)) {
    break label$46
   }
   $2 = $11;
   label$47 : while (1) {
    HEAPF64[($5 + ($2 << 3 | 0) | 0) >> 3] = $12 * +(HEAP32[(($5 + 480 | 0) + ($2 << 2 | 0) | 0) >> 2] | 0 | 0);
    $12 = $12 * 5.9604644775390625e-08;
    $3 = ($2 | 0) > (0 | 0);
    $2 = $2 + -1 | 0;
    if ($3) {
     continue label$47
    }
    break label$47;
   };
   if (($11 | 0) <= (-1 | 0)) {
    break label$46
   }
   $2 = $11;
   label$48 : while (1) {
    $6 = $2;
    $0 = $11 - $2 | 0;
    $12 = 0.0;
    $2 = 0;
    label$49 : {
     label$50 : while (1) {
      $12 = $12 + +HEAPF64[(($2 << 3 | 0) + 10768 | 0) >> 3] * +HEAPF64[($5 + (($2 + $6 | 0) << 3 | 0) | 0) >> 3];
      if (($2 | 0) >= ($9 | 0)) {
       break label$49
      }
      $3 = $2 >>> 0 < $0 >>> 0;
      $2 = $2 + 1 | 0;
      if ($3) {
       continue label$50
      }
      break label$50;
     };
    }
    HEAPF64[(($5 + 160 | 0) + ($0 << 3 | 0) | 0) >> 3] = $12;
    $2 = $6 + -1 | 0;
    if (($6 | 0) > (0 | 0)) {
     continue label$48
    }
    break label$48;
   };
  }
  label$51 : {
   label$52 : {
    label$53 : {
     switch ($4 | 0) {
     case 3:
      $23 = 0.0;
      label$56 : {
       if (($11 | 0) < (1 | 0)) {
        break label$56
       }
       $12 = +HEAPF64[(($5 + 160 | 0) + ($11 << 3 | 0) | 0) >> 3];
       $2 = $11;
       label$57 : while (1) {
        $3 = $2 + -1 | 0;
        $6 = ($5 + 160 | 0) + ($3 << 3 | 0) | 0;
        $19 = +HEAPF64[$6 >> 3];
        $515 = $19;
        $19 = $19 + $12;
        HEAPF64[(($5 + 160 | 0) + ($2 << 3 | 0) | 0) >> 3] = $12 + ($515 - $19);
        HEAPF64[$6 >> 3] = $19;
        $6 = ($2 | 0) > (1 | 0);
        $12 = $19;
        $2 = $3;
        if ($6) {
         continue label$57
        }
        break label$57;
       };
       if (($11 | 0) < (2 | 0)) {
        break label$56
       }
       $12 = +HEAPF64[(($5 + 160 | 0) + ($11 << 3 | 0) | 0) >> 3];
       $2 = $11;
       label$58 : while (1) {
        $3 = $2 + -1 | 0;
        $6 = ($5 + 160 | 0) + ($3 << 3 | 0) | 0;
        $19 = +HEAPF64[$6 >> 3];
        $553 = $19;
        $19 = $19 + $12;
        HEAPF64[(($5 + 160 | 0) + ($2 << 3 | 0) | 0) >> 3] = $12 + ($553 - $19);
        HEAPF64[$6 >> 3] = $19;
        $6 = ($2 | 0) > (2 | 0);
        $12 = $19;
        $2 = $3;
        if ($6) {
         continue label$58
        }
        break label$58;
       };
       $23 = 0.0;
       if (($11 | 0) <= (1 | 0)) {
        break label$56
       }
       label$59 : while (1) {
        $23 = $23 + +HEAPF64[(($5 + 160 | 0) + ($11 << 3 | 0) | 0) >> 3];
        $2 = ($11 | 0) > (2 | 0);
        $11 = $11 + -1 | 0;
        if ($2) {
         continue label$59
        }
        break label$59;
       };
      }
      $12 = +HEAPF64[($5 + 160 | 0) >> 3];
      if ($22) {
       break label$52
      }
      HEAPF64[$1 >> 3] = $12;
      $12 = +HEAPF64[($5 + 168 | 0) >> 3];
      HEAPF64[($1 + 16 | 0) >> 3] = $23;
      HEAPF64[($1 + 8 | 0) >> 3] = $12;
      break label$51;
     case 0:
      $12 = 0.0;
      label$60 : {
       if (($11 | 0) < (0 | 0)) {
        break label$60
       }
       label$61 : while (1) {
        $12 = $12 + +HEAPF64[(($5 + 160 | 0) + ($11 << 3 | 0) | 0) >> 3];
        $2 = ($11 | 0) > (0 | 0);
        $11 = $11 + -1 | 0;
        if ($2) {
         continue label$61
        }
        break label$61;
       };
      }
      HEAPF64[$1 >> 3] = $22 ? -$12 : $12;
      break label$51;
     case 1:
     case 2:
      break label$53;
     default:
      break label$51;
     };
    }
    $12 = 0.0;
    label$62 : {
     if (($11 | 0) < (0 | 0)) {
      break label$62
     }
     $2 = $11;
     label$63 : while (1) {
      $12 = $12 + +HEAPF64[(($5 + 160 | 0) + ($2 << 3 | 0) | 0) >> 3];
      $3 = ($2 | 0) > (0 | 0);
      $2 = $2 + -1 | 0;
      if ($3) {
       continue label$63
      }
      break label$63;
     };
    }
    HEAPF64[$1 >> 3] = $22 ? -$12 : $12;
    $12 = +HEAPF64[($5 + 160 | 0) >> 3] - $12;
    $2 = 1;
    label$64 : {
     if (($11 | 0) < (1 | 0)) {
      break label$64
     }
     label$65 : while (1) {
      $12 = $12 + +HEAPF64[(($5 + 160 | 0) + ($2 << 3 | 0) | 0) >> 3];
      $3 = ($2 | 0) != ($11 | 0);
      $2 = $2 + 1 | 0;
      if ($3) {
       continue label$65
      }
      break label$65;
     };
    }
    HEAPF64[($1 + 8 | 0) >> 3] = $22 ? -$12 : $12;
    break label$51;
   }
   HEAPF64[$1 >> 3] = -$12;
   $12 = +HEAPF64[($5 + 168 | 0) >> 3];
   HEAPF64[($1 + 16 | 0) >> 3] = -$23;
   HEAPF64[($1 + 8 | 0) >> 3] = -$12;
  }
  __stack_pointer = $5 + 560 | 0;
  return $20 & 7 | 0 | 0;
 }
 
 function __rem_pio2($0, $1) {
  $0 = +$0;
  $1 = $1 | 0;
  var $6 = 0.0, i64toi32_i32$2 = 0, $4 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, $2 = 0, $5 = 0, $7 = 0.0, $3 = 0, $9 = 0, $10 = 0, $3$hi = 0, $8 = 0.0, $11 = 0.0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $152 = 0, $185 = 0;
  $2 = __stack_pointer - 48 | 0;
  __stack_pointer = $2;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      wasm2js_scratch_store_f64(+$0);
      i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
      $3 = wasm2js_scratch_load_i32(0 | 0) | 0;
      $3$hi = i64toi32_i32$0;
      i64toi32_i32$2 = $3;
      i64toi32_i32$1 = 0;
      i64toi32_i32$3 = 32;
      i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$1 = 0;
       $20 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
      } else {
       i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
       $20 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
      }
      $4 = $20;
      $5 = $4 & 2147483647 | 0;
      if ($5 >>> 0 > 1074752122 >>> 0) {
       break label$4
      }
      if (($4 & 1048575 | 0 | 0) == (598523 | 0)) {
       break label$3
      }
      label$5 : {
       if ($5 >>> 0 > 1073928572 >>> 0) {
        break label$5
       }
       label$6 : {
        i64toi32_i32$1 = $3$hi;
        i64toi32_i32$0 = $3;
        i64toi32_i32$2 = 0;
        i64toi32_i32$3 = 0;
        if ((i64toi32_i32$1 | 0) < (i64toi32_i32$2 | 0)) {
         $21 = 1
        } else {
         if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$2 | 0)) {
          if (i64toi32_i32$0 >>> 0 >= i64toi32_i32$3 >>> 0) {
           $22 = 0
          } else {
           $22 = 1
          }
          $23 = $22;
         } else {
          $23 = 0
         }
         $21 = $23;
        }
        if ($21) {
         break label$6
        }
        $0 = $0 + -1.5707963267341256;
        $6 = $0 + -6.077100506506192e-11;
        HEAPF64[$1 >> 3] = $6;
        HEAPF64[($1 + 8 | 0) >> 3] = $0 - $6 + -6.077100506506192e-11;
        $4 = 1;
        break label$1;
       }
       $0 = $0 + 1.5707963267341256;
       $6 = $0 + 6.077100506506192e-11;
       HEAPF64[$1 >> 3] = $6;
       HEAPF64[($1 + 8 | 0) >> 3] = $0 - $6 + 6.077100506506192e-11;
       $4 = -1;
       break label$1;
      }
      label$7 : {
       i64toi32_i32$0 = $3$hi;
       i64toi32_i32$3 = $3;
       i64toi32_i32$1 = 0;
       i64toi32_i32$2 = 0;
       if ((i64toi32_i32$0 | 0) < (i64toi32_i32$1 | 0)) {
        $24 = 1
       } else {
        if ((i64toi32_i32$0 | 0) <= (i64toi32_i32$1 | 0)) {
         if (i64toi32_i32$3 >>> 0 >= i64toi32_i32$2 >>> 0) {
          $25 = 0
         } else {
          $25 = 1
         }
         $26 = $25;
        } else {
         $26 = 0
        }
        $24 = $26;
       }
       if ($24) {
        break label$7
       }
       $0 = $0 + -3.1415926534682512;
       $6 = $0 + -1.2154201013012384e-10;
       HEAPF64[$1 >> 3] = $6;
       HEAPF64[($1 + 8 | 0) >> 3] = $0 - $6 + -1.2154201013012384e-10;
       $4 = 2;
       break label$1;
      }
      $0 = $0 + 3.1415926534682512;
      $6 = $0 + 1.2154201013012384e-10;
      HEAPF64[$1 >> 3] = $6;
      HEAPF64[($1 + 8 | 0) >> 3] = $0 - $6 + 1.2154201013012384e-10;
      $4 = -2;
      break label$1;
     }
     label$8 : {
      if ($5 >>> 0 > 1075594811 >>> 0) {
       break label$8
      }
      label$9 : {
       if ($5 >>> 0 > 1075183036 >>> 0) {
        break label$9
       }
       if (($5 | 0) == (1074977148 | 0)) {
        break label$3
       }
       label$10 : {
        i64toi32_i32$3 = $3$hi;
        i64toi32_i32$2 = $3;
        i64toi32_i32$0 = 0;
        i64toi32_i32$1 = 0;
        if ((i64toi32_i32$3 | 0) < (i64toi32_i32$0 | 0)) {
         $27 = 1
        } else {
         if ((i64toi32_i32$3 | 0) <= (i64toi32_i32$0 | 0)) {
          if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$1 >>> 0) {
           $28 = 0
          } else {
           $28 = 1
          }
          $29 = $28;
         } else {
          $29 = 0
         }
         $27 = $29;
        }
        if ($27) {
         break label$10
        }
        $0 = $0 + -4.712388980202377;
        $6 = $0 + -1.8231301519518578e-10;
        HEAPF64[$1 >> 3] = $6;
        HEAPF64[($1 + 8 | 0) >> 3] = $0 - $6 + -1.8231301519518578e-10;
        $4 = 3;
        break label$1;
       }
       $0 = $0 + 4.712388980202377;
       $6 = $0 + 1.8231301519518578e-10;
       HEAPF64[$1 >> 3] = $6;
       HEAPF64[($1 + 8 | 0) >> 3] = $0 - $6 + 1.8231301519518578e-10;
       $4 = -3;
       break label$1;
      }
      if (($5 | 0) == (1075388923 | 0)) {
       break label$3
      }
      label$11 : {
       i64toi32_i32$2 = $3$hi;
       i64toi32_i32$1 = $3;
       i64toi32_i32$3 = 0;
       i64toi32_i32$0 = 0;
       if ((i64toi32_i32$2 | 0) < (i64toi32_i32$3 | 0)) {
        $30 = 1
       } else {
        if ((i64toi32_i32$2 | 0) <= (i64toi32_i32$3 | 0)) {
         if (i64toi32_i32$1 >>> 0 >= i64toi32_i32$0 >>> 0) {
          $31 = 0
         } else {
          $31 = 1
         }
         $32 = $31;
        } else {
         $32 = 0
        }
        $30 = $32;
       }
       if ($30) {
        break label$11
       }
       $0 = $0 + -6.2831853069365025;
       $6 = $0 + -2.430840202602477e-10;
       HEAPF64[$1 >> 3] = $6;
       HEAPF64[($1 + 8 | 0) >> 3] = $0 - $6 + -2.430840202602477e-10;
       $4 = 4;
       break label$1;
      }
      $0 = $0 + 6.2831853069365025;
      $6 = $0 + 2.430840202602477e-10;
      HEAPF64[$1 >> 3] = $6;
      HEAPF64[($1 + 8 | 0) >> 3] = $0 - $6 + 2.430840202602477e-10;
      $4 = -4;
      break label$1;
     }
     if ($5 >>> 0 > 1094263290 >>> 0) {
      break label$2
     }
    }
    $6 = $0 * .6366197723675814 + 6755399441055744.0 + -6755399441055744.0;
    $7 = $0 + $6 * -1.5707963267341256;
    $8 = $6 * 6.077100506506192e-11;
    $0 = $7 - $8;
    HEAPF64[$1 >> 3] = $0;
    $9 = $5 >>> 20 | 0;
    $152 = $9;
    wasm2js_scratch_store_f64(+$0);
    i64toi32_i32$1 = wasm2js_scratch_load_i32(1 | 0) | 0;
    i64toi32_i32$0 = wasm2js_scratch_load_i32(0 | 0) | 0;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 52;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = 0;
     $33 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
     $33 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
    }
    $10 = ($152 - ($33 & 2047 | 0) | 0 | 0) < (17 | 0);
    label$12 : {
     label$13 : {
      if (!(Math_abs($6) < 2147483648.0)) {
       break label$13
      }
      $4 = ~~$6;
      break label$12;
     }
     $4 = -2147483648;
    }
    label$14 : {
     if ($10) {
      break label$14
     }
     $0 = $6 * 6.077100506303966e-11;
     $11 = $7 - $0;
     $8 = $6 * 2.0222662487959506e-21 - ($7 - $11 - $0);
     $0 = $11 - $8;
     HEAPF64[$1 >> 3] = $0;
     label$15 : {
      $185 = $9;
      wasm2js_scratch_store_f64(+$0);
      i64toi32_i32$2 = wasm2js_scratch_load_i32(1 | 0) | 0;
      i64toi32_i32$1 = wasm2js_scratch_load_i32(0 | 0) | 0;
      i64toi32_i32$0 = 0;
      i64toi32_i32$3 = 52;
      i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$0 = 0;
       $34 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
      } else {
       i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
       $34 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
      }
      if (($185 - ($34 & 2047 | 0) | 0 | 0) >= (50 | 0)) {
       break label$15
      }
      $7 = $11;
      break label$14;
     }
     $0 = $6 * 2.0222662487111665e-21;
     $7 = $11 - $0;
     $8 = $6 * 8.4784276603689e-32 - ($11 - $7 - $0);
     $0 = $7 - $8;
     HEAPF64[$1 >> 3] = $0;
    }
    HEAPF64[($1 + 8 | 0) >> 3] = $7 - $0 - $8;
    break label$1;
   }
   label$16 : {
    if ($5 >>> 0 < 2146435072 >>> 0) {
     break label$16
    }
    $0 = $0 - $0;
    HEAPF64[$1 >> 3] = $0;
    HEAPF64[($1 + 8 | 0) >> 3] = $0;
    $4 = 0;
    break label$1;
   }
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$2 = $3;
   i64toi32_i32$1 = 1048575;
   i64toi32_i32$3 = -1;
   i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
   i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
   i64toi32_i32$2 = 1096810496;
   i64toi32_i32$3 = 0;
   i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
   wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$0 | i64toi32_i32$3 | 0 | 0);
   wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$2 | 0);
   $0 = +wasm2js_scratch_load_f64();
   $4 = 0;
   $10 = 1;
   label$17 : while (1) {
    $4 = ($2 + 16 | 0) + ($4 << 3 | 0) | 0;
    label$18 : {
     label$19 : {
      if (!(Math_abs($0) < 2147483648.0)) {
       break label$19
      }
      $9 = ~~$0;
      break label$18;
     }
     $9 = -2147483648;
    }
    $6 = +($9 | 0);
    HEAPF64[$4 >> 3] = $6;
    $0 = ($0 - $6) * 16777216.0;
    $4 = 1;
    $9 = $10 & 1 | 0;
    $10 = 0;
    if ($9) {
     continue label$17
    }
    break label$17;
   };
   HEAPF64[($2 + 32 | 0) >> 3] = $0;
   label$20 : {
    label$21 : {
     if ($0 == 0.0) {
      break label$21
     }
     $4 = 2;
     break label$20;
    }
    $10 = 1;
    label$22 : while (1) {
     $4 = $10;
     $10 = $4 + -1 | 0;
     if (+HEAPF64[(($2 + 16 | 0) + ($4 << 3 | 0) | 0) >> 3] == 0.0) {
      continue label$22
     }
     break label$22;
    };
   }
   $4 = __rem_pio2_large($2 + 16 | 0 | 0, $2 | 0, ($5 >>> 20 | 0) + -1046 | 0 | 0, $4 + 1 | 0 | 0, 1 | 0) | 0;
   $0 = +HEAPF64[$2 >> 3];
   label$23 : {
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$1 = $3;
    i64toi32_i32$0 = -1;
    i64toi32_i32$3 = -1;
    if ((i64toi32_i32$2 | 0) > (i64toi32_i32$0 | 0)) {
     $35 = 1
    } else {
     if ((i64toi32_i32$2 | 0) >= (i64toi32_i32$0 | 0)) {
      if (i64toi32_i32$1 >>> 0 <= i64toi32_i32$3 >>> 0) {
       $36 = 0
      } else {
       $36 = 1
      }
      $37 = $36;
     } else {
      $37 = 0
     }
     $35 = $37;
    }
    if ($35) {
     break label$23
    }
    HEAPF64[$1 >> 3] = -$0;
    HEAPF64[($1 + 8 | 0) >> 3] = -+HEAPF64[($2 + 8 | 0) >> 3];
    $4 = 0 - $4 | 0;
    break label$1;
   }
   HEAPF64[$1 >> 3] = $0;
   HEAPF64[($1 + 8 | 0) >> 3] = +HEAPF64[($2 + 8 | 0) >> 3];
  }
  __stack_pointer = $2 + 48 | 0;
  return $4 | 0;
 }
 
 function __sin($0, $1, $2) {
  $0 = +$0;
  $1 = +$1;
  $2 = $2 | 0;
  var $3 = 0.0, $5 = 0.0, $4 = 0.0;
  $3 = $0 * $0;
  $4 = $3 * ($3 * $3) * ($3 * 1.58969099521155e-10 + -2.5050760253406863e-08) + ($3 * ($3 * 2.7557313707070068e-06 + -1.984126982985795e-04) + .00833333333332249);
  $5 = $3 * $0;
  label$1 : {
   if ($2) {
    break label$1
   }
   return +($5 * ($3 * $4 + -.16666666666666632) + $0);
  }
  return +($0 - ($3 * ($1 * .5 - $5 * $4) - $1 + $5 * .16666666666666632));
 }
 
 function cos($0) {
  $0 = +$0;
  var $1 = 0, $3 = 0.0, i64toi32_i32$4 = 0, $2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$3 = 0, $8 = 0, i64toi32_i32$2 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  label$1 : {
   label$2 : {
    wasm2js_scratch_store_f64(+$0);
    i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
    i64toi32_i32$2 = wasm2js_scratch_load_i32(0 | 0) | 0;
    i64toi32_i32$3 = 32;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     $8 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0
    } else {
     $8 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0
    }
    $2 = $8 & 2147483647 | 0;
    if ($2 >>> 0 > 1072243195 >>> 0) {
     break label$2
    }
    $3 = 1.0;
    if ($2 >>> 0 < 1044816030 >>> 0) {
     break label$1
    }
    $3 = +__cos(+$0, +(0.0));
    break label$1;
   }
   label$3 : {
    if ($2 >>> 0 < 2146435072 >>> 0) {
     break label$3
    }
    $3 = $0 - $0;
    break label$1;
   }
   label$4 : {
    switch ((__rem_pio2(+$0, $1 | 0) | 0) & 3 | 0 | 0) {
    case 0:
     $3 = +__cos(+(+HEAPF64[$1 >> 3]), +(+HEAPF64[($1 + 8 | 0) >> 3]));
     break label$1;
    case 1:
     $3 = -+__sin(+(+HEAPF64[$1 >> 3]), +(+HEAPF64[($1 + 8 | 0) >> 3]), 1 | 0);
     break label$1;
    case 2:
     $3 = -+__cos(+(+HEAPF64[$1 >> 3]), +(+HEAPF64[($1 + 8 | 0) >> 3]));
     break label$1;
    default:
     break label$4;
    };
   }
   $3 = +__sin(+(+HEAPF64[$1 >> 3]), +(+HEAPF64[($1 + 8 | 0) >> 3]), 1 | 0);
  }
  __stack_pointer = $1 + 16 | 0;
  return +$3;
 }
 
 function exp($0) {
  $0 = +$0;
  var $4 = 0.0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, $3 = 0, i64toi32_i32$0 = 0, i64toi32_i32$3 = 0, $6 = 0.0, $2 = 0, $5 = 0.0, $1 = 0, $13 = 0, $14 = 0, $1$hi = 0;
  wasm2js_scratch_store_f64(+$0);
  i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
  $1 = wasm2js_scratch_load_i32(0 | 0) | 0;
  $1$hi = i64toi32_i32$0;
  i64toi32_i32$2 = $1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 63;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = 0;
   $13 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $13 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
  }
  $2 = $13;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        label$7 : {
         label$8 : {
          i64toi32_i32$1 = $1$hi;
          i64toi32_i32$0 = $1;
          i64toi32_i32$2 = 0;
          i64toi32_i32$3 = 32;
          i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
          if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
           i64toi32_i32$2 = 0;
           $14 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
          } else {
           i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
           $14 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
          }
          $3 = $14 & 2147483647 | 0;
          if ($3 >>> 0 < 1082532651 >>> 0) {
           break label$8
          }
          label$9 : {
           i64toi32_i32$2 = __DOUBLE_BITS(+$0) | 0;
           i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
           i64toi32_i32$1 = i64toi32_i32$2;
           i64toi32_i32$2 = 2147483647;
           i64toi32_i32$3 = -1;
           i64toi32_i32$2 = i64toi32_i32$0 & i64toi32_i32$2 | 0;
           i64toi32_i32$0 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
           i64toi32_i32$1 = 2146435072;
           i64toi32_i32$3 = 0;
           if (i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$0 >>> 0 <= i64toi32_i32$3 >>> 0 | 0) | 0) {
            break label$9
           }
           return +$0;
          }
          label$10 : {
           if (!($0 > 709.782712893384)) {
            break label$10
           }
           return +($0 * 8988465674311579538646525.0e283);
          }
          if (!($0 < -708.3964185322641)) {
           break label$7
          }
          $4 = 0.0;
          if (!($0 < -745.1332191019411)) {
           break label$7
          }
          break label$2;
         }
         if ($3 >>> 0 < 1071001155 >>> 0) {
          break label$4
         }
         if ($3 >>> 0 < 1072734898 >>> 0) {
          break label$6
         }
        }
        label$11 : {
         $4 = $0 * 1.4426950408889634 + +HEAPF64[(($2 << 3 | 0) + 10832 | 0) >> 3];
         if (!(Math_abs($4) < 2147483648.0)) {
          break label$11
         }
         $3 = ~~$4;
         break label$5;
        }
        $3 = -2147483648;
        break label$5;
       }
       $3 = ($2 ^ 1 | 0) - $2 | 0;
      }
      $4 = +($3 | 0);
      $0 = $0 + $4 * -.6931471803691238;
      $5 = $4 * 1.9082149292705877e-10;
      $6 = $0 - $5;
      break label$3;
     }
     if ($3 >>> 0 <= 1043333120 >>> 0) {
      break label$1
     }
     $3 = 0;
     $5 = 0.0;
     $6 = $0;
    }
    $4 = $6 * $6;
    $4 = $6 - $4 * ($4 * ($4 * ($4 * ($4 * 4.1381367970572385e-08 + -1.6533902205465252e-06) + 6.613756321437934e-05) + -2.7777777777015593e-03) + .16666666666666602);
    $4 = $0 + ($6 * $4 / (2.0 - $4) - $5) + 1.0;
    if (!$3) {
     break label$2
    }
    $4 = +scalbn(+$4, $3 | 0);
   }
   return +$4;
  }
  return +($0 + 1.0);
 }
 
 function __DOUBLE_BITS($0) {
  $0 = +$0;
  var i64toi32_i32$0 = 0, $2 = 0;
  wasm2js_scratch_store_f64(+$0);
  i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
  $2 = wasm2js_scratch_load_i32(0 | 0) | 0;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
  return $2 | 0;
 }
 
 function FLAC__window_bartlett($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $7 = Math_fround(0), $3 = 0, $4 = Math_fround(0), $6 = 0, $8 = 0, $5 = 0;
  $2 = $1 + -1 | 0;
  label$1 : {
   label$2 : {
    if (!($1 & 1 | 0)) {
     break label$2
    }
    $3 = 0;
    $4 = Math_fround($2 | 0);
    label$3 : {
     if (($1 | 0) < (0 | 0)) {
      break label$3
     }
     $3 = (($2 | 0) / (2 | 0) | 0) + 1 | 0;
     $5 = $3 & 1 | 0;
     $2 = 0;
     label$4 : {
      if ($1 >>> 0 < 3 >>> 0) {
       break label$4
      }
      $6 = $3 & -2 | 0;
      $2 = 0;
      label$5 : while (1) {
       $7 = Math_fround($2 | 0);
       HEAPF32[($0 + ($2 << 2 | 0) | 0) >> 2] = Math_fround(Math_fround($7 + $7) / $4);
       $8 = $2 | 1 | 0;
       $7 = Math_fround($8 | 0);
       HEAPF32[($0 + ($8 << 2 | 0) | 0) >> 2] = Math_fround(Math_fround($7 + $7) / $4);
       $2 = $2 + 2 | 0;
       $6 = $6 + -2 | 0;
       if ($6) {
        continue label$5
       }
       break label$5;
      };
     }
     if (!$5) {
      break label$3
     }
     $7 = Math_fround($2 | 0);
     HEAPF32[($0 + ($2 << 2 | 0) | 0) >> 2] = Math_fround(Math_fround($7 + $7) / $4);
    }
    if (($3 | 0) >= ($1 | 0)) {
     break label$1
    }
    $2 = $3 ^ -1 | 0;
    label$6 : {
     if (!(($1 - $3 | 0) & 1 | 0)) {
      break label$6
     }
     $7 = Math_fround($3 | 0);
     HEAPF32[($0 + ($3 << 2 | 0) | 0) >> 2] = Math_fround(Math_fround(2.0) - Math_fround(Math_fround($7 + $7) / $4));
     $3 = $3 + 1 | 0;
    }
    if (($2 | 0) == (0 - $1 | 0 | 0)) {
     break label$1
    }
    label$7 : while (1) {
     $7 = Math_fround($3 | 0);
     HEAPF32[($0 + ($3 << 2 | 0) | 0) >> 2] = Math_fround(Math_fround(2.0) - Math_fround(Math_fround($7 + $7) / $4));
     $2 = $3 + 1 | 0;
     $7 = Math_fround($2 | 0);
     HEAPF32[($0 + ($2 << 2 | 0) | 0) >> 2] = Math_fround(Math_fround(2.0) - Math_fround(Math_fround($7 + $7) / $4));
     $3 = $3 + 2 | 0;
     if (($3 | 0) != ($1 | 0)) {
      continue label$7
     }
     break label$1;
    };
   }
   $8 = ($1 | 0) / (2 | 0) | 0;
   $4 = Math_fround($2 | 0);
   $2 = 0;
   label$8 : {
    if (($1 | 0) < (2 | 0)) {
     break label$8
    }
    $5 = $8 & 1 | 0;
    $2 = 0;
    label$9 : {
     if (($1 & -2 | 0 | 0) == (2 | 0)) {
      break label$9
     }
     $3 = $8 & -2 | 0;
     $2 = 0;
     label$10 : while (1) {
      $7 = Math_fround($2 | 0);
      HEAPF32[($0 + ($2 << 2 | 0) | 0) >> 2] = Math_fround(Math_fround($7 + $7) / $4);
      $6 = $2 | 1 | 0;
      $7 = Math_fround($6 | 0);
      HEAPF32[($0 + ($6 << 2 | 0) | 0) >> 2] = Math_fround(Math_fround($7 + $7) / $4);
      $2 = $2 + 2 | 0;
      $3 = $3 + -2 | 0;
      if ($3) {
       continue label$10
      }
      break label$10;
     };
    }
    label$11 : {
     if (!$5) {
      break label$11
     }
     $7 = Math_fround($2 | 0);
     HEAPF32[($0 + ($2 << 2 | 0) | 0) >> 2] = Math_fround(Math_fround($7 + $7) / $4);
    }
    $2 = $8;
   }
   if (($2 | 0) >= ($1 | 0)) {
    break label$1
   }
   $3 = $2 ^ -1 | 0;
   label$12 : {
    if (!(($1 - $2 | 0) & 1 | 0)) {
     break label$12
    }
    $7 = Math_fround($2 | 0);
    HEAPF32[($0 + ($2 << 2 | 0) | 0) >> 2] = Math_fround(Math_fround(2.0) - Math_fround(Math_fround($7 + $7) / $4));
    $2 = $2 + 1 | 0;
   }
   if (($3 | 0) == (0 - $1 | 0 | 0)) {
    break label$1
   }
   label$13 : while (1) {
    $7 = Math_fround($2 | 0);
    HEAPF32[($0 + ($2 << 2 | 0) | 0) >> 2] = Math_fround(Math_fround(2.0) - Math_fround(Math_fround($7 + $7) / $4));
    $3 = $2 + 1 | 0;
    $7 = Math_fround($3 | 0);
    HEAPF32[($0 + ($3 << 2 | 0) | 0) >> 2] = Math_fround(Math_fround(2.0) - Math_fround(Math_fround($7 + $7) / $4));
    $2 = $2 + 2 | 0;
    if (($2 | 0) != ($1 | 0)) {
     continue label$13
    }
    break label$13;
   };
  }
 }
 
 function FLAC__window_bartlett_hann($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $3 = 0, $4 = Math_fround(0), $2 = Math_fround(0), wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
  label$1 : {
   if (($1 | 0) < (1 | 0)) {
    break label$1
   }
   $2 = Math_fround($1 + -1 | 0 | 0);
   $3 = 0;
   label$2 : while (1) {
    $4 = Math_fround(Math_fround($3 | 0) / $2);
    (wasm2js_i32$0 = $0 + ($3 << 2 | 0) | 0, wasm2js_f32$0 = Math_fround(+Math_fround(Math_abs(Math_fround($4 + Math_fround(-.5)))) * -.47999998927116394 + .6200000047683716 + +cos(+(+$4 * 6.283185307179586)) * -.3799999952316284)), HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
    $3 = $3 + 1 | 0;
    if (($3 | 0) != ($1 | 0)) {
     continue label$2
    }
    break label$2;
   };
  }
 }
 
 function FLAC__window_blackman($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $3 = 0, $2 = 0.0, $4 = 0.0, wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
  label$1 : {
   if (($1 | 0) < (1 | 0)) {
    break label$1
   }
   $2 = +($1 + -1 | 0 | 0);
   $3 = 0;
   label$2 : while (1) {
    $4 = +($3 | 0);
    (wasm2js_i32$0 = $0 + ($3 << 2 | 0) | 0, wasm2js_f32$0 = Math_fround(+cos(+($4 * 12.566370614359172 / $2)) * .07999999821186066 + (+cos(+($4 * 6.283185307179586 / $2)) * -.5 + .41999998688697815))), HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
    $3 = $3 + 1 | 0;
    if (($3 | 0) != ($1 | 0)) {
     continue label$2
    }
    break label$2;
   };
  }
 }
 
 function FLAC__window_blackman_harris_4term_92db_sidelobe($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $3 = 0, $2 = 0.0, $4 = 0.0, wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
  label$1 : {
   if (($1 | 0) < (1 | 0)) {
    break label$1
   }
   $2 = +($1 + -1 | 0 | 0);
   $3 = 0;
   label$2 : while (1) {
    $4 = +($3 | 0);
    (wasm2js_i32$0 = $0 + ($3 << 2 | 0) | 0, wasm2js_f32$0 = Math_fround(+cos(+($4 * 12.566370614359172 / $2)) * .14127999544143677 + (+cos(+($4 * 6.283185307179586 / $2)) * -.488290011882782 + .35874998569488525) + +cos(+($4 * 18.84955592153876 / $2)) * -.011680000461637974)), HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
    $3 = $3 + 1 | 0;
    if (($3 | 0) != ($1 | 0)) {
     continue label$2
    }
    break label$2;
   };
  }
 }
 
 function FLAC__window_connes($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0.0, $5 = 0.0, $4 = 0, $6 = 0, $3 = 0;
  label$1 : {
   if (($1 | 0) < (1 | 0)) {
    break label$1
   }
   $2 = +($1 + -1 | 0 | 0) * .5;
   $3 = $1 & 1 | 0;
   $4 = 0;
   label$2 : {
    if (($1 | 0) == (1 | 0)) {
     break label$2
    }
    $1 = $1 & -2 | 0;
    $4 = 0;
    label$3 : while (1) {
     $5 = (+($4 | 0) - $2) / $2;
     $5 = 1.0 - $5 * $5;
     HEAPF32[($0 + ($4 << 2 | 0) | 0) >> 2] = Math_fround($5 * $5);
     $6 = $4 | 1 | 0;
     $5 = (+($6 | 0) - $2) / $2;
     $5 = 1.0 - $5 * $5;
     HEAPF32[($0 + ($6 << 2 | 0) | 0) >> 2] = Math_fround($5 * $5);
     $4 = $4 + 2 | 0;
     $1 = $1 + -2 | 0;
     if ($1) {
      continue label$3
     }
     break label$3;
    };
   }
   if (!$3) {
    break label$1
   }
   $2 = (+($4 | 0) - $2) / $2;
   $2 = 1.0 - $2 * $2;
   HEAPF32[($0 + ($4 << 2 | 0) | 0) >> 2] = Math_fround($2 * $2);
  }
 }
 
 function FLAC__window_flattop($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $3 = 0, $2 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
  label$1 : {
   if (($1 | 0) < (1 | 0)) {
    break label$1
   }
   $2 = +($1 + -1 | 0 | 0);
   $3 = 0;
   label$2 : while (1) {
    $4 = +($3 | 0);
    $5 = +cos(+($4 * 12.566370614359172 / $2));
    $6 = +cos(+($4 * 6.283185307179586 / $2));
    $7 = +cos(+($4 * 18.84955592153876 / $2));
    (wasm2js_i32$0 = $0 + ($3 << 2 | 0) | 0, wasm2js_f32$0 = Math_fround(+cos(+($4 * 25.132741228718345 / $2)) * 6.9473679177463055e-03 + ($5 * .27726316452026367 + ($6 * -.4166315793991089 + .21557894349098206) + $7 * -.08357894420623779))), HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
    $3 = $3 + 1 | 0;
    if (($3 | 0) != ($1 | 0)) {
     continue label$2
    }
    break label$2;
   };
  }
 }
 
 function FLAC__window_gauss($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = Math_fround($2);
  var $6 = 0, $3 = 0.0, $7 = 0.0, $4 = 0.0, $8 = 0, $5 = 0, wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
  label$1 : {
   if (($1 | 0) < (1 | 0)) {
    break label$1
   }
   $3 = +($1 + -1 | 0 | 0) * .5;
   $4 = $3 * +$2;
   $5 = $1 & 1 | 0;
   $6 = 0;
   label$2 : {
    if (($1 | 0) == (1 | 0)) {
     break label$2
    }
    $1 = $1 & -2 | 0;
    $6 = 0;
    label$3 : while (1) {
     $7 = (+($6 | 0) - $3) / $4;
     (wasm2js_i32$0 = $0 + ($6 << 2 | 0) | 0, wasm2js_f32$0 = Math_fround(+exp(+($7 * ($7 * -.5))))), HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
     $8 = $6 | 1 | 0;
     $7 = (+($8 | 0) - $3) / $4;
     (wasm2js_i32$0 = $0 + ($8 << 2 | 0) | 0, wasm2js_f32$0 = Math_fround(+exp(+($7 * ($7 * -.5))))), HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
     $6 = $6 + 2 | 0;
     $1 = $1 + -2 | 0;
     if ($1) {
      continue label$3
     }
     break label$3;
    };
   }
   if (!$5) {
    break label$1
   }
   $3 = (+($6 | 0) - $3) / $4;
   (wasm2js_i32$0 = $0 + ($6 << 2 | 0) | 0, wasm2js_f32$0 = Math_fround(+exp(+($3 * ($3 * -.5))))), HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
  }
 }
 
 function FLAC__window_hamming($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $2 = 0.0, $5 = 0, $3 = 0, wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
  label$1 : {
   if (($1 | 0) < (1 | 0)) {
    break label$1
   }
   $2 = +($1 + -1 | 0 | 0);
   $3 = $1 & 1 | 0;
   $4 = 0;
   label$2 : {
    if (($1 | 0) == (1 | 0)) {
     break label$2
    }
    $1 = $1 & -2 | 0;
    $4 = 0;
    label$3 : while (1) {
     (wasm2js_i32$0 = $0 + ($4 << 2 | 0) | 0, wasm2js_f32$0 = Math_fround(.5400000214576721 - +cos(+(+($4 | 0) * 6.283185307179586 / $2)) * .46000000834465027)), HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
     $5 = $4 | 1 | 0;
     (wasm2js_i32$0 = $0 + ($5 << 2 | 0) | 0, wasm2js_f32$0 = Math_fround(.5400000214576721 - +cos(+(+($5 | 0) * 6.283185307179586 / $2)) * .46000000834465027)), HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
     $4 = $4 + 2 | 0;
     $1 = $1 + -2 | 0;
     if ($1) {
      continue label$3
     }
     break label$3;
    };
   }
   if (!$3) {
    break label$1
   }
   (wasm2js_i32$0 = $0 + ($4 << 2 | 0) | 0, wasm2js_f32$0 = Math_fround(+cos(+(+($4 | 0) * 6.283185307179586 / $2)) * -.46000000834465027 + .5400000214576721)), HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
  }
 }
 
 function FLAC__window_hann($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $2 = 0.0, $5 = 0, $3 = 0, wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
  label$1 : {
   if (($1 | 0) < (1 | 0)) {
    break label$1
   }
   $2 = +($1 + -1 | 0 | 0);
   $3 = $1 & 1 | 0;
   $4 = 0;
   label$2 : {
    if (($1 | 0) == (1 | 0)) {
     break label$2
    }
    $1 = $1 & -2 | 0;
    $4 = 0;
    label$3 : while (1) {
     (wasm2js_i32$0 = $0 + ($4 << 2 | 0) | 0, wasm2js_f32$0 = Math_fround(.5 - +cos(+(+($4 | 0) * 6.283185307179586 / $2)) * .5)), HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
     $5 = $4 | 1 | 0;
     (wasm2js_i32$0 = $0 + ($5 << 2 | 0) | 0, wasm2js_f32$0 = Math_fround(.5 - +cos(+(+($5 | 0) * 6.283185307179586 / $2)) * .5)), HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
     $4 = $4 + 2 | 0;
     $1 = $1 + -2 | 0;
     if ($1) {
      continue label$3
     }
     break label$3;
    };
   }
   if (!$3) {
    break label$1
   }
   (wasm2js_i32$0 = $0 + ($4 << 2 | 0) | 0, wasm2js_f32$0 = Math_fround(.5 - +cos(+(+($4 | 0) * 6.283185307179586 / $2)) * .5)), HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
  }
 }
 
 function FLAC__window_kaiser_bessel($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $3 = 0, $2 = 0.0, $4 = 0.0, wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
  label$1 : {
   if (($1 | 0) < (1 | 0)) {
    break label$1
   }
   $2 = +($1 + -1 | 0 | 0);
   $3 = 0;
   label$2 : while (1) {
    $4 = +($3 | 0);
    (wasm2js_i32$0 = $0 + ($3 << 2 | 0) | 0, wasm2js_f32$0 = Math_fround(+cos(+($4 * 12.566370614359172 / $2)) * .09799999743700027 + (+cos(+($4 * 6.283185307179586 / $2)) * -.49799999594688416 + .4020000100135803) + +cos(+($4 * 18.84955592153876 / $2)) * -1.0000000474974513e-03)), HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
    $3 = $3 + 1 | 0;
    if (($3 | 0) != ($1 | 0)) {
     continue label$2
    }
    break label$2;
   };
  }
 }
 
 function FLAC__window_nuttall($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $3 = 0, $2 = 0.0, $4 = 0.0, wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
  label$1 : {
   if (($1 | 0) < (1 | 0)) {
    break label$1
   }
   $2 = +($1 + -1 | 0 | 0);
   $3 = 0;
   label$2 : while (1) {
    $4 = +($3 | 0);
    (wasm2js_i32$0 = $0 + ($3 << 2 | 0) | 0, wasm2js_f32$0 = Math_fround(+cos(+($4 * 12.566370614359172 / $2)) * .13659949600696564 + (+cos(+($4 * 6.283185307179586 / $2)) * -.48917749524116516 + .36358189582824707) + +cos(+($4 * 18.84955592153876 / $2)) * -.010641099885106087)), HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
    $3 = $3 + 1 | 0;
    if (($3 | 0) != ($1 | 0)) {
     continue label$2
    }
    break label$2;
   };
  }
 }
 
 function FLAC__window_rectangle($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $3 = 0, $2 = 0, $4 = 0;
  label$1 : {
   if (($1 | 0) < (1 | 0)) {
    break label$1
   }
   $2 = $1 & 7 | 0;
   $3 = 0;
   label$2 : {
    if (($1 + -1 | 0) >>> 0 < 7 >>> 0) {
     break label$2
    }
    $4 = $1 & -8 | 0;
    $3 = 0;
    label$3 : while (1) {
     $1 = $3 << 2 | 0;
     HEAP32[($0 + $1 | 0) >> 2] = 1065353216;
     HEAP32[($0 + ($1 | 4 | 0) | 0) >> 2] = 1065353216;
     HEAP32[($0 + ($1 | 8 | 0) | 0) >> 2] = 1065353216;
     HEAP32[($0 + ($1 | 12 | 0) | 0) >> 2] = 1065353216;
     HEAP32[($0 + ($1 | 16 | 0) | 0) >> 2] = 1065353216;
     HEAP32[($0 + ($1 | 20 | 0) | 0) >> 2] = 1065353216;
     HEAP32[($0 + ($1 | 24 | 0) | 0) >> 2] = 1065353216;
     HEAP32[($0 + ($1 | 28 | 0) | 0) >> 2] = 1065353216;
     $3 = $3 + 8 | 0;
     $4 = $4 + -8 | 0;
     if ($4) {
      continue label$3
     }
     break label$3;
    };
   }
   if (!$2) {
    break label$1
   }
   label$4 : while (1) {
    HEAP32[($0 + ($3 << 2 | 0) | 0) >> 2] = 1065353216;
    $3 = $3 + 1 | 0;
    $2 = $2 + -1 | 0;
    if ($2) {
     continue label$4
    }
    break label$4;
   };
  }
 }
 
 function FLAC__window_triangle($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $3 = 0, $7 = 0, $8 = Math_fround(0), $2 = Math_fround(0), $5 = 0, $6 = 0;
  $2 = Math_fround(Math_fround($1 | 0) + Math_fround(1.0));
  $3 = 1;
  label$1 : {
   label$2 : {
    if (!($1 & 1 | 0)) {
     break label$2
    }
    label$3 : {
     if (($1 | 0) < (1 | 0)) {
      break label$3
     }
     $3 = $1 + 1 | 0;
     $4 = ($3 | 0) / (2 | 0) | 0;
     $5 = ($4 | 0) > (1 | 0) ? $4 : 1;
     $6 = $5 & 1 | 0;
     $4 = 1;
     label$4 : {
      if (($3 | 0) < (4 | 0)) {
       break label$4
      }
      $3 = $5 & 2147483646 | 0;
      $4 = 1;
      label$5 : while (1) {
       $7 = $0 + ($4 << 2 | 0) | 0;
       $8 = Math_fround($4 | 0);
       HEAPF32[($7 + -4 | 0) >> 2] = Math_fround(Math_fround($8 + $8) / $2);
       $8 = Math_fround($4 + 1 | 0 | 0);
       HEAPF32[$7 >> 2] = Math_fround(Math_fround($8 + $8) / $2);
       $4 = $4 + 2 | 0;
       $3 = $3 + -2 | 0;
       if ($3) {
        continue label$5
       }
       break label$5;
      };
     }
     $3 = $5 + 1 | 0;
     if (!$6) {
      break label$3
     }
     $8 = Math_fround($4 | 0);
     HEAPF32[((($4 << 2 | 0) + $0 | 0) + -4 | 0) >> 2] = Math_fround(Math_fround($8 + $8) / $2);
    }
    if (($3 | 0) > ($1 | 0)) {
     break label$1
    }
    $4 = $3;
    label$6 : {
     $7 = $1 - $4 | 0;
     if (!(($7 + 1 | 0) & 1 | 0)) {
      break label$6
     }
     HEAPF32[((($3 << 2 | 0) + $0 | 0) + -4 | 0) >> 2] = Math_fround(Math_fround(($7 << 1 | 0) + 2 | 0 | 0) / $2);
     $4 = $3 + 1 | 0;
    }
    if (($3 | 0) == ($1 | 0)) {
     break label$1
    }
    label$7 : while (1) {
     $3 = $0 + ($4 << 2 | 0) | 0;
     HEAPF32[($3 + -4 | 0) >> 2] = Math_fround(Math_fround((($1 - $4 | 0) << 1 | 0) + 2 | 0 | 0) / $2);
     $7 = $4 + 1 | 0;
     HEAPF32[$3 >> 2] = Math_fround(Math_fround((($1 - $7 | 0) << 1 | 0) + 2 | 0 | 0) / $2);
     $4 = $4 + 2 | 0;
     if (($1 | 0) != ($7 | 0)) {
      continue label$7
     }
     break label$1;
    };
   }
   $3 = 1;
   label$8 : {
    if (($1 | 0) < (2 | 0)) {
     break label$8
    }
    $4 = 1;
    label$9 : {
     $5 = $1 >>> 1 | 0;
     if (($5 | 0) == (1 | 0)) {
      break label$9
     }
     $3 = $5 & 2147483646 | 0;
     $4 = 1;
     label$10 : while (1) {
      $7 = $0 + ($4 << 2 | 0) | 0;
      $8 = Math_fround($4 | 0);
      HEAPF32[($7 + -4 | 0) >> 2] = Math_fround(Math_fround($8 + $8) / $2);
      $8 = Math_fround($4 + 1 | 0 | 0);
      HEAPF32[$7 >> 2] = Math_fround(Math_fround($8 + $8) / $2);
      $4 = $4 + 2 | 0;
      $3 = $3 + -2 | 0;
      if ($3) {
       continue label$10
      }
      break label$10;
     };
    }
    $3 = $5 + 1 | 0;
    if (!($1 & 2 | 0)) {
     break label$8
    }
    $8 = Math_fround($4 | 0);
    HEAPF32[((($4 << 2 | 0) + $0 | 0) + -4 | 0) >> 2] = Math_fround(Math_fround($8 + $8) / $2);
   }
   if (($3 | 0) > ($1 | 0)) {
    break label$1
   }
   $4 = $3;
   label$11 : {
    $7 = $1 - $4 | 0;
    if (!(($7 + 1 | 0) & 1 | 0)) {
     break label$11
    }
    HEAPF32[((($3 << 2 | 0) + $0 | 0) + -4 | 0) >> 2] = Math_fround(Math_fround(($7 << 1 | 0) + 2 | 0 | 0) / $2);
    $4 = $3 + 1 | 0;
   }
   if (($3 | 0) == ($1 | 0)) {
    break label$1
   }
   label$12 : while (1) {
    $3 = $0 + ($4 << 2 | 0) | 0;
    HEAPF32[($3 + -4 | 0) >> 2] = Math_fround(Math_fround((($1 - $4 | 0) << 1 | 0) + 2 | 0 | 0) / $2);
    $7 = $4 + 1 | 0;
    HEAPF32[$3 >> 2] = Math_fround(Math_fround((($1 - $7 | 0) << 1 | 0) + 2 | 0 | 0) / $2);
    $4 = $4 + 2 | 0;
    if (($1 | 0) != ($7 | 0)) {
     continue label$12
    }
    break label$12;
   };
  }
 }
 
 function FLAC__window_tukey($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = Math_fround($2);
  var $6 = 0, $4 = 0, $3 = 0, $5 = 0, $7 = 0.0, $8 = 0, wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
  label$1 : {
   label$2 : {
    if (!($2 <= Math_fround(0.0))) {
     break label$2
    }
    if (($1 | 0) < (1 | 0)) {
     break label$1
    }
    $3 = $1 & 7 | 0;
    $4 = 0;
    label$3 : {
     if (($1 + -1 | 0) >>> 0 < 7 >>> 0) {
      break label$3
     }
     $5 = $1 & -8 | 0;
     $4 = 0;
     label$4 : while (1) {
      $6 = $4 << 2 | 0;
      HEAP32[($0 + $6 | 0) >> 2] = 1065353216;
      HEAP32[($0 + ($6 | 4 | 0) | 0) >> 2] = 1065353216;
      HEAP32[($0 + ($6 | 8 | 0) | 0) >> 2] = 1065353216;
      HEAP32[($0 + ($6 | 12 | 0) | 0) >> 2] = 1065353216;
      HEAP32[($0 + ($6 | 16 | 0) | 0) >> 2] = 1065353216;
      HEAP32[($0 + ($6 | 20 | 0) | 0) >> 2] = 1065353216;
      HEAP32[($0 + ($6 | 24 | 0) | 0) >> 2] = 1065353216;
      HEAP32[($0 + ($6 | 28 | 0) | 0) >> 2] = 1065353216;
      $4 = $4 + 8 | 0;
      $5 = $5 + -8 | 0;
      if ($5) {
       continue label$4
      }
      break label$4;
     };
    }
    if (!$3) {
     break label$1
    }
    label$5 : while (1) {
     HEAP32[($0 + ($4 << 2 | 0) | 0) >> 2] = 1065353216;
     $4 = $4 + 1 | 0;
     $3 = $3 + -1 | 0;
     if ($3) {
      continue label$5
     }
     break label$1;
    };
   }
   label$6 : {
    if (!($2 >= Math_fround(1.0))) {
     break label$6
    }
    if (($1 | 0) < (1 | 0)) {
     break label$1
    }
    $7 = +($1 + -1 | 0 | 0);
    $5 = $1 & 1 | 0;
    $6 = 0;
    label$7 : {
     if (($1 | 0) == (1 | 0)) {
      break label$7
     }
     $4 = $1 & -2 | 0;
     $6 = 0;
     label$8 : while (1) {
      (wasm2js_i32$0 = $0 + ($6 << 2 | 0) | 0, wasm2js_f32$0 = Math_fround(.5 - +cos(+(+($6 | 0) * 6.283185307179586 / $7)) * .5)), HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
      $3 = $6 | 1 | 0;
      (wasm2js_i32$0 = $0 + ($3 << 2 | 0) | 0, wasm2js_f32$0 = Math_fround(.5 - +cos(+(+($3 | 0) * 6.283185307179586 / $7)) * .5)), HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
      $6 = $6 + 2 | 0;
      $4 = $4 + -2 | 0;
      if ($4) {
       continue label$8
      }
      break label$8;
     };
    }
    if (!$5) {
     break label$1
    }
    (wasm2js_i32$0 = $0 + ($6 << 2 | 0) | 0, wasm2js_f32$0 = Math_fround(.5 - +cos(+(+($6 | 0) * 6.283185307179586 / $7)) * .5)), HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
    return;
   }
   label$9 : {
    label$10 : {
     $2 = Math_fround(Math_fround($2 * Math_fround(.5)) * Math_fround($1 | 0));
     if (!(Math_fround(Math_abs($2)) < Math_fround(2147483648.0))) {
      break label$10
     }
     $8 = ~~$2;
     break label$9;
    }
    $8 = -2147483648;
   }
   label$11 : {
    if (($1 | 0) < (1 | 0)) {
     break label$11
    }
    $3 = $1 & 7 | 0;
    $4 = 0;
    label$12 : {
     if (($1 + -1 | 0) >>> 0 < 7 >>> 0) {
      break label$12
     }
     $5 = $1 & -8 | 0;
     $4 = 0;
     label$13 : while (1) {
      $6 = $4 << 2 | 0;
      HEAP32[($0 + $6 | 0) >> 2] = 1065353216;
      HEAP32[($0 + ($6 | 4 | 0) | 0) >> 2] = 1065353216;
      HEAP32[($0 + ($6 | 8 | 0) | 0) >> 2] = 1065353216;
      HEAP32[($0 + ($6 | 12 | 0) | 0) >> 2] = 1065353216;
      HEAP32[($0 + ($6 | 16 | 0) | 0) >> 2] = 1065353216;
      HEAP32[($0 + ($6 | 20 | 0) | 0) >> 2] = 1065353216;
      HEAP32[($0 + ($6 | 24 | 0) | 0) >> 2] = 1065353216;
      HEAP32[($0 + ($6 | 28 | 0) | 0) >> 2] = 1065353216;
      $4 = $4 + 8 | 0;
      $5 = $5 + -8 | 0;
      if ($5) {
       continue label$13
      }
      break label$13;
     };
    }
    if (!$3) {
     break label$11
    }
    label$14 : while (1) {
     HEAP32[($0 + ($4 << 2 | 0) | 0) >> 2] = 1065353216;
     $4 = $4 + 1 | 0;
     $3 = $3 + -1 | 0;
     if ($3) {
      continue label$14
     }
     break label$14;
    };
   }
   if (($8 | 0) < (2 | 0)) {
    break label$1
   }
   $4 = $1 - $8 | 0;
   $3 = $8 + -1 | 0;
   $7 = +($3 | 0);
   $6 = 0;
   label$15 : while (1) {
    (wasm2js_i32$0 = $0 + ($6 << 2 | 0) | 0, wasm2js_f32$0 = Math_fround(.5 - +cos(+(+($6 | 0) * 3.141592653589793 / $7)) * .5)), HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
    (wasm2js_i32$0 = $0 + (($4 + $6 | 0) << 2 | 0) | 0, wasm2js_f32$0 = Math_fround(.5 - +cos(+(+($6 + $3 | 0 | 0) * 3.141592653589793 / $7)) * .5)), HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
    $6 = $6 + 1 | 0;
    if (($6 | 0) != ($8 | 0)) {
     continue label$15
    }
    break label$15;
   };
  }
 }
 
 function FLAC__window_partial_tukey($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = Math_fround($2);
  $3 = Math_fround($3);
  $4 = Math_fround($4);
  var $10 = 0, $6 = 0, $8 = 0, $9 = 0, $7 = 0, $5 = Math_fround(0), $11 = 0.0, wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
  label$1 : while (1) {
   $5 = $2;
   $2 = Math_fround(.05000000074505806);
   if ($5 <= Math_fround(0.0)) {
    continue label$1
   }
   $2 = Math_fround(.949999988079071);
   if ($5 >= Math_fround(1.0)) {
    continue label$1
   }
   break label$1;
  };
  label$2 : {
   label$3 : {
    $2 = Math_fround($1 | 0);
    $3 = Math_fround($2 * $3);
    if (!(Math_fround(Math_abs($3)) < Math_fround(2147483648.0))) {
     break label$3
    }
    $6 = ~~$3;
    break label$2;
   }
   $6 = -2147483648;
  }
  label$4 : {
   label$5 : {
    $2 = Math_fround($2 * $4);
    if (!(Math_fround(Math_abs($2)) < Math_fround(2147483648.0))) {
     break label$5
    }
    $7 = ~~$2;
    break label$4;
   }
   $7 = -2147483648;
  }
  label$6 : {
   label$7 : {
    $2 = Math_fround(Math_fround($5 * Math_fround(.5)) * Math_fround($7 - $6 | 0 | 0));
    if (!(Math_fround(Math_abs($2)) < Math_fround(2147483648.0))) {
     break label$7
    }
    $8 = ~~$2;
    break label$6;
   }
   $8 = -2147483648;
  }
  $9 = 1;
  $10 = 0;
  label$8 : {
   if (($6 | 0) < (1 | 0)) {
    break label$8
   }
   if (($1 | 0) <= (0 | 0)) {
    break label$8
   }
   label$9 : while (1) {
    HEAP32[($0 + ($10 << 2 | 0) | 0) >> 2] = 0;
    $10 = $10 + 1 | 0;
    if (($10 | 0) >= ($6 | 0)) {
     break label$8
    }
    if (($10 | 0) < ($1 | 0)) {
     continue label$9
    }
    break label$9;
   };
  }
  $11 = +($8 | 0);
  label$10 : {
   $6 = $8 + $6 | 0;
   if (($10 | 0) >= ($6 | 0)) {
    break label$10
   }
   if (($10 | 0) >= ($1 | 0)) {
    break label$10
   }
   label$11 : while (1) {
    (wasm2js_i32$0 = $0 + ($10 << 2 | 0) | 0, wasm2js_f32$0 = Math_fround(.5 - +cos(+(+($9 | 0) * 3.141592653589793 / $11)) * .5)), HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
    $10 = $10 + 1 | 0;
    if (($10 | 0) >= ($6 | 0)) {
     break label$10
    }
    $9 = $9 + 1 | 0;
    if (($10 | 0) < ($1 | 0)) {
     continue label$11
    }
    break label$11;
   };
  }
  label$12 : {
   $9 = $7 - $8 | 0;
   if (($10 | 0) >= ($9 | 0)) {
    break label$12
   }
   if (($10 | 0) >= ($1 | 0)) {
    break label$12
   }
   label$13 : while (1) {
    HEAP32[($0 + ($10 << 2 | 0) | 0) >> 2] = 1065353216;
    $10 = $10 + 1 | 0;
    if (($10 | 0) >= ($9 | 0)) {
     break label$12
    }
    if (($10 | 0) < ($1 | 0)) {
     continue label$13
    }
    break label$13;
   };
  }
  label$14 : {
   if (($10 | 0) >= ($7 | 0)) {
    break label$14
   }
   if (($10 | 0) >= ($1 | 0)) {
    break label$14
   }
   label$15 : while (1) {
    (wasm2js_i32$0 = $0 + ($10 << 2 | 0) | 0, wasm2js_f32$0 = Math_fround(.5 - +cos(+(+($8 | 0) * 3.141592653589793 / $11)) * .5)), HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
    $10 = $10 + 1 | 0;
    if (($10 | 0) >= ($7 | 0)) {
     break label$14
    }
    $8 = $8 + -1 | 0;
    if (($10 | 0) < ($1 | 0)) {
     continue label$15
    }
    break label$15;
   };
  }
  label$16 : {
   if (($10 | 0) >= ($1 | 0)) {
    break label$16
   }
   memset($0 + ($10 << 2 | 0) | 0 | 0, 0 | 0, ($1 - $10 | 0) << 2 | 0 | 0) | 0;
  }
 }
 
 function FLAC__window_punchout_tukey($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = Math_fround($2);
  $3 = Math_fround($3);
  $4 = Math_fround($4);
  var $13 = 0, $7 = 0, $11 = 0, $5 = Math_fround(0), $8 = 0, $12 = 0.0, $6 = 0, $9 = 0, $10 = 0, wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
  label$1 : while (1) {
   $5 = $2;
   $2 = Math_fround(.05000000074505806);
   if ($5 <= Math_fround(0.0)) {
    continue label$1
   }
   $2 = Math_fround(.949999988079071);
   if ($5 >= Math_fround(1.0)) {
    continue label$1
   }
   break label$1;
  };
  $2 = Math_fround($5 * Math_fround(.5));
  label$2 : {
   label$3 : {
    $5 = Math_fround($1 | 0);
    $3 = Math_fround($5 * $3);
    if (!(Math_fround(Math_abs($3)) < Math_fround(2147483648.0))) {
     break label$3
    }
    $6 = ~~$3;
    break label$2;
   }
   $6 = -2147483648;
  }
  label$4 : {
   label$5 : {
    $3 = Math_fround($2 * Math_fround($6 | 0));
    if (!(Math_fround(Math_abs($3)) < Math_fround(2147483648.0))) {
     break label$5
    }
    $7 = ~~$3;
    break label$4;
   }
   $7 = -2147483648;
  }
  $8 = 1;
  label$6 : {
   label$7 : {
    $5 = Math_fround($5 * $4);
    if (!(Math_fround(Math_abs($5)) < Math_fround(2147483648.0))) {
     break label$7
    }
    $9 = ~~$5;
    break label$6;
   }
   $9 = -2147483648;
  }
  $10 = ($7 | 0) < (1 | 0);
  label$8 : {
   label$9 : {
    $2 = Math_fround($2 * Math_fround($1 - $9 | 0 | 0));
    if (!(Math_fround(Math_abs($2)) < Math_fround(2147483648.0))) {
     break label$9
    }
    $11 = ~~$2;
    break label$8;
   }
   $11 = -2147483648;
  }
  $12 = +($7 | 0);
  $13 = 0;
  label$10 : {
   if ($10) {
    break label$10
   }
   if (($1 | 0) <= (0 | 0)) {
    break label$10
   }
   label$11 : while (1) {
    (wasm2js_i32$0 = $0 + ($13 << 2 | 0) | 0, wasm2js_f32$0 = Math_fround(.5 - +cos(+(+($8 | 0) * 3.141592653589793 / $12)) * .5)), HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
    $13 = $13 + 1 | 0;
    if (($13 | 0) >= ($7 | 0)) {
     break label$10
    }
    $8 = $8 + 1 | 0;
    if (($13 | 0) < ($1 | 0)) {
     continue label$11
    }
    break label$11;
   };
  }
  label$12 : {
   $8 = $6 - $7 | 0;
   if (($13 | 0) >= ($8 | 0)) {
    break label$12
   }
   if (($13 | 0) >= ($1 | 0)) {
    break label$12
   }
   label$13 : while (1) {
    HEAP32[($0 + ($13 << 2 | 0) | 0) >> 2] = 1065353216;
    $13 = $13 + 1 | 0;
    if (($13 | 0) >= ($8 | 0)) {
     break label$12
    }
    if (($13 | 0) < ($1 | 0)) {
     continue label$13
    }
    break label$13;
   };
  }
  label$14 : {
   if (($13 | 0) >= ($6 | 0)) {
    break label$14
   }
   if (($13 | 0) >= ($1 | 0)) {
    break label$14
   }
   label$15 : while (1) {
    (wasm2js_i32$0 = $0 + ($13 << 2 | 0) | 0, wasm2js_f32$0 = Math_fround(.5 - +cos(+(+($7 | 0) * 3.141592653589793 / $12)) * .5)), HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
    $13 = $13 + 1 | 0;
    if (($13 | 0) >= ($6 | 0)) {
     break label$14
    }
    $7 = $7 + -1 | 0;
    if (($13 | 0) < ($1 | 0)) {
     continue label$15
    }
    break label$15;
   };
  }
  label$16 : {
   if (($13 | 0) >= ($9 | 0)) {
    break label$16
   }
   if (($13 | 0) >= ($1 | 0)) {
    break label$16
   }
   label$17 : while (1) {
    HEAP32[($0 + ($13 << 2 | 0) | 0) >> 2] = 0;
    $13 = $13 + 1 | 0;
    if (($13 | 0) >= ($9 | 0)) {
     break label$16
    }
    if (($13 | 0) < ($1 | 0)) {
     continue label$17
    }
    break label$17;
   };
  }
  $12 = +($11 | 0);
  label$18 : {
   $8 = $11 + $9 | 0;
   if (($13 | 0) >= ($8 | 0)) {
    break label$18
   }
   if (($13 | 0) >= ($1 | 0)) {
    break label$18
   }
   $7 = 1;
   label$19 : while (1) {
    (wasm2js_i32$0 = $0 + ($13 << 2 | 0) | 0, wasm2js_f32$0 = Math_fround(.5 - +cos(+(+($7 | 0) * 3.141592653589793 / $12)) * .5)), HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
    $13 = $13 + 1 | 0;
    if (($13 | 0) >= ($8 | 0)) {
     break label$18
    }
    $7 = $7 + 1 | 0;
    if (($13 | 0) < ($1 | 0)) {
     continue label$19
    }
    break label$19;
   };
  }
  label$20 : {
   $7 = $1 - $11 | 0;
   if (($13 | 0) >= ($7 | 0)) {
    break label$20
   }
   if (($13 | 0) >= ($1 | 0)) {
    break label$20
   }
   label$21 : while (1) {
    HEAP32[($0 + ($13 << 2 | 0) | 0) >> 2] = 1065353216;
    $13 = $13 + 1 | 0;
    if (($13 | 0) >= ($7 | 0)) {
     break label$20
    }
    if (($13 | 0) < ($1 | 0)) {
     continue label$21
    }
    break label$21;
   };
  }
  label$22 : {
   if (($13 | 0) >= ($1 | 0)) {
    break label$22
   }
   $7 = $13 ^ -1 | 0;
   label$23 : {
    if (!(($1 - $13 | 0) & 1 | 0)) {
     break label$23
    }
    (wasm2js_i32$0 = $0 + ($13 << 2 | 0) | 0, wasm2js_f32$0 = Math_fround(.5 - +cos(+($12 * 3.141592653589793 / $12)) * .5)), HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
    $11 = $11 + -1 | 0;
    $13 = $13 + 1 | 0;
   }
   if (($7 | 0) == (0 - $1 | 0 | 0)) {
    break label$22
   }
   label$24 : while (1) {
    $7 = $0 + ($13 << 2 | 0) | 0;
    (wasm2js_i32$0 = $7, wasm2js_f32$0 = Math_fround(.5 - +cos(+(+($11 | 0) * 3.141592653589793 / $12)) * .5)), HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
    (wasm2js_i32$0 = $7 + 4 | 0, wasm2js_f32$0 = Math_fround(.5 - +cos(+(+($11 + -1 | 0 | 0) * 3.141592653589793 / $12)) * .5)), HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
    $11 = $11 + -2 | 0;
    $13 = $13 + 2 | 0;
    if (($13 | 0) != ($1 | 0)) {
     continue label$24
    }
    break label$24;
   };
  }
 }
 
 function FLAC__window_welch($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0.0, $4 = 0, $5 = 0.0, $6 = 0, $3 = 0;
  label$1 : {
   if (($1 | 0) < (1 | 0)) {
    break label$1
   }
   $2 = +($1 + -1 | 0 | 0) * .5;
   $3 = $1 & 1 | 0;
   $4 = 0;
   label$2 : {
    if (($1 | 0) == (1 | 0)) {
     break label$2
    }
    $1 = $1 & -2 | 0;
    $4 = 0;
    label$3 : while (1) {
     $5 = (+($4 | 0) - $2) / $2;
     HEAPF32[($0 + ($4 << 2 | 0) | 0) >> 2] = Math_fround(1.0 - $5 * $5);
     $6 = $4 | 1 | 0;
     $5 = (+($6 | 0) - $2) / $2;
     HEAPF32[($0 + ($6 << 2 | 0) | 0) >> 2] = Math_fround(1.0 - $5 * $5);
     $4 = $4 + 2 | 0;
     $1 = $1 + -2 | 0;
     if ($1) {
      continue label$3
     }
     break label$3;
    };
   }
   if (!$3) {
    break label$1
   }
   $2 = (+($4 | 0) - $2) / $2;
   HEAPF32[($0 + ($4 << 2 | 0) | 0) >> 2] = Math_fround(1.0 - $2 * $2);
  }
 }
 
 function FLAC__stream_encoder_new() {
  var $1 = 0, $0 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $2 = 0;
  label$1 : {
   $0 = dlcalloc(1 | 0, 8 | 0) | 0;
   if ($0) {
    break label$1
   }
   return 0 | 0;
  }
  $1 = dlcalloc(1 | 0, 1032 | 0) | 0;
  HEAP32[$0 >> 2] = $1;
  label$2 : {
   if (!$1) {
    break label$2
   }
   $2 = dlcalloc(1 | 0, 11856 | 0) | 0;
   HEAP32[($0 + 4 | 0) >> 2] = $2;
   label$3 : {
    if ($2) {
     break label$3
    }
    dlfree($1 | 0);
    break label$2;
   }
   $1 = FLAC__bitwriter_new() | 0;
   $2 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   HEAP32[($2 + 6856 | 0) >> 2] = $1;
   label$4 : {
    if ($1) {
     break label$4
    }
    dlfree($2 | 0);
    dlfree(HEAP32[$0 >> 2] | 0 | 0);
    break label$2;
   }
   HEAP32[($2 + 7296 | 0) >> 2] = 0;
   $1 = HEAP32[$0 >> 2] | 0;
   i64toi32_i32$1 = $1;
   i64toi32_i32$0 = 1056964608;
   HEAP32[($1 + 44 | 0) >> 2] = 13;
   HEAP32[($1 + 48 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $1;
   i64toi32_i32$0 = 1;
   HEAP32[($1 + 36 | 0) >> 2] = 0;
   HEAP32[($1 + 40 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $1;
   i64toi32_i32$0 = 44100;
   HEAP32[($1 + 28 | 0) >> 2] = 16;
   HEAP32[($1 + 32 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $1;
   i64toi32_i32$0 = 2;
   HEAP32[($1 + 20 | 0) >> 2] = 0;
   HEAP32[($1 + 24 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $1;
   i64toi32_i32$0 = 0;
   HEAP32[($1 + 12 | 0) >> 2] = 1;
   HEAP32[($1 + 16 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $1;
   i64toi32_i32$0 = 1;
   HEAP32[($1 + 4 | 0) >> 2] = 0;
   HEAP32[($1 + 8 | 0) >> 2] = i64toi32_i32$0;
   $1 = HEAP32[$0 >> 2] | 0;
   i64toi32_i32$1 = $1;
   i64toi32_i32$0 = 0;
   HEAP32[($1 + 592 | 0) >> 2] = 0;
   HEAP32[($1 + 596 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $1;
   i64toi32_i32$0 = 0;
   HEAP32[($1 + 556 | 0) >> 2] = 0;
   HEAP32[($1 + 560 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $1 + 564 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $1 + 572 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $1 + 580 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $1 + 600 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   $2 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   i64toi32_i32$1 = $2;
   i64toi32_i32$0 = 0;
   HEAP32[(i64toi32_i32$1 + 7248 | 0) >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 7252 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[(i64toi32_i32$1 + 7048 | 0) >> 2] = 0;
   i64toi32_i32$1 = i64toi32_i32$1 + 7256 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $2 + 7264 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $2 + 7272 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $2 + 7280 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[($2 + 7288 | 0) >> 2] = 0;
   FLAC__ogg_encoder_aspect_set_defaults($1 + 632 | 0 | 0);
   label$5 : {
    $1 = HEAP32[$0 >> 2] | 0;
    if ((HEAP32[$1 >> 2] | 0 | 0) != (1 | 0)) {
     break label$5
    }
    i64toi32_i32$1 = $1;
    i64toi32_i32$0 = 0;
    HEAP32[($1 + 16 | 0) >> 2] = 1;
    HEAP32[($1 + 20 | 0) >> 2] = i64toi32_i32$0;
    FLAC__stream_encoder_set_apodization($0 | 0, GOT_data_internal___memory_base + 6467 | 0 | 0) | 0;
    $1 = HEAP32[$0 >> 2] | 0;
    if ((HEAP32[$1 >> 2] | 0 | 0) != (1 | 0)) {
     break label$5
    }
    i64toi32_i32$1 = $1;
    i64toi32_i32$0 = 5;
    HEAP32[($1 + 576 | 0) >> 2] = 0;
    HEAP32[($1 + 580 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = $1;
    i64toi32_i32$0 = 0;
    HEAP32[($1 + 564 | 0) >> 2] = 0;
    HEAP32[($1 + 568 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = $1;
    i64toi32_i32$0 = 0;
    HEAP32[($1 + 556 | 0) >> 2] = 8;
    HEAP32[($1 + 560 | 0) >> 2] = i64toi32_i32$0;
   }
   $1 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   HEAP32[($1 + 11848 | 0) >> 2] = 0;
   HEAP32[($1 + 6176 | 0) >> 2] = $1 + 336 | 0;
   $1 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   HEAP32[($1 + 6180 | 0) >> 2] = $1 + 628 | 0;
   $1 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   HEAP32[($1 + 6184 | 0) >> 2] = $1 + 920 | 0;
   $1 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   HEAP32[($1 + 6188 | 0) >> 2] = $1 + 1212 | 0;
   $1 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   HEAP32[($1 + 6192 | 0) >> 2] = $1 + 1504 | 0;
   $1 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   HEAP32[($1 + 6196 | 0) >> 2] = $1 + 1796 | 0;
   $1 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   HEAP32[($1 + 6200 | 0) >> 2] = $1 + 2088 | 0;
   $1 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   HEAP32[($1 + 6204 | 0) >> 2] = $1 + 2380 | 0;
   $1 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   HEAP32[($1 + 6208 | 0) >> 2] = $1 + 2672 | 0;
   $1 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   HEAP32[($1 + 6212 | 0) >> 2] = $1 + 2964 | 0;
   $1 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   HEAP32[($1 + 6216 | 0) >> 2] = $1 + 3256 | 0;
   $1 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   HEAP32[($1 + 6220 | 0) >> 2] = $1 + 3548 | 0;
   $1 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   HEAP32[($1 + 6224 | 0) >> 2] = $1 + 3840 | 0;
   $1 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   HEAP32[($1 + 6228 | 0) >> 2] = $1 + 4132 | 0;
   $1 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   HEAP32[($1 + 6232 | 0) >> 2] = $1 + 4424 | 0;
   $1 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   HEAP32[($1 + 6236 | 0) >> 2] = $1 + 4716 | 0;
   $1 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   HEAP32[($1 + 6240 | 0) >> 2] = $1 + 5008 | 0;
   $1 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   HEAP32[($1 + 6244 | 0) >> 2] = $1 + 5300 | 0;
   $1 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   HEAP32[($1 + 6248 | 0) >> 2] = $1 + 5592 | 0;
   $1 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   HEAP32[($1 + 6252 | 0) >> 2] = $1 + 5884 | 0;
   $1 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   HEAP32[($1 + 6640 | 0) >> 2] = $1 + 6256 | 0;
   $1 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   HEAP32[($1 + 6644 | 0) >> 2] = $1 + 6268 | 0;
   $1 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   HEAP32[($1 + 6648 | 0) >> 2] = $1 + 6280 | 0;
   $1 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   HEAP32[($1 + 6652 | 0) >> 2] = $1 + 6292 | 0;
   $1 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   HEAP32[($1 + 6656 | 0) >> 2] = $1 + 6304 | 0;
   $1 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   HEAP32[($1 + 6660 | 0) >> 2] = $1 + 6316 | 0;
   $1 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   HEAP32[($1 + 6664 | 0) >> 2] = $1 + 6328 | 0;
   $1 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   HEAP32[($1 + 6668 | 0) >> 2] = $1 + 6340 | 0;
   $1 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   HEAP32[($1 + 6672 | 0) >> 2] = $1 + 6352 | 0;
   $1 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   HEAP32[($1 + 6676 | 0) >> 2] = $1 + 6364 | 0;
   $1 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   HEAP32[($1 + 6680 | 0) >> 2] = $1 + 6376 | 0;
   $1 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   HEAP32[($1 + 6684 | 0) >> 2] = $1 + 6388 | 0;
   $1 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   HEAP32[($1 + 6688 | 0) >> 2] = $1 + 6400 | 0;
   $1 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   HEAP32[($1 + 6692 | 0) >> 2] = $1 + 6412 | 0;
   $1 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   HEAP32[($1 + 6696 | 0) >> 2] = $1 + 6424 | 0;
   $1 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   HEAP32[($1 + 6700 | 0) >> 2] = $1 + 6436 | 0;
   $1 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   HEAP32[($1 + 6704 | 0) >> 2] = $1 + 6448 | 0;
   $1 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   HEAP32[($1 + 6708 | 0) >> 2] = $1 + 6460 | 0;
   $1 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   HEAP32[($1 + 6712 | 0) >> 2] = $1 + 6472 | 0;
   $1 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   HEAP32[($1 + 6716 | 0) >> 2] = $1 + 6484 | 0;
   FLAC__format_entropy_coding_method_partitioned_rice_contents_init((HEAP32[($0 + 4 | 0) >> 2] | 0) + 6256 | 0 | 0);
   FLAC__format_entropy_coding_method_partitioned_rice_contents_init((HEAP32[($0 + 4 | 0) >> 2] | 0) + 6268 | 0 | 0);
   FLAC__format_entropy_coding_method_partitioned_rice_contents_init((HEAP32[($0 + 4 | 0) >> 2] | 0) + 6280 | 0 | 0);
   FLAC__format_entropy_coding_method_partitioned_rice_contents_init((HEAP32[($0 + 4 | 0) >> 2] | 0) + 6292 | 0 | 0);
   FLAC__format_entropy_coding_method_partitioned_rice_contents_init((HEAP32[($0 + 4 | 0) >> 2] | 0) + 6304 | 0 | 0);
   FLAC__format_entropy_coding_method_partitioned_rice_contents_init((HEAP32[($0 + 4 | 0) >> 2] | 0) + 6316 | 0 | 0);
   FLAC__format_entropy_coding_method_partitioned_rice_contents_init((HEAP32[($0 + 4 | 0) >> 2] | 0) + 6328 | 0 | 0);
   FLAC__format_entropy_coding_method_partitioned_rice_contents_init((HEAP32[($0 + 4 | 0) >> 2] | 0) + 6340 | 0 | 0);
   FLAC__format_entropy_coding_method_partitioned_rice_contents_init((HEAP32[($0 + 4 | 0) >> 2] | 0) + 6352 | 0 | 0);
   FLAC__format_entropy_coding_method_partitioned_rice_contents_init((HEAP32[($0 + 4 | 0) >> 2] | 0) + 6364 | 0 | 0);
   FLAC__format_entropy_coding_method_partitioned_rice_contents_init((HEAP32[($0 + 4 | 0) >> 2] | 0) + 6376 | 0 | 0);
   FLAC__format_entropy_coding_method_partitioned_rice_contents_init((HEAP32[($0 + 4 | 0) >> 2] | 0) + 6388 | 0 | 0);
   FLAC__format_entropy_coding_method_partitioned_rice_contents_init((HEAP32[($0 + 4 | 0) >> 2] | 0) + 6400 | 0 | 0);
   FLAC__format_entropy_coding_method_partitioned_rice_contents_init((HEAP32[($0 + 4 | 0) >> 2] | 0) + 6412 | 0 | 0);
   FLAC__format_entropy_coding_method_partitioned_rice_contents_init((HEAP32[($0 + 4 | 0) >> 2] | 0) + 6424 | 0 | 0);
   FLAC__format_entropy_coding_method_partitioned_rice_contents_init((HEAP32[($0 + 4 | 0) >> 2] | 0) + 6436 | 0 | 0);
   FLAC__format_entropy_coding_method_partitioned_rice_contents_init((HEAP32[($0 + 4 | 0) >> 2] | 0) + 6448 | 0 | 0);
   FLAC__format_entropy_coding_method_partitioned_rice_contents_init((HEAP32[($0 + 4 | 0) >> 2] | 0) + 6460 | 0 | 0);
   FLAC__format_entropy_coding_method_partitioned_rice_contents_init((HEAP32[($0 + 4 | 0) >> 2] | 0) + 6472 | 0 | 0);
   FLAC__format_entropy_coding_method_partitioned_rice_contents_init((HEAP32[($0 + 4 | 0) >> 2] | 0) + 6484 | 0 | 0);
   FLAC__format_entropy_coding_method_partitioned_rice_contents_init((HEAP32[($0 + 4 | 0) >> 2] | 0) + 11724 | 0 | 0);
   FLAC__format_entropy_coding_method_partitioned_rice_contents_init((HEAP32[($0 + 4 | 0) >> 2] | 0) + 11736 | 0 | 0);
   HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] = 1;
   return $0 | 0;
  }
  dlfree($0 | 0);
  return 0 | 0;
 }
 
 function FLAC__stream_encoder_set_apodization($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $3 = 0, $5 = 0, $4 = 0, $8 = Math_fround(0), $6 = 0, $2 = 0, $10 = Math_fround(0), $9 = 0.0, $11 = Math_fround(0), $7 = 0;
  $2 = 0;
  label$1 : {
   $3 = HEAP32[$0 >> 2] | 0;
   if ((HEAP32[$3 >> 2] | 0 | 0) != (1 | 0)) {
    break label$1
   }
   HEAP32[($3 + 40 | 0) >> 2] = 0;
   $4 = 0;
   label$2 : while (1) {
    label$3 : {
     label$4 : {
      $2 = strchr($1 | 0, 59 | 0) | 0;
      if (!$2) {
       break label$4
      }
      $5 = $2 - $1 | 0;
      break label$3;
     }
     $5 = strlen($1 | 0) | 0;
    }
    label$5 : {
     label$6 : {
      label$7 : {
       label$8 : {
        label$9 : {
         label$10 : {
          label$11 : {
           label$12 : {
            label$13 : {
             label$14 : {
              label$15 : {
               label$16 : {
                label$17 : {
                 label$18 : {
                  label$19 : {
                   $6 = ($5 | 0) != (8 | 0);
                   if ($6) {
                    break label$19
                   }
                   if (strncmp(GOT_data_internal___memory_base + 5385 | 0 | 0, $1 | 0, 8 | 0) | 0) {
                    break label$18
                   }
                   HEAP32[($3 + 40 | 0) >> 2] = $4 + 1 | 0;
                   HEAP32[(($3 + ($4 << 4 | 0) | 0) + 44 | 0) >> 2] = 0;
                   break label$5;
                  }
                  label$20 : {
                   switch ($5 + -6 | 0 | 0) {
                   case 1:
                    break label$15;
                   case 0:
                    break label$16;
                   case 20:
                    break label$17;
                   case 7:
                    break label$20;
                   default:
                    break label$14;
                   };
                  }
                  $7 = 1;
                  if (strncmp(GOT_data_internal___memory_base + 5812 | 0 | 0, $1 | 0, 13 | 0) | 0) {
                   break label$13
                  }
                  HEAP32[($3 + 40 | 0) >> 2] = $4 + 1 | 0;
                  HEAP32[(($3 + ($4 << 4 | 0) | 0) + 44 | 0) >> 2] = 1;
                  break label$5;
                 }
                 $7 = 0;
                 if (strncmp(GOT_data_internal___memory_base + 5830 | 0 | 0, $1 | 0, 8 | 0) | 0) {
                  break label$13
                 }
                 HEAP32[($3 + 40 | 0) >> 2] = $4 + 1 | 0;
                 HEAP32[(($3 + ($4 << 4 | 0) | 0) + 44 | 0) >> 2] = 2;
                 break label$5;
                }
                $7 = 0;
                if (strncmp(GOT_data_internal___memory_base + 5904 | 0 | 0, $1 | 0, 26 | 0) | 0) {
                 break label$13
                }
                HEAP32[($3 + 40 | 0) >> 2] = $4 + 1 | 0;
                HEAP32[(($3 + ($4 << 4 | 0) | 0) + 44 | 0) >> 2] = 3;
                break label$5;
               }
               if (strncmp(GOT_data_internal___memory_base + 5445 | 0 | 0, $1 | 0, 6 | 0) | 0) {
                break label$5
               }
               HEAP32[($3 + 40 | 0) >> 2] = $4 + 1 | 0;
               HEAP32[(($3 + ($4 << 4 | 0) | 0) + 44 | 0) >> 2] = 4;
               break label$5;
              }
              if (strncmp(GOT_data_internal___memory_base + 5804 | 0 | 0, $1 | 0, 7 | 0) | 0) {
               break label$12
              }
              HEAP32[($3 + 40 | 0) >> 2] = $4 + 1 | 0;
              HEAP32[(($3 + ($4 << 4 | 0) | 0) + 44 | 0) >> 2] = 5;
              break label$5;
             }
             $7 = 0;
             if ($5 >>> 0 < 8 >>> 0) {
              break label$11
             }
            }
            if (strncmp(GOT_data_internal___memory_base + 6510 | 0 | 0, $1 | 0, 6 | 0) | 0) {
             break label$10
            }
            $8 = Math_fround(+strtod($1 + 6 | 0 | 0, 0 | 0));
            if (!($8 > Math_fround(0.0))) {
             break label$5
            }
            if (!($8 <= Math_fround(.5))) {
             break label$5
            }
            $1 = HEAP32[$0 >> 2] | 0;
            HEAPF32[(($1 + ((HEAP32[($1 + 40 | 0) >> 2] | 0) << 4 | 0) | 0) + 48 | 0) >> 2] = $8;
            $1 = HEAP32[$0 >> 2] | 0;
            $5 = HEAP32[($1 + 40 | 0) >> 2] | 0;
            HEAP32[($1 + 40 | 0) >> 2] = $5 + 1 | 0;
            HEAP32[(($1 + ($5 << 4 | 0) | 0) + 44 | 0) >> 2] = 6;
            break label$5;
           }
           if (strncmp(GOT_data_internal___memory_base + 5877 | 0 | 0, $1 | 0, 7 | 0) | 0) {
            break label$9
           }
           HEAP32[($3 + 40 | 0) >> 2] = $4 + 1 | 0;
           HEAP32[(($3 + ($4 << 4 | 0) | 0) + 44 | 0) >> 2] = 7;
           break label$5;
          }
          label$21 : {
           switch ($5 + -4 | 0 | 0) {
           case 0:
            break label$21;
           case 1:
            break label$7;
           default:
            break label$5;
           };
          }
          if (strncmp(GOT_data_internal___memory_base + 5821 | 0 | 0, $1 | 0, 4 | 0) | 0) {
           break label$5
          }
          HEAP32[($3 + 40 | 0) >> 2] = $4 + 1 | 0;
          HEAP32[(($3 + ($4 << 4 | 0) | 0) + 44 | 0) >> 2] = 8;
          break label$5;
         }
         if (!$7) {
          break label$8
         }
         if (strncmp(GOT_data_internal___memory_base + 5847 | 0 | 0, $1 | 0, 13 | 0) | 0) {
          break label$8
         }
         HEAP32[($3 + 40 | 0) >> 2] = $4 + 1 | 0;
         HEAP32[(($3 + ($4 << 4 | 0) | 0) + 44 | 0) >> 2] = 9;
         break label$5;
        }
        if (strncmp(GOT_data_internal___memory_base + 5839 | 0 | 0, $1 | 0, 7 | 0) | 0) {
         break label$5
        }
        HEAP32[($3 + 40 | 0) >> 2] = $4 + 1 | 0;
        HEAP32[(($3 + ($4 << 4 | 0) | 0) + 44 | 0) >> 2] = 10;
        break label$5;
       }
       label$22 : {
        if (($5 | 0) != (9 | 0)) {
         break label$22
        }
        if (strncmp(GOT_data_internal___memory_base + 5885 | 0 | 0, $1 | 0, 9 | 0) | 0) {
         break label$22
        }
        HEAP32[($3 + 40 | 0) >> 2] = $4 + 1 | 0;
        HEAP32[(($3 + ($4 << 4 | 0) | 0) + 44 | 0) >> 2] = 11;
        break label$5;
       }
       label$23 : {
        if ($6) {
         break label$23
        }
        label$24 : {
         if (strncmp(GOT_data_internal___memory_base + 5895 | 0 | 0, $1 | 0, 8 | 0) | 0) {
          break label$24
         }
         HEAP32[($3 + 40 | 0) >> 2] = $4 + 1 | 0;
         HEAP32[(($3 + ($4 << 4 | 0) | 0) + 44 | 0) >> 2] = 12;
         break label$5;
        }
        if (strncmp(GOT_data_internal___memory_base + 6503 | 0 | 0, $1 | 0, 6 | 0) | 0) {
         break label$5
        }
        break label$6;
       }
       if (!(strncmp(GOT_data_internal___memory_base + 6503 | 0 | 0, $1 | 0, 6 | 0) | 0)) {
        break label$6
       }
       if ($5 >>> 0 < 16 >>> 0) {
        break label$5
       }
       label$25 : {
        if (strncmp(GOT_data_internal___memory_base + 6495 | 0 | 0, $1 | 0, 14 | 0) | 0) {
         break label$25
        }
        label$26 : {
         label$27 : {
          $9 = +strtod($1 + 14 | 0 | 0, 0 | 0);
          if (!(Math_abs($9) < 2147483648.0)) {
           break label$27
          }
          $6 = ~~$9;
          break label$26;
         }
         $6 = -2147483648;
        }
        label$28 : {
         label$29 : {
          $5 = strchr($1 | 0, 47 | 0) | 0;
          if ($5) {
           break label$29
          }
          $8 = Math_fround(.10000000149011612);
          break label$28;
         }
         $8 = Math_fround(.9900000095367432);
         $3 = $5 + 1 | 0;
         if (!(Math_fround(+strtod($3 | 0, 0 | 0)) < Math_fround(.9900000095367432))) {
          break label$28
         }
         $8 = Math_fround(+strtod($3 | 0, 0 | 0));
        }
        label$30 : {
         label$31 : {
          $1 = strchr(($5 ? $5 + 1 | 0 : $1) | 0, 47 | 0) | 0;
          if ($1) {
           break label$31
          }
          $10 = Math_fround(.20000000298023224);
          break label$30;
         }
         $10 = Math_fround(+strtod($1 + 1 | 0 | 0, 0 | 0));
        }
        $1 = HEAP32[$0 >> 2] | 0;
        $3 = HEAP32[($1 + 40 | 0) >> 2] | 0;
        label$32 : {
         if (($6 | 0) > (1 | 0)) {
          break label$32
         }
         HEAPF32[(($1 + ($3 << 4 | 0) | 0) + 48 | 0) >> 2] = $10;
         $1 = HEAP32[$0 >> 2] | 0;
         $5 = HEAP32[($1 + 40 | 0) >> 2] | 0;
         HEAP32[($1 + 40 | 0) >> 2] = $5 + 1 | 0;
         HEAP32[(($1 + ($5 << 4 | 0) | 0) + 44 | 0) >> 2] = 13;
         break label$5;
        }
        if (($3 + $6 | 0) >>> 0 > 31 >>> 0) {
         break label$5
        }
        $11 = Math_fround(Math_fround(Math_fround(1.0) / Math_fround(Math_fround(1.0) - $8)) + Math_fround(-1.0));
        $8 = Math_fround($11 + Math_fround($6 | 0));
        $5 = 0;
        label$33 : while (1) {
         HEAPF32[(($1 + ($3 << 4 | 0) | 0) + 48 | 0) >> 2] = $10;
         $1 = HEAP32[$0 >> 2] | 0;
         HEAPF32[(($1 + ((HEAP32[($1 + 40 | 0) >> 2] | 0) << 4 | 0) | 0) + 52 | 0) >> 2] = Math_fround(Math_fround($5 | 0) / $8);
         $1 = HEAP32[$0 >> 2] | 0;
         $5 = $5 + 1 | 0;
         HEAPF32[(($1 + ((HEAP32[($1 + 40 | 0) >> 2] | 0) << 4 | 0) | 0) + 56 | 0) >> 2] = Math_fround(Math_fround($11 + Math_fround($5 | 0)) / $8);
         $1 = HEAP32[$0 >> 2] | 0;
         $4 = HEAP32[($1 + 40 | 0) >> 2] | 0;
         $3 = $4 + 1 | 0;
         HEAP32[($1 + 40 | 0) >> 2] = $3;
         HEAP32[(($1 + ($4 << 4 | 0) | 0) + 44 | 0) >> 2] = 14;
         if (($5 | 0) != ($6 | 0)) {
          continue label$33
         }
         break label$5;
        };
       }
       if ($5 >>> 0 < 17 >>> 0) {
        break label$5
       }
       if (strncmp(GOT_data_internal___memory_base + 6479 | 0 | 0, $1 | 0, 15 | 0) | 0) {
        break label$5
       }
       label$34 : {
        label$35 : {
         $9 = +strtod($1 + 15 | 0 | 0, 0 | 0);
         if (!(Math_abs($9) < 2147483648.0)) {
          break label$35
         }
         $6 = ~~$9;
         break label$34;
        }
        $6 = -2147483648;
       }
       $10 = Math_fround(.20000000298023224);
       $8 = Math_fround(.20000000298023224);
       label$36 : {
        $5 = strchr($1 | 0, 47 | 0) | 0;
        if (!$5) {
         break label$36
        }
        $8 = Math_fround(.9900000095367432);
        $3 = $5 + 1 | 0;
        if (!(Math_fround(+strtod($3 | 0, 0 | 0)) < Math_fround(.9900000095367432))) {
         break label$36
        }
        $8 = Math_fround(+strtod($3 | 0, 0 | 0));
       }
       label$37 : {
        $1 = strchr(($5 ? $5 + 1 | 0 : $1) | 0, 47 | 0) | 0;
        if (!$1) {
         break label$37
        }
        $10 = Math_fround(+strtod($1 + 1 | 0 | 0, 0 | 0));
       }
       $1 = HEAP32[$0 >> 2] | 0;
       $3 = HEAP32[($1 + 40 | 0) >> 2] | 0;
       label$38 : {
        if (($6 | 0) > (1 | 0)) {
         break label$38
        }
        HEAPF32[(($1 + ($3 << 4 | 0) | 0) + 48 | 0) >> 2] = $10;
        $1 = HEAP32[$0 >> 2] | 0;
        $5 = HEAP32[($1 + 40 | 0) >> 2] | 0;
        HEAP32[($1 + 40 | 0) >> 2] = $5 + 1 | 0;
        HEAP32[(($1 + ($5 << 4 | 0) | 0) + 44 | 0) >> 2] = 13;
        break label$5;
       }
       if (($3 + $6 | 0) >>> 0 > 31 >>> 0) {
        break label$5
       }
       $11 = Math_fround(Math_fround(Math_fround(1.0) / Math_fround(Math_fround(1.0) - $8)) + Math_fround(-1.0));
       $8 = Math_fround($11 + Math_fround($6 | 0));
       $5 = 0;
       label$39 : while (1) {
        HEAPF32[(($1 + ($3 << 4 | 0) | 0) + 48 | 0) >> 2] = $10;
        $1 = HEAP32[$0 >> 2] | 0;
        HEAPF32[(($1 + ((HEAP32[($1 + 40 | 0) >> 2] | 0) << 4 | 0) | 0) + 52 | 0) >> 2] = Math_fround(Math_fround($5 | 0) / $8);
        $1 = HEAP32[$0 >> 2] | 0;
        $5 = $5 + 1 | 0;
        HEAPF32[(($1 + ((HEAP32[($1 + 40 | 0) >> 2] | 0) << 4 | 0) | 0) + 56 | 0) >> 2] = Math_fround(Math_fround($11 + Math_fround($5 | 0)) / $8);
        $1 = HEAP32[$0 >> 2] | 0;
        $4 = HEAP32[($1 + 40 | 0) >> 2] | 0;
        $3 = $4 + 1 | 0;
        HEAP32[($1 + 40 | 0) >> 2] = $3;
        HEAP32[(($1 + ($4 << 4 | 0) | 0) + 44 | 0) >> 2] = 15;
        if (($5 | 0) != ($6 | 0)) {
         continue label$39
        }
        break label$5;
       };
      }
      if (strncmp(GOT_data_internal___memory_base + 5861 | 0 | 0, $1 | 0, 5 | 0) | 0) {
       break label$5
      }
      HEAP32[($3 + 40 | 0) >> 2] = $4 + 1 | 0;
      HEAP32[(($3 + ($4 << 4 | 0) | 0) + 44 | 0) >> 2] = 16;
      break label$5;
     }
     $8 = Math_fround(+strtod($1 + 6 | 0 | 0, 0 | 0));
     if (!($8 >= Math_fround(0.0))) {
      break label$5
     }
     if (!($8 <= Math_fround(1.0))) {
      break label$5
     }
     $1 = HEAP32[$0 >> 2] | 0;
     HEAPF32[(($1 + ((HEAP32[($1 + 40 | 0) >> 2] | 0) << 4 | 0) | 0) + 48 | 0) >> 2] = $8;
     $1 = HEAP32[$0 >> 2] | 0;
     $5 = HEAP32[($1 + 40 | 0) >> 2] | 0;
     HEAP32[($1 + 40 | 0) >> 2] = $5 + 1 | 0;
     HEAP32[(($1 + ($5 << 4 | 0) | 0) + 44 | 0) >> 2] = 13;
    }
    label$40 : {
     $3 = HEAP32[$0 >> 2] | 0;
     $4 = HEAP32[($3 + 40 | 0) >> 2] | 0;
     if (($4 | 0) == (32 | 0)) {
      break label$40
     }
     $1 = $2 + 1 | 0;
     if ($2) {
      continue label$2
     }
    }
    break label$2;
   };
   $2 = 1;
   if ($4) {
    break label$1
   }
   HEAP32[($3 + 40 | 0) >> 2] = 1;
   HEAP32[($3 + 44 | 0) >> 2] = 13;
   HEAP32[($3 + 48 | 0) >> 2] = 1056964608;
  }
  return $2 | 0;
 }
 
 function FLAC__stream_encoder_delete($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  label$1 : {
   if (!$0) {
    break label$1
   }
   HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 11848 | 0) >> 2] = 1;
   FLAC__stream_encoder_finish($0 | 0) | 0;
   label$2 : {
    $1 = HEAP32[($0 + 4 | 0) >> 2] | 0;
    $2 = HEAP32[($1 + 11752 | 0) >> 2] | 0;
    if (!$2) {
     break label$2
    }
    FLAC__stream_decoder_delete($2 | 0);
    $1 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   }
   FLAC__format_entropy_coding_method_partitioned_rice_contents_clear($1 + 6256 | 0 | 0);
   FLAC__format_entropy_coding_method_partitioned_rice_contents_clear((HEAP32[($0 + 4 | 0) >> 2] | 0) + 6268 | 0 | 0);
   FLAC__format_entropy_coding_method_partitioned_rice_contents_clear((HEAP32[($0 + 4 | 0) >> 2] | 0) + 6280 | 0 | 0);
   FLAC__format_entropy_coding_method_partitioned_rice_contents_clear((HEAP32[($0 + 4 | 0) >> 2] | 0) + 6292 | 0 | 0);
   FLAC__format_entropy_coding_method_partitioned_rice_contents_clear((HEAP32[($0 + 4 | 0) >> 2] | 0) + 6304 | 0 | 0);
   FLAC__format_entropy_coding_method_partitioned_rice_contents_clear((HEAP32[($0 + 4 | 0) >> 2] | 0) + 6316 | 0 | 0);
   FLAC__format_entropy_coding_method_partitioned_rice_contents_clear((HEAP32[($0 + 4 | 0) >> 2] | 0) + 6328 | 0 | 0);
   FLAC__format_entropy_coding_method_partitioned_rice_contents_clear((HEAP32[($0 + 4 | 0) >> 2] | 0) + 6340 | 0 | 0);
   FLAC__format_entropy_coding_method_partitioned_rice_contents_clear((HEAP32[($0 + 4 | 0) >> 2] | 0) + 6352 | 0 | 0);
   FLAC__format_entropy_coding_method_partitioned_rice_contents_clear((HEAP32[($0 + 4 | 0) >> 2] | 0) + 6364 | 0 | 0);
   FLAC__format_entropy_coding_method_partitioned_rice_contents_clear((HEAP32[($0 + 4 | 0) >> 2] | 0) + 6376 | 0 | 0);
   FLAC__format_entropy_coding_method_partitioned_rice_contents_clear((HEAP32[($0 + 4 | 0) >> 2] | 0) + 6388 | 0 | 0);
   FLAC__format_entropy_coding_method_partitioned_rice_contents_clear((HEAP32[($0 + 4 | 0) >> 2] | 0) + 6400 | 0 | 0);
   FLAC__format_entropy_coding_method_partitioned_rice_contents_clear((HEAP32[($0 + 4 | 0) >> 2] | 0) + 6412 | 0 | 0);
   FLAC__format_entropy_coding_method_partitioned_rice_contents_clear((HEAP32[($0 + 4 | 0) >> 2] | 0) + 6424 | 0 | 0);
   FLAC__format_entropy_coding_method_partitioned_rice_contents_clear((HEAP32[($0 + 4 | 0) >> 2] | 0) + 6436 | 0 | 0);
   FLAC__format_entropy_coding_method_partitioned_rice_contents_clear((HEAP32[($0 + 4 | 0) >> 2] | 0) + 6448 | 0 | 0);
   FLAC__format_entropy_coding_method_partitioned_rice_contents_clear((HEAP32[($0 + 4 | 0) >> 2] | 0) + 6460 | 0 | 0);
   FLAC__format_entropy_coding_method_partitioned_rice_contents_clear((HEAP32[($0 + 4 | 0) >> 2] | 0) + 6472 | 0 | 0);
   FLAC__format_entropy_coding_method_partitioned_rice_contents_clear((HEAP32[($0 + 4 | 0) >> 2] | 0) + 6484 | 0 | 0);
   FLAC__format_entropy_coding_method_partitioned_rice_contents_clear((HEAP32[($0 + 4 | 0) >> 2] | 0) + 11724 | 0 | 0);
   FLAC__format_entropy_coding_method_partitioned_rice_contents_clear((HEAP32[($0 + 4 | 0) >> 2] | 0) + 11736 | 0 | 0);
   FLAC__bitwriter_delete(HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 6856 | 0) >> 2] | 0 | 0);
   dlfree(HEAP32[($0 + 4 | 0) >> 2] | 0 | 0);
   dlfree(HEAP32[$0 >> 2] | 0 | 0);
   dlfree($0 | 0);
  }
 }
 
 function FLAC__stream_encoder_finish($0) {
  $0 = $0 | 0;
  var i64toi32_i32$0 = 0, $4 = 0, i64toi32_i32$2 = 0, i64toi32_i32$4 = 0, i64toi32_i32$1 = 0, $2 = 0, $3 = 0, i64toi32_i32$3 = 0, $6 = 0, $7 = 0, $1 = 0, $5 = 0, $9 = 0, $9$hi = 0, $11$hi = 0, $11 = 0, $40 = 0, $41 = 0, $8 = 0, $10 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $143 = 0, $148 = 0, $168 = 0, $172 = 0, $176 = 0, $181 = 0, $184 = 0, $313 = 0, $316 = 0, $319 = 0, $322 = 0, $325 = 0, $328 = 0, $331 = 0, $334 = 0, $337 = 0, $340 = 0, $343 = 0, $346 = 0, $349 = 0, $352 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  label$1 : {
   label$2 : {
    if ($0) {
     break label$2
    }
    $2 = 0;
    break label$1;
   }
   $3 = 0;
   label$3 : {
    label$4 : {
     $4 = HEAP32[$0 >> 2] | 0;
     $2 = HEAP32[$4 >> 2] | 0;
     switch ($2 | 0) {
     case 1:
      break label$1;
     case 0:
      break label$4;
     default:
      break label$3;
     };
    }
    $2 = HEAP32[($0 + 4 | 0) >> 2] | 0;
    if (HEAP32[($2 + 11848 | 0) >> 2] | 0) {
     break label$3
    }
    $2 = HEAP32[($2 + 7052 | 0) >> 2] | 0;
    if (!$2) {
     break label$3
    }
    $3 = HEAP32[($4 + 36 | 0) >> 2] | 0;
    HEAP32[($4 + 36 | 0) >> 2] = $2;
    $3 = !(process_frame_($0 | 0, ($3 | 0) != ($2 | 0) | 0, 1 | 0) | 0);
    $4 = HEAP32[$0 >> 2] | 0;
   }
   label$5 : {
    if (!(HEAP32[($4 + 12 | 0) >> 2] | 0)) {
     break label$5
    }
    $2 = HEAP32[($0 + 4 | 0) >> 2] | 0;
    FLAC__MD5Final($2 + 6928 | 0 | 0, $2 + 7060 | 0 | 0);
   }
   $2 = $0 + 4 | 0;
   label$6 : {
    label$7 : {
     $4 = HEAP32[($0 + 4 | 0) >> 2] | 0;
     if (!(HEAP32[($4 + 11848 | 0) >> 2] | 0)) {
      break label$7
     }
     $5 = $3;
     break label$6;
    }
    label$8 : {
     $6 = HEAP32[$0 >> 2] | 0;
     if (HEAP32[$6 >> 2] | 0) {
      break label$8
     }
     label$9 : {
      $7 = HEAP32[($4 + 7268 | 0) >> 2] | 0;
      if (!$7) {
       break label$9
      }
      label$10 : {
       label$11 : {
        if (!(HEAP32[($4 + 7260 | 0) >> 2] | 0)) {
         break label$11
        }
        $5 = HEAP32[($4 + 6900 | 0) >> 2] | 0;
        $8 = HEAP32[($4 + 6896 | 0) >> 2] | 0;
        i64toi32_i32$2 = $4 + 6920 | 0;
        i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
        $9 = i64toi32_i32$0;
        $9$hi = i64toi32_i32$1;
        i64toi32_i32$1 = 0;
        if ((FUNCTION_TABLE[$7 | 0]($0, 0, i64toi32_i32$1, HEAP32[($4 + 7288 | 0) >> 2] | 0) | 0 | 0) == (2 | 0)) {
         break label$10
        }
        simple_ogg_page__init($1 | 0);
        label$12 : {
         i64toi32_i32$2 = HEAP32[$0 >> 2] | 0;
         i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 608 | 0) >> 2] | 0;
         i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 612 | 0) >> 2] | 0;
         $6 = HEAP32[($0 + 4 | 0) >> 2] | 0;
         if (!(simple_ogg_page__get_at($0 | 0, i64toi32_i32$1 | 0, i64toi32_i32$0 | 0, $1 | 0, HEAP32[($6 + 7268 | 0) >> 2] | 0 | 0, HEAP32[($6 + 7264 | 0) >> 2] | 0 | 0, HEAP32[($6 + 7288 | 0) >> 2] | 0 | 0) | 0)) {
          break label$12
         }
         $6 = GOT_data_internal_FLAC__STREAM_METADATA_STREAMINFO_MIN_BLOCK_SIZE_LEN;
         label$13 : {
          $10 = (HEAP32[GOT_data_internal_FLAC__STREAM_METADATA_STREAMINFO_MAX_BLOCK_SIZE_LEN >> 2] | 0) + (HEAP32[$6 >> 2] | 0) | 0;
          $6 = (((($10 + (HEAP32[GOT_data_internal_FLAC__STREAM_METADATA_STREAMINFO_MIN_FRAME_SIZE_LEN >> 2] | 0) | 0) + (HEAP32[GOT_data_internal_FLAC__STREAM_METADATA_STREAMINFO_MAX_FRAME_SIZE_LEN >> 2] | 0) | 0) + (HEAP32[GOT_data_internal_FLAC__STREAM_METADATA_STREAMINFO_SAMPLE_RATE_LEN >> 2] | 0) | 0) + (HEAP32[GOT_data_internal_FLAC__STREAM_METADATA_STREAMINFO_CHANNELS_LEN >> 2] | 0) | 0) + (HEAP32[GOT_data_internal_FLAC__STREAM_METADATA_STREAMINFO_BITS_PER_SAMPLE_LEN >> 2] | 0) | 0;
          $7 = ($6 + (HEAP32[GOT_data_internal_FLAC__STREAM_METADATA_STREAMINFO_TOTAL_SAMPLES_LEN >> 2] | 0) | 0) >>> 3 | 0;
          if (($7 + 33 | 0) >>> 0 <= (HEAP32[($1 + 12 | 0) >> 2] | 0) >>> 0) {
           break label$13
          }
          HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] = 2;
          simple_ogg_page__clear($1 | 0);
          break label$10;
         }
         $7 = $7 + (HEAP32[($1 + 8 | 0) >> 2] | 0) | 0;
         i64toi32_i32$2 = $4 + 6936 | 0;
         i64toi32_i32$0 = HEAPU8[i64toi32_i32$2 >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
         i64toi32_i32$1 = HEAPU8[(i64toi32_i32$2 + 4 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 5 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 6 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 7 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
         $143 = i64toi32_i32$0;
         i64toi32_i32$0 = $7 + 25 | 0;
         $40 = $143;
         HEAP8[i64toi32_i32$0 >> 0] = $40;
         HEAP8[(i64toi32_i32$0 + 1 | 0) >> 0] = $40 >>> 8 | 0;
         HEAP8[(i64toi32_i32$0 + 2 | 0) >> 0] = $40 >>> 16 | 0;
         HEAP8[(i64toi32_i32$0 + 3 | 0) >> 0] = $40 >>> 24 | 0;
         HEAP8[(i64toi32_i32$0 + 4 | 0) >> 0] = i64toi32_i32$1;
         HEAP8[(i64toi32_i32$0 + 5 | 0) >> 0] = i64toi32_i32$1 >>> 8 | 0;
         HEAP8[(i64toi32_i32$0 + 6 | 0) >> 0] = i64toi32_i32$1 >>> 16 | 0;
         HEAP8[(i64toi32_i32$0 + 7 | 0) >> 0] = i64toi32_i32$1 >>> 24 | 0;
         i64toi32_i32$2 = $4 + 6928 | 0;
         i64toi32_i32$1 = HEAPU8[i64toi32_i32$2 >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
         i64toi32_i32$0 = HEAPU8[(i64toi32_i32$2 + 4 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 5 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 6 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 7 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
         $148 = i64toi32_i32$1;
         i64toi32_i32$1 = $7 + 17 | 0;
         $41 = $148;
         HEAP8[i64toi32_i32$1 >> 0] = $41;
         HEAP8[(i64toi32_i32$1 + 1 | 0) >> 0] = $41 >>> 8 | 0;
         HEAP8[(i64toi32_i32$1 + 2 | 0) >> 0] = $41 >>> 16 | 0;
         HEAP8[(i64toi32_i32$1 + 3 | 0) >> 0] = $41 >>> 24 | 0;
         HEAP8[(i64toi32_i32$1 + 4 | 0) >> 0] = i64toi32_i32$0;
         HEAP8[(i64toi32_i32$1 + 5 | 0) >> 0] = i64toi32_i32$0 >>> 8 | 0;
         HEAP8[(i64toi32_i32$1 + 6 | 0) >> 0] = i64toi32_i32$0 >>> 16 | 0;
         HEAP8[(i64toi32_i32$1 + 7 | 0) >> 0] = i64toi32_i32$0 >>> 24 | 0;
         label$14 : {
          $4 = ($6 + -4 | 0) >>> 3 | 0;
          if (($4 + 22 | 0) >>> 0 <= (HEAP32[($1 + 12 | 0) >> 2] | 0) >>> 0) {
           break label$14
          }
          HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] = 2;
          simple_ogg_page__clear($1 | 0);
          break label$10;
         }
         $4 = $4 + (HEAP32[($1 + 8 | 0) >> 2] | 0) | 0;
         i64toi32_i32$0 = $9$hi;
         HEAP8[($4 + 21 | 0) >> 0] = $9;
         $168 = $4 + 20 | 0;
         i64toi32_i32$2 = $9;
         i64toi32_i32$1 = 0;
         i64toi32_i32$3 = 8;
         i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
         if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
          i64toi32_i32$1 = 0;
          $42 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
         } else {
          i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
          $42 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
         }
         HEAP8[$168 >> 0] = $42;
         $172 = $4 + 19 | 0;
         i64toi32_i32$1 = $9$hi;
         i64toi32_i32$0 = $9;
         i64toi32_i32$2 = 0;
         i64toi32_i32$3 = 16;
         i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
         if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
          i64toi32_i32$2 = 0;
          $43 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
         } else {
          i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
          $43 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
         }
         HEAP8[$172 >> 0] = $43;
         $176 = $4 + 18 | 0;
         i64toi32_i32$2 = $9$hi;
         i64toi32_i32$1 = $9;
         i64toi32_i32$0 = 0;
         i64toi32_i32$3 = 24;
         i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
         if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
          i64toi32_i32$0 = 0;
          $44 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
         } else {
          i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
          $44 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
         }
         HEAP8[$176 >> 0] = $44;
         $4 = $4 + 17 | 0;
         $181 = $4;
         $184 = (HEAPU8[$4 >> 0] | 0) & 240 | 0;
         i64toi32_i32$0 = $9$hi;
         i64toi32_i32$2 = $9;
         i64toi32_i32$1 = 0;
         i64toi32_i32$3 = 32;
         i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
         if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
          i64toi32_i32$1 = 0;
          $45 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
         } else {
          i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
          $45 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
         }
         HEAP8[$181 >> 0] = $184 | ($45 & 15 | 0) | 0;
         label$15 : {
          $4 = $10 >>> 3 | 0;
          if (($4 + 23 | 0) >>> 0 <= (HEAP32[($1 + 12 | 0) >> 2] | 0) >>> 0) {
           break label$15
          }
          HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] = 2;
          simple_ogg_page__clear($1 | 0);
          break label$10;
         }
         $4 = $4 + (HEAP32[($1 + 8 | 0) >> 2] | 0) | 0;
         HEAP8[($4 + 22 | 0) >> 0] = $5;
         HEAP8[($4 + 21 | 0) >> 0] = $5 >>> 8 | 0;
         HEAP8[($4 + 20 | 0) >> 0] = $5 >>> 16 | 0;
         HEAP8[($4 + 19 | 0) >> 0] = $8;
         HEAP8[($4 + 18 | 0) >> 0] = $8 >>> 8 | 0;
         HEAP8[($4 + 17 | 0) >> 0] = $8 >>> 16 | 0;
         i64toi32_i32$0 = HEAP32[$0 >> 2] | 0;
         i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 608 | 0) >> 2] | 0;
         i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 612 | 0) >> 2] | 0;
         $4 = HEAP32[($0 + 4 | 0) >> 2] | 0;
         $4 = simple_ogg_page__set_at($0 | 0, i64toi32_i32$1 | 0, i64toi32_i32$2 | 0, $1 | 0, HEAP32[($4 + 7268 | 0) >> 2] | 0 | 0, HEAP32[($4 + 7276 | 0) >> 2] | 0 | 0, HEAP32[($4 + 7288 | 0) >> 2] | 0 | 0) | 0;
         simple_ogg_page__clear($1 | 0);
         if (!$4) {
          break label$10
         }
         $4 = HEAP32[((HEAP32[$2 >> 2] | 0) + 7048 | 0) >> 2] | 0;
         if (!$4) {
          break label$10
         }
         if (!(HEAP32[$4 >> 2] | 0)) {
          break label$10
         }
         i64toi32_i32$0 = HEAP32[$0 >> 2] | 0;
         i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 616 | 0) >> 2] | 0;
         i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 620 | 0) >> 2] | 0;
         if (!(i64toi32_i32$2 | i64toi32_i32$1 | 0)) {
          break label$10
         }
         FLAC__format_seektable_sort($4 | 0) | 0;
         simple_ogg_page__init($1 | 0);
         i64toi32_i32$0 = HEAP32[$0 >> 2] | 0;
         i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 616 | 0) >> 2] | 0;
         i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 620 | 0) >> 2] | 0;
         $4 = HEAP32[($0 + 4 | 0) >> 2] | 0;
         if (!(simple_ogg_page__get_at($0 | 0, i64toi32_i32$1 | 0, i64toi32_i32$2 | 0, $1 | 0, HEAP32[($4 + 7268 | 0) >> 2] | 0 | 0, HEAP32[($4 + 7264 | 0) >> 2] | 0 | 0, HEAP32[($4 + 7288 | 0) >> 2] | 0 | 0) | 0)) {
          break label$12
         }
         label$16 : {
          $5 = HEAP32[$2 >> 2] | 0;
          $7 = HEAP32[($5 + 7048 | 0) >> 2] | 0;
          $4 = HEAP32[$7 >> 2] | 0;
          if ((Math_imul($4, 18) + 4 | 0 | 0) == (HEAP32[($1 + 12 | 0) >> 2] | 0 | 0)) {
           break label$16
          }
          HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] = 2;
          simple_ogg_page__clear($1 | 0);
          break label$10;
         }
         label$17 : {
          if (!$4) {
           break label$17
          }
          $4 = (HEAP32[($1 + 8 | 0) >> 2] | 0) + 4 | 0;
          $6 = 0;
          label$18 : while (1) {
           $7 = (HEAP32[($7 + 4 | 0) >> 2] | 0) + Math_imul($6, 24) | 0;
           i64toi32_i32$0 = $7;
           i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
           i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
           $9 = i64toi32_i32$2;
           $9$hi = i64toi32_i32$1;
           i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] | 0;
           i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] | 0;
           $11 = i64toi32_i32$1;
           $11$hi = i64toi32_i32$2;
           $7 = HEAP32[(i64toi32_i32$0 + 16 | 0) >> 2] | 0;
           HEAP8[($4 + 17 | 0) >> 0] = $7;
           HEAP8[($4 + 15 | 0) >> 0] = i64toi32_i32$1;
           i64toi32_i32$2 = $9$hi;
           HEAP8[($4 + 7 | 0) >> 0] = $9;
           HEAP8[($4 + 16 | 0) >> 0] = $7 >>> 8 | 0;
           $313 = $4;
           i64toi32_i32$2 = $11$hi;
           i64toi32_i32$0 = i64toi32_i32$1;
           i64toi32_i32$1 = 0;
           i64toi32_i32$3 = 8;
           i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
           if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
            i64toi32_i32$1 = 0;
            $46 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
           } else {
            i64toi32_i32$1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
            $46 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
           }
           HEAP8[($313 + 14 | 0) >> 0] = $46;
           $316 = $4;
           i64toi32_i32$1 = $11$hi;
           i64toi32_i32$2 = $11;
           i64toi32_i32$0 = 0;
           i64toi32_i32$3 = 16;
           i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
           if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
            i64toi32_i32$0 = 0;
            $47 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
           } else {
            i64toi32_i32$0 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
            $47 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
           }
           HEAP8[($316 + 13 | 0) >> 0] = $47;
           $319 = $4;
           i64toi32_i32$0 = $11$hi;
           i64toi32_i32$1 = $11;
           i64toi32_i32$2 = 0;
           i64toi32_i32$3 = 24;
           i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
           if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
            i64toi32_i32$2 = 0;
            $48 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
           } else {
            i64toi32_i32$2 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
            $48 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
           }
           HEAP8[($319 + 12 | 0) >> 0] = $48;
           $322 = $4;
           i64toi32_i32$2 = $11$hi;
           i64toi32_i32$0 = $11;
           i64toi32_i32$1 = 0;
           i64toi32_i32$3 = 32;
           i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
           if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
            i64toi32_i32$1 = 0;
            $49 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
           } else {
            i64toi32_i32$1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
            $49 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
           }
           HEAP8[($322 + 11 | 0) >> 0] = $49;
           $325 = $4;
           i64toi32_i32$1 = $11$hi;
           i64toi32_i32$2 = $11;
           i64toi32_i32$0 = 0;
           i64toi32_i32$3 = 40;
           i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
           if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
            i64toi32_i32$0 = 0;
            $50 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
           } else {
            i64toi32_i32$0 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
            $50 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
           }
           HEAP8[($325 + 10 | 0) >> 0] = $50;
           $328 = $4;
           i64toi32_i32$0 = $11$hi;
           i64toi32_i32$1 = $11;
           i64toi32_i32$2 = 0;
           i64toi32_i32$3 = 48;
           i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
           if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
            i64toi32_i32$2 = 0;
            $51 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
           } else {
            i64toi32_i32$2 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
            $51 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
           }
           HEAP8[($328 + 9 | 0) >> 0] = $51;
           $331 = $4;
           i64toi32_i32$2 = $11$hi;
           i64toi32_i32$0 = $11;
           i64toi32_i32$1 = 0;
           i64toi32_i32$3 = 56;
           i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
           if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
            i64toi32_i32$1 = 0;
            $52 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
           } else {
            i64toi32_i32$1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
            $52 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
           }
           HEAP8[($331 + 8 | 0) >> 0] = $52;
           $334 = $4;
           i64toi32_i32$1 = $9$hi;
           i64toi32_i32$2 = $9;
           i64toi32_i32$0 = 0;
           i64toi32_i32$3 = 8;
           i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
           if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
            i64toi32_i32$0 = 0;
            $53 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
           } else {
            i64toi32_i32$0 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
            $53 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
           }
           HEAP8[($334 + 6 | 0) >> 0] = $53;
           $337 = $4;
           i64toi32_i32$0 = $9$hi;
           i64toi32_i32$1 = $9;
           i64toi32_i32$2 = 0;
           i64toi32_i32$3 = 16;
           i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
           if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
            i64toi32_i32$2 = 0;
            $54 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
           } else {
            i64toi32_i32$2 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
            $54 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
           }
           HEAP8[($337 + 5 | 0) >> 0] = $54;
           $340 = $4;
           i64toi32_i32$2 = $9$hi;
           i64toi32_i32$0 = $9;
           i64toi32_i32$1 = 0;
           i64toi32_i32$3 = 24;
           i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
           if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
            i64toi32_i32$1 = 0;
            $55 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
           } else {
            i64toi32_i32$1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
            $55 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
           }
           HEAP8[($340 + 4 | 0) >> 0] = $55;
           $343 = $4;
           i64toi32_i32$1 = $9$hi;
           i64toi32_i32$2 = $9;
           i64toi32_i32$0 = 0;
           i64toi32_i32$3 = 32;
           i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
           if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
            i64toi32_i32$0 = 0;
            $56 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
           } else {
            i64toi32_i32$0 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
            $56 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
           }
           HEAP8[($343 + 3 | 0) >> 0] = $56;
           $346 = $4;
           i64toi32_i32$0 = $9$hi;
           i64toi32_i32$1 = $9;
           i64toi32_i32$2 = 0;
           i64toi32_i32$3 = 40;
           i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
           if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
            i64toi32_i32$2 = 0;
            $57 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
           } else {
            i64toi32_i32$2 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
            $57 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
           }
           HEAP8[($346 + 2 | 0) >> 0] = $57;
           $349 = $4;
           i64toi32_i32$2 = $9$hi;
           i64toi32_i32$0 = $9;
           i64toi32_i32$1 = 0;
           i64toi32_i32$3 = 48;
           i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
           if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
            i64toi32_i32$1 = 0;
            $58 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
           } else {
            i64toi32_i32$1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
            $58 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
           }
           HEAP8[($349 + 1 | 0) >> 0] = $58;
           $352 = $4;
           i64toi32_i32$1 = $9$hi;
           i64toi32_i32$2 = $9;
           i64toi32_i32$0 = 0;
           i64toi32_i32$3 = 56;
           i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
           if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
            i64toi32_i32$0 = 0;
            $59 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
           } else {
            i64toi32_i32$0 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
            $59 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
           }
           HEAP8[$352 >> 0] = $59;
           $4 = $4 + 18 | 0;
           $6 = $6 + 1 | 0;
           $5 = HEAP32[$2 >> 2] | 0;
           $7 = HEAP32[($5 + 7048 | 0) >> 2] | 0;
           if ($6 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
            continue label$18
           }
           break label$18;
          };
         }
         i64toi32_i32$1 = HEAP32[$0 >> 2] | 0;
         i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 616 | 0) >> 2] | 0;
         i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 620 | 0) >> 2] | 0;
         simple_ogg_page__set_at($0 | 0, i64toi32_i32$0 | 0, i64toi32_i32$2 | 0, $1 | 0, HEAP32[($5 + 7268 | 0) >> 2] | 0 | 0, HEAP32[($5 + 7276 | 0) >> 2] | 0 | 0, HEAP32[($5 + 7288 | 0) >> 2] | 0 | 0) | 0;
        }
        simple_ogg_page__clear($1 | 0);
        break label$10;
       }
       update_metadata_($0 | 0);
      }
      $6 = HEAP32[$0 >> 2] | 0;
      $3 = HEAP32[$6 >> 2] | 0 ? 1 : $3;
      $4 = HEAP32[($0 + 4 | 0) >> 2] | 0;
     }
     $7 = HEAP32[($4 + 7280 | 0) >> 2] | 0;
     if (!$7) {
      break label$8
     }
     FUNCTION_TABLE[$7 | 0]($0, $4 + 6872 | 0, HEAP32[($4 + 7288 | 0) >> 2] | 0);
     $6 = HEAP32[$0 >> 2] | 0;
    }
    label$19 : {
     if (HEAP32[($6 + 4 | 0) >> 2] | 0) {
      break label$19
     }
     $5 = $3;
     break label$6;
    }
    label$20 : {
     $4 = HEAP32[((HEAP32[$2 >> 2] | 0) + 11752 | 0) >> 2] | 0;
     if ($4) {
      break label$20
     }
     $5 = $3;
     break label$6;
    }
    label$21 : {
     if (!(FLAC__stream_decoder_finish($4 | 0) | 0)) {
      break label$21
     }
     $5 = $3;
     break label$6;
    }
    $5 = 1;
    if ($3) {
     break label$6
    }
    HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] = 4;
   }
   label$22 : {
    $4 = HEAP32[$2 >> 2] | 0;
    $3 = HEAP32[($4 + 7296 | 0) >> 2] | 0;
    if (!$3) {
     break label$22
    }
    label$23 : {
     if (($3 | 0) == (HEAP32[GOT_data_internal_stdout >> 2] | 0 | 0)) {
      break label$23
     }
     fclose($3 | 0) | 0;
     $4 = HEAP32[$2 >> 2] | 0;
    }
    HEAP32[($4 + 7296 | 0) >> 2] = 0;
   }
   label$24 : {
    if (!(HEAP32[($4 + 7260 | 0) >> 2] | 0)) {
     break label$24
    }
    FLAC__ogg_encoder_aspect_finish((HEAP32[$0 >> 2] | 0) + 632 | 0 | 0);
   }
   label$25 : {
    $4 = HEAP32[$0 >> 2] | 0;
    $3 = HEAP32[($4 + 600 | 0) >> 2] | 0;
    if (!$3) {
     break label$25
    }
    dlfree($3 | 0);
    $4 = HEAP32[$0 >> 2] | 0;
    i64toi32_i32$0 = $4;
    i64toi32_i32$2 = 0;
    HEAP32[(i64toi32_i32$0 + 600 | 0) >> 2] = 0;
    HEAP32[(i64toi32_i32$0 + 604 | 0) >> 2] = i64toi32_i32$2;
   }
   label$26 : {
    if (!(HEAP32[($4 + 24 | 0) >> 2] | 0)) {
     break label$26
    }
    $3 = 0;
    label$27 : while (1) {
     label$28 : {
      $6 = HEAP32[$2 >> 2] | 0;
      $4 = $3 << 2 | 0;
      $7 = HEAP32[(($6 + $4 | 0) + 7328 | 0) >> 2] | 0;
      if (!$7) {
       break label$28
      }
      dlfree($7 | 0);
      HEAP32[(((HEAP32[$2 >> 2] | 0) + $4 | 0) + 7328 | 0) >> 2] = 0;
      $6 = HEAP32[$2 >> 2] | 0;
     }
     label$29 : {
      $6 = HEAP32[(($6 + $4 | 0) + 7368 | 0) >> 2] | 0;
      if (!$6) {
       break label$29
      }
      dlfree($6 | 0);
      HEAP32[(((HEAP32[$2 >> 2] | 0) + $4 | 0) + 7368 | 0) >> 2] = 0;
     }
     $3 = $3 + 1 | 0;
     if ($3 >>> 0 < (HEAP32[((HEAP32[$0 >> 2] | 0) + 24 | 0) >> 2] | 0) >>> 0) {
      continue label$27
     }
     break label$27;
    };
   }
   label$30 : {
    $4 = HEAP32[$2 >> 2] | 0;
    $3 = HEAP32[($4 + 7360 | 0) >> 2] | 0;
    if (!$3) {
     break label$30
    }
    dlfree($3 | 0);
    HEAP32[((HEAP32[$2 >> 2] | 0) + 7360 | 0) >> 2] = 0;
    $4 = HEAP32[$2 >> 2] | 0;
   }
   label$31 : {
    $3 = HEAP32[($4 + 7400 | 0) >> 2] | 0;
    if (!$3) {
     break label$31
    }
    dlfree($3 | 0);
    HEAP32[((HEAP32[$2 >> 2] | 0) + 7400 | 0) >> 2] = 0;
    $4 = HEAP32[$2 >> 2] | 0;
   }
   label$32 : {
    $3 = HEAP32[($4 + 7364 | 0) >> 2] | 0;
    if (!$3) {
     break label$32
    }
    dlfree($3 | 0);
    HEAP32[((HEAP32[$2 >> 2] | 0) + 7364 | 0) >> 2] = 0;
    $4 = HEAP32[$2 >> 2] | 0;
   }
   label$33 : {
    $4 = HEAP32[($4 + 7404 | 0) >> 2] | 0;
    if (!$4) {
     break label$33
    }
    dlfree($4 | 0);
    HEAP32[((HEAP32[$2 >> 2] | 0) + 7404 | 0) >> 2] = 0;
   }
   label$34 : {
    $3 = HEAP32[$0 >> 2] | 0;
    if (!(HEAP32[($3 + 40 | 0) >> 2] | 0)) {
     break label$34
    }
    $4 = 0;
    label$35 : while (1) {
     label$36 : {
      $6 = $4 << 2 | 0;
      $7 = HEAP32[(((HEAP32[$2 >> 2] | 0) + $6 | 0) + 7408 | 0) >> 2] | 0;
      if (!$7) {
       break label$36
      }
      dlfree($7 | 0);
      HEAP32[(((HEAP32[($0 + 4 | 0) >> 2] | 0) + $6 | 0) + 7408 | 0) >> 2] = 0;
      $3 = HEAP32[$0 >> 2] | 0;
     }
     $4 = $4 + 1 | 0;
     if ($4 >>> 0 < (HEAP32[($3 + 40 | 0) >> 2] | 0) >>> 0) {
      continue label$35
     }
     break label$35;
    };
   }
   label$37 : {
    $4 = HEAP32[$2 >> 2] | 0;
    $6 = HEAP32[($4 + 7536 | 0) >> 2] | 0;
    if (!$6) {
     break label$37
    }
    dlfree($6 | 0);
    $4 = HEAP32[($0 + 4 | 0) >> 2] | 0;
    HEAP32[($4 + 7536 | 0) >> 2] = 0;
    $3 = HEAP32[$0 >> 2] | 0;
   }
   label$38 : {
    if (!(HEAP32[($3 + 24 | 0) >> 2] | 0)) {
     break label$38
    }
    $6 = 0;
    label$39 : while (1) {
     label$40 : {
      $3 = $6 << 3 | 0;
      $7 = HEAP32[(($4 + $3 | 0) + 7540 | 0) >> 2] | 0;
      if (!$7) {
       break label$40
      }
      dlfree($7 | 0);
      HEAP32[(((HEAP32[$2 >> 2] | 0) + $3 | 0) + 7540 | 0) >> 2] = 0;
      $4 = HEAP32[$2 >> 2] | 0;
     }
     label$41 : {
      $7 = HEAP32[(($4 + $3 | 0) + 7544 | 0) >> 2] | 0;
      if (!$7) {
       break label$41
      }
      dlfree($7 | 0);
      HEAP32[(((HEAP32[$2 >> 2] | 0) + $3 | 0) + 7544 | 0) >> 2] = 0;
      $4 = HEAP32[$2 >> 2] | 0;
     }
     $6 = $6 + 1 | 0;
     if ($6 >>> 0 < (HEAP32[((HEAP32[$0 >> 2] | 0) + 24 | 0) >> 2] | 0) >>> 0) {
      continue label$39
     }
     break label$39;
    };
   }
   label$42 : {
    $3 = HEAP32[($4 + 7604 | 0) >> 2] | 0;
    if (!$3) {
     break label$42
    }
    dlfree($3 | 0);
    HEAP32[((HEAP32[$2 >> 2] | 0) + 7604 | 0) >> 2] = 0;
    $4 = HEAP32[$2 >> 2] | 0;
   }
   label$43 : {
    $3 = HEAP32[($4 + 7608 | 0) >> 2] | 0;
    if (!$3) {
     break label$43
    }
    dlfree($3 | 0);
    HEAP32[((HEAP32[$2 >> 2] | 0) + 7608 | 0) >> 2] = 0;
    $4 = HEAP32[$2 >> 2] | 0;
   }
   label$44 : {
    $3 = HEAP32[($4 + 7612 | 0) >> 2] | 0;
    if (!$3) {
     break label$44
    }
    dlfree($3 | 0);
    HEAP32[((HEAP32[$2 >> 2] | 0) + 7612 | 0) >> 2] = 0;
    $4 = HEAP32[$2 >> 2] | 0;
   }
   label$45 : {
    $3 = HEAP32[($4 + 7616 | 0) >> 2] | 0;
    if (!$3) {
     break label$45
    }
    dlfree($3 | 0);
    HEAP32[((HEAP32[$2 >> 2] | 0) + 7616 | 0) >> 2] = 0;
    $4 = HEAP32[$2 >> 2] | 0;
   }
   label$46 : {
    $3 = HEAP32[($4 + 7620 | 0) >> 2] | 0;
    if (!$3) {
     break label$46
    }
    dlfree($3 | 0);
    $4 = HEAP32[$2 >> 2] | 0;
    HEAP32[($4 + 7620 | 0) >> 2] = 0;
   }
   label$47 : {
    $3 = HEAP32[($4 + 7624 | 0) >> 2] | 0;
    if (!$3) {
     break label$47
    }
    dlfree($3 | 0);
    $4 = HEAP32[$2 >> 2] | 0;
    HEAP32[($4 + 7624 | 0) >> 2] = 0;
   }
   label$48 : {
    $3 = HEAP32[$0 >> 2] | 0;
    if (!(HEAP32[($3 + 4 | 0) >> 2] | 0)) {
     break label$48
    }
    if (!(HEAP32[($3 + 24 | 0) >> 2] | 0)) {
     break label$48
    }
    $2 = 0;
    label$49 : while (1) {
     label$50 : {
      $6 = $2 << 2 | 0;
      $7 = HEAP32[(($4 + $6 | 0) + 11764 | 0) >> 2] | 0;
      if (!$7) {
       break label$50
      }
      dlfree($7 | 0);
      HEAP32[(((HEAP32[($0 + 4 | 0) >> 2] | 0) + $6 | 0) + 11764 | 0) >> 2] = 0;
      $4 = HEAP32[($0 + 4 | 0) >> 2] | 0;
      $3 = HEAP32[$0 >> 2] | 0;
     }
     $2 = $2 + 1 | 0;
     if ($2 >>> 0 < (HEAP32[($3 + 24 | 0) >> 2] | 0) >>> 0) {
      continue label$49
     }
     break label$49;
    };
   }
   FLAC__bitwriter_free(HEAP32[($4 + 6856 | 0) >> 2] | 0 | 0);
   $2 = HEAP32[$0 >> 2] | 0;
   i64toi32_i32$0 = $2;
   i64toi32_i32$2 = 1056964608;
   HEAP32[(i64toi32_i32$0 + 44 | 0) >> 2] = 13;
   HEAP32[(i64toi32_i32$0 + 48 | 0) >> 2] = i64toi32_i32$2;
   i64toi32_i32$2 = 1;
   HEAP32[(i64toi32_i32$0 + 36 | 0) >> 2] = 0;
   HEAP32[(i64toi32_i32$0 + 40 | 0) >> 2] = i64toi32_i32$2;
   i64toi32_i32$2 = 44100;
   HEAP32[(i64toi32_i32$0 + 28 | 0) >> 2] = 16;
   HEAP32[(i64toi32_i32$0 + 32 | 0) >> 2] = i64toi32_i32$2;
   i64toi32_i32$2 = 2;
   HEAP32[(i64toi32_i32$0 + 20 | 0) >> 2] = 0;
   HEAP32[(i64toi32_i32$0 + 24 | 0) >> 2] = i64toi32_i32$2;
   i64toi32_i32$2 = 0;
   HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = 1;
   HEAP32[(i64toi32_i32$0 + 16 | 0) >> 2] = i64toi32_i32$2;
   i64toi32_i32$2 = 1;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = 0;
   HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = i64toi32_i32$2;
   $2 = HEAP32[$0 >> 2] | 0;
   i64toi32_i32$0 = $2;
   i64toi32_i32$2 = 0;
   HEAP32[(i64toi32_i32$0 + 592 | 0) >> 2] = 0;
   HEAP32[(i64toi32_i32$0 + 596 | 0) >> 2] = i64toi32_i32$2;
   i64toi32_i32$2 = 0;
   HEAP32[(i64toi32_i32$0 + 556 | 0) >> 2] = 0;
   HEAP32[(i64toi32_i32$0 + 560 | 0) >> 2] = i64toi32_i32$2;
   i64toi32_i32$0 = i64toi32_i32$0 + 564 | 0;
   i64toi32_i32$2 = 0;
   HEAP32[i64toi32_i32$0 >> 2] = 0;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$2;
   i64toi32_i32$0 = $2 + 572 | 0;
   i64toi32_i32$2 = 0;
   HEAP32[i64toi32_i32$0 >> 2] = 0;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$2;
   i64toi32_i32$0 = $2 + 580 | 0;
   i64toi32_i32$2 = 0;
   HEAP32[i64toi32_i32$0 >> 2] = 0;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$2;
   i64toi32_i32$0 = $2 + 600 | 0;
   i64toi32_i32$2 = 0;
   HEAP32[i64toi32_i32$0 >> 2] = 0;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$2;
   $4 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   i64toi32_i32$0 = $4;
   i64toi32_i32$2 = 0;
   HEAP32[(i64toi32_i32$0 + 7248 | 0) >> 2] = 0;
   HEAP32[(i64toi32_i32$0 + 7252 | 0) >> 2] = i64toi32_i32$2;
   HEAP32[(i64toi32_i32$0 + 7048 | 0) >> 2] = 0;
   i64toi32_i32$0 = i64toi32_i32$0 + 7256 | 0;
   i64toi32_i32$2 = 0;
   HEAP32[i64toi32_i32$0 >> 2] = 0;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$2;
   i64toi32_i32$0 = $4 + 7264 | 0;
   i64toi32_i32$2 = 0;
   HEAP32[i64toi32_i32$0 >> 2] = 0;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$2;
   i64toi32_i32$0 = $4 + 7272 | 0;
   i64toi32_i32$2 = 0;
   HEAP32[i64toi32_i32$0 >> 2] = 0;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$2;
   i64toi32_i32$0 = $4 + 7280 | 0;
   i64toi32_i32$2 = 0;
   HEAP32[i64toi32_i32$0 >> 2] = 0;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$2;
   HEAP32[($4 + 7288 | 0) >> 2] = 0;
   FLAC__ogg_encoder_aspect_set_defaults($2 + 632 | 0 | 0);
   label$51 : {
    $2 = HEAP32[$0 >> 2] | 0;
    if ((HEAP32[$2 >> 2] | 0 | 0) != (1 | 0)) {
     break label$51
    }
    i64toi32_i32$0 = $2;
    i64toi32_i32$2 = 0;
    HEAP32[(i64toi32_i32$0 + 16 | 0) >> 2] = 1;
    HEAP32[(i64toi32_i32$0 + 20 | 0) >> 2] = i64toi32_i32$2;
    FLAC__stream_encoder_set_apodization($0 | 0, GOT_data_internal___memory_base + 6467 | 0 | 0) | 0;
    $2 = HEAP32[$0 >> 2] | 0;
    if ((HEAP32[$2 >> 2] | 0 | 0) != (1 | 0)) {
     break label$51
    }
    i64toi32_i32$0 = $2;
    i64toi32_i32$2 = 5;
    HEAP32[(i64toi32_i32$0 + 576 | 0) >> 2] = 0;
    HEAP32[(i64toi32_i32$0 + 580 | 0) >> 2] = i64toi32_i32$2;
    i64toi32_i32$2 = 0;
    HEAP32[(i64toi32_i32$0 + 564 | 0) >> 2] = 0;
    HEAP32[(i64toi32_i32$0 + 568 | 0) >> 2] = i64toi32_i32$2;
    i64toi32_i32$2 = 0;
    HEAP32[(i64toi32_i32$0 + 556 | 0) >> 2] = 8;
    HEAP32[(i64toi32_i32$0 + 560 | 0) >> 2] = i64toi32_i32$2;
   }
   label$52 : {
    if ($5) {
     break label$52
    }
    HEAP32[$2 >> 2] = 1;
   }
   $2 = !$5;
  }
  __stack_pointer = $1 + 16 | 0;
  return $2 | 0;
 }
 
 function process_frame_($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $5 = 0, $15 = 0, $14 = 0, $9 = 0, $13 = 0, $16 = 0, $4 = 0, $10 = 0, $3 = 0, $12 = 0, $11 = 0, i64toi32_i32$2 = 0, $8 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $7 = 0, i64toi32_i32$5 = 0, $6 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, $17 = 0, $845 = 0, $847 = 0, $847$hi = 0, $850 = 0, $850$hi = 0;
  $3 = __stack_pointer - 48 | 0;
  __stack_pointer = $3;
  label$1 : {
   label$2 : {
    $4 = HEAP32[$0 >> 2] | 0;
    if (!(HEAP32[($4 + 12 | 0) >> 2] | 0)) {
     break label$2
    }
    $5 = HEAP32[($0 + 4 | 0) >> 2] | 0;
    $5 = FLAC__MD5Accumulate($5 + 7060 | 0 | 0, $5 + 4 | 0 | 0, HEAP32[($4 + 24 | 0) >> 2] | 0 | 0, HEAP32[($4 + 36 | 0) >> 2] | 0 | 0, ((HEAP32[($4 + 28 | 0) >> 2] | 0) + 7 | 0) >>> 3 | 0 | 0) | 0;
    $4 = HEAP32[$0 >> 2] | 0;
    if ($5) {
     break label$2
    }
    HEAP32[$4 >> 2] = 8;
    $1 = 0;
    break label$1;
   }
   $6 = HEAP32[($4 + 576 | 0) >> 2] | 0;
   $7 = 0;
   label$3 : {
    label$4 : {
     if (!$1) {
      break label$4
     }
     $8 = 0;
     break label$3;
    }
    $1 = FLAC__format_get_max_rice_partition_order_from_blocksize(HEAP32[($4 + 36 | 0) >> 2] | 0 | 0) | 0;
    $4 = HEAP32[$0 >> 2] | 0;
    $5 = HEAP32[($4 + 580 | 0) >> 2] | 0;
    $8 = $1 >>> 0 < $5 >>> 0 ? $1 : $5;
   }
   $9 = HEAP32[($4 + 36 | 0) >> 2] | 0;
   HEAP32[($3 + 8 | 0) >> 2] = $9;
   HEAP32[($3 + 12 | 0) >> 2] = HEAP32[($4 + 32 | 0) >> 2] | 0;
   $1 = HEAP32[($4 + 24 | 0) >> 2] | 0;
   HEAP32[($3 + 20 | 0) >> 2] = 0;
   HEAP32[($3 + 16 | 0) >> 2] = $1;
   $1 = HEAP32[($4 + 28 | 0) >> 2] | 0;
   HEAP32[($3 + 28 | 0) >> 2] = 0;
   HEAP32[($3 + 24 | 0) >> 2] = $1;
   $10 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   HEAP32[($3 + 32 | 0) >> 2] = HEAP32[($10 + 7056 | 0) >> 2] | 0;
   label$5 : {
    label$6 : {
     if (!(HEAP32[($4 + 16 | 0) >> 2] | 0)) {
      break label$6
     }
     $7 = 1;
     if (!(HEAP32[($4 + 20 | 0) >> 2] | 0)) {
      break label$6
     }
     if (!(HEAP32[($10 + 6864 | 0) >> 2] | 0)) {
      break label$6
     }
     $1 = HEAP32[($10 + 6868 | 0) >> 2] | 0;
     $7 = ($1 | 0) != (0 | 0);
     $11 = 1;
     if ($1) {
      break label$5
     }
    }
    $11 = 0;
    if (!(HEAP32[($4 + 24 | 0) >> 2] | 0)) {
     break label$5
    }
    label$7 : while (1) {
     $12 = $10 + ($11 << 2 | 0) | 0;
     $13 = 0;
     label$8 : {
      if (!$9) {
       break label$8
      }
      $14 = HEAP32[($12 + 4 | 0) >> 2] | 0;
      $1 = 0;
      $5 = 0;
      label$9 : {
       label$10 : while (1) {
        $1 = HEAP32[($14 + ($5 << 2 | 0) | 0) >> 2] | 0 | $1 | 0;
        $15 = $1 & 1 | 0;
        $5 = $5 + 1 | 0;
        if ($5 >>> 0 >= $9 >>> 0) {
         break label$9
        }
        if (!$15) {
         continue label$10
        }
        break label$10;
       };
      }
      $13 = 0;
      if (!$1) {
       break label$8
      }
      $5 = 0;
      if ($15) {
       break label$8
      }
      label$11 : while (1) {
       $5 = $5 + 1 | 0;
       $15 = $1 & 2 | 0;
       $1 = $1 >> 1 | 0;
       if (!$15) {
        continue label$11
       }
       break label$11;
      };
      if (!$5) {
       break label$8
      }
      $13 = $9 & 3 | 0;
      $1 = 0;
      label$12 : {
       if (($9 + -1 | 0) >>> 0 < 3 >>> 0) {
        break label$12
       }
       $9 = $9 & -4 | 0;
       $1 = 0;
       label$13 : while (1) {
        $15 = $1 << 2 | 0;
        $16 = $14 + $15 | 0;
        HEAP32[$16 >> 2] = (HEAP32[$16 >> 2] | 0) >> $5 | 0;
        $16 = $14 + ($15 | 4 | 0) | 0;
        HEAP32[$16 >> 2] = (HEAP32[$16 >> 2] | 0) >> $5 | 0;
        $16 = $14 + ($15 | 8 | 0) | 0;
        HEAP32[$16 >> 2] = (HEAP32[$16 >> 2] | 0) >> $5 | 0;
        $15 = $14 + ($15 | 12 | 0) | 0;
        HEAP32[$15 >> 2] = (HEAP32[$15 >> 2] | 0) >> $5 | 0;
        $1 = $1 + 4 | 0;
        $9 = $9 + -4 | 0;
        if ($9) {
         continue label$13
        }
        break label$13;
       };
      }
      label$14 : {
       if (!$13) {
        break label$14
       }
       label$15 : while (1) {
        $15 = $14 + ($1 << 2 | 0) | 0;
        HEAP32[$15 >> 2] = (HEAP32[$15 >> 2] | 0) >> $5 | 0;
        $1 = $1 + 1 | 0;
        $13 = $13 + -1 | 0;
        if ($13) {
         continue label$15
        }
        break label$15;
       };
      }
      $13 = $5;
     }
     $15 = $10 + Math_imul($11, 584) | 0;
     $1 = HEAP32[($4 + 28 | 0) >> 2] | 0;
     $5 = $13 >>> 0 > $1 >>> 0 ? $1 : $13;
     HEAP32[($15 + 624 | 0) >> 2] = $5;
     HEAP32[($15 + 916 | 0) >> 2] = $5;
     HEAP32[($12 + 216 | 0) >> 2] = $1 - $5 | 0;
     label$16 : {
      $11 = $11 + 1 | 0;
      if ($11 >>> 0 < (HEAP32[($4 + 24 | 0) >> 2] | 0) >>> 0) {
       break label$16
      }
      $11 = 0;
      break label$5;
     }
     $9 = HEAP32[($4 + 36 | 0) >> 2] | 0;
     continue label$7;
    };
   }
   $17 = $6 >>> 0 < $8 >>> 0;
   label$17 : {
    if (!$7) {
     break label$17
    }
    $1 = 0;
    $16 = 0;
    label$18 : {
     $13 = HEAP32[($4 + 36 | 0) >> 2] | 0;
     if (!$13) {
      break label$18
     }
     $9 = HEAP32[($10 + 36 | 0) >> 2] | 0;
     $5 = 0;
     $15 = 0;
     label$19 : {
      label$20 : while (1) {
       $5 = HEAP32[($9 + ($15 << 2 | 0) | 0) >> 2] | 0 | $5 | 0;
       $14 = $5 & 1 | 0;
       $15 = $15 + 1 | 0;
       if ($15 >>> 0 >= $13 >>> 0) {
        break label$19
       }
       if (!$14) {
        continue label$20
       }
       break label$20;
      };
     }
     $16 = 0;
     if (!$5) {
      break label$18
     }
     if ($14) {
      break label$18
     }
     $15 = 0;
     label$21 : while (1) {
      $15 = $15 + 1 | 0;
      $14 = $5 & 2 | 0;
      $5 = $5 >> 1 | 0;
      if (!$14) {
       continue label$21
      }
      break label$21;
     };
     if (!$15) {
      break label$18
     }
     $16 = $13 & 3 | 0;
     $5 = 0;
     label$22 : {
      if (($13 + -1 | 0) >>> 0 < 3 >>> 0) {
       break label$22
      }
      $13 = $13 & -4 | 0;
      $5 = 0;
      label$23 : while (1) {
       $14 = $5 << 2 | 0;
       $12 = $9 + $14 | 0;
       HEAP32[$12 >> 2] = (HEAP32[$12 >> 2] | 0) >> $15 | 0;
       $12 = $9 + ($14 | 4 | 0) | 0;
       HEAP32[$12 >> 2] = (HEAP32[$12 >> 2] | 0) >> $15 | 0;
       $12 = $9 + ($14 | 8 | 0) | 0;
       HEAP32[$12 >> 2] = (HEAP32[$12 >> 2] | 0) >> $15 | 0;
       $14 = $9 + ($14 | 12 | 0) | 0;
       HEAP32[$14 >> 2] = (HEAP32[$14 >> 2] | 0) >> $15 | 0;
       $5 = $5 + 4 | 0;
       $13 = $13 + -4 | 0;
       if ($13) {
        continue label$23
       }
       break label$23;
      };
     }
     label$24 : {
      if (!$16) {
       break label$24
      }
      label$25 : while (1) {
       $14 = $9 + ($5 << 2 | 0) | 0;
       HEAP32[$14 >> 2] = (HEAP32[$14 >> 2] | 0) >> $15 | 0;
       $5 = $5 + 1 | 0;
       $16 = $16 + -1 | 0;
       if ($16) {
        continue label$25
       }
       break label$25;
      };
     }
     $16 = $15;
    }
    $5 = HEAP32[($4 + 28 | 0) >> 2] | 0;
    $15 = $16 >>> 0 > $5 >>> 0 ? $5 : $16;
    HEAP32[($10 + 5296 | 0) >> 2] = $15;
    HEAP32[($10 + 5588 | 0) >> 2] = $15;
    HEAP32[($10 + 248 | 0) >> 2] = $5 - $15 | 0;
    label$26 : {
     label$27 : {
      $9 = HEAP32[($4 + 36 | 0) >> 2] | 0;
      if ($9) {
       break label$27
      }
      $13 = 0;
      break label$26;
     }
     $14 = HEAP32[($10 + 40 | 0) >> 2] | 0;
     $5 = 0;
     label$28 : {
      label$29 : while (1) {
       $1 = HEAP32[($14 + ($5 << 2 | 0) | 0) >> 2] | 0 | $1 | 0;
       $15 = $1 & 1 | 0;
       $5 = $5 + 1 | 0;
       if ($5 >>> 0 >= $9 >>> 0) {
        break label$28
       }
       if (!$15) {
        continue label$29
       }
       break label$29;
      };
     }
     $13 = 0;
     if (!$1) {
      break label$26
     }
     if ($15) {
      break label$26
     }
     $5 = 0;
     label$30 : while (1) {
      $5 = $5 + 1 | 0;
      $15 = $1 & 2 | 0;
      $1 = $1 >> 1 | 0;
      if (!$15) {
       continue label$30
      }
      break label$30;
     };
     if (!$5) {
      break label$26
     }
     $13 = $9 & 3 | 0;
     $1 = 0;
     label$31 : {
      if (($9 + -1 | 0) >>> 0 < 3 >>> 0) {
       break label$31
      }
      $9 = $9 & -4 | 0;
      $1 = 0;
      label$32 : while (1) {
       $15 = $1 << 2 | 0;
       $16 = $14 + $15 | 0;
       HEAP32[$16 >> 2] = (HEAP32[$16 >> 2] | 0) >> $5 | 0;
       $16 = $14 + ($15 | 4 | 0) | 0;
       HEAP32[$16 >> 2] = (HEAP32[$16 >> 2] | 0) >> $5 | 0;
       $16 = $14 + ($15 | 8 | 0) | 0;
       HEAP32[$16 >> 2] = (HEAP32[$16 >> 2] | 0) >> $5 | 0;
       $15 = $14 + ($15 | 12 | 0) | 0;
       HEAP32[$15 >> 2] = (HEAP32[$15 >> 2] | 0) >> $5 | 0;
       $1 = $1 + 4 | 0;
       $9 = $9 + -4 | 0;
       if ($9) {
        continue label$32
       }
       break label$32;
      };
     }
     label$33 : {
      if (!$13) {
       break label$33
      }
      label$34 : while (1) {
       $15 = $14 + ($1 << 2 | 0) | 0;
       HEAP32[$15 >> 2] = (HEAP32[$15 >> 2] | 0) >> $5 | 0;
       $1 = $1 + 1 | 0;
       $13 = $13 + -1 | 0;
       if ($13) {
        continue label$34
       }
       break label$34;
      };
     }
     $13 = $5;
    }
    $1 = HEAP32[($4 + 28 | 0) >> 2] | 0;
    $5 = $13 >>> 0 > $1 >>> 0 ? $1 : $13;
    HEAP32[($10 + 5880 | 0) >> 2] = $5;
    HEAP32[($10 + 6172 | 0) >> 2] = $5;
    HEAP32[($10 + 252 | 0) >> 2] = ($1 - $5 | 0) + 1 | 0;
   }
   $14 = $17 ? $6 : $8;
   label$35 : {
    if ($11) {
     break label$35
    }
    if (!(HEAP32[($4 + 24 | 0) >> 2] | 0)) {
     break label$35
    }
    $1 = 0;
    label$36 : while (1) {
     $5 = $10 + ($1 << 2 | 0) | 0;
     $15 = $10 + ($1 << 3 | 0) | 0;
     process_subframe_($0 | 0, $14 | 0, $8 | 0, $3 + 8 | 0 | 0, HEAP32[($5 + 216 | 0) >> 2] | 0 | 0, HEAP32[($5 + 4 | 0) >> 2] | 0 | 0, $15 + 6176 | 0 | 0, $15 + 6640 | 0 | 0, $15 + 256 | 0 | 0, $5 + 6768 | 0 | 0, $5 + 6808 | 0 | 0);
     $10 = HEAP32[($0 + 4 | 0) >> 2] | 0;
     $1 = $1 + 1 | 0;
     if ($1 >>> 0 < (HEAP32[((HEAP32[$0 >> 2] | 0) + 24 | 0) >> 2] | 0) >>> 0) {
      continue label$36
     }
     break label$36;
    };
   }
   label$37 : {
    label$38 : {
     label$39 : {
      label$40 : {
       if (!$7) {
        break label$40
       }
       process_subframe_($0 | 0, $14 | 0, $8 | 0, $3 + 8 | 0 | 0, HEAP32[($10 + 248 | 0) >> 2] | 0 | 0, HEAP32[($10 + 36 | 0) >> 2] | 0 | 0, $10 + 6240 | 0 | 0, $10 + 6704 | 0 | 0, $10 + 320 | 0 | 0, $10 + 6800 | 0 | 0, $10 + 6840 | 0 | 0);
       $1 = HEAP32[($0 + 4 | 0) >> 2] | 0;
       process_subframe_($0 | 0, $14 | 0, $8 | 0, $3 + 8 | 0 | 0, HEAP32[($1 + 252 | 0) >> 2] | 0 | 0, HEAP32[($1 + 40 | 0) >> 2] | 0 | 0, $1 + 6248 | 0 | 0, $1 + 6712 | 0 | 0, $1 + 328 | 0 | 0, $1 + 6804 | 0 | 0, $1 + 6844 | 0 | 0);
       $1 = HEAP32[($0 + 4 | 0) >> 2] | 0;
       label$41 : {
        label$42 : {
         if (!(HEAP32[((HEAP32[$0 >> 2] | 0) + 20 | 0) >> 2] | 0)) {
          break label$42
         }
         if (!(HEAP32[($1 + 6864 | 0) >> 2] | 0)) {
          break label$42
         }
         $5 = HEAP32[($1 + 6868 | 0) >> 2] | 0 ? 3 : 0;
         break label$41;
        }
        $5 = HEAP32[($1 + 6844 | 0) >> 2] | 0;
        $15 = HEAP32[($1 + 6808 | 0) >> 2] | 0;
        $14 = $5 + $15 | 0;
        $9 = HEAP32[($1 + 6812 | 0) >> 2] | 0;
        $15 = $9 + $15 | 0;
        $13 = $14 >>> 0 < $15 >>> 0;
        $9 = $5 + $9 | 0;
        $15 = $13 ? $14 : $15;
        $14 = $9 >>> 0 < $15 >>> 0;
        $5 = ((HEAP32[($1 + 6840 | 0) >> 2] | 0) + $5 | 0) >>> 0 < ($14 ? $9 : $15) >>> 0 ? 3 : $14 ? 2 : $13;
       }
       HEAP32[($3 + 20 | 0) >> 2] = $5;
       label$43 : {
        if (FLAC__frame_add_header($3 + 8 | 0 | 0, HEAP32[($1 + 6856 | 0) >> 2] | 0 | 0) | 0) {
         break label$43
        }
        $5 = HEAP32[$0 >> 2] | 0;
        break label$37;
       }
       label$44 : {
        label$45 : {
         switch ($5 | 0) {
         default:
          $1 = HEAP32[($0 + 4 | 0) >> 2] | 0;
          $14 = 0;
          $5 = 0;
          $15 = 0;
          $9 = 0;
          break label$44;
         case 0:
          $1 = HEAP32[($0 + 4 | 0) >> 2] | 0;
          $15 = $1 + 336 | 0;
          $5 = $15 + Math_imul(HEAP32[($1 + 6768 | 0) >> 2] | 0, 292) | 0;
          $14 = ($15 + Math_imul(HEAP32[($1 + 6772 | 0) >> 2] | 0, 292) | 0) + 584 | 0;
          $9 = HEAP32[($1 + 220 | 0) >> 2] | 0;
          $15 = HEAP32[($1 + 216 | 0) >> 2] | 0;
          break label$44;
         case 1:
          $1 = HEAP32[($0 + 4 | 0) >> 2] | 0;
          $5 = ($1 + Math_imul(HEAP32[($1 + 6768 | 0) >> 2] | 0, 292) | 0) + 336 | 0;
          $14 = ($1 + Math_imul(HEAP32[($1 + 6804 | 0) >> 2] | 0, 292) | 0) + 5592 | 0;
          $9 = HEAP32[($1 + 252 | 0) >> 2] | 0;
          $15 = HEAP32[($1 + 216 | 0) >> 2] | 0;
          break label$44;
         case 2:
          $1 = HEAP32[($0 + 4 | 0) >> 2] | 0;
          $14 = ($1 + Math_imul(HEAP32[($1 + 6772 | 0) >> 2] | 0, 292) | 0) + 920 | 0;
          $5 = ($1 + Math_imul(HEAP32[($1 + 6804 | 0) >> 2] | 0, 292) | 0) + 5592 | 0;
          $9 = HEAP32[($1 + 220 | 0) >> 2] | 0;
          $15 = HEAP32[($1 + 252 | 0) >> 2] | 0;
          break label$44;
         case 3:
          break label$45;
         };
        }
        $1 = HEAP32[($0 + 4 | 0) >> 2] | 0;
        $15 = $1 + 5008 | 0;
        $5 = $15 + Math_imul(HEAP32[($1 + 6800 | 0) >> 2] | 0, 292) | 0;
        $14 = ($15 + Math_imul(HEAP32[($1 + 6804 | 0) >> 2] | 0, 292) | 0) + 584 | 0;
        $9 = HEAP32[($1 + 252 | 0) >> 2] | 0;
        $15 = HEAP32[($1 + 248 | 0) >> 2] | 0;
       }
       if (!(add_subframe_($0 | 0, HEAP32[($3 + 8 | 0) >> 2] | 0 | 0, $15 | 0, $5 | 0, HEAP32[($1 + 6856 | 0) >> 2] | 0 | 0) | 0)) {
        break label$39
       }
       if (!(add_subframe_($0 | 0, HEAP32[($3 + 8 | 0) >> 2] | 0 | 0, $9 | 0, $14 | 0, HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 6856 | 0) >> 2] | 0 | 0) | 0)) {
        break label$39
       }
       $5 = HEAP32[$0 >> 2] | 0;
       break label$38;
      }
      $1 = FLAC__frame_add_header($3 + 8 | 0 | 0, HEAP32[($10 + 6856 | 0) >> 2] | 0 | 0) | 0;
      $5 = HEAP32[$0 >> 2] | 0;
      if (!$1) {
       break label$37
      }
      if (!(HEAP32[($5 + 24 | 0) >> 2] | 0)) {
       break label$38
      }
      $1 = 0;
      label$50 : while (1) {
       $5 = HEAP32[($0 + 4 | 0) >> 2] | 0;
       $15 = $5 + ($1 << 2 | 0) | 0;
       if (!(add_subframe_($0 | 0, HEAP32[($3 + 8 | 0) >> 2] | 0 | 0, HEAP32[($15 + 216 | 0) >> 2] | 0 | 0, (($5 + Math_imul($1, 584) | 0) + Math_imul(HEAP32[($15 + 6768 | 0) >> 2] | 0, 292) | 0) + 336 | 0 | 0, HEAP32[($5 + 6856 | 0) >> 2] | 0 | 0) | 0)) {
        break label$39
       }
       $1 = $1 + 1 | 0;
       $5 = HEAP32[$0 >> 2] | 0;
       if ($1 >>> 0 >= (HEAP32[($5 + 24 | 0) >> 2] | 0) >>> 0) {
        break label$38
       }
       continue label$50;
      };
     }
     $1 = 0;
     break label$1;
    }
    label$51 : {
     if (!(HEAP32[($5 + 20 | 0) >> 2] | 0)) {
      break label$51
     }
     $1 = HEAP32[($0 + 4 | 0) >> 2] | 0;
     $5 = (HEAP32[($1 + 6864 | 0) >> 2] | 0) + 1 | 0;
     HEAP32[($1 + 6864 | 0) >> 2] = $5 >>> 0 < (HEAP32[($1 + 6860 | 0) >> 2] | 0) >>> 0 ? $5 : 0;
    }
    $1 = HEAP32[($0 + 4 | 0) >> 2] | 0;
    HEAP32[($1 + 6868 | 0) >> 2] = HEAP32[($3 + 20 | 0) >> 2] | 0;
    label$52 : {
     if (FLAC__bitwriter_zero_pad_to_byte_boundary(HEAP32[($1 + 6856 | 0) >> 2] | 0 | 0) | 0) {
      break label$52
     }
     HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] = 8;
     $1 = 0;
     break label$1;
    }
    label$53 : {
     label$54 : {
      if (!(FLAC__bitwriter_get_write_crc16(HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 6856 | 0) >> 2] | 0 | 0, $3 + 8 | 0 | 0) | 0)) {
       break label$54
      }
      $1 = HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 6856 | 0) >> 2] | 0;
      $5 = GOT_data_internal_FLAC__FRAME_FOOTER_CRC_LEN;
      if (FLAC__bitwriter_write_raw_uint32($1 | 0, HEAPU16[($3 + 8 | 0) >> 1] | 0 | 0, HEAP32[$5 >> 2] | 0 | 0) | 0) {
       break label$53
      }
     }
     HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] = 8;
     $1 = 0;
     break label$1;
    }
    label$55 : {
     if (write_bitbuffer_($0 | 0, HEAP32[((HEAP32[$0 >> 2] | 0) + 36 | 0) >> 2] | 0 | 0, $2 | 0) | 0) {
      break label$55
     }
     $1 = 0;
     break label$1;
    }
    $5 = HEAP32[($0 + 4 | 0) >> 2] | 0;
    HEAP32[($5 + 7052 | 0) >> 2] = 0;
    $1 = 1;
    HEAP32[($5 + 7056 | 0) >> 2] = (HEAP32[($5 + 7056 | 0) >> 2] | 0) + 1 | 0;
    $5 = $5 + 6920 | 0;
    $845 = $5;
    i64toi32_i32$2 = $5;
    i64toi32_i32$0 = HEAP32[$5 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($5 + 4 | 0) >> 2] | 0;
    $847 = i64toi32_i32$0;
    $847$hi = i64toi32_i32$1;
    i64toi32_i32$2 = HEAP32[$0 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 36 | 0) >> 2] | 0;
    i64toi32_i32$0 = 0;
    $850 = i64toi32_i32$1;
    $850$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $847$hi;
    i64toi32_i32$2 = $847;
    i64toi32_i32$1 = $850$hi;
    i64toi32_i32$3 = $850;
    i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
    i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    i64toi32_i32$2 = $845;
    HEAP32[i64toi32_i32$2 >> 2] = i64toi32_i32$4;
    HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$5;
    break label$1;
   }
   HEAP32[$5 >> 2] = 7;
   $1 = 0;
  }
  __stack_pointer = $3 + 48 | 0;
  return $1 | 0;
 }
 
 function update_metadata_($0) {
  $0 = $0 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$5 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$3 = 0, $2 = 0, $6 = 0, $6$hi = 0, $1 = 0, i64toi32_i32$4 = 0, $7 = 0, $8 = 0, $9 = 0, $4 = 0, $5 = 0, $91 = 0, $92 = 0, $94 = 0, $95 = 0, $97 = 0, $98 = 0, $100 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $3 = 0, $40 = 0, $43$hi = 0, $71$hi = 0, $80 = 0, $90 = 0, $93 = 0, $96 = 0, $99 = 0, $101 = 0, $108 = 0, $111$hi = 0, $116$hi = 0, $150 = 0, $153$hi = 0, $157$hi = 0, $189 = 0, $208 = 0, $217 = 0, $217$hi = 0, $220 = 0, $220$hi = 0, $221 = 0, $221$hi = 0, $224 = 0, $224$hi = 0, $227 = 0, $227$hi = 0, $228 = 0, $228$hi = 0, $229 = 0, $229$hi = 0, $232 = 0, $232$hi = 0, $235 = 0, $235$hi = 0, $236 = 0, $236$hi = 0, $239 = 0, $239$hi = 0, $241$hi = 0, $242 = 0, $242$hi = 0, $243 = 0, $243$hi = 0, $244 = 0, $245 = 0, $252 = 0, $252$hi = 0, $255 = 0, $255$hi = 0, $256 = 0, $256$hi = 0, $259 = 0, $259$hi = 0, $262 = 0, $262$hi = 0, $263 = 0, $263$hi = 0, $264 = 0, $264$hi = 0, $267 = 0, $267$hi = 0, $270 = 0, $270$hi = 0, $271 = 0, $271$hi = 0, $274 = 0, $274$hi = 0, $276$hi = 0, $277 = 0, $277$hi = 0, $278 = 0, $278$hi = 0, $279 = 0;
  $1 = __stack_pointer - 32 | 0;
  __stack_pointer = $1;
  $2 = HEAP32[($0 + 4 | 0) >> 2] | 0;
  $3 = HEAP32[($2 + 6912 | 0) >> 2] | 0;
  $4 = HEAP32[($2 + 6900 | 0) >> 2] | 0;
  $5 = HEAP32[($2 + 6896 | 0) >> 2] | 0;
  i64toi32_i32$2 = $2 + 6920 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $6 = i64toi32_i32$0;
  $6$hi = i64toi32_i32$1;
  $7 = GOT_data_internal_FLAC__STREAM_METADATA_STREAMINFO_MIN_BLOCK_SIZE_LEN;
  $8 = GOT_data_internal_FLAC__STREAM_METADATA_STREAMINFO_MAX_BLOCK_SIZE_LEN;
  $9 = GOT_data_internal_FLAC__STREAM_METADATA_STREAMINFO_MIN_FRAME_SIZE_LEN;
  label$1 : {
   label$2 : {
    label$3 : {
     $40 = $0;
     i64toi32_i32$2 = HEAP32[$0 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 608 | 0) >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 612 | 0) >> 2] | 0;
     $43$hi = i64toi32_i32$0;
     $8 = (HEAP32[$8 >> 2] | 0) + (HEAP32[$7 >> 2] | 0) | 0;
     $7 = (((($8 + (HEAP32[$9 >> 2] | 0) | 0) + (HEAP32[GOT_data_internal_FLAC__STREAM_METADATA_STREAMINFO_MAX_FRAME_SIZE_LEN >> 2] | 0) | 0) + (HEAP32[GOT_data_internal_FLAC__STREAM_METADATA_STREAMINFO_SAMPLE_RATE_LEN >> 2] | 0) | 0) + (HEAP32[GOT_data_internal_FLAC__STREAM_METADATA_STREAMINFO_CHANNELS_LEN >> 2] | 0) | 0) + (HEAP32[GOT_data_internal_FLAC__STREAM_METADATA_STREAMINFO_BITS_PER_SAMPLE_LEN >> 2] | 0) | 0;
     i64toi32_i32$0 = 0;
     $71$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $43$hi;
     i64toi32_i32$2 = i64toi32_i32$1;
     i64toi32_i32$1 = $71$hi;
     i64toi32_i32$3 = (($7 + (HEAP32[GOT_data_internal_FLAC__STREAM_METADATA_STREAMINFO_TOTAL_SAMPLES_LEN >> 2] | 0) | 0) >>> 3 | 0) + 4 | 0;
     i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
     i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     switch (FUNCTION_TABLE[HEAP32[($2 + 7268 | 0) >> 2] | 0 | 0]($40, i64toi32_i32$4, i64toi32_i32$5, HEAP32[($2 + 7288 | 0) >> 2] | 0) | 0 | 0) {
     case 1:
      break label$2;
     case 0:
      break label$3;
     default:
      break label$1;
     };
    }
    $80 = $2 + 6928 | 0;
    $2 = HEAP32[($0 + 4 | 0) >> 2] | 0;
    if (FUNCTION_TABLE[HEAP32[($2 + 7276 | 0) >> 2] | 0 | 0]($0, $80, 16, 0, 0, HEAP32[($2 + 7288 | 0) >> 2] | 0) | 0) {
     break label$2
    }
    i64toi32_i32$5 = $6$hi;
    HEAP8[($1 + 4 | 0) >> 0] = $6;
    $90 = $1;
    i64toi32_i32$0 = $6;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 8;
    i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = 0;
     $91 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
    } else {
     i64toi32_i32$2 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
     $91 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$1 | 0) | 0;
    }
    HEAP8[($90 + 3 | 0) >> 0] = $91;
    $93 = $1;
    i64toi32_i32$2 = $6$hi;
    i64toi32_i32$5 = $6;
    i64toi32_i32$0 = 0;
    i64toi32_i32$3 = 16;
    i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = 0;
     $92 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
    } else {
     i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
     $92 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$1 | 0) | 0;
    }
    HEAP8[($93 + 2 | 0) >> 0] = $92;
    $96 = $1;
    i64toi32_i32$0 = $6$hi;
    i64toi32_i32$2 = $6;
    i64toi32_i32$5 = 0;
    i64toi32_i32$3 = 24;
    i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$5 = 0;
     $94 = i64toi32_i32$0 >>> i64toi32_i32$1 | 0;
    } else {
     i64toi32_i32$5 = i64toi32_i32$0 >>> i64toi32_i32$1 | 0;
     $94 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$1 | 0) | 0;
    }
    HEAP8[($96 + 1 | 0) >> 0] = $94;
    $99 = $1;
    $101 = $3 << 4 | 0;
    i64toi32_i32$5 = $6$hi;
    i64toi32_i32$0 = $6;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 32;
    i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = 0;
     $95 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
    } else {
     i64toi32_i32$2 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
     $95 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$1 | 0) | 0;
    }
    HEAP8[$99 >> 0] = ($101 | ($95 & 15 | 0) | 0) + 240 | 0;
    label$4 : {
     $108 = $0;
     i64toi32_i32$5 = HEAP32[$0 >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 608 | 0) >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 612 | 0) >> 2] | 0;
     $111$hi = i64toi32_i32$0;
     i64toi32_i32$0 = 0;
     $116$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $111$hi;
     i64toi32_i32$5 = i64toi32_i32$2;
     i64toi32_i32$2 = $116$hi;
     i64toi32_i32$3 = (($7 + -4 | 0) >>> 3 | 0) + 4 | 0;
     i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
     i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $2 = HEAP32[($0 + 4 | 0) >> 2] | 0;
     switch (FUNCTION_TABLE[HEAP32[($2 + 7268 | 0) >> 2] | 0 | 0]($108, i64toi32_i32$1, i64toi32_i32$4, HEAP32[($2 + 7288 | 0) >> 2] | 0) | 0 | 0) {
     case 1:
      break label$2;
     case 0:
      break label$4;
     default:
      break label$1;
     };
    }
    $2 = HEAP32[($0 + 4 | 0) >> 2] | 0;
    if (FUNCTION_TABLE[HEAP32[($2 + 7276 | 0) >> 2] | 0 | 0]($0, $1, 5, 0, 0, HEAP32[($2 + 7288 | 0) >> 2] | 0) | 0) {
     break label$2
    }
    HEAP8[($1 + 5 | 0) >> 0] = $4;
    HEAP8[($1 + 4 | 0) >> 0] = $4 >>> 8 | 0;
    HEAP8[($1 + 3 | 0) >> 0] = $4 >>> 16 | 0;
    HEAP8[($1 + 2 | 0) >> 0] = $5;
    HEAP8[($1 + 1 | 0) >> 0] = $5 >>> 8 | 0;
    HEAP8[$1 >> 0] = $5 >>> 16 | 0;
    label$5 : {
     $150 = $0;
     i64toi32_i32$0 = HEAP32[$0 >> 2] | 0;
     i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 608 | 0) >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 612 | 0) >> 2] | 0;
     $153$hi = i64toi32_i32$5;
     i64toi32_i32$5 = 0;
     $157$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $153$hi;
     i64toi32_i32$0 = i64toi32_i32$4;
     i64toi32_i32$4 = $157$hi;
     i64toi32_i32$3 = ($8 >>> 3 | 0) + 4 | 0;
     i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
     i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
     }
     $2 = HEAP32[($0 + 4 | 0) >> 2] | 0;
     switch (FUNCTION_TABLE[HEAP32[($2 + 7268 | 0) >> 2] | 0 | 0]($150, i64toi32_i32$2, i64toi32_i32$1, HEAP32[($2 + 7288 | 0) >> 2] | 0) | 0 | 0) {
     case 1:
      break label$2;
     case 0:
      break label$5;
     default:
      break label$1;
     };
    }
    $2 = HEAP32[($0 + 4 | 0) >> 2] | 0;
    if (FUNCTION_TABLE[HEAP32[($2 + 7276 | 0) >> 2] | 0 | 0]($0, $1, 6, 0, 0, HEAP32[($2 + 7288 | 0) >> 2] | 0) | 0) {
     break label$2
    }
    $2 = HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 7048 | 0) >> 2] | 0;
    if (!$2) {
     break label$1
    }
    if (!(HEAP32[$2 >> 2] | 0)) {
     break label$1
    }
    i64toi32_i32$5 = HEAP32[$0 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 616 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 620 | 0) >> 2] | 0;
    if (!(i64toi32_i32$1 | i64toi32_i32$0 | 0)) {
     break label$1
    }
    FLAC__format_seektable_sort($2 | 0) | 0;
    label$6 : {
     $189 = $0;
     i64toi32_i32$5 = HEAP32[$0 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 616 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 620 | 0) >> 2] | 0;
     i64toi32_i32$5 = i64toi32_i32$0;
     i64toi32_i32$0 = 0;
     i64toi32_i32$3 = 4;
     i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
     i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $2 = HEAP32[($0 + 4 | 0) >> 2] | 0;
     switch (FUNCTION_TABLE[HEAP32[($2 + 7268 | 0) >> 2] | 0 | 0]($189, i64toi32_i32$4, i64toi32_i32$2, HEAP32[($2 + 7288 | 0) >> 2] | 0) | 0 | 0) {
     case 1:
      break label$2;
     case 0:
      break label$6;
     default:
      break label$1;
     };
    }
    $7 = HEAP32[($0 + 4 | 0) >> 2] | 0;
    $2 = HEAP32[($7 + 7048 | 0) >> 2] | 0;
    if (!(HEAP32[$2 >> 2] | 0)) {
     break label$1
    }
    $9 = 0;
    label$7 : while (1) {
     $208 = $1;
     $8 = Math_imul($9, 24);
     i64toi32_i32$1 = (HEAP32[($2 + 4 | 0) >> 2] | 0) + $8 | 0;
     i64toi32_i32$2 = HEAP32[i64toi32_i32$1 >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
     $6 = i64toi32_i32$2;
     $6$hi = i64toi32_i32$5;
     i64toi32_i32$1 = i64toi32_i32$2;
     i64toi32_i32$2 = 0;
     i64toi32_i32$3 = 56;
     i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$1 << i64toi32_i32$0 | 0;
      $97 = 0;
     } else {
      i64toi32_i32$2 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$0 | 0) | 0;
      $97 = i64toi32_i32$1 << i64toi32_i32$0 | 0;
     }
     $217 = $97;
     $217$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $6$hi;
     i64toi32_i32$5 = $6;
     i64toi32_i32$1 = 0;
     i64toi32_i32$3 = 40;
     i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$5 << i64toi32_i32$0 | 0;
      $98 = 0;
     } else {
      i64toi32_i32$1 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$0 | 0) | 0;
      $98 = i64toi32_i32$5 << i64toi32_i32$0 | 0;
     }
     i64toi32_i32$2 = $98;
     i64toi32_i32$5 = 16711680;
     i64toi32_i32$3 = 0;
     i64toi32_i32$5 = i64toi32_i32$1 & i64toi32_i32$5 | 0;
     $220 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
     $220$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $217$hi;
     i64toi32_i32$1 = $217;
     i64toi32_i32$2 = $220$hi;
     i64toi32_i32$3 = $220;
     i64toi32_i32$2 = i64toi32_i32$5 | i64toi32_i32$2 | 0;
     $221 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
     $221$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $6$hi;
     i64toi32_i32$5 = $6;
     i64toi32_i32$1 = 0;
     i64toi32_i32$3 = 24;
     i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$5 << i64toi32_i32$0 | 0;
      $100 = 0;
     } else {
      i64toi32_i32$1 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$0 | 0) | 0;
      $100 = i64toi32_i32$5 << i64toi32_i32$0 | 0;
     }
     i64toi32_i32$2 = $100;
     i64toi32_i32$5 = 65280;
     i64toi32_i32$3 = 0;
     i64toi32_i32$5 = i64toi32_i32$1 & i64toi32_i32$5 | 0;
     $224 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
     $224$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $6$hi;
     i64toi32_i32$1 = $6;
     i64toi32_i32$2 = 0;
     i64toi32_i32$3 = 8;
     i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$1 << i64toi32_i32$0 | 0;
      $102 = 0;
     } else {
      i64toi32_i32$2 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$0 | 0) | 0;
      $102 = i64toi32_i32$1 << i64toi32_i32$0 | 0;
     }
     i64toi32_i32$5 = $102;
     i64toi32_i32$1 = 255;
     i64toi32_i32$3 = 0;
     i64toi32_i32$1 = i64toi32_i32$2 & i64toi32_i32$1 | 0;
     $227 = i64toi32_i32$5 & i64toi32_i32$3 | 0;
     $227$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $224$hi;
     i64toi32_i32$2 = $224;
     i64toi32_i32$5 = $227$hi;
     i64toi32_i32$3 = $227;
     i64toi32_i32$5 = i64toi32_i32$1 | i64toi32_i32$5 | 0;
     $228 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
     $228$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $221$hi;
     i64toi32_i32$1 = $221;
     i64toi32_i32$2 = $228$hi;
     i64toi32_i32$3 = $228;
     i64toi32_i32$2 = i64toi32_i32$5 | i64toi32_i32$2 | 0;
     $229 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
     $229$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $6$hi;
     i64toi32_i32$5 = $6;
     i64toi32_i32$1 = 0;
     i64toi32_i32$3 = 8;
     i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = 0;
      $103 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
     } else {
      i64toi32_i32$1 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
      $103 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$0 | 0) | 0;
     }
     i64toi32_i32$2 = $103;
     i64toi32_i32$5 = 0;
     i64toi32_i32$3 = -16777216;
     i64toi32_i32$5 = i64toi32_i32$1 & i64toi32_i32$5 | 0;
     $232 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
     $232$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $6$hi;
     i64toi32_i32$1 = $6;
     i64toi32_i32$2 = 0;
     i64toi32_i32$3 = 24;
     i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$2 = 0;
      $104 = i64toi32_i32$5 >>> i64toi32_i32$0 | 0;
     } else {
      i64toi32_i32$2 = i64toi32_i32$5 >>> i64toi32_i32$0 | 0;
      $104 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$0 | 0) | 0;
     }
     i64toi32_i32$5 = $104;
     i64toi32_i32$1 = 0;
     i64toi32_i32$3 = 16711680;
     i64toi32_i32$1 = i64toi32_i32$2 & i64toi32_i32$1 | 0;
     $235 = i64toi32_i32$5 & i64toi32_i32$3 | 0;
     $235$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $232$hi;
     i64toi32_i32$2 = $232;
     i64toi32_i32$5 = $235$hi;
     i64toi32_i32$3 = $235;
     i64toi32_i32$5 = i64toi32_i32$1 | i64toi32_i32$5 | 0;
     $236 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
     $236$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $6$hi;
     i64toi32_i32$1 = $6;
     i64toi32_i32$2 = 0;
     i64toi32_i32$3 = 40;
     i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$2 = 0;
      $105 = i64toi32_i32$5 >>> i64toi32_i32$0 | 0;
     } else {
      i64toi32_i32$2 = i64toi32_i32$5 >>> i64toi32_i32$0 | 0;
      $105 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$0 | 0) | 0;
     }
     i64toi32_i32$5 = $105;
     i64toi32_i32$1 = 0;
     i64toi32_i32$3 = 65280;
     i64toi32_i32$1 = i64toi32_i32$2 & i64toi32_i32$1 | 0;
     $239 = i64toi32_i32$5 & i64toi32_i32$3 | 0;
     $239$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $6$hi;
     i64toi32_i32$2 = $6;
     i64toi32_i32$5 = 0;
     i64toi32_i32$3 = 56;
     i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$5 = 0;
      $106 = i64toi32_i32$1 >>> i64toi32_i32$0 | 0;
     } else {
      i64toi32_i32$5 = i64toi32_i32$1 >>> i64toi32_i32$0 | 0;
      $106 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$0 | 0) | 0;
     }
     $241$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $239$hi;
     i64toi32_i32$1 = $239;
     i64toi32_i32$2 = $241$hi;
     i64toi32_i32$3 = $106;
     i64toi32_i32$2 = i64toi32_i32$5 | i64toi32_i32$2 | 0;
     $242 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
     $242$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $236$hi;
     i64toi32_i32$5 = $236;
     i64toi32_i32$1 = $242$hi;
     i64toi32_i32$3 = $242;
     i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
     $243 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
     $243$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $229$hi;
     i64toi32_i32$2 = $229;
     i64toi32_i32$5 = $243$hi;
     i64toi32_i32$3 = $243;
     i64toi32_i32$5 = i64toi32_i32$1 | i64toi32_i32$5 | 0;
     $244 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
     i64toi32_i32$2 = $208;
     HEAP32[i64toi32_i32$2 >> 2] = $244;
     HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$5;
     $245 = $1;
     i64toi32_i32$1 = (HEAP32[($2 + 4 | 0) >> 2] | 0) + $8 | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] | 0;
     $6 = i64toi32_i32$5;
     $6$hi = i64toi32_i32$2;
     i64toi32_i32$1 = i64toi32_i32$5;
     i64toi32_i32$5 = 0;
     i64toi32_i32$3 = 56;
     i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$1 << i64toi32_i32$0 | 0;
      $107 = 0;
     } else {
      i64toi32_i32$5 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$0 | 0) | 0;
      $107 = i64toi32_i32$1 << i64toi32_i32$0 | 0;
     }
     $252 = $107;
     $252$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $6$hi;
     i64toi32_i32$2 = $6;
     i64toi32_i32$1 = 0;
     i64toi32_i32$3 = 40;
     i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$0 | 0;
      $109 = 0;
     } else {
      i64toi32_i32$1 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$0 | 0) | 0;
      $109 = i64toi32_i32$2 << i64toi32_i32$0 | 0;
     }
     i64toi32_i32$5 = $109;
     i64toi32_i32$2 = 16711680;
     i64toi32_i32$3 = 0;
     i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
     $255 = i64toi32_i32$5 & i64toi32_i32$3 | 0;
     $255$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $252$hi;
     i64toi32_i32$1 = $252;
     i64toi32_i32$5 = $255$hi;
     i64toi32_i32$3 = $255;
     i64toi32_i32$5 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
     $256 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
     $256$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $6$hi;
     i64toi32_i32$2 = $6;
     i64toi32_i32$1 = 0;
     i64toi32_i32$3 = 24;
     i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$0 | 0;
      $110 = 0;
     } else {
      i64toi32_i32$1 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$0 | 0) | 0;
      $110 = i64toi32_i32$2 << i64toi32_i32$0 | 0;
     }
     i64toi32_i32$5 = $110;
     i64toi32_i32$2 = 65280;
     i64toi32_i32$3 = 0;
     i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
     $259 = i64toi32_i32$5 & i64toi32_i32$3 | 0;
     $259$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $6$hi;
     i64toi32_i32$1 = $6;
     i64toi32_i32$5 = 0;
     i64toi32_i32$3 = 8;
     i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$1 << i64toi32_i32$0 | 0;
      $111 = 0;
     } else {
      i64toi32_i32$5 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$0 | 0) | 0;
      $111 = i64toi32_i32$1 << i64toi32_i32$0 | 0;
     }
     i64toi32_i32$2 = $111;
     i64toi32_i32$1 = 255;
     i64toi32_i32$3 = 0;
     i64toi32_i32$1 = i64toi32_i32$5 & i64toi32_i32$1 | 0;
     $262 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
     $262$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $259$hi;
     i64toi32_i32$5 = $259;
     i64toi32_i32$2 = $262$hi;
     i64toi32_i32$3 = $262;
     i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
     $263 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
     $263$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $256$hi;
     i64toi32_i32$1 = $256;
     i64toi32_i32$5 = $263$hi;
     i64toi32_i32$3 = $263;
     i64toi32_i32$5 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
     $264 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
     $264$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $6$hi;
     i64toi32_i32$2 = $6;
     i64toi32_i32$1 = 0;
     i64toi32_i32$3 = 8;
     i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = 0;
      $112 = i64toi32_i32$5 >>> i64toi32_i32$0 | 0;
     } else {
      i64toi32_i32$1 = i64toi32_i32$5 >>> i64toi32_i32$0 | 0;
      $112 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$0 | 0) | 0;
     }
     i64toi32_i32$5 = $112;
     i64toi32_i32$2 = 0;
     i64toi32_i32$3 = -16777216;
     i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
     $267 = i64toi32_i32$5 & i64toi32_i32$3 | 0;
     $267$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $6$hi;
     i64toi32_i32$1 = $6;
     i64toi32_i32$5 = 0;
     i64toi32_i32$3 = 24;
     i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$5 = 0;
      $113 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
     } else {
      i64toi32_i32$5 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
      $113 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$0 | 0) | 0;
     }
     i64toi32_i32$2 = $113;
     i64toi32_i32$1 = 0;
     i64toi32_i32$3 = 16711680;
     i64toi32_i32$1 = i64toi32_i32$5 & i64toi32_i32$1 | 0;
     $270 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
     $270$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $267$hi;
     i64toi32_i32$5 = $267;
     i64toi32_i32$2 = $270$hi;
     i64toi32_i32$3 = $270;
     i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
     $271 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
     $271$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $6$hi;
     i64toi32_i32$1 = $6;
     i64toi32_i32$5 = 0;
     i64toi32_i32$3 = 40;
     i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$5 = 0;
      $114 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
     } else {
      i64toi32_i32$5 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
      $114 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$0 | 0) | 0;
     }
     i64toi32_i32$2 = $114;
     i64toi32_i32$1 = 0;
     i64toi32_i32$3 = 65280;
     i64toi32_i32$1 = i64toi32_i32$5 & i64toi32_i32$1 | 0;
     $274 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
     $274$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $6$hi;
     i64toi32_i32$5 = $6;
     i64toi32_i32$2 = 0;
     i64toi32_i32$3 = 56;
     i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$2 = 0;
      $115 = i64toi32_i32$1 >>> i64toi32_i32$0 | 0;
     } else {
      i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$0 | 0;
      $115 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$0 | 0) | 0;
     }
     $276$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $274$hi;
     i64toi32_i32$1 = $274;
     i64toi32_i32$5 = $276$hi;
     i64toi32_i32$3 = $115;
     i64toi32_i32$5 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
     $277 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
     $277$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $271$hi;
     i64toi32_i32$2 = $271;
     i64toi32_i32$1 = $277$hi;
     i64toi32_i32$3 = $277;
     i64toi32_i32$1 = i64toi32_i32$5 | i64toi32_i32$1 | 0;
     $278 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
     $278$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $264$hi;
     i64toi32_i32$5 = $264;
     i64toi32_i32$2 = $278$hi;
     i64toi32_i32$3 = $278;
     i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
     $279 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
     i64toi32_i32$5 = $245;
     HEAP32[(i64toi32_i32$5 + 8 | 0) >> 2] = $279;
     HEAP32[(i64toi32_i32$5 + 12 | 0) >> 2] = i64toi32_i32$2;
     $2 = HEAPU16[(((HEAP32[($2 + 4 | 0) >> 2] | 0) + $8 | 0) + 16 | 0) >> 1] | 0;
     HEAP16[($1 + 16 | 0) >> 1] = $2 << 8 | 0 | ($2 >>> 8 | 0) | 0;
     if (FUNCTION_TABLE[HEAP32[($7 + 7276 | 0) >> 2] | 0 | 0]($0, $1, 18, 0, 0, HEAP32[($7 + 7288 | 0) >> 2] | 0) | 0) {
      break label$2
     }
     $9 = $9 + 1 | 0;
     $7 = HEAP32[($0 + 4 | 0) >> 2] | 0;
     $2 = HEAP32[($7 + 7048 | 0) >> 2] | 0;
     if ($9 >>> 0 >= (HEAP32[$2 >> 2] | 0) >>> 0) {
      break label$1
     }
     continue label$7;
    };
   }
   HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] = 5;
  }
  __stack_pointer = $1 + 32 | 0;
 }
 
 function FLAC__stream_encoder_init_stream($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  return init_stream_internal__1($0 | 0, 0 | 0, $1 | 0, $2 | 0, $3 | 0, $4 | 0, $5 | 0, 0 | 0) | 0 | 0;
 }
 
 function init_stream_internal__1($0, $1, $2, $3, $4, $5, $6, $7) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  $7 = $7 | 0;
  var $10 = 0, $9 = 0, $11 = 0, $12 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $13 = 0, $14 = 0, $16 = 0, $18 = 0, $8 = 0, $19 = 0.0, $15 = 0, $17 = 0, i64toi32_i32$2 = 0, $193 = 0, $225 = 0, $769 = 0;
  $8 = __stack_pointer - 176 | 0;
  __stack_pointer = $8;
  $9 = 13;
  label$1 : {
   $10 = HEAP32[$0 >> 2] | 0;
   if ((HEAP32[$10 >> 2] | 0 | 0) != (1 | 0)) {
    break label$1
   }
   $9 = 3;
   if (!$2) {
    break label$1
   }
   label$2 : {
    if (!$3) {
     break label$2
    }
    if (!$4) {
     break label$1
    }
   }
   $9 = 4;
   $11 = HEAP32[($10 + 24 | 0) >> 2] | 0;
   if (($11 + -1 | 0) >>> 0 > 7 >>> 0) {
    break label$1
   }
   label$3 : {
    label$4 : {
     label$5 : {
      if (($11 | 0) == (2 | 0)) {
       break label$5
      }
      HEAP32[($10 + 16 | 0) >> 2] = 0;
      break label$4;
     }
     if (HEAP32[($10 + 16 | 0) >> 2] | 0) {
      break label$3
     }
    }
    HEAP32[($10 + 20 | 0) >> 2] = 0;
   }
   label$6 : {
    $11 = HEAP32[($10 + 28 | 0) >> 2] | 0;
    if ($11 >>> 0 < 32 >>> 0) {
     break label$6
    }
    HEAP32[($10 + 16 | 0) >> 2] = 0;
    $9 = 5;
    break label$1;
   }
   $9 = 5;
   if (($11 + -4 | 0) >>> 0 > 20 >>> 0) {
    break label$1
   }
   label$7 : {
    if (FLAC__format_sample_rate_is_valid(HEAP32[($10 + 32 | 0) >> 2] | 0 | 0) | 0) {
     break label$7
    }
    $9 = 6;
    break label$1;
   }
   label$8 : {
    label$9 : {
     $10 = HEAP32[$0 >> 2] | 0;
     $11 = HEAP32[($10 + 36 | 0) >> 2] | 0;
     if ($11) {
      break label$9
     }
     $11 = HEAP32[($10 + 556 | 0) >> 2] | 0 ? 4096 : 1152;
     HEAP32[($10 + 36 | 0) >> 2] = $11;
     break label$8;
    }
    $9 = 7;
    if (($11 + -16 | 0) >>> 0 > 65519 >>> 0) {
     break label$1
    }
   }
   $9 = 8;
   $12 = HEAP32[($10 + 556 | 0) >> 2] | 0;
   if ($12 >>> 0 > 32 >>> 0) {
    break label$1
   }
   $9 = 10;
   if ($11 >>> 0 < $12 >>> 0) {
    break label$1
   }
   label$10 : {
    label$11 : {
     $12 = HEAP32[($10 + 560 | 0) >> 2] | 0;
     if ($12) {
      break label$11
     }
     label$12 : {
      label$13 : {
       $9 = HEAP32[($10 + 28 | 0) >> 2] | 0;
       if ($9 >>> 0 > 15 >>> 0) {
        break label$13
       }
       $9 = $9 >>> 0 > 5 >>> 0 ? ($9 >>> 1 | 0) + 2 | 0 : 5;
       break label$12;
      }
      label$14 : {
       if (($9 | 0) != (16 | 0)) {
        break label$14
       }
       $9 = 7;
       if ($11 >>> 0 < 193 >>> 0) {
        break label$12
       }
       $9 = 8;
       if ($11 >>> 0 < 385 >>> 0) {
        break label$12
       }
       $9 = 9;
       if ($11 >>> 0 < 577 >>> 0) {
        break label$12
       }
       $9 = 10;
       if ($11 >>> 0 < 1153 >>> 0) {
        break label$12
       }
       $9 = 11;
       if ($11 >>> 0 < 2305 >>> 0) {
        break label$12
       }
       $9 = $11 >>> 0 < 4609 >>> 0 ? 12 : 13;
       break label$12;
      }
      $9 = 13;
      if ($11 >>> 0 < 385 >>> 0) {
       break label$12
      }
      $9 = $11 >>> 0 < 1153 >>> 0 ? 14 : 15;
     }
     HEAP32[($10 + 560 | 0) >> 2] = $9;
     break label$10;
    }
    $9 = 9;
    if (($12 + -5 | 0) >>> 0 > 10 >>> 0) {
     break label$1
    }
   }
   label$15 : {
    label$16 : {
     if (HEAP32[($10 + 8 | 0) >> 2] | 0) {
      break label$16
     }
     $11 = HEAP32[($10 + 580 | 0) >> 2] | 0;
     break label$15;
    }
    $9 = 11;
    if (!(FLAC__format_blocksize_is_subset($11 | 0, HEAP32[($10 + 32 | 0) >> 2] | 0 | 0) | 0)) {
     break label$1
    }
    if (!(FLAC__format_sample_rate_is_subset(HEAP32[((HEAP32[$0 >> 2] | 0) + 32 | 0) >> 2] | 0 | 0) | 0)) {
     break label$1
    }
    $10 = HEAP32[$0 >> 2] | 0;
    if ((__wasm_rotl_i32((HEAP32[($10 + 28 | 0) >> 2] | 0) + -8 | 0 | 0, 30 | 0) | 0) >>> 0 > 4 >>> 0) {
     break label$1
    }
    $11 = HEAP32[($10 + 580 | 0) >> 2] | 0;
    if ($11 >>> 0 > 8 >>> 0) {
     break label$1
    }
    if ((HEAP32[($10 + 32 | 0) >> 2] | 0) >>> 0 > 48e3 >>> 0) {
     break label$15
    }
    if ((HEAP32[($10 + 36 | 0) >> 2] | 0) >>> 0 > 4608 >>> 0) {
     break label$1
    }
    if ((HEAP32[($10 + 556 | 0) >> 2] | 0) >>> 0 > 12 >>> 0) {
     break label$1
    }
   }
   label$17 : {
    $9 = 1 << (HEAP32[GOT_data_internal_FLAC__ENTROPY_CODING_METHOD_PARTITIONED_RICE_ORDER_LEN >> 2] | 0) | 0;
    if ($11 >>> 0 < $9 >>> 0) {
     break label$17
    }
    $11 = $9 + -1 | 0;
    HEAP32[($10 + 580 | 0) >> 2] = $11;
   }
   label$18 : {
    if ((HEAP32[($10 + 576 | 0) >> 2] | 0) >>> 0 < $11 >>> 0) {
     break label$18
    }
    HEAP32[($10 + 576 | 0) >> 2] = $11;
   }
   label$19 : {
    if (!$7) {
     break label$19
    }
    $11 = HEAP32[($10 + 600 | 0) >> 2] | 0;
    if (!$11) {
     break label$19
    }
    $13 = HEAP32[($10 + 604 | 0) >> 2] | 0;
    if ($13 >>> 0 < 2 >>> 0) {
     break label$19
    }
    $9 = 1;
    label$20 : while (1) {
     label$21 : {
      $12 = HEAP32[($11 + ($9 << 2 | 0) | 0) >> 2] | 0;
      if (!$12) {
       break label$21
      }
      if ((HEAP32[$12 >> 2] | 0 | 0) != (4 | 0)) {
       break label$21
      }
      $13 = $9 + -1 | 0;
      label$22 : {
       $10 = $9 & 3 | 0;
       if (!$10) {
        break label$22
       }
       label$23 : while (1) {
        $193 = $11 + ($9 << 2 | 0) | 0;
        $9 = $9 + -1 | 0;
        HEAP32[$193 >> 2] = HEAP32[($11 + ($9 << 2 | 0) | 0) >> 2] | 0;
        $11 = HEAP32[((HEAP32[$0 >> 2] | 0) + 600 | 0) >> 2] | 0;
        $10 = $10 + -1 | 0;
        if ($10) {
         continue label$23
        }
        break label$23;
       };
      }
      label$24 : {
       if ($13 >>> 0 < 3 >>> 0) {
        break label$24
       }
       label$25 : while (1) {
        $10 = $9 << 2 | 0;
        $13 = $10 + -4 | 0;
        HEAP32[($11 + $10 | 0) >> 2] = HEAP32[($11 + $13 | 0) >> 2] | 0;
        $11 = HEAP32[((HEAP32[$0 >> 2] | 0) + 600 | 0) >> 2] | 0;
        $225 = $11 + $13 | 0;
        $13 = $10 + -8 | 0;
        HEAP32[$225 >> 2] = HEAP32[($11 + $13 | 0) >> 2] | 0;
        $11 = HEAP32[((HEAP32[$0 >> 2] | 0) + 600 | 0) >> 2] | 0;
        $10 = $10 + -12 | 0;
        HEAP32[($11 + $13 | 0) >> 2] = HEAP32[($11 + $10 | 0) >> 2] | 0;
        $11 = HEAP32[((HEAP32[$0 >> 2] | 0) + 600 | 0) >> 2] | 0;
        $9 = $9 + -4 | 0;
        HEAP32[($11 + $10 | 0) >> 2] = HEAP32[($11 + ($9 << 2 | 0) | 0) >> 2] | 0;
        $11 = HEAP32[((HEAP32[$0 >> 2] | 0) + 600 | 0) >> 2] | 0;
        if ($9) {
         continue label$25
        }
        break label$25;
       };
      }
      HEAP32[$11 >> 2] = $12;
      $10 = HEAP32[$0 >> 2] | 0;
      break label$19;
     }
     $9 = $9 + 1 | 0;
     if (($9 | 0) != ($13 | 0)) {
      continue label$20
     }
     break label$20;
    };
   }
   $13 = HEAP32[($10 + 604 | 0) >> 2] | 0;
   label$26 : {
    label$27 : {
     label$28 : {
      $12 = HEAP32[($10 + 600 | 0) >> 2] | 0;
      if (!$12) {
       break label$28
      }
      $11 = 0;
      if (!$13) {
       break label$26
      }
      label$29 : while (1) {
       label$30 : {
        $9 = HEAP32[($12 + ($11 << 2 | 0) | 0) >> 2] | 0;
        if (!$9) {
         break label$30
        }
        if ((HEAP32[$9 >> 2] | 0 | 0) != (3 | 0)) {
         break label$30
        }
        HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 7048 | 0) >> 2] = $9 + 16 | 0;
        break label$27;
       }
       $11 = $11 + 1 | 0;
       if (($11 | 0) != ($13 | 0)) {
        continue label$29
       }
       break label$27;
      };
     }
     $9 = 12;
     if ($13) {
      break label$1
     }
     $11 = 0;
     break label$26;
    }
    $13 = 0;
    $14 = 0;
    $15 = 0;
    $16 = 0;
    $17 = 0;
    $11 = 0;
    $18 = 0;
    label$31 : while (1) {
     $9 = 12;
     label$32 : {
      label$33 : {
       label$34 : {
        label$35 : {
         label$36 : {
          $10 = HEAP32[($12 + ($13 << 2 | 0) | 0) >> 2] | 0;
          switch (HEAP32[$10 >> 2] | 0 | 0) {
          case 0:
           break label$1;
          case 6:
           break label$33;
          case 5:
           break label$34;
          case 4:
           break label$35;
          case 3:
           break label$36;
          default:
           break label$32;
          };
         }
         if ($17) {
          break label$1
         }
         $17 = 1;
         $11 = $16;
         $18 = $14;
         if (FLAC__format_seektable_is_legal($10 + 16 | 0 | 0) | 0) {
          break label$32
         }
         break label$1;
        }
        $11 = 1;
        $18 = $14;
        if (!$16) {
         break label$32
        }
        break label$1;
       }
       $11 = $16;
       $18 = $14;
       if (FLAC__format_cuesheet_is_legal($10 + 16 | 0 | 0, HEAP32[($10 + 160 | 0) >> 2] | 0 | 0, 0 | 0) | 0) {
        break label$32
       }
       break label$1;
      }
      $12 = $10 + 16 | 0;
      if (!(FLAC__format_picture_is_legal($12 | 0, 0 | 0) | 0)) {
       break label$1
      }
      $11 = $16;
      $18 = $14;
      label$37 : {
       switch ((HEAP32[$12 >> 2] | 0) + -1 | 0 | 0) {
       case 0:
        if ($15) {
         break label$1
        }
        $11 = GOT_data_internal___memory_base;
        label$39 : {
         $12 = HEAP32[($10 + 20 | 0) >> 2] | 0;
         if (!(strcmp($12 | 0, $11 + 5867 | 0 | 0) | 0)) {
          break label$39
         }
         if (strcmp($12 | 0, GOT_data_internal___memory_base + 5936 | 0 | 0) | 0) {
          break label$1
         }
        }
        if ((HEAP32[($10 + 28 | 0) >> 2] | 0 | 0) != (32 | 0)) {
         break label$1
        }
        $15 = 1;
        $11 = $16;
        $18 = $14;
        if ((HEAP32[($10 + 32 | 0) >> 2] | 0 | 0) == (32 | 0)) {
         break label$32
        }
        break label$1;
       case 1:
        break label$37;
       default:
        break label$32;
       };
      }
      $18 = 1;
      $11 = $16;
      if ($14) {
       break label$1
      }
     }
     $13 = $13 + 1 | 0;
     $10 = HEAP32[$0 >> 2] | 0;
     if ($13 >>> 0 >= (HEAP32[($10 + 604 | 0) >> 2] | 0) >>> 0) {
      break label$26
     }
     $12 = HEAP32[($10 + 600 | 0) >> 2] | 0;
     $14 = $18;
     $16 = $11;
     continue label$31;
    };
   }
   $12 = 0;
   $13 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   HEAP32[$13 >> 2] = 0;
   label$40 : {
    if (!(HEAP32[($10 + 24 | 0) >> 2] | 0)) {
     break label$40
    }
    label$41 : while (1) {
     $9 = $12 << 2 | 0;
     HEAP32[(($13 + $9 | 0) + 4 | 0) >> 2] = 0;
     HEAP32[(((HEAP32[($0 + 4 | 0) >> 2] | 0) + $9 | 0) + 7328 | 0) >> 2] = 0;
     HEAP32[(((HEAP32[($0 + 4 | 0) >> 2] | 0) + $9 | 0) + 44 | 0) >> 2] = 0;
     HEAP32[(((HEAP32[($0 + 4 | 0) >> 2] | 0) + $9 | 0) + 7368 | 0) >> 2] = 0;
     $13 = HEAP32[($0 + 4 | 0) >> 2] | 0;
     $12 = $12 + 1 | 0;
     if ($12 >>> 0 < (HEAP32[((HEAP32[$0 >> 2] | 0) + 24 | 0) >> 2] | 0) >>> 0) {
      continue label$41
     }
     break label$41;
    };
   }
   $9 = 0;
   HEAP32[($13 + 36 | 0) >> 2] = 0;
   HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 7360 | 0) >> 2] = 0;
   HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 76 | 0) >> 2] = 0;
   HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 7400 | 0) >> 2] = 0;
   HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 40 | 0) >> 2] = 0;
   HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 7364 | 0) >> 2] = 0;
   HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 80 | 0) >> 2] = 0;
   HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 7404 | 0) >> 2] = 0;
   label$42 : {
    $10 = HEAP32[$0 >> 2] | 0;
    if (!(HEAP32[($10 + 40 | 0) >> 2] | 0)) {
     break label$42
    }
    label$43 : while (1) {
     $10 = $9 << 2 | 0;
     HEAP32[(((HEAP32[($0 + 4 | 0) >> 2] | 0) + $10 | 0) + 84 | 0) >> 2] = 0;
     HEAP32[(((HEAP32[($0 + 4 | 0) >> 2] | 0) + $10 | 0) + 7408 | 0) >> 2] = 0;
     $9 = $9 + 1 | 0;
     $10 = HEAP32[$0 >> 2] | 0;
     if ($9 >>> 0 < (HEAP32[($10 + 40 | 0) >> 2] | 0) >>> 0) {
      continue label$43
     }
     break label$43;
    };
   }
   $9 = 0;
   $12 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   HEAP32[($12 + 7536 | 0) >> 2] = 0;
   HEAP32[($12 + 212 | 0) >> 2] = 0;
   label$44 : {
    if (!(HEAP32[($10 + 24 | 0) >> 2] | 0)) {
     break label$44
    }
    label$45 : while (1) {
     $10 = $9 << 3 | 0;
     HEAP32[(($12 + $10 | 0) + 256 | 0) >> 2] = 0;
     HEAP32[(((HEAP32[($0 + 4 | 0) >> 2] | 0) + $10 | 0) + 7540 | 0) >> 2] = 0;
     HEAP32[(((HEAP32[($0 + 4 | 0) >> 2] | 0) + $10 | 0) + 260 | 0) >> 2] = 0;
     HEAP32[(((HEAP32[($0 + 4 | 0) >> 2] | 0) + $10 | 0) + 7544 | 0) >> 2] = 0;
     $12 = HEAP32[($0 + 4 | 0) >> 2] | 0;
     HEAP32[(($12 + ($9 << 2 | 0) | 0) + 6768 | 0) >> 2] = 0;
     $9 = $9 + 1 | 0;
     if ($9 >>> 0 < (HEAP32[((HEAP32[$0 >> 2] | 0) + 24 | 0) >> 2] | 0) >>> 0) {
      continue label$45
     }
     break label$45;
    };
   }
   HEAP32[($12 + 320 | 0) >> 2] = 0;
   HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 7604 | 0) >> 2] = 0;
   HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 324 | 0) >> 2] = 0;
   HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 7608 | 0) >> 2] = 0;
   $9 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   HEAP32[($9 + 6800 | 0) >> 2] = 0;
   HEAP32[($9 + 328 | 0) >> 2] = 0;
   HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 7612 | 0) >> 2] = 0;
   HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 332 | 0) >> 2] = 0;
   HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 7616 | 0) >> 2] = 0;
   $10 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   i64toi32_i32$1 = $10;
   i64toi32_i32$0 = 0;
   HEAP32[($10 + 7620 | 0) >> 2] = 0;
   HEAP32[($10 + 7624 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $10;
   i64toi32_i32$0 = 0;
   HEAP32[($10 + 6848 | 0) >> 2] = 0;
   HEAP32[($10 + 6852 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[($10 + 6804 | 0) >> 2] = 0;
   $9 = HEAP32[$0 >> 2] | 0;
   $12 = HEAP32[($9 + 36 | 0) >> 2] | 0;
   $9 = HEAP32[($9 + 32 | 0) >> 2] | 0;
   i64toi32_i32$1 = $10;
   i64toi32_i32$0 = 0;
   HEAP32[($10 + 7052 | 0) >> 2] = 0;
   HEAP32[($10 + 7056 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[($10 + 6864 | 0) >> 2] = 0;
   label$46 : {
    label$47 : {
     $19 = +($9 >>> 0) * .4 / +($12 >>> 0) + .5;
     if (!($19 < 4294967296.0 & $19 >= 0.0 | 0)) {
      break label$47
     }
     $12 = ~~$19 >>> 0;
     break label$46;
    }
    $12 = 0;
   }
   $9 = 1;
   HEAP32[($10 + 6860 | 0) >> 2] = $12 ? $12 : 1;
   FLAC__cpu_info($10 + 7156 | 0 | 0);
   $10 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   $12 = GOT_func_internal_FLAC__lpc_compute_residual_from_qlp_coefficients;
   HEAP32[($10 + 7244 | 0) >> 2] = $12;
   HEAP32[($10 + 7240 | 0) >> 2] = GOT_func_internal_FLAC__lpc_compute_residual_from_qlp_coefficients_wide;
   HEAP32[($10 + 7236 | 0) >> 2] = $12;
   HEAP32[($10 + 7228 | 0) >> 2] = GOT_func_internal_FLAC__fixed_compute_best_predictor_wide;
   HEAP32[($10 + 7224 | 0) >> 2] = GOT_func_internal_FLAC__fixed_compute_best_predictor;
   HEAP32[($10 + 7220 | 0) >> 2] = GOT_data_internal___table_base + 15 | 0;
   HEAP32[($10 + 7232 | 0) >> 2] = GOT_func_internal_FLAC__lpc_compute_autocorrelation;
   $12 = HEAP32[$0 >> 2] | 0;
   HEAP32[$12 >> 2] = 0;
   HEAP32[($10 + 7260 | 0) >> 2] = $7;
   label$48 : {
    label$49 : {
     label$50 : {
      if (!$7) {
       break label$50
      }
      if (!(FLAC__ogg_encoder_aspect_init($12 + 632 | 0 | 0) | 0)) {
       break label$49
      }
      $12 = HEAP32[$0 >> 2] | 0;
      $10 = HEAP32[($0 + 4 | 0) >> 2] | 0;
     }
     HEAP32[($10 + 7276 | 0) >> 2] = $2;
     HEAP32[($10 + 7264 | 0) >> 2] = $1;
     HEAP32[($10 + 7288 | 0) >> 2] = $6;
     HEAP32[($10 + 7280 | 0) >> 2] = $5;
     HEAP32[($10 + 7272 | 0) >> 2] = $4;
     HEAP32[($10 + 7268 | 0) >> 2] = $3;
     if (!(resize_buffers_($0 | 0, HEAP32[($12 + 36 | 0) >> 2] | 0 | 0) | 0)) {
      break label$1
     }
     $2 = FLAC__bitwriter_init(HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 6856 | 0) >> 2] | 0 | 0) | 0;
     $10 = HEAP32[$0 >> 2] | 0;
     label$51 : {
      if ($2) {
       break label$51
      }
      HEAP32[$10 >> 2] = 8;
      break label$1;
     }
     label$52 : {
      label$53 : {
       if (HEAP32[($10 + 4 | 0) >> 2] | 0) {
        break label$53
       }
       $2 = 1;
       break label$52;
      }
      $9 = 1;
      $2 = HEAP32[($0 + 4 | 0) >> 2] | 0;
      $3 = (HEAP32[($10 + 36 | 0) >> 2] | 0) + 1 | 0;
      HEAP32[($2 + 11796 | 0) >> 2] = $3;
      label$54 : {
       if (!(HEAP32[($10 + 24 | 0) >> 2] | 0)) {
        break label$54
       }
       $2 = safe_malloc_mul_2op_p(4 | 0, $3 | 0) | 0;
       HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 11764 | 0) >> 2] = $2;
       $10 = HEAP32[$0 >> 2] | 0;
       label$55 : {
        if (!$2) {
         break label$55
        }
        label$56 : while (1) {
         $2 = HEAP32[($0 + 4 | 0) >> 2] | 0;
         if ($9 >>> 0 >= (HEAP32[($10 + 24 | 0) >> 2] | 0) >>> 0) {
          break label$54
         }
         $2 = safe_malloc_mul_2op_p(4 | 0, HEAP32[($2 + 11796 | 0) >> 2] | 0 | 0) | 0;
         HEAP32[(((HEAP32[($0 + 4 | 0) >> 2] | 0) + ($9 << 2 | 0) | 0) + 11764 | 0) >> 2] = $2;
         $9 = $9 + 1 | 0;
         $10 = HEAP32[$0 >> 2] | 0;
         if ($2) {
          continue label$56
         }
         break label$56;
        };
       }
       HEAP32[$10 >> 2] = 8;
       $9 = 1;
       break label$1;
      }
      HEAP32[($2 + 11800 | 0) >> 2] = 0;
      label$57 : {
       $2 = HEAP32[($2 + 11752 | 0) >> 2] | 0;
       if ($2) {
        break label$57
       }
       $2 = FLAC__stream_decoder_new() | 0;
       HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 11752 | 0) >> 2] = $2;
       if ($2) {
        break label$57
       }
       HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] = 3;
       $9 = 1;
       break label$1;
      }
      $9 = GOT_data_internal___table_base;
      $9 = FLAC__stream_decoder_init_stream($2 | 0, $9 + 17 | 0 | 0, 0 | 0, 0 | 0, 0 | 0, 0 | 0, $9 + 18 | 0 | 0, $9 + 19 | 0 | 0, $9 + 20 | 0 | 0, $0 | 0) | 0;
      $10 = HEAP32[$0 >> 2] | 0;
      if ($9) {
       break label$48
      }
      $2 = !(HEAP32[($10 + 4 | 0) >> 2] | 0);
     }
     $9 = HEAP32[($0 + 4 | 0) >> 2] | 0;
     i64toi32_i32$1 = $9;
     i64toi32_i32$0 = 0;
     HEAP32[($9 + 7312 | 0) >> 2] = 0;
     HEAP32[($9 + 7316 | 0) >> 2] = i64toi32_i32$0;
     HEAP32[($9 + 7292 | 0) >> 2] = 0;
     i64toi32_i32$1 = $9 + 11816 | 0;
     i64toi32_i32$0 = 0;
     HEAP32[i64toi32_i32$1 >> 2] = 0;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$1 = $9 + 11824 | 0;
     i64toi32_i32$0 = 0;
     HEAP32[i64toi32_i32$1 >> 2] = 0;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$1 = $9 + 11832 | 0;
     i64toi32_i32$0 = 0;
     HEAP32[i64toi32_i32$1 >> 2] = 0;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     HEAP32[($9 + 11840 | 0) >> 2] = 0;
     i64toi32_i32$1 = $10 + 624 | 0;
     i64toi32_i32$0 = 0;
     HEAP32[i64toi32_i32$1 >> 2] = 0;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$1 = $10 + 616 | 0;
     i64toi32_i32$0 = 0;
     HEAP32[i64toi32_i32$1 >> 2] = 0;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$1 = $10;
     i64toi32_i32$0 = 0;
     HEAP32[($10 + 608 | 0) >> 2] = 0;
     HEAP32[($10 + 612 | 0) >> 2] = i64toi32_i32$0;
     label$58 : {
      if ($2) {
       break label$58
      }
      HEAP32[($9 + 11756 | 0) >> 2] = 0;
     }
     $9 = HEAP32[($9 + 6856 | 0) >> 2] | 0;
     $2 = GOT_data_internal_FLAC__STREAM_SYNC_LEN;
     label$59 : {
      if (FLAC__bitwriter_write_raw_uint32($9 | 0, HEAP32[GOT_data_internal_FLAC__STREAM_SYNC >> 2] | 0 | 0, HEAP32[$2 >> 2] | 0 | 0) | 0) {
       break label$59
      }
      HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] = 7;
      $9 = 1;
      break label$1;
     }
     $9 = 1;
     if (!(write_bitbuffer_($0 | 0, 0 | 0, 0 | 0) | 0)) {
      break label$1
     }
     $2 = HEAP32[($0 + 4 | 0) >> 2] | 0;
     label$60 : {
      $10 = HEAP32[$0 >> 2] | 0;
      if (!(HEAP32[($10 + 4 | 0) >> 2] | 0)) {
       break label$60
      }
      HEAP32[($2 + 11756 | 0) >> 2] = 1;
     }
     i64toi32_i32$1 = $2;
     i64toi32_i32$0 = 0;
     HEAP32[($2 + 6872 | 0) >> 2] = 0;
     HEAP32[($2 + 6876 | 0) >> 2] = i64toi32_i32$0;
     HEAP32[($2 + 6880 | 0) >> 2] = 34;
     HEAP32[($2 + 6888 | 0) >> 2] = HEAP32[($10 + 36 | 0) >> 2] | 0;
     HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 6892 | 0) >> 2] = HEAP32[((HEAP32[$0 >> 2] | 0) + 36 | 0) >> 2] | 0;
     HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 6896 | 0) >> 2] = 0;
     HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 6900 | 0) >> 2] = 0;
     HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 6904 | 0) >> 2] = HEAP32[((HEAP32[$0 >> 2] | 0) + 32 | 0) >> 2] | 0;
     HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 6908 | 0) >> 2] = HEAP32[((HEAP32[$0 >> 2] | 0) + 24 | 0) >> 2] | 0;
     HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 6912 | 0) >> 2] = HEAP32[((HEAP32[$0 >> 2] | 0) + 28 | 0) >> 2] | 0;
     i64toi32_i32$2 = HEAP32[$0 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 592 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 596 | 0) >> 2] | 0;
     $769 = i64toi32_i32$0;
     i64toi32_i32$0 = (HEAP32[($0 + 4 | 0) >> 2] | 0) + 6920 | 0;
     HEAP32[i64toi32_i32$0 >> 2] = $769;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     $2 = HEAP32[($0 + 4 | 0) >> 2] | 0;
     i64toi32_i32$0 = $2 + 6936 | 0;
     i64toi32_i32$1 = 0;
     HEAP32[i64toi32_i32$0 >> 2] = 0;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$0 = $2 + 6928 | 0;
     i64toi32_i32$1 = 0;
     HEAP32[i64toi32_i32$0 >> 2] = 0;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     label$61 : {
      if (!(HEAP32[((HEAP32[$0 >> 2] | 0) + 12 | 0) >> 2] | 0)) {
       break label$61
      }
      FLAC__MD5Init((HEAP32[($0 + 4 | 0) >> 2] | 0) + 7060 | 0 | 0);
     }
     label$62 : {
      $2 = HEAP32[($0 + 4 | 0) >> 2] | 0;
      if (FLAC__add_metadata_block($2 + 6872 | 0 | 0, HEAP32[($2 + 6856 | 0) >> 2] | 0 | 0) | 0) {
       break label$62
      }
      HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] = 7;
      break label$1;
     }
     if (!(write_bitbuffer_($0 | 0, 0 | 0, 0 | 0) | 0)) {
      break label$1
     }
     HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 6896 | 0) >> 2] = (-1 << (HEAP32[GOT_data_internal_FLAC__STREAM_METADATA_STREAMINFO_MIN_FRAME_SIZE_LEN >> 2] | 0) | 0) ^ -1 | 0;
     i64toi32_i32$0 = (HEAP32[($0 + 4 | 0) >> 2] | 0) + 6920 | 0;
     i64toi32_i32$1 = 0;
     HEAP32[i64toi32_i32$0 >> 2] = 0;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     label$63 : {
      if ($11) {
       break label$63
      }
      HEAP32[$8 >> 2] = 4;
      $2 = HEAP32[((HEAP32[$0 >> 2] | 0) + 604 | 0) >> 2] | 0;
      i64toi32_i32$0 = $8 + 24 | 0;
      i64toi32_i32$1 = 0;
      HEAP32[i64toi32_i32$0 >> 2] = 0;
      HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
      i64toi32_i32$0 = $8;
      i64toi32_i32$1 = 0;
      HEAP32[(i64toi32_i32$0 + 16 | 0) >> 2] = 0;
      HEAP32[(i64toi32_i32$0 + 20 | 0) >> 2] = i64toi32_i32$1;
      HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = 8;
      HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = !$2;
      label$64 : {
       if (FLAC__add_metadata_block(i64toi32_i32$0 | 0, HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 6856 | 0) >> 2] | 0 | 0) | 0) {
        break label$64
       }
       HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] = 7;
       break label$1;
      }
      if (!(write_bitbuffer_($0 | 0, 0 | 0, 0 | 0) | 0)) {
       break label$1
      }
     }
     label$65 : {
      $10 = HEAP32[$0 >> 2] | 0;
      $3 = HEAP32[($10 + 604 | 0) >> 2] | 0;
      if (!$3) {
       break label$65
      }
      $2 = 0;
      label$66 : while (1) {
       $10 = HEAP32[((HEAP32[($10 + 600 | 0) >> 2] | 0) + ($2 << 2 | 0) | 0) >> 2] | 0;
       HEAP32[($10 + 4 | 0) >> 2] = ($2 | 0) == ($3 + -1 | 0 | 0);
       label$67 : {
        if (FLAC__add_metadata_block($10 | 0, HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 6856 | 0) >> 2] | 0 | 0) | 0) {
         break label$67
        }
        HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] = 7;
        break label$1;
       }
       label$68 : {
        if (!(write_bitbuffer_($0 | 0, 0 | 0, 0 | 0) | 0)) {
         break label$68
        }
        $2 = $2 + 1 | 0;
        $10 = HEAP32[$0 >> 2] | 0;
        $3 = HEAP32[($10 + 604 | 0) >> 2] | 0;
        if ($2 >>> 0 >= $3 >>> 0) {
         break label$65
        }
        continue label$66;
       }
       break label$66;
      };
      $9 = 1;
      break label$1;
     }
     label$69 : {
      $2 = HEAP32[($0 + 4 | 0) >> 2] | 0;
      $3 = HEAP32[($2 + 7272 | 0) >> 2] | 0;
      if (!$3) {
       break label$69
      }
      $9 = 1;
      $2 = FUNCTION_TABLE[$3 | 0]($0, $10 + 624 | 0, HEAP32[($2 + 7288 | 0) >> 2] | 0) | 0;
      $10 = HEAP32[$0 >> 2] | 0;
      if (($2 | 0) != (1 | 0)) {
       break label$69
      }
      HEAP32[$10 >> 2] = 5;
      break label$1;
     }
     $9 = 0;
     if (!(HEAP32[($10 + 4 | 0) >> 2] | 0)) {
      break label$1
     }
     HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 11756 | 0) >> 2] = 2;
     break label$1;
    }
    HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] = 2;
    $9 = 1;
    break label$1;
   }
   HEAP32[$10 >> 2] = 3;
   $9 = 1;
  }
  __stack_pointer = $8 + 176 | 0;
  return $9 | 0;
 }
 
 function precompute_partition_info_sums_($0, $1, $2, $3, $4, $5, $6) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  var $7 = 0, i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$5 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, $13 = 0, i64toi32_i32$3 = 0, $14 = 0, $10 = 0, $9 = 0, $15$hi = 0, $15 = 0, $16 = 0, $8 = 0, $12 = 0, $11 = 0, $74 = 0, $81$hi = 0, $82$hi = 0, $86 = 0, $93$hi = 0, $109 = 0, $116$hi = 0, $17 = 0, $170 = 0, $176 = 0, $180 = 0, $186 = 0, $190 = 0, $199 = 0, $224 = 0, $278 = 0, $285 = 0, $285$hi = 0, $287 = 0, $287$hi = 0, $290 = 0, $293 = 0, $293$hi = 0, $296 = 0, $296$hi = 0, $310 = 0, $317 = 0, $317$hi = 0, $319 = 0, $319$hi = 0;
  $7 = 0;
  $8 = 0 - $3 | 0;
  $9 = 1 << $5 | 0;
  $10 = ($3 + $2 | 0) >>> $5 | 0;
  $11 = $10 - $3 | 0;
  label$1 : {
   label$2 : {
    if (($6 + 4 | 0) >>> 0 < ((Math_clz32($10) ^ -32 | 0) + 33 | 0) >>> 0) {
     break label$2
    }
    $12 = $10 + ($3 ^ -1 | 0) | 0;
    $13 = $11;
    $14 = 0;
    label$3 : while (1) {
     i64toi32_i32$0 = 0;
     $15 = 0;
     $15$hi = i64toi32_i32$0;
     label$4 : {
      $8 = $8 + $10 | 0;
      if ($7 >>> 0 >= $8 >>> 0) {
       break label$4
      }
      $3 = Math_imul($10, $14);
      $2 = ($11 + $3 | 0) - $7 | 0;
      $16 = $2 & 1 | 0;
      i64toi32_i32$0 = 0;
      $15 = 0;
      $15$hi = i64toi32_i32$0;
      label$5 : {
       label$6 : {
        if (($12 + $3 | 0 | 0) != ($7 | 0)) {
         break label$6
        }
        $3 = $7;
        break label$5;
       }
       $2 = $2 & -2 | 0;
       i64toi32_i32$0 = 0;
       $15 = 0;
       $15$hi = i64toi32_i32$0;
       $3 = $7;
       label$7 : while (1) {
        i64toi32_i32$0 = $15$hi;
        $7 = $0 + ($3 << 2 | 0) | 0;
        $6 = HEAP32[$7 >> 2] | 0;
        $74 = $6;
        $6 = $6 >> 31 | 0;
        i64toi32_i32$0 = 0;
        $81$hi = i64toi32_i32$0;
        i64toi32_i32$0 = $15$hi;
        i64toi32_i32$2 = $15;
        i64toi32_i32$1 = $81$hi;
        i64toi32_i32$3 = ($74 + $6 | 0) ^ $6 | 0;
        i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
        i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
        if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
         i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
        }
        $82$hi = i64toi32_i32$5;
        $7 = HEAP32[($7 + 4 | 0) >> 2] | 0;
        $86 = $7;
        $7 = $7 >> 31 | 0;
        i64toi32_i32$5 = 0;
        $93$hi = i64toi32_i32$5;
        i64toi32_i32$5 = $82$hi;
        i64toi32_i32$0 = i64toi32_i32$4;
        i64toi32_i32$2 = $93$hi;
        i64toi32_i32$3 = ($86 + $7 | 0) ^ $7 | 0;
        i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
        i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
        if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
         i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
        }
        $15 = i64toi32_i32$1;
        $15$hi = i64toi32_i32$4;
        $3 = $3 + 2 | 0;
        $2 = $2 + -2 | 0;
        if ($2) {
         continue label$7
        }
        break label$7;
       };
      }
      $7 = $13;
      if (!$16) {
       break label$4
      }
      i64toi32_i32$4 = $15$hi;
      $3 = HEAP32[($0 + ($3 << 2 | 0) | 0) >> 2] | 0;
      $109 = $3;
      $3 = $3 >> 31 | 0;
      i64toi32_i32$4 = 0;
      $116$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $15$hi;
      i64toi32_i32$5 = $15;
      i64toi32_i32$0 = $116$hi;
      i64toi32_i32$3 = ($109 + $3 | 0) ^ $3 | 0;
      i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
      i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
      }
      $15 = i64toi32_i32$2;
      $15$hi = i64toi32_i32$1;
      $7 = $13;
     }
     i64toi32_i32$1 = $15$hi;
     i64toi32_i32$5 = $1 + ($14 << 3 | 0) | 0;
     HEAP32[i64toi32_i32$5 >> 2] = $15;
     HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] = i64toi32_i32$1;
     $13 = $13 + $10 | 0;
     $14 = $14 + 1 | 0;
     if (($14 | 0) != ($9 | 0)) {
      continue label$3
     }
     break label$1;
    };
   }
   $17 = $10 + ($3 ^ -1 | 0) | 0;
   $7 = 0;
   $12 = $11;
   $16 = 0;
   label$8 : while (1) {
    label$9 : {
     label$10 : {
      $8 = $8 + $10 | 0;
      if ($7 >>> 0 < $8 >>> 0) {
       break label$10
      }
      $2 = 0;
      break label$9;
     }
     $3 = Math_imul($10, $16);
     $14 = ($11 + $3 | 0) - $7 | 0;
     $6 = $14 & 3 | 0;
     $2 = 0;
     label$11 : {
      label$12 : {
       if ((($17 + $3 | 0) - $7 | 0) >>> 0 >= 3 >>> 0) {
        break label$12
       }
       $3 = $7;
       break label$11;
      }
      $14 = $14 & -4 | 0;
      $2 = 0;
      $3 = $7;
      label$13 : while (1) {
       $7 = $0 + ($3 << 2 | 0) | 0;
       $13 = HEAP32[($7 + 12 | 0) >> 2] | 0;
       $170 = $13;
       $13 = $13 >> 31 | 0;
       $176 = ($170 + $13 | 0) ^ $13 | 0;
       $13 = HEAP32[($7 + 8 | 0) >> 2] | 0;
       $180 = $13;
       $13 = $13 >> 31 | 0;
       $186 = ($180 + $13 | 0) ^ $13 | 0;
       $13 = HEAP32[($7 + 4 | 0) >> 2] | 0;
       $190 = $13;
       $13 = $13 >> 31 | 0;
       $7 = HEAP32[$7 >> 2] | 0;
       $199 = $7;
       $7 = $7 >> 31 | 0;
       $2 = $176 + ($186 + ((($190 + $13 | 0) ^ $13 | 0) + ((($199 + $7 | 0) ^ $7 | 0) + $2 | 0) | 0) | 0) | 0;
       $3 = $3 + 4 | 0;
       $14 = $14 + -4 | 0;
       if ($14) {
        continue label$13
       }
       break label$13;
      };
     }
     $7 = $12;
     if (!$6) {
      break label$9
     }
     label$14 : while (1) {
      $7 = HEAP32[($0 + ($3 << 2 | 0) | 0) >> 2] | 0;
      $224 = $7;
      $7 = $7 >> 31 | 0;
      $2 = (($224 + $7 | 0) ^ $7 | 0) + $2 | 0;
      $3 = $3 + 1 | 0;
      $6 = $6 + -1 | 0;
      if ($6) {
       continue label$14
      }
      break label$14;
     };
     $7 = $12;
    }
    i64toi32_i32$1 = 0;
    i64toi32_i32$5 = $1 + ($16 << 3 | 0) | 0;
    HEAP32[i64toi32_i32$5 >> 2] = $2;
    HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] = i64toi32_i32$1;
    $12 = $12 + $10 | 0;
    $16 = $16 + 1 | 0;
    if (($16 | 0) != ($9 | 0)) {
     continue label$8
    }
    break label$8;
   };
  }
  label$15 : {
   if (($5 | 0) <= ($4 | 0)) {
    break label$15
   }
   $2 = 0;
   $6 = $9;
   label$16 : while (1) {
    $3 = $6;
    $6 = $3 >>> 1 | 0;
    $5 = $5 + -1 | 0;
    label$17 : {
     if ($3 >>> 0 < 2 >>> 0) {
      break label$17
     }
     $7 = $6 >>> 0 > 1 >>> 0 ? $6 : 1;
     $14 = $7 & 1 | 0;
     label$18 : {
      if ($3 >>> 0 < 4 >>> 0) {
       break label$18
      }
      $7 = $7 & 2147483646 | 0;
      label$19 : while (1) {
       $0 = $1 + ($9 << 3 | 0) | 0;
       $278 = $0;
       $3 = $1 + ($2 << 3 | 0) | 0;
       i64toi32_i32$4 = $3 + 8 | 0;
       i64toi32_i32$1 = HEAP32[i64toi32_i32$4 >> 2] | 0;
       i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
       $285 = i64toi32_i32$1;
       $285$hi = i64toi32_i32$5;
       i64toi32_i32$4 = $3;
       i64toi32_i32$5 = HEAP32[$3 >> 2] | 0;
       i64toi32_i32$1 = HEAP32[($3 + 4 | 0) >> 2] | 0;
       $287 = i64toi32_i32$5;
       $287$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $285$hi;
       i64toi32_i32$4 = $285;
       i64toi32_i32$5 = $287$hi;
       i64toi32_i32$3 = $287;
       i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
       i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
       if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
       }
       i64toi32_i32$4 = $278;
       HEAP32[i64toi32_i32$4 >> 2] = i64toi32_i32$0;
       HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] = i64toi32_i32$2;
       $290 = $0 + 8 | 0;
       i64toi32_i32$1 = $3 + 24 | 0;
       i64toi32_i32$2 = HEAP32[i64toi32_i32$1 >> 2] | 0;
       i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
       $293 = i64toi32_i32$2;
       $293$hi = i64toi32_i32$4;
       i64toi32_i32$1 = $3 + 16 | 0;
       i64toi32_i32$4 = HEAP32[i64toi32_i32$1 >> 2] | 0;
       i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
       $296 = i64toi32_i32$4;
       $296$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $293$hi;
       i64toi32_i32$1 = $293;
       i64toi32_i32$4 = $296$hi;
       i64toi32_i32$3 = $296;
       i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
       i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
       if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
       }
       i64toi32_i32$1 = $290;
       HEAP32[i64toi32_i32$1 >> 2] = i64toi32_i32$5;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
       $2 = $2 + 4 | 0;
       $9 = $9 + 2 | 0;
       $7 = $7 + -2 | 0;
       if ($7) {
        continue label$19
       }
       break label$19;
      };
     }
     if (!$14) {
      break label$17
     }
     $310 = $1 + ($9 << 3 | 0) | 0;
     $3 = $1 + ($2 << 3 | 0) | 0;
     i64toi32_i32$2 = $3 + 8 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $317 = i64toi32_i32$0;
     $317$hi = i64toi32_i32$1;
     i64toi32_i32$2 = $3;
     i64toi32_i32$1 = HEAP32[$3 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[($3 + 4 | 0) >> 2] | 0;
     $319 = i64toi32_i32$1;
     $319$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $317$hi;
     i64toi32_i32$2 = $317;
     i64toi32_i32$1 = $319$hi;
     i64toi32_i32$3 = $319;
     i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
     i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     i64toi32_i32$2 = $310;
     HEAP32[i64toi32_i32$2 >> 2] = i64toi32_i32$4;
     HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$5;
     $9 = $9 + 1 | 0;
     $2 = $2 + 2 | 0;
    }
    if (($5 | 0) > ($4 | 0)) {
     continue label$16
    }
    break label$16;
   };
  }
 }
 
 function resize_buffers_($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $5 = 0, $3 = 0, $7 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $6 = 0, $4 = 0;
  $2 = 1;
  label$1 : {
   if ((HEAP32[(HEAP32[($0 + 4 | 0) >> 2] | 0) >> 2] | 0) >>> 0 >= $1 >>> 0) {
    break label$1
   }
   $3 = $0 + 4 | 0;
   $4 = $1 + 5 | 0;
   $2 = 0;
   label$2 : {
    label$3 : {
     label$4 : while (1) {
      label$5 : {
       if ($2 >>> 0 < (HEAP32[((HEAP32[$0 >> 2] | 0) + 24 | 0) >> 2] | 0) >>> 0) {
        break label$5
       }
       $2 = HEAP32[$3 >> 2] | 0;
       $2 = FLAC__memory_alloc_aligned_int32_array($4 | 0, $2 + 7360 | 0 | 0, $2 + 36 | 0 | 0) | 0;
       $5 = HEAP32[((HEAP32[$3 >> 2] | 0) + 36 | 0) >> 2] | 0;
       i64toi32_i32$1 = $5;
       i64toi32_i32$0 = 0;
       HEAP32[$5 >> 2] = 0;
       HEAP32[($5 + 4 | 0) >> 2] = i64toi32_i32$0;
       i64toi32_i32$1 = $5 + 8 | 0;
       i64toi32_i32$0 = 0;
       HEAP32[i64toi32_i32$1 >> 2] = 0;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
       $5 = HEAP32[$3 >> 2] | 0;
       HEAP32[($5 + 36 | 0) >> 2] = (HEAP32[($5 + 36 | 0) >> 2] | 0) + 16 | 0;
       label$6 : {
        label$7 : {
         if ($2) {
          break label$7
         }
         $2 = ($2 | 0) != (0 | 0);
         break label$6;
        }
        $2 = HEAP32[$3 >> 2] | 0;
        $2 = FLAC__memory_alloc_aligned_int32_array($4 | 0, $2 + 7364 | 0 | 0, $2 + 40 | 0 | 0) | 0;
        $5 = HEAP32[((HEAP32[$3 >> 2] | 0) + 40 | 0) >> 2] | 0;
        i64toi32_i32$1 = $5;
        i64toi32_i32$0 = 0;
        HEAP32[$5 >> 2] = 0;
        HEAP32[($5 + 4 | 0) >> 2] = i64toi32_i32$0;
        i64toi32_i32$1 = $5 + 8 | 0;
        i64toi32_i32$0 = 0;
        HEAP32[i64toi32_i32$1 >> 2] = 0;
        HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
        $5 = (HEAP32[$3 >> 2] | 0) + 40 | 0;
        HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + 16 | 0;
        $2 = ($2 | 0) != (0 | 0);
       }
       if (!$2) {
        break label$3
       }
       label$8 : {
        $2 = HEAP32[$0 >> 2] | 0;
        if (!(HEAP32[($2 + 556 | 0) >> 2] | 0)) {
         break label$8
        }
        $5 = HEAP32[$3 >> 2] | 0;
        label$9 : {
         if (!(HEAP32[($2 + 40 | 0) >> 2] | 0)) {
          break label$9
         }
         $2 = 0;
         label$10 : while (1) {
          $5 = $5 + ($2 << 2 | 0) | 0;
          if (!(FLAC__memory_alloc_aligned_real_array($1 | 0, $5 + 7408 | 0 | 0, $5 + 84 | 0 | 0) | 0)) {
           break label$3
          }
          $5 = HEAP32[($0 + 4 | 0) >> 2] | 0;
          $2 = $2 + 1 | 0;
          if ($2 >>> 0 < (HEAP32[((HEAP32[$0 >> 2] | 0) + 40 | 0) >> 2] | 0) >>> 0) {
           continue label$10
          }
          break label$10;
         };
        }
        if (!(FLAC__memory_alloc_aligned_real_array($1 | 0, $5 + 7536 | 0 | 0, $5 + 212 | 0 | 0) | 0)) {
         break label$3
        }
       }
       $5 = 0;
       $6 = 1;
       $2 = 0;
       label$11 : while (1) {
        label$12 : {
         if ($2 >>> 0 < (HEAP32[((HEAP32[$0 >> 2] | 0) + 24 | 0) >> 2] | 0) >>> 0) {
          break label$12
         }
         label$13 : while (1) {
          label$14 : {
           label$15 : {
            $5 = $5 << 3 | 0;
            $2 = (HEAP32[$3 >> 2] | 0) + $5 | 0;
            $2 = FLAC__memory_alloc_aligned_int32_array($1 | 0, $2 + 7604 | 0 | 0, $2 + 320 | 0 | 0) | 0;
            if ($2) {
             break label$15
            }
            $2 = ($2 | 0) != (0 | 0);
            break label$14;
           }
           $2 = (HEAP32[$3 >> 2] | 0) + $5 | 0;
           $2 = (FLAC__memory_alloc_aligned_int32_array($1 | 0, $2 + 7608 | 0 | 0, $2 + 324 | 0 | 0) | 0 | 0) != (0 | 0);
          }
          $7 = $2 & $6 | 0;
          $5 = 1;
          $6 = 0;
          if ($7) {
           continue label$13
          }
          break label$13;
         };
         if (!$2) {
          break label$3
         }
         $2 = HEAP32[($0 + 4 | 0) >> 2] | 0;
         $5 = FLAC__memory_alloc_aligned_uint64_array($1 << 1 | 0 | 0, $2 + 7620 | 0 | 0, $2 + 6848 | 0 | 0) | 0;
         label$16 : {
          label$17 : {
           $2 = HEAP32[$0 >> 2] | 0;
           $6 = HEAP32[($2 + 572 | 0) >> 2] | 0;
           if (!$6) {
            break label$17
           }
           if (!$5) {
            break label$17
           }
           $2 = HEAP32[$3 >> 2] | 0;
           if (FLAC__memory_alloc_aligned_unsigned_array($1 << 1 | 0 | 0, $2 + 7624 | 0 | 0, $2 + 6852 | 0 | 0) | 0) {
            break label$16
           }
           break label$3;
          }
          if ($6) {
           break label$2
          }
          if (!$5) {
           break label$2
          }
         }
         label$18 : {
          $2 = HEAP32[$3 >> 2] | 0;
          if ((HEAP32[$2 >> 2] | 0 | 0) == ($1 | 0)) {
           break label$18
          }
          $5 = HEAP32[$0 >> 2] | 0;
          if (!(HEAP32[($5 + 556 | 0) >> 2] | 0)) {
           break label$18
          }
          if (!(HEAP32[($5 + 40 | 0) >> 2] | 0)) {
           break label$18
          }
          $2 = 0;
          label$19 : while (1) {
           label$20 : {
            label$21 : {
             label$22 : {
              label$23 : {
               label$24 : {
                label$25 : {
                 label$26 : {
                  label$27 : {
                   label$28 : {
                    label$29 : {
                     label$30 : {
                      label$31 : {
                       label$32 : {
                        label$33 : {
                         label$34 : {
                          label$35 : {
                           label$36 : {
                            label$37 : {
                             label$38 : {
                              $5 = $5 + ($2 << 4 | 0) | 0;
                              switch (HEAP32[($5 + 44 | 0) >> 2] | 0 | 0) {
                              case 16:
                               break label$22;
                              case 15:
                               break label$23;
                              case 14:
                               break label$24;
                              case 13:
                               break label$25;
                              case 12:
                               break label$26;
                              case 11:
                               break label$27;
                              case 10:
                               break label$28;
                              case 9:
                               break label$29;
                              case 8:
                               break label$30;
                              case 7:
                               break label$31;
                              case 6:
                               break label$32;
                              case 5:
                               break label$33;
                              case 4:
                               break label$34;
                              case 3:
                               break label$35;
                              case 2:
                               break label$36;
                              case 1:
                               break label$37;
                              case 0:
                               break label$38;
                              default:
                               break label$21;
                              };
                             }
                             FLAC__window_bartlett(HEAP32[(((HEAP32[$3 >> 2] | 0) + ($2 << 2 | 0) | 0) + 84 | 0) >> 2] | 0 | 0, $1 | 0);
                             break label$20;
                            }
                            FLAC__window_bartlett_hann(HEAP32[(((HEAP32[$3 >> 2] | 0) + ($2 << 2 | 0) | 0) + 84 | 0) >> 2] | 0 | 0, $1 | 0);
                            break label$20;
                           }
                           FLAC__window_blackman(HEAP32[(((HEAP32[$3 >> 2] | 0) + ($2 << 2 | 0) | 0) + 84 | 0) >> 2] | 0 | 0, $1 | 0);
                           break label$20;
                          }
                          FLAC__window_blackman_harris_4term_92db_sidelobe(HEAP32[(((HEAP32[$3 >> 2] | 0) + ($2 << 2 | 0) | 0) + 84 | 0) >> 2] | 0 | 0, $1 | 0);
                          break label$20;
                         }
                         FLAC__window_connes(HEAP32[(((HEAP32[$3 >> 2] | 0) + ($2 << 2 | 0) | 0) + 84 | 0) >> 2] | 0 | 0, $1 | 0);
                         break label$20;
                        }
                        FLAC__window_flattop(HEAP32[(((HEAP32[$3 >> 2] | 0) + ($2 << 2 | 0) | 0) + 84 | 0) >> 2] | 0 | 0, $1 | 0);
                        break label$20;
                       }
                       FLAC__window_gauss(HEAP32[(((HEAP32[$3 >> 2] | 0) + ($2 << 2 | 0) | 0) + 84 | 0) >> 2] | 0 | 0, $1 | 0, Math_fround(Math_fround(HEAPF32[($5 + 48 | 0) >> 2])));
                       break label$20;
                      }
                      FLAC__window_hamming(HEAP32[(((HEAP32[$3 >> 2] | 0) + ($2 << 2 | 0) | 0) + 84 | 0) >> 2] | 0 | 0, $1 | 0);
                      break label$20;
                     }
                     FLAC__window_hann(HEAP32[(((HEAP32[$3 >> 2] | 0) + ($2 << 2 | 0) | 0) + 84 | 0) >> 2] | 0 | 0, $1 | 0);
                     break label$20;
                    }
                    FLAC__window_kaiser_bessel(HEAP32[(((HEAP32[$3 >> 2] | 0) + ($2 << 2 | 0) | 0) + 84 | 0) >> 2] | 0 | 0, $1 | 0);
                    break label$20;
                   }
                   FLAC__window_nuttall(HEAP32[(((HEAP32[$3 >> 2] | 0) + ($2 << 2 | 0) | 0) + 84 | 0) >> 2] | 0 | 0, $1 | 0);
                   break label$20;
                  }
                  FLAC__window_rectangle(HEAP32[(((HEAP32[$3 >> 2] | 0) + ($2 << 2 | 0) | 0) + 84 | 0) >> 2] | 0 | 0, $1 | 0);
                  break label$20;
                 }
                 FLAC__window_triangle(HEAP32[(((HEAP32[$3 >> 2] | 0) + ($2 << 2 | 0) | 0) + 84 | 0) >> 2] | 0 | 0, $1 | 0);
                 break label$20;
                }
                FLAC__window_tukey(HEAP32[(((HEAP32[$3 >> 2] | 0) + ($2 << 2 | 0) | 0) + 84 | 0) >> 2] | 0 | 0, $1 | 0, Math_fround(Math_fround(HEAPF32[($5 + 48 | 0) >> 2])));
                break label$20;
               }
               FLAC__window_partial_tukey(HEAP32[(((HEAP32[$3 >> 2] | 0) + ($2 << 2 | 0) | 0) + 84 | 0) >> 2] | 0 | 0, $1 | 0, Math_fround(Math_fround(HEAPF32[($5 + 48 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($5 + 52 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($5 + 56 | 0) >> 2])));
               break label$20;
              }
              FLAC__window_punchout_tukey(HEAP32[(((HEAP32[$3 >> 2] | 0) + ($2 << 2 | 0) | 0) + 84 | 0) >> 2] | 0 | 0, $1 | 0, Math_fround(Math_fround(HEAPF32[($5 + 48 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($5 + 52 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($5 + 56 | 0) >> 2])));
              break label$20;
             }
             FLAC__window_welch(HEAP32[(((HEAP32[$3 >> 2] | 0) + ($2 << 2 | 0) | 0) + 84 | 0) >> 2] | 0 | 0, $1 | 0);
             break label$20;
            }
            FLAC__window_hann(HEAP32[(((HEAP32[$3 >> 2] | 0) + ($2 << 2 | 0) | 0) + 84 | 0) >> 2] | 0 | 0, $1 | 0);
           }
           $2 = $2 + 1 | 0;
           $5 = HEAP32[$0 >> 2] | 0;
           if ($2 >>> 0 < (HEAP32[($5 + 40 | 0) >> 2] | 0) >>> 0) {
            continue label$19
           }
           break label$19;
          };
          $2 = HEAP32[$3 >> 2] | 0;
         }
         HEAP32[$2 >> 2] = $1;
         return 1 | 0;
        }
        label$39 : {
         label$40 : {
          $4 = $2 << 3 | 0;
          $7 = (HEAP32[$3 >> 2] | 0) + $4 | 0;
          $7 = FLAC__memory_alloc_aligned_int32_array($1 | 0, $7 + 7540 | 0 | 0, $7 + 256 | 0 | 0) | 0;
          if ($7) {
           break label$40
          }
          $7 = ($7 | 0) != (0 | 0);
          break label$39;
         }
         $7 = (HEAP32[$3 >> 2] | 0) + $4 | 0;
         $7 = (FLAC__memory_alloc_aligned_int32_array($1 | 0, $7 + 7544 | 0 | 0, $7 + 260 | 0 | 0) | 0 | 0) != (0 | 0);
        }
        $2 = $2 + 1 | 0;
        if ($7) {
         continue label$11
        }
        break label$3;
       };
      }
      $5 = $2 << 2 | 0;
      $6 = (HEAP32[$3 >> 2] | 0) + $5 | 0;
      $6 = FLAC__memory_alloc_aligned_int32_array($4 | 0, $6 + 7328 | 0 | 0, $6 + 4 | 0 | 0) | 0;
      $7 = HEAP32[(((HEAP32[$3 >> 2] | 0) + $5 | 0) + 4 | 0) >> 2] | 0;
      i64toi32_i32$1 = $7;
      i64toi32_i32$0 = 0;
      HEAP32[$7 >> 2] = 0;
      HEAP32[($7 + 4 | 0) >> 2] = i64toi32_i32$0;
      i64toi32_i32$1 = $7 + 8 | 0;
      i64toi32_i32$0 = 0;
      HEAP32[i64toi32_i32$1 >> 2] = 0;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      $5 = ((HEAP32[$3 >> 2] | 0) + $5 | 0) + 4 | 0;
      HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + 16 | 0;
      $2 = $2 + 1 | 0;
      if ($6) {
       continue label$4
      }
      break label$4;
     };
    }
    $2 = HEAP32[$0 >> 2] | 0;
   }
   HEAP32[$2 >> 2] = 8;
   $2 = 0;
  }
  return $2 | 0;
 }
 
 function verify_read_callback_($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $7 = 0, $8 = 0, $5 = 0, $4 = 0, $6 = 0;
  label$1 : {
   $4 = HEAP32[($3 + 4 | 0) >> 2] | 0;
   if (!(HEAP32[($4 + 11760 | 0) >> 2] | 0)) {
    break label$1
   }
   HEAP32[$2 >> 2] = 4;
   $7 = GOT_data_internal_FLAC__STREAM_SYNC_STRING;
   $8 = HEAPU8[$7 >> 0] | 0 | ((HEAPU8[($7 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($7 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($7 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
   HEAP8[$1 >> 0] = $8;
   HEAP8[($1 + 1 | 0) >> 0] = $8 >>> 8 | 0;
   HEAP8[($1 + 2 | 0) >> 0] = $8 >>> 16 | 0;
   HEAP8[($1 + 3 | 0) >> 0] = $8 >>> 24 | 0;
   HEAP32[((HEAP32[($3 + 4 | 0) >> 2] | 0) + 11760 | 0) >> 2] = 0;
   return 0 | 0;
  }
  label$2 : {
   $5 = HEAP32[($4 + 11812 | 0) >> 2] | 0;
   if ($5) {
    break label$2
   }
   return 2 | 0;
  }
  label$3 : {
   $6 = HEAP32[$2 >> 2] | 0;
   if ($5 >>> 0 >= $6 >>> 0) {
    break label$3
   }
   HEAP32[$2 >> 2] = $5;
   $6 = $5;
  }
  __memcpy($1 | 0, HEAP32[($4 + 11804 | 0) >> 2] | 0 | 0, $6 | 0) | 0;
  $3 = HEAP32[($3 + 4 | 0) >> 2] | 0;
  $1 = $3 + 11804 | 0;
  $2 = HEAP32[$2 >> 2] | 0;
  HEAP32[$1 >> 2] = (HEAP32[$1 >> 2] | 0) + $2 | 0;
  $3 = $3 + 11812 | 0;
  HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) - $2 | 0;
  return 0 | 0;
 }
 
 function verify_write_callback_($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $8 = 0, $9 = 0, $5 = 0, $6 = 0, i64toi32_i32$2 = 0, $4 = 0, i64toi32_i32$5 = 0, $10 = 0, i64toi32_i32$1 = 0, $7 = 0, $11 = 0, i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, $61 = 0, $63$hi = 0, $65$hi = 0, $82 = 0, $83$hi = 0, $85$hi = 0, $24 = 0, $96 = 0;
  $4 = HEAP32[$1 >> 2] | 0;
  $5 = HEAP32[($3 + 4 | 0) >> 2] | 0;
  label$1 : {
   $6 = HEAP32[($1 + 8 | 0) >> 2] | 0;
   if (!$6) {
    break label$1
   }
   $7 = $4 << 2 | 0;
   $8 = 0;
   label$2 : while (1) {
    label$3 : {
     $9 = $8 << 2 | 0;
     $10 = HEAP32[($2 + $9 | 0) >> 2] | 0;
     $9 = HEAP32[(($5 + $9 | 0) + 11764 | 0) >> 2] | 0;
     if (!(memcmp($10 | 0, $9 | 0, $7 | 0) | 0)) {
      break label$3
     }
     $11 = 0;
     label$4 : {
      label$5 : {
       if (!$4) {
        break label$5
       }
       $6 = 0;
       label$6 : while (1) {
        label$7 : {
         $2 = $6 << 2 | 0;
         $7 = HEAP32[($10 + $2 | 0) >> 2] | 0;
         $2 = HEAP32[($9 + $2 | 0) >> 2] | 0;
         if (($7 | 0) == ($2 | 0)) {
          break label$7
         }
         $11 = $6;
         break label$4;
        }
        $6 = $6 + 1 | 0;
        if (($6 | 0) != ($4 | 0)) {
         continue label$6
        }
        break label$6;
       };
      }
      $2 = 0;
      $7 = 0;
     }
     $61 = $5 + 11816 | 0;
     i64toi32_i32$2 = $1;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 24 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 28 | 0) >> 2] | 0;
     $63$hi = i64toi32_i32$1;
     i64toi32_i32$1 = 0;
     $65$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $63$hi;
     i64toi32_i32$2 = i64toi32_i32$0;
     i64toi32_i32$0 = $65$hi;
     i64toi32_i32$4 = i64toi32_i32$2 + $11 | 0;
     i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$4 >>> 0 < $11 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     i64toi32_i32$2 = $61;
     HEAP32[i64toi32_i32$2 >> 2] = i64toi32_i32$4;
     HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$5;
     i64toi32_i32$1 = $1;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 24 | 0) >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 28 | 0) >> 2] | 0;
     HEAP32[($5 + 11840 | 0) >> 2] = $7;
     HEAP32[($5 + 11836 | 0) >> 2] = $2;
     HEAP32[($5 + 11832 | 0) >> 2] = $11;
     HEAP32[($5 + 11828 | 0) >> 2] = $8;
     $82 = $5 + 11824 | 0;
     $83$hi = i64toi32_i32$2;
     i64toi32_i32$2 = 0;
     $85$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $83$hi;
     $24 = i64toi32_i32$5;
     i64toi32_i32$5 = $85$hi;
     i64toi32_i32$5 = __wasm_i64_udiv($24 | 0, i64toi32_i32$2 | 0, $4 | 0, i64toi32_i32$5 | 0) | 0;
     i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
     HEAP32[$82 >> 2] = i64toi32_i32$5;
     HEAP32[(HEAP32[$3 >> 2] | 0) >> 2] = 4;
     return 1 | 0;
    }
    $8 = $8 + 1 | 0;
    if (($8 | 0) != ($6 | 0)) {
     continue label$2
    }
    break label$2;
   };
   $8 = $5 + 11800 | 0;
   $96 = $8;
   $8 = (HEAP32[$8 >> 2] | 0) - $4 | 0;
   HEAP32[$96 >> 2] = $8;
   label$8 : {
    if (!$6) {
     break label$8
    }
    $9 = HEAP32[($5 + 11764 | 0) >> 2] | 0;
    memmove($9 | 0, $9 + ($4 << 2 | 0) | 0 | 0, $8 << 2 | 0 | 0) | 0;
    $8 = 1;
    if (($6 | 0) == (1 | 0)) {
     break label$8
    }
    $9 = $6 + -1 | 0;
    $7 = $9 & 1 | 0;
    label$9 : {
     if (($6 | 0) == (2 | 0)) {
      break label$9
     }
     $9 = $9 & -2 | 0;
     $8 = 1;
     label$10 : while (1) {
      $5 = HEAP32[($3 + 4 | 0) >> 2] | 0;
      $10 = $8 << 2 | 0;
      $6 = HEAP32[(($5 + $10 | 0) + 11764 | 0) >> 2] | 0;
      $2 = $4 << 2 | 0;
      memmove($6 | 0, $6 + $2 | 0 | 0, (HEAP32[($5 + 11800 | 0) >> 2] | 0) << 2 | 0 | 0) | 0;
      $5 = HEAP32[($3 + 4 | 0) >> 2] | 0;
      $10 = HEAP32[(($5 + $10 | 0) + 11768 | 0) >> 2] | 0;
      memmove($10 | 0, $10 + $2 | 0 | 0, (HEAP32[($5 + 11800 | 0) >> 2] | 0) << 2 | 0 | 0) | 0;
      $8 = $8 + 2 | 0;
      $9 = $9 + -2 | 0;
      if ($9) {
       continue label$10
      }
      break label$10;
     };
    }
    if (!$7) {
     break label$8
    }
    $9 = HEAP32[($3 + 4 | 0) >> 2] | 0;
    $8 = HEAP32[(($9 + ($8 << 2 | 0) | 0) + 11764 | 0) >> 2] | 0;
    memmove($8 | 0, $8 + ($4 << 2 | 0) | 0 | 0, (HEAP32[($9 + 11800 | 0) >> 2] | 0) << 2 | 0 | 0) | 0;
   }
   return 0 | 0;
  }
  $8 = $5 + 11800 | 0;
  HEAP32[$8 >> 2] = (HEAP32[$8 >> 2] | 0) - $4 | 0;
  return 0 | 0;
 }
 
 function verify_metadata_callback_($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
 }
 
 function verify_error_callback_($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  HEAP32[(HEAP32[$2 >> 2] | 0) >> 2] = 3;
 }
 
 function write_bitbuffer_($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $5 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$4 = 0, i64toi32_i32$5 = 0, i64toi32_i32$1 = 0, $4 = 0, i64toi32_i32$3 = 0, $3 = 0, $8 = 0, $15$hi = 0, $9 = 0, $13$hi = 0, $6 = 0, $7 = 0, $11 = 0, $13 = 0, $10$hi = 0, $12 = 0, $14$hi = 0, $15 = 0, $89 = 0, $97 = 0, $10 = 0, $122$hi = 0, $14 = 0, $202 = 0, $204$hi = 0, $206$hi = 0, $208 = 0, $210$hi = 0, $212$hi = 0, $236 = 0, $250 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  $4 = FLAC__bitwriter_get_buffer(HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 6856 | 0) >> 2] | 0 | 0, $3 + 4 | 0 | 0, $3 | 0) | 0;
  $5 = HEAP32[$0 >> 2] | 0;
  label$1 : {
   label$2 : {
    if ($4) {
     break label$2
    }
    HEAP32[$5 >> 2] = 8;
    $4 = 0;
    break label$1;
   }
   label$3 : {
    if (!(HEAP32[($5 + 4 | 0) >> 2] | 0)) {
     break label$3
    }
    $4 = HEAP32[($0 + 4 | 0) >> 2] | 0;
    HEAP32[($4 + 11804 | 0) >> 2] = HEAP32[($3 + 4 | 0) >> 2] | 0;
    HEAP32[($4 + 11812 | 0) >> 2] = HEAP32[$3 >> 2] | 0;
    label$4 : {
     if (HEAP32[($4 + 11756 | 0) >> 2] | 0) {
      break label$4
     }
     HEAP32[($4 + 11760 | 0) >> 2] = 1;
     break label$3;
    }
    if (FLAC__stream_decoder_process_single(HEAP32[($4 + 11752 | 0) >> 2] | 0 | 0) | 0) {
     break label$3
    }
    FLAC__bitwriter_release_buffer(HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 6856 | 0) >> 2] | 0 | 0);
    FLAC__bitwriter_clear(HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 6856 | 0) >> 2] | 0 | 0);
    $4 = 0;
    $0 = HEAP32[$0 >> 2] | 0;
    if ((HEAP32[$0 >> 2] | 0 | 0) == (4 | 0)) {
     break label$1
    }
    HEAP32[$0 >> 2] = 3;
    break label$1;
   }
   $6 = HEAP32[$3 >> 2] | 0;
   $7 = HEAP32[($3 + 4 | 0) >> 2] | 0;
   i64toi32_i32$1 = $3;
   i64toi32_i32$0 = 0;
   HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$0;
   label$5 : {
    label$6 : {
     label$7 : {
      $4 = HEAP32[($0 + 4 | 0) >> 2] | 0;
      $5 = HEAP32[($4 + 7272 | 0) >> 2] | 0;
      if (!$5) {
       break label$7
      }
      if ((FUNCTION_TABLE[$5 | 0]($0, $3 + 8 | 0, HEAP32[($4 + 7288 | 0) >> 2] | 0) | 0 | 0) == (1 | 0)) {
       break label$6
      }
     }
     label$8 : {
      if ($1) {
       break label$8
      }
      label$9 : {
       switch ((HEAPU8[$7 >> 0] | 0) & 127 | 0 | 0) {
       case 0:
        i64toi32_i32$2 = $3;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] | 0;
        $89 = i64toi32_i32$0;
        i64toi32_i32$0 = HEAP32[$0 >> 2] | 0;
        HEAP32[(i64toi32_i32$0 + 608 | 0) >> 2] = $89;
        HEAP32[(i64toi32_i32$0 + 612 | 0) >> 2] = i64toi32_i32$1;
        break label$8;
       case 3:
        break label$9;
       default:
        break label$8;
       };
      }
      $4 = HEAP32[$0 >> 2] | 0;
      i64toi32_i32$2 = $4;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 616 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 620 | 0) >> 2] | 0;
      i64toi32_i32$2 = i64toi32_i32$1;
      i64toi32_i32$1 = 0;
      i64toi32_i32$3 = 0;
      if ((i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$1 | 0) | 0) {
       break label$8
      }
      i64toi32_i32$3 = $3;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 8 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 12 | 0) >> 2] | 0;
      $97 = i64toi32_i32$2;
      i64toi32_i32$2 = $4;
      HEAP32[(i64toi32_i32$2 + 616 | 0) >> 2] = $97;
      HEAP32[(i64toi32_i32$2 + 620 | 0) >> 2] = i64toi32_i32$0;
     }
     label$11 : {
      $5 = HEAP32[($0 + 4 | 0) >> 2] | 0;
      $8 = HEAP32[($5 + 7048 | 0) >> 2] | 0;
      if (!$8) {
       break label$11
      }
      $9 = HEAP32[$0 >> 2] | 0;
      i64toi32_i32$3 = $9;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 624 | 0) >> 2] | 0;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 628 | 0) >> 2] | 0;
      $10 = i64toi32_i32$0;
      $10$hi = i64toi32_i32$2;
      if (!(i64toi32_i32$0 | i64toi32_i32$2 | 0)) {
       break label$11
      }
      $11 = HEAP32[$8 >> 2] | 0;
      if (!$11) {
       break label$11
      }
      $4 = HEAP32[($5 + 7292 | 0) >> 2] | 0;
      if ($4 >>> 0 >= $11 >>> 0) {
       break label$11
      }
      $12 = HEAP32[($9 + 36 | 0) >> 2] | 0;
      i64toi32_i32$2 = 0;
      $122$hi = i64toi32_i32$2;
      i64toi32_i32$3 = $5;
      i64toi32_i32$2 = HEAP32[($5 + 7312 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[($5 + 7316 | 0) >> 2] | 0;
      $13 = i64toi32_i32$2;
      $13$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $122$hi;
      i64toi32_i32$3 = $12;
      i64toi32_i32$2 = $13$hi;
      i64toi32_i32$1 = $13;
      i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
      i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      i64toi32_i32$0 = i64toi32_i32$4;
      i64toi32_i32$3 = -1;
      i64toi32_i32$1 = -1;
      i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
      i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $14 = i64toi32_i32$2;
      $14$hi = i64toi32_i32$4;
      $9 = HEAP32[($8 + 4 | 0) >> 2] | 0;
      label$12 : while (1) {
       $8 = $9 + Math_imul($4, 24) | 0;
       i64toi32_i32$5 = $8;
       i64toi32_i32$4 = HEAP32[i64toi32_i32$5 >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
       $15 = i64toi32_i32$4;
       $15$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $14$hi;
       i64toi32_i32$0 = $15$hi;
       i64toi32_i32$5 = i64toi32_i32$4;
       i64toi32_i32$4 = $14$hi;
       i64toi32_i32$1 = $14;
       if (i64toi32_i32$0 >>> 0 > i64toi32_i32$4 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$5 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0) {
        break label$11
       }
       label$13 : {
        i64toi32_i32$5 = $15$hi;
        i64toi32_i32$5 = $13$hi;
        i64toi32_i32$5 = $15$hi;
        i64toi32_i32$1 = $15;
        i64toi32_i32$0 = $13$hi;
        i64toi32_i32$4 = $13;
        if (i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0) {
         break label$13
        }
        i64toi32_i32$1 = $13$hi;
        i64toi32_i32$5 = $8;
        HEAP32[i64toi32_i32$5 >> 2] = $13;
        HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] = i64toi32_i32$1;
        i64toi32_i32$4 = $3;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 8 | 0) >> 2] | 0;
        i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 12 | 0) >> 2] | 0;
        $15 = i64toi32_i32$1;
        $15$hi = i64toi32_i32$5;
        HEAP32[($8 + 16 | 0) >> 2] = $12;
        i64toi32_i32$5 = $10$hi;
        i64toi32_i32$5 = $15$hi;
        i64toi32_i32$4 = i64toi32_i32$1;
        i64toi32_i32$1 = $10$hi;
        i64toi32_i32$0 = $10;
        i64toi32_i32$3 = i64toi32_i32$4 - i64toi32_i32$0 | 0;
        i64toi32_i32$2 = (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) + i64toi32_i32$1 | 0;
        i64toi32_i32$2 = i64toi32_i32$5 - i64toi32_i32$2 | 0;
        i64toi32_i32$4 = $8;
        HEAP32[(i64toi32_i32$4 + 8 | 0) >> 2] = i64toi32_i32$3;
        HEAP32[(i64toi32_i32$4 + 12 | 0) >> 2] = i64toi32_i32$2;
       }
       $4 = $4 + 1 | 0;
       HEAP32[($5 + 7292 | 0) >> 2] = $4;
       if (($4 | 0) != ($11 | 0)) {
        continue label$12
       }
       break label$12;
      };
     }
     label$14 : {
      label$15 : {
       if (!(HEAP32[($5 + 7260 | 0) >> 2] | 0)) {
        break label$15
       }
       $4 = FLAC__ogg_encoder_aspect_write_callback_wrapper((HEAP32[$0 >> 2] | 0) + 632 | 0 | 0, $7 | 0, $6 | 0, $1 | 0, HEAP32[($5 + 7056 | 0) >> 2] | 0 | 0, $2 | 0, HEAP32[($5 + 7276 | 0) >> 2] | 0 | 0, $0 | 0, HEAP32[($5 + 7288 | 0) >> 2] | 0 | 0) | 0;
       break label$14;
      }
      $4 = FUNCTION_TABLE[HEAP32[($5 + 7276 | 0) >> 2] | 0 | 0]($0, $7, $6, $1, HEAP32[($5 + 7056 | 0) >> 2] | 0, HEAP32[($5 + 7288 | 0) >> 2] | 0) | 0;
     }
     if (!$4) {
      break label$5
     }
    }
    HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] = 5;
    FLAC__bitwriter_release_buffer(HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 6856 | 0) >> 2] | 0 | 0);
    FLAC__bitwriter_clear(HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 6856 | 0) >> 2] | 0 | 0);
    HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] = 5;
    $4 = 0;
    break label$1;
   }
   $5 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   $202 = $5;
   i64toi32_i32$5 = $5;
   i64toi32_i32$2 = HEAP32[($5 + 7304 | 0) >> 2] | 0;
   i64toi32_i32$4 = HEAP32[($5 + 7308 | 0) >> 2] | 0;
   $204$hi = i64toi32_i32$4;
   i64toi32_i32$4 = 0;
   $206$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $204$hi;
   i64toi32_i32$5 = i64toi32_i32$2;
   i64toi32_i32$2 = $206$hi;
   i64toi32_i32$0 = $6;
   i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
   i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
   if (i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0) {
    i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
   }
   i64toi32_i32$5 = $202;
   HEAP32[(i64toi32_i32$5 + 7304 | 0) >> 2] = i64toi32_i32$1;
   HEAP32[(i64toi32_i32$5 + 7308 | 0) >> 2] = i64toi32_i32$3;
   $208 = $5;
   i64toi32_i32$4 = $5;
   i64toi32_i32$3 = HEAP32[($5 + 7312 | 0) >> 2] | 0;
   i64toi32_i32$5 = HEAP32[($5 + 7316 | 0) >> 2] | 0;
   $210$hi = i64toi32_i32$5;
   i64toi32_i32$5 = 0;
   $212$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $210$hi;
   i64toi32_i32$4 = i64toi32_i32$3;
   i64toi32_i32$3 = $212$hi;
   i64toi32_i32$0 = $1;
   i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
   i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
   if (i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0) {
    i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
   }
   i64toi32_i32$4 = $208;
   HEAP32[(i64toi32_i32$4 + 7312 | 0) >> 2] = i64toi32_i32$2;
   HEAP32[(i64toi32_i32$4 + 7316 | 0) >> 2] = i64toi32_i32$1;
   $4 = 1;
   $8 = HEAP32[($5 + 7320 | 0) >> 2] | 0;
   $2 = (HEAP32[($5 + 7056 | 0) >> 2] | 0) + 1 | 0;
   HEAP32[($5 + 7320 | 0) >> 2] = $8 >>> 0 > $2 >>> 0 ? $8 : $2;
   FLAC__bitwriter_release_buffer(HEAP32[($5 + 6856 | 0) >> 2] | 0 | 0);
   FLAC__bitwriter_clear(HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 6856 | 0) >> 2] | 0 | 0);
   if (!$1) {
    break label$1
   }
   $1 = (HEAP32[($0 + 4 | 0) >> 2] | 0) + 6896 | 0;
   $236 = $1;
   $5 = HEAP32[$3 >> 2] | 0;
   $1 = HEAP32[$1 >> 2] | 0;
   HEAP32[$236 >> 2] = $5 >>> 0 < $1 >>> 0 ? $5 : $1;
   $0 = (HEAP32[($0 + 4 | 0) >> 2] | 0) + 6900 | 0;
   $250 = $0;
   $0 = HEAP32[$0 >> 2] | 0;
   HEAP32[$250 >> 2] = $5 >>> 0 > $0 >>> 0 ? $5 : $0;
  }
  __stack_pointer = $3 + 16 | 0;
  return $4 | 0;
 }
 
 function FLAC__stream_encoder_init_ogg_stream($0, $1, $2, $3, $4, $5, $6) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  return init_stream_internal__1($0 | 0, $1 | 0, $2 | 0, $3 | 0, $4 | 0, $5 | 0, $6 | 0, 1 | 0) | 0 | 0;
 }
 
 function process_subframe_($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  $7 = $7 | 0;
  $8 = $8 | 0;
  $9 = $9 | 0;
  $10 = $10 | 0;
  var $12 = 0, $13 = 0, $18 = 0, $16 = 0, $11 = 0, $21 = 0, $33 = 0, $19 = 0, $17 = 0, $15 = 0, $20 = 0, $22 = 0, $25 = 0, $30 = 0, $35 = 0.0, $14 = 0, $32 = 0, $34 = 0, $23 = 0, $47 = 0, $26 = 0, $44 = 0, $49 = 0, $24 = 0, $27 = 0, $29 = 0, $31 = Math_fround(0), i64toi32_i32$0 = 0, $50 = 0.0, $53 = 0, $36 = 0, $28 = Math_fround(0), $253 = 0, $399 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0.0, $45 = 0, $46 = 0, $48 = 0, $51 = 0, $52 = 0, $54 = 0, $55 = 0, $652 = 0;
  $11 = __stack_pointer - 576 | 0;
  __stack_pointer = $11;
  $12 = HEAP32[((HEAP32[$0 >> 2] | 0) + 28 | 0) >> 2] | 0;
  $13 = GOT_data_internal_FLAC__ENTROPY_CODING_METHOD_PARTITIONED_RICE_ESCAPE_PARAMETER;
  $14 = HEAP32[($12 >>> 0 > 16 >>> 0 ? GOT_data_internal_FLAC__ENTROPY_CODING_METHOD_PARTITIONED_RICE2_ESCAPE_PARAMETER : $13) >> 2] | 0;
  $13 = HEAP32[$3 >> 2] | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     if (!(HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 7256 | 0) >> 2] | 0)) {
      break label$3
     }
     $12 = -1;
     if ($13 >>> 0 > 3 >>> 0) {
      break label$2
     }
    }
    $12 = HEAP32[$6 >> 2] | 0;
    HEAP32[($12 + 4 | 0) >> 2] = $5;
    HEAP32[$12 >> 2] = 1;
    $12 = ((((HEAP32[GOT_data_internal_FLAC__SUBFRAME_ZERO_PAD_LEN >> 2] | 0) + Math_imul($13, $4) | 0) + (HEAP32[GOT_data_internal_FLAC__SUBFRAME_TYPE_LEN >> 2] | 0) | 0) + (HEAP32[GOT_data_internal_FLAC__SUBFRAME_WASTED_BITS_FLAG_LEN >> 2] | 0) | 0) + (HEAP32[($12 + 288 | 0) >> 2] | 0) | 0;
    $15 = 0;
    $13 = HEAP32[$3 >> 2] | 0;
    if ($13 >>> 0 < 4 >>> 0) {
     break label$1
    }
   }
   $13 = $13 + -4 | 0;
   $16 = FUNCTION_TABLE[HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + ((($4 + (Math_clz32($13 | 1 | 0) ^ 31 | 0) | 0) + 4 | 0) >>> 0 < 33 >>> 0 ? 7224 : 7228) | 0) >> 2] | 0 | 0]($5 + 16 | 0, $13, $11 + 416 | 0) | 0;
   label$4 : {
    label$5 : {
     label$6 : {
      label$7 : {
       $17 = HEAP32[($0 + 4 | 0) >> 2] | 0;
       if (HEAP32[($17 + 7248 | 0) >> 2] | 0) {
        break label$7
       }
       if (Math_fround(HEAPF32[($11 + 420 | 0) >> 2]) != Math_fround(0.0)) {
        break label$7
       }
       $13 = 1;
       $18 = HEAP32[$5 >> 2] | 0;
       $19 = HEAP32[$3 >> 2] | 0;
       if ($19 >>> 0 <= 1 >>> 0) {
        break label$6
       }
       label$8 : while (1) {
        if (($18 | 0) != (HEAP32[($5 + ($13 << 2 | 0) | 0) >> 2] | 0 | 0)) {
         break label$7
        }
        $13 = $13 + 1 | 0;
        if (($13 | 0) == ($19 | 0)) {
         break label$6
        }
        continue label$8;
       };
      }
      $13 = HEAP32[$0 >> 2] | 0;
      label$9 : {
       if (HEAP32[($17 + 7252 | 0) >> 2] | 0) {
        break label$9
       }
       $20 = $12;
       break label$5;
      }
      $15 = 0;
      label$10 : {
       if (!(HEAP32[($13 + 556 | 0) >> 2] | 0)) {
        break label$10
       }
       $20 = $12;
       break label$4;
      }
      $20 = -1;
      if (($12 | 0) == (-1 | 0)) {
       break label$5
      }
      $20 = $12;
      break label$4;
     }
     $13 = HEAP32[($6 + 4 | 0) >> 2] | 0;
     HEAP32[($13 + 4 | 0) >> 2] = $18;
     HEAP32[$13 >> 2] = 0;
     $13 = ((((HEAP32[GOT_data_internal_FLAC__SUBFRAME_ZERO_PAD_LEN >> 2] | 0) + $4 | 0) + (HEAP32[GOT_data_internal_FLAC__SUBFRAME_TYPE_LEN >> 2] | 0) | 0) + (HEAP32[GOT_data_internal_FLAC__SUBFRAME_WASTED_BITS_FLAG_LEN >> 2] | 0) | 0) + (HEAP32[($13 + 288 | 0) >> 2] | 0) | 0;
     $15 = $13 >>> 0 < $12 >>> 0;
     $12 = $15 ? $13 : $12;
     break label$1;
    }
    $12 = HEAP32[($13 + 568 | 0) >> 2] | 0;
    $18 = HEAP32[$3 >> 2] | 0;
    $15 = 0;
    $19 = GOT_data_internal_FLAC__SUBFRAME_WASTED_BITS_FLAG_LEN;
    $17 = GOT_data_internal_FLAC__SUBFRAME_TYPE_LEN;
    $21 = GOT_data_internal_FLAC__SUBFRAME_ZERO_PAD_LEN;
    $22 = $12 ? 0 : $16;
    $12 = $12 ? 4 : $16;
    $23 = $12 >>> 0 < $18 >>> 0 ? $12 : $18 + -1 | 0;
    if ($22 >>> 0 > $23 >>> 0) {
     break label$4
    }
    $24 = $14 + -1 | 0;
    $25 = HEAP32[$19 >> 2] | 0;
    $26 = HEAP32[$17 >> 2] | 0;
    $27 = HEAP32[$21 >> 2] | 0;
    $28 = Math_fround($4 >>> 0);
    $29 = $22 + -1 | 0;
    $30 = 0;
    $15 = 0;
    $21 = $22;
    label$11 : while (1) {
     label$12 : {
      $12 = $21 << 2 | 0;
      $31 = Math_fround(HEAPF32[(($11 + 416 | 0) + $12 | 0) >> 2]);
      if ($31 >= $28) {
       break label$12
      }
      $32 = !$15;
      $13 = $32 << 2 | 0;
      $18 = HEAP32[($7 + $13 | 0) >> 2] | 0;
      $33 = HEAP32[($6 + $13 | 0) >> 2] | 0;
      $16 = HEAP32[((HEAP32[$0 >> 2] | 0) + 572 | 0) >> 2] | 0;
      $19 = HEAP32[($0 + 4 | 0) >> 2] | 0;
      $17 = HEAP32[($19 + 6852 | 0) >> 2] | 0;
      $19 = HEAP32[($19 + 6848 | 0) >> 2] | 0;
      $253 = $5 + $12 | 0;
      $34 = (HEAP32[$3 >> 2] | 0) - $21 | 0;
      $12 = HEAP32[($8 + $13 | 0) >> 2] | 0;
      FLAC__fixed_compute_residual($253 | 0, $34 | 0, $21 | 0, $12 | 0);
      HEAP32[($33 + 36 | 0) >> 2] = $12;
      HEAP32[($33 + 12 | 0) >> 2] = $18;
      i64toi32_i32$0 = 0;
      HEAP32[$33 >> 2] = 2;
      HEAP32[($33 + 4 | 0) >> 2] = i64toi32_i32$0;
      $13 = $31 > Math_fround(0.0);
      label$13 : {
       label$14 : {
        $35 = +$31 + .5;
        if (!($35 < 4294967296.0 & $35 >= 0.0 | 0)) {
         break label$14
        }
        $18 = ~~$35 >>> 0;
        break label$13;
       }
       $18 = 0;
      }
      $13 = $13 ? $18 + 1 | 0 : 1;
      $34 = find_best_partition_order_(HEAP32[($0 + 4 | 0) >> 2] | 0 | 0, $12 | 0, $19 | 0, $17 | 0, $34 | 0, $21 | 0, ($13 >>> 0 < $14 >>> 0 ? $13 : $24) | 0, $14 | 0, $1 | 0, $2 | 0, $4 | 0, $16 | 0, $33 + 4 | 0 | 0) | 0;
      HEAP32[($33 + 16 | 0) >> 2] = $21;
      label$15 : {
       if (!$21) {
        break label$15
       }
       $13 = $33 + 20 | 0;
       $18 = $22 + $30 | 0;
       $16 = $18 & 3 | 0;
       $12 = 0;
       label$16 : {
        if (($29 + $30 | 0) >>> 0 < 3 >>> 0) {
         break label$16
        }
        $19 = $18 & -4 | 0;
        $12 = 0;
        label$17 : while (1) {
         $18 = $12 << 2 | 0;
         HEAP32[($13 + $18 | 0) >> 2] = HEAP32[($5 + $18 | 0) >> 2] | 0;
         $17 = $18 | 4 | 0;
         HEAP32[($13 + $17 | 0) >> 2] = HEAP32[($5 + $17 | 0) >> 2] | 0;
         $17 = $18 | 8 | 0;
         HEAP32[($13 + $17 | 0) >> 2] = HEAP32[($5 + $17 | 0) >> 2] | 0;
         $18 = $18 | 12 | 0;
         HEAP32[($13 + $18 | 0) >> 2] = HEAP32[($5 + $18 | 0) >> 2] | 0;
         $12 = $12 + 4 | 0;
         $19 = $19 + -4 | 0;
         if ($19) {
          continue label$17
         }
         break label$17;
        };
       }
       if (!$16) {
        break label$15
       }
       label$18 : while (1) {
        $18 = $12 << 2 | 0;
        HEAP32[($13 + $18 | 0) >> 2] = HEAP32[($5 + $18 | 0) >> 2] | 0;
        $12 = $12 + 1 | 0;
        $16 = $16 + -1 | 0;
        if ($16) {
         continue label$18
        }
        break label$18;
       };
      }
      $12 = (((($34 + Math_imul($21, $4) | 0) + $27 | 0) + $26 | 0) + $25 | 0) + (HEAP32[($33 + 288 | 0) >> 2] | 0) | 0;
      $399 = $12;
      $12 = $12 >>> 0 < $20 >>> 0;
      $20 = $12 ? $399 : $20;
      $15 = $12 ? $32 : $15;
     }
     $30 = $30 + 1 | 0;
     $21 = $21 + 1 | 0;
     if ($21 >>> 0 <= $23 >>> 0) {
      continue label$11
     }
     break label$11;
    };
    $13 = HEAP32[$0 >> 2] | 0;
   }
   label$19 : {
    $18 = HEAP32[($13 + 556 | 0) >> 2] | 0;
    if ($18) {
     break label$19
    }
    $12 = $20;
    break label$1;
   }
   $12 = HEAP32[$3 >> 2] | 0;
   $18 = $18 >>> 0 < $12 >>> 0 ? $18 : $12 + -1 | 0;
   HEAP32[($11 + 12 | 0) >> 2] = $18;
   label$20 : {
    if ($18) {
     break label$20
    }
    $12 = $20;
    break label$1;
   }
   $18 = GOT_data_internal_FLAC__SUBFRAME_LPC_QLP_SHIFT_LEN;
   $16 = GOT_data_internal_FLAC__SUBFRAME_LPC_QLP_COEFF_PRECISION_LEN;
   $19 = GOT_data_internal_FLAC__SUBFRAME_WASTED_BITS_FLAG_LEN;
   $17 = GOT_data_internal_FLAC__SUBFRAME_TYPE_LEN;
   $21 = GOT_data_internal_FLAC__SUBFRAME_ZERO_PAD_LEN;
   label$21 : {
    if (HEAP32[($13 + 40 | 0) >> 2] | 0) {
     break label$21
    }
    $12 = $20;
    break label$1;
   }
   $36 = 33 - $4 | 0;
   $37 = $14 + -1 | 0;
   $38 = HEAP32[$18 >> 2] | 0;
   $39 = HEAP32[$16 >> 2] | 0;
   $40 = HEAP32[$19 >> 2] | 0;
   $41 = HEAP32[$17 >> 2] | 0;
   $42 = HEAP32[$21 >> 2] | 0;
   $43 = +($4 >>> 0);
   $44 = 0;
   $27 = $4 >>> 0 < 18 >>> 0;
   $45 = $4 >>> 0 > 16 >>> 0;
   $46 = $4 >>> 0 > 17 >>> 0;
   label$22 : while (1) {
    $13 = HEAP32[($0 + 4 | 0) >> 2] | 0;
    FLAC__lpc_window_data($5 | 0, HEAP32[(($13 + ($44 << 2 | 0) | 0) + 84 | 0) >> 2] | 0 | 0, HEAP32[($13 + 212 | 0) >> 2] | 0 | 0, $12 | 0);
    $12 = HEAP32[($0 + 4 | 0) >> 2] | 0;
    FUNCTION_TABLE[HEAP32[($12 + 7232 | 0) >> 2] | 0 | 0](HEAP32[($12 + 212 | 0) >> 2] | 0, HEAP32[$3 >> 2] | 0, (HEAP32[($11 + 12 | 0) >> 2] | 0) + 1 | 0, $11 + 272 | 0);
    label$23 : {
     if (Math_fround(HEAPF32[($11 + 272 | 0) >> 2]) == Math_fround(0.0)) {
      break label$23
     }
     FLAC__lpc_compute_lp_coefficients($11 + 272 | 0 | 0, $11 + 12 | 0 | 0, (HEAP32[($0 + 4 | 0) >> 2] | 0) + 7628 | 0 | 0, $11 + 16 | 0 | 0);
     $47 = 1;
     $13 = HEAP32[($11 + 12 | 0) >> 2] | 0;
     label$24 : {
      $12 = HEAP32[$0 >> 2] | 0;
      if (HEAP32[($12 + 568 | 0) >> 2] | 0) {
       break label$24
      }
      $16 = HEAP32[$3 >> 2] | 0;
      $18 = 5;
      label$25 : {
       if (HEAP32[($12 + 564 | 0) >> 2] | 0) {
        break label$25
       }
       $18 = HEAP32[($12 + 560 | 0) >> 2] | 0;
      }
      $13 = FLAC__lpc_compute_best_order($11 + 16 | 0 | 0, $13 | 0, $16 | 0, $18 + $4 | 0 | 0) | 0;
      HEAP32[($11 + 12 | 0) >> 2] = $13;
      $47 = $13;
     }
     label$26 : {
      $12 = HEAP32[$3 >> 2] | 0;
      if ($13 >>> 0 < $12 >>> 0) {
       break label$26
      }
      $13 = $12 + -1 | 0;
      HEAP32[($11 + 12 | 0) >> 2] = $13;
     }
     if ($47 >>> 0 > $13 >>> 0) {
      break label$23
     }
     $48 = $47 + -1 | 0;
     $49 = 0;
     $33 = $47;
     label$27 : while (1) {
      label$28 : {
       $26 = $33 + -1 | 0;
       $35 = +FLAC__lpc_compute_expected_bits_per_residual_sample(+(+HEAPF64[(($11 + 16 | 0) + ($26 << 3 | 0) | 0) >> 3]), $12 - $33 | 0 | 0);
       if ($35 >= $43) {
        break label$28
       }
       label$29 : {
        label$30 : {
         $50 = $35 + .5;
         if (!($50 < 4294967296.0 & $50 >= 0.0 | 0)) {
          break label$30
         }
         $12 = ~~$50 >>> 0;
         break label$29;
        }
        $12 = 0;
       }
       label$31 : {
        label$32 : {
         $13 = HEAP32[$0 >> 2] | 0;
         if (!(HEAP32[($13 + 564 | 0) >> 2] | 0)) {
          break label$32
         }
         $25 = 15;
         $21 = 5;
         if ($46) {
          break label$31
         }
         $18 = 15;
         label$33 : {
          $16 = $36 + (Math_clz32($33) ^ -32 | 0) | 0;
          if ($16 >>> 0 > 14 >>> 0) {
           break label$33
          }
          $21 = 5;
          $18 = $16;
          $25 = 5;
          if ($18 >>> 0 < 6 >>> 0) {
           break label$31
          }
         }
         $21 = 5;
         $25 = $18;
         break label$31;
        }
        $21 = HEAP32[($13 + 560 | 0) >> 2] | 0;
        $25 = $21;
       }
       if ($21 >>> 0 > $25 >>> 0) {
        break label$28
       }
       $51 = $48 + $49 | 0;
       $12 = $35 > 0.0 ? $12 + 1 | 0 : 1;
       $52 = $12 >>> 0 < $14 >>> 0 ? $12 : $37;
       $53 = $5 + ($33 << 2 | 0) | 0;
       $12 = Math_clz32($33);
       $54 = $12 ^ 31 | 0;
       $30 = ($12 ^ -32 | 0) + $36 | 0;
       $12 = $47 + $49 | 0;
       $55 = $12 & -4 | 0;
       $29 = $12 & 3 | 0;
       label$34 : while (1) {
        $19 = HEAP32[$3 >> 2] | 0;
        $23 = !$15;
        $12 = $23 << 2 | 0;
        $17 = HEAP32[($7 + $12 | 0) >> 2] | 0;
        $16 = HEAP32[($6 + $12 | 0) >> 2] | 0;
        $18 = HEAP32[($8 + $12 | 0) >> 2] | 0;
        $32 = HEAP32[($13 + 572 | 0) >> 2] | 0;
        $13 = HEAP32[($0 + 4 | 0) >> 2] | 0;
        $34 = HEAP32[($13 + 6852 | 0) >> 2] | 0;
        $24 = HEAP32[($13 + 6848 | 0) >> 2] | 0;
        $12 = 0;
        label$35 : {
         $652 = ($13 + ($26 << 7 | 0) | 0) + 7628 | 0;
         $13 = $27 ? ($30 >>> 0 > $21 >>> 0 ? $21 : $30) : $21;
         if (FLAC__lpc_quantize_coefficients($652 | 0, $33 | 0, $13 | 0, $11 + 448 | 0 | 0, $11 + 444 | 0 | 0) | 0) {
          break label$35
         }
         $12 = $19 - $33 | 0;
         label$36 : {
          label$37 : {
           $22 = $13 + $4 | 0;
           if (($22 + $54 | 0) >>> 0 > 32 >>> 0) {
            break label$37
           }
           $19 = HEAP32[($0 + 4 | 0) >> 2] | 0;
           label$38 : {
            if ($45) {
             break label$38
            }
            if ($13 >>> 0 > 16 >>> 0) {
             break label$38
            }
            FUNCTION_TABLE[HEAP32[($19 + 7244 | 0) >> 2] | 0 | 0]($53, $12, $11 + 448 | 0, $33, HEAP32[($11 + 444 | 0) >> 2] | 0, $18);
            break label$36;
           }
           FUNCTION_TABLE[HEAP32[($19 + 7236 | 0) >> 2] | 0 | 0]($53, $12, $11 + 448 | 0, $33, HEAP32[($11 + 444 | 0) >> 2] | 0, $18);
           break label$36;
          }
          FUNCTION_TABLE[HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 7240 | 0) >> 2] | 0 | 0]($53, $12, $11 + 448 | 0, $33, HEAP32[($11 + 444 | 0) >> 2] | 0, $18);
         }
         i64toi32_i32$0 = 0;
         HEAP32[$16 >> 2] = 3;
         HEAP32[($16 + 4 | 0) >> 2] = i64toi32_i32$0;
         HEAP32[($16 + 284 | 0) >> 2] = $18;
         HEAP32[($16 + 12 | 0) >> 2] = $17;
         $32 = find_best_partition_order_(HEAP32[($0 + 4 | 0) >> 2] | 0 | 0, $18 | 0, $24 | 0, $34 | 0, $12 | 0, $33 | 0, $52 | 0, $14 | 0, $1 | 0, $2 | 0, $4 | 0, $32 | 0, $16 + 4 | 0 | 0) | 0;
         HEAP32[($16 + 20 | 0) >> 2] = $13;
         HEAP32[($16 + 16 | 0) >> 2] = $33;
         HEAP32[($16 + 24 | 0) >> 2] = HEAP32[($11 + 444 | 0) >> 2] | 0;
         __memcpy($16 + 28 | 0 | 0, $11 + 448 | 0 | 0, 128 | 0) | 0;
         label$39 : {
          if (!$33) {
           break label$39
          }
          $12 = 0;
          $19 = $55;
          label$40 : {
           if ($51 >>> 0 < 3 >>> 0) {
            break label$40
           }
           label$41 : while (1) {
            $18 = $16 + 156 | 0;
            $13 = $12 << 2 | 0;
            HEAP32[($18 + $13 | 0) >> 2] = HEAP32[($5 + $13 | 0) >> 2] | 0;
            $17 = $13 | 4 | 0;
            HEAP32[($18 + $17 | 0) >> 2] = HEAP32[($5 + $17 | 0) >> 2] | 0;
            $17 = $13 | 8 | 0;
            HEAP32[($18 + $17 | 0) >> 2] = HEAP32[($5 + $17 | 0) >> 2] | 0;
            $13 = $13 | 12 | 0;
            HEAP32[($18 + $13 | 0) >> 2] = HEAP32[($5 + $13 | 0) >> 2] | 0;
            $12 = $12 + 4 | 0;
            $19 = $19 + -4 | 0;
            if ($19) {
             continue label$41
            }
            break label$41;
           };
          }
          $13 = $29;
          if (!$13) {
           break label$39
          }
          label$42 : while (1) {
           $18 = $12 << 2 | 0;
           HEAP32[(($16 + $18 | 0) + 156 | 0) >> 2] = HEAP32[($5 + $18 | 0) >> 2] | 0;
           $12 = $12 + 1 | 0;
           $13 = $13 + -1 | 0;
           if ($13) {
            continue label$42
           }
           break label$42;
          };
         }
         $12 = (((((($32 + Math_imul($22, $33) | 0) + $42 | 0) + $41 | 0) + $40 | 0) + (HEAP32[($16 + 288 | 0) >> 2] | 0) | 0) + $39 | 0) + $38 | 0;
        }
        $13 = ($12 | 0) != (0 | 0) & $12 >>> 0 < $20 >>> 0 | 0;
        $15 = $13 ? $23 : $15;
        $20 = $13 ? $12 : $20;
        $21 = $21 + 1 | 0;
        if ($21 >>> 0 > $25 >>> 0) {
         break label$28
        }
        $13 = HEAP32[$0 >> 2] | 0;
        continue label$34;
       };
      }
      $33 = $33 + 1 | 0;
      if ($33 >>> 0 > (HEAP32[($11 + 12 | 0) >> 2] | 0) >>> 0) {
       break label$23
      }
      $49 = $49 + 1 | 0;
      $12 = HEAP32[$3 >> 2] | 0;
      continue label$27;
     };
    }
    label$43 : {
     $44 = $44 + 1 | 0;
     if ($44 >>> 0 < (HEAP32[((HEAP32[$0 >> 2] | 0) + 40 | 0) >> 2] | 0) >>> 0) {
      break label$43
     }
     $12 = $20;
     break label$1;
    }
    $12 = HEAP32[$3 >> 2] | 0;
    continue label$22;
   };
  }
  label$44 : {
   if (($12 | 0) != (-1 | 0)) {
    break label$44
   }
   $13 = HEAP32[$3 >> 2] | 0;
   $12 = HEAP32[($6 + ($15 << 2 | 0) | 0) >> 2] | 0;
   HEAP32[($12 + 4 | 0) >> 2] = $5;
   HEAP32[$12 >> 2] = 1;
   $12 = ((((HEAP32[GOT_data_internal_FLAC__SUBFRAME_ZERO_PAD_LEN >> 2] | 0) + Math_imul($13, $4) | 0) + (HEAP32[GOT_data_internal_FLAC__SUBFRAME_TYPE_LEN >> 2] | 0) | 0) + (HEAP32[GOT_data_internal_FLAC__SUBFRAME_WASTED_BITS_FLAG_LEN >> 2] | 0) | 0) + (HEAP32[($12 + 288 | 0) >> 2] | 0) | 0;
  }
  HEAP32[$9 >> 2] = $15;
  HEAP32[$10 >> 2] = $12;
  __stack_pointer = $11 + 576 | 0;
 }
 
 function add_subframe_($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = 0;
  $5 = 1;
  label$1 : {
   label$2 : {
    label$3 : {
     switch (HEAP32[$3 >> 2] | 0 | 0) {
     case 0:
      if (!(FLAC__subframe_add_constant($3 + 4 | 0 | 0, $2 | 0, HEAP32[($3 + 288 | 0) >> 2] | 0 | 0, $4 | 0) | 0)) {
       break label$2
      }
      break label$1;
     case 2:
      if (!(FLAC__subframe_add_fixed($3 + 4 | 0 | 0, $1 - (HEAP32[($3 + 16 | 0) >> 2] | 0) | 0 | 0, $2 | 0, HEAP32[($3 + 288 | 0) >> 2] | 0 | 0, $4 | 0) | 0)) {
       break label$2
      }
      break label$1;
     case 3:
      if (!(FLAC__subframe_add_lpc($3 + 4 | 0 | 0, $1 - (HEAP32[($3 + 16 | 0) >> 2] | 0) | 0 | 0, $2 | 0, HEAP32[($3 + 288 | 0) >> 2] | 0 | 0, $4 | 0) | 0)) {
       break label$2
      }
      break label$1;
     case 1:
      break label$3;
     default:
      break label$1;
     };
    }
    if (FLAC__subframe_add_verbatim($3 + 4 | 0 | 0, $1 | 0, $2 | 0, HEAP32[($3 + 288 | 0) >> 2] | 0 | 0, $4 | 0) | 0) {
     break label$1
    }
   }
   HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] = 7;
   $5 = 0;
  }
  return $5 | 0;
 }
 
 function FLAC__stream_encoder_set_ogg_serial_number($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = 0;
  label$1 : {
   $0 = HEAP32[$0 >> 2] | 0;
   if ((HEAP32[$0 >> 2] | 0 | 0) != (1 | 0)) {
    break label$1
   }
   FLAC__ogg_encoder_aspect_set_serial_number($0 + 632 | 0 | 0, $1 | 0);
   $2 = 1;
  }
  return $2 | 0;
 }
 
 function FLAC__stream_encoder_set_verify($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = 0;
  label$1 : {
   $0 = HEAP32[$0 >> 2] | 0;
   if ((HEAP32[$0 >> 2] | 0 | 0) != (1 | 0)) {
    break label$1
   }
   HEAP32[($0 + 4 | 0) >> 2] = $1;
   $2 = 1;
  }
  return $2 | 0;
 }
 
 function FLAC__stream_encoder_set_channels($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = 0;
  label$1 : {
   $0 = HEAP32[$0 >> 2] | 0;
   if ((HEAP32[$0 >> 2] | 0 | 0) != (1 | 0)) {
    break label$1
   }
   HEAP32[($0 + 24 | 0) >> 2] = $1;
   $2 = 1;
  }
  return $2 | 0;
 }
 
 function FLAC__stream_encoder_set_bits_per_sample($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = 0;
  label$1 : {
   $0 = HEAP32[$0 >> 2] | 0;
   if ((HEAP32[$0 >> 2] | 0 | 0) != (1 | 0)) {
    break label$1
   }
   HEAP32[($0 + 28 | 0) >> 2] = $1;
   $2 = 1;
  }
  return $2 | 0;
 }
 
 function FLAC__stream_encoder_set_sample_rate($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = 0;
  label$1 : {
   $0 = HEAP32[$0 >> 2] | 0;
   if ((HEAP32[$0 >> 2] | 0 | 0) != (1 | 0)) {
    break label$1
   }
   HEAP32[($0 + 32 | 0) >> 2] = $1;
   $2 = 1;
  }
  return $2 | 0;
 }
 
 function FLAC__stream_encoder_set_compression_level($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $3 = 0, $4 = 0, $21 = 0, $37 = 0, $46 = 0;
  $2 = 0;
  label$1 : {
   $3 = HEAP32[$0 >> 2] | 0;
   if ((HEAP32[$3 >> 2] | 0 | 0) != (1 | 0)) {
    break label$1
   }
   $4 = Math_imul($1 >>> 0 < 8 >>> 0 ? $1 : 8, 44);
   $2 = (GOT_data_internal___memory_base + 11168 | 0) + $4 | 0;
   i64toi32_i32$0 = HEAP32[$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($2 + 4 | 0) >> 2] | 0;
   $21 = i64toi32_i32$0;
   i64toi32_i32$0 = $3;
   HEAP32[(i64toi32_i32$0 + 16 | 0) >> 2] = $21;
   HEAP32[(i64toi32_i32$0 + 20 | 0) >> 2] = i64toi32_i32$1;
   $3 = FLAC__stream_encoder_set_apodization($0 | 0, HEAP32[($2 + 40 | 0) >> 2] | 0 | 0) | 0;
   $2 = 0;
   $1 = 0;
   label$2 : {
    $0 = HEAP32[$0 >> 2] | 0;
    if ((HEAP32[$0 >> 2] | 0 | 0) != (1 | 0)) {
     break label$2
    }
    $2 = (GOT_data_internal___memory_base + 11168 | 0) + $4 | 0;
    i64toi32_i32$1 = HEAP32[($2 + 28 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[($2 + 32 | 0) >> 2] | 0;
    $37 = i64toi32_i32$1;
    i64toi32_i32$1 = $0;
    HEAP32[($0 + 576 | 0) >> 2] = $37;
    HEAP32[($0 + 580 | 0) >> 2] = i64toi32_i32$0;
    HEAP32[($0 + 568 | 0) >> 2] = HEAP32[($2 + 24 | 0) >> 2] | 0;
    HEAP32[($0 + 564 | 0) >> 2] = HEAP32[($2 + 16 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[($2 + 8 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($2 + 12 | 0) >> 2] | 0;
    $46 = i64toi32_i32$0;
    i64toi32_i32$0 = $0;
    HEAP32[($0 + 556 | 0) >> 2] = $46;
    HEAP32[($0 + 560 | 0) >> 2] = i64toi32_i32$1;
    $1 = 1;
    $2 = $3 & 1 | 0;
   }
   $2 = $1 & $2 | 0;
  }
  return $2 | 0;
 }
 
 function FLAC__stream_encoder_set_blocksize($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = 0;
  label$1 : {
   $0 = HEAP32[$0 >> 2] | 0;
   if ((HEAP32[$0 >> 2] | 0 | 0) != (1 | 0)) {
    break label$1
   }
   HEAP32[($0 + 36 | 0) >> 2] = $1;
   $2 = 1;
  }
  return $2 | 0;
 }
 
 function FLAC__stream_encoder_set_total_samples_estimate($0, $1, $1$hi) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $1$hi = $1$hi | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, $2 = 0, $17 = 0, $3 = 0, $9 = 0, $10 = 0, $10$hi = 0, $12 = 0, $12$hi = 0, $15$hi = 0, $19 = 0;
  $2 = 0;
  label$1 : {
   $0 = HEAP32[$0 >> 2] | 0;
   if ((HEAP32[$0 >> 2] | 0 | 0) != (1 | 0)) {
    break label$1
   }
   $9 = $0;
   i64toi32_i32$0 = $1$hi;
   $10 = $1;
   $10$hi = i64toi32_i32$0;
   i64toi32_i32$2 = GOT_data_internal_FLAC__STREAM_METADATA_STREAMINFO_TOTAL_SAMPLES_LEN;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = 0;
   $12 = i64toi32_i32$0;
   $12$hi = i64toi32_i32$1;
   i64toi32_i32$1 = -1;
   i64toi32_i32$2 = -1;
   i64toi32_i32$0 = $12$hi;
   i64toi32_i32$3 = $12;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
    $17 = 0;
   } else {
    i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
    $17 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   }
   i64toi32_i32$1 = $17;
   i64toi32_i32$2 = -1;
   i64toi32_i32$3 = -1;
   i64toi32_i32$2 = i64toi32_i32$0 ^ i64toi32_i32$2 | 0;
   $3 = i64toi32_i32$1 ^ i64toi32_i32$3 | 0;
   $15$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$2 = $15$hi;
   i64toi32_i32$0 = $3;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$3 = $1;
   i64toi32_i32$4 = i64toi32_i32$2 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$0 >>> 0 > i64toi32_i32$3 >>> 0 | 0) | 0;
   i64toi32_i32$0 = $10$hi;
   i64toi32_i32$1 = i64toi32_i32$4 ? $10 : $3;
   i64toi32_i32$3 = i64toi32_i32$4 ? i64toi32_i32$0 : i64toi32_i32$2;
   $19 = i64toi32_i32$1;
   i64toi32_i32$1 = $9;
   HEAP32[(i64toi32_i32$1 + 592 | 0) >> 2] = $19;
   HEAP32[(i64toi32_i32$1 + 596 | 0) >> 2] = i64toi32_i32$3;
   $2 = 1;
  }
  return $2 | 0;
 }
 
 function FLAC__stream_encoder_set_metadata($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $4 = 0, $3 = 0;
  $3 = 0;
  label$1 : {
   $4 = HEAP32[$0 >> 2] | 0;
   if ((HEAP32[$4 >> 2] | 0 | 0) != (1 | 0)) {
    break label$1
   }
   $3 = $1 ? $2 : 0;
   label$2 : {
    $2 = HEAP32[($4 + 600 | 0) >> 2] | 0;
    if (!$2) {
     break label$2
    }
    dlfree($2 | 0);
    $4 = HEAP32[$0 >> 2] | 0;
    HEAP32[($4 + 600 | 0) >> 2] = 0;
    HEAP32[($4 + 604 | 0) >> 2] = 0;
   }
   label$3 : {
    if (!$3) {
     break label$3
    }
    label$4 : {
     $4 = safe_malloc_mul_2op_p(4 | 0, $3 | 0) | 0;
     if ($4) {
      break label$4
     }
     return 0 | 0;
    }
    $1 = __memcpy($4 | 0, $1 | 0, $3 << 2 | 0 | 0) | 0;
    $4 = HEAP32[$0 >> 2] | 0;
    HEAP32[($4 + 604 | 0) >> 2] = $3;
    HEAP32[($4 + 600 | 0) >> 2] = $1;
   }
   $3 = (FLAC__ogg_encoder_aspect_set_num_metadata($4 + 632 | 0 | 0, $3 | 0) | 0 | 0) != (0 | 0);
  }
  return $3 | 0;
 }
 
 function FLAC__stream_encoder_get_state($0) {
  $0 = $0 | 0;
  return HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] | 0 | 0;
 }
 
 function FLAC__stream_encoder_get_verify_decoder_state($0) {
  $0 = $0 | 0;
  label$1 : {
   if (HEAP32[((HEAP32[$0 >> 2] | 0) + 4 | 0) >> 2] | 0) {
    break label$1
   }
   return 9 | 0;
  }
  return FLAC__stream_decoder_get_state(HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 11752 | 0) >> 2] | 0 | 0) | 0 | 0;
 }
 
 function FLAC__stream_encoder_get_verify($0) {
  $0 = $0 | 0;
  return HEAP32[((HEAP32[$0 >> 2] | 0) + 4 | 0) >> 2] | 0 | 0;
 }
 
 function FLAC__stream_encoder_process($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $14 = 0, $12 = 0, $15 = 0, $19 = 0, $20 = 0, $13 = 0, $17 = 0, $18 = 0, $4 = 0, $3 = 0, $10 = 0, $16 = 0, $9 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $11 = 0, $21 = 0, $22 = 0;
  $3 = HEAP32[$0 >> 2] | 0;
  $4 = HEAP32[($3 + 24 | 0) >> 2] | 0;
  $5 = $4 & -4 | 0;
  $6 = $4 & 3 | 0;
  $7 = $4 & -2 | 0;
  $8 = $4 & 1 | 0;
  $9 = $4 + -1 | 0;
  $10 = HEAP32[($3 + 36 | 0) >> 2] | 0;
  $11 = $10 + 1 | 0;
  $12 = HEAP32[($0 + 4 | 0) >> 2] | 0;
  $13 = 0;
  label$1 : {
   label$2 : while (1) {
    $14 = $11 - (HEAP32[($12 + 7052 | 0) >> 2] | 0) | 0;
    $15 = $2 - $13 | 0;
    $16 = $14 >>> 0 < $15 >>> 0 ? $14 : $15;
    label$3 : {
     label$4 : {
      if (HEAP32[($3 + 4 | 0) >> 2] | 0) {
       break label$4
      }
      $14 = $16 << 2 | 0;
      break label$3;
     }
     $14 = $16 << 2 | 0;
     label$5 : {
      if (!$4) {
       break label$5
      }
      $15 = 0;
      $17 = $7;
      label$6 : {
       if (!$9) {
        break label$6
       }
       label$7 : while (1) {
        $18 = $12 + 11764 | 0;
        $19 = $15 << 2 | 0;
        $20 = $13 << 2 | 0;
        __memcpy((HEAP32[($18 + $19 | 0) >> 2] | 0) + ((HEAP32[($12 + 11800 | 0) >> 2] | 0) << 2 | 0) | 0 | 0, (HEAP32[($1 + $19 | 0) >> 2] | 0) + $20 | 0 | 0, $14 | 0) | 0;
        $19 = $19 | 4 | 0;
        __memcpy((HEAP32[($18 + $19 | 0) >> 2] | 0) + ((HEAP32[($12 + 11800 | 0) >> 2] | 0) << 2 | 0) | 0 | 0, (HEAP32[($1 + $19 | 0) >> 2] | 0) + $20 | 0 | 0, $14 | 0) | 0;
        $15 = $15 + 2 | 0;
        $17 = $17 + -2 | 0;
        if ($17) {
         continue label$7
        }
        break label$7;
       };
      }
      if (!$8) {
       break label$5
      }
      $15 = $15 << 2 | 0;
      __memcpy((HEAP32[(($12 + $15 | 0) + 11764 | 0) >> 2] | 0) + ((HEAP32[($12 + 11800 | 0) >> 2] | 0) << 2 | 0) | 0 | 0, (HEAP32[($1 + $15 | 0) >> 2] | 0) + ($13 << 2 | 0) | 0 | 0, $14 | 0) | 0;
     }
     HEAP32[($12 + 11800 | 0) >> 2] = (HEAP32[($12 + 11800 | 0) >> 2] | 0) + $16 | 0;
    }
    $18 = 0;
    $12 = 0;
    label$8 : {
     if (!$4) {
      break label$8
     }
     label$9 : while (1) {
      $15 = $12 << 2 | 0;
      $19 = HEAP32[($1 + $15 | 0) >> 2] | 0;
      if (!$19) {
       break label$1
      }
      $17 = HEAP32[($0 + 4 | 0) >> 2] | 0;
      __memcpy((HEAP32[(($17 + $15 | 0) + 4 | 0) >> 2] | 0) + ((HEAP32[($17 + 7052 | 0) >> 2] | 0) << 2 | 0) | 0 | 0, $19 + ($13 << 2 | 0) | 0 | 0, $14 | 0) | 0;
      $12 = $12 + 1 | 0;
      if (($12 | 0) != ($4 | 0)) {
       continue label$9
      }
      break label$9;
     };
    }
    label$10 : {
     label$11 : {
      $3 = HEAP32[$0 >> 2] | 0;
      if (!(HEAP32[($3 + 16 | 0) >> 2] | 0)) {
       break label$11
      }
      $12 = HEAP32[($0 + 4 | 0) >> 2] | 0;
      $14 = HEAP32[($12 + 7052 | 0) >> 2] | 0;
      if ($14 >>> 0 > $10 >>> 0) {
       break label$10
      }
      if ($13 >>> 0 >= $2 >>> 0) {
       break label$10
      }
      $18 = HEAP32[($12 + 40 | 0) >> 2] | 0;
      $20 = HEAP32[($12 + 36 | 0) >> 2] | 0;
      $21 = HEAP32[($1 + 4 | 0) >> 2] | 0;
      $22 = HEAP32[$1 >> 2] | 0;
      label$12 : while (1) {
       $15 = $14 << 2 | 0;
       $19 = $13 << 2 | 0;
       $17 = $22 + $19 | 0;
       $19 = $21 + $19 | 0;
       HEAP32[($18 + $15 | 0) >> 2] = (HEAP32[$17 >> 2] | 0) - (HEAP32[$19 >> 2] | 0) | 0;
       HEAP32[($20 + $15 | 0) >> 2] = ((HEAP32[$19 >> 2] | 0) + (HEAP32[$17 >> 2] | 0) | 0) >> 1 | 0;
       $13 = $13 + 1 | 0;
       $14 = $14 + 1 | 0;
       if ($14 >>> 0 > $10 >>> 0) {
        break label$10
       }
       if ($13 >>> 0 < $2 >>> 0) {
        continue label$12
       }
       break label$10;
      };
     }
     $13 = $16 + $13 | 0;
     $12 = HEAP32[($0 + 4 | 0) >> 2] | 0;
    }
    $14 = (HEAP32[($12 + 7052 | 0) >> 2] | 0) + $16 | 0;
    HEAP32[($12 + 7052 | 0) >> 2] = $14;
    label$13 : {
     if ($14 >>> 0 <= $10 >>> 0) {
      break label$13
     }
     $18 = 0;
     if (!(process_frame_($0 | 0, 0 | 0, 0 | 0) | 0)) {
      break label$1
     }
     label$14 : {
      if (!$4) {
       break label$14
      }
      $17 = HEAP32[($0 + 4 | 0) >> 2] | 0;
      $12 = 0;
      $18 = $5;
      label$15 : {
       if ($9 >>> 0 < 3 >>> 0) {
        break label$15
       }
       label$16 : while (1) {
        $14 = $17 + 4 | 0;
        $15 = $12 << 2 | 0;
        $20 = HEAP32[($14 + $15 | 0) >> 2] | 0;
        $19 = $10 << 2 | 0;
        HEAP32[$20 >> 2] = HEAP32[($20 + $19 | 0) >> 2] | 0;
        $20 = HEAP32[($14 + ($15 | 4 | 0) | 0) >> 2] | 0;
        HEAP32[$20 >> 2] = HEAP32[($20 + $19 | 0) >> 2] | 0;
        $20 = HEAP32[($14 + ($15 | 8 | 0) | 0) >> 2] | 0;
        HEAP32[$20 >> 2] = HEAP32[($20 + $19 | 0) >> 2] | 0;
        $14 = HEAP32[($14 + ($15 | 12 | 0) | 0) >> 2] | 0;
        HEAP32[$14 >> 2] = HEAP32[($14 + $19 | 0) >> 2] | 0;
        $12 = $12 + 4 | 0;
        $18 = $18 + -4 | 0;
        if ($18) {
         continue label$16
        }
        break label$16;
       };
      }
      $14 = $6;
      if (!$14) {
       break label$14
      }
      label$17 : while (1) {
       $15 = HEAP32[(($17 + ($12 << 2 | 0) | 0) + 4 | 0) >> 2] | 0;
       HEAP32[$15 >> 2] = HEAP32[($15 + ($10 << 2 | 0) | 0) >> 2] | 0;
       $12 = $12 + 1 | 0;
       $14 = $14 + -1 | 0;
       if ($14) {
        continue label$17
       }
       break label$17;
      };
     }
     $12 = HEAP32[($0 + 4 | 0) >> 2] | 0;
     label$18 : {
      $3 = HEAP32[$0 >> 2] | 0;
      if (!(HEAP32[($3 + 16 | 0) >> 2] | 0)) {
       break label$18
      }
      $14 = HEAP32[($12 + 36 | 0) >> 2] | 0;
      $15 = $10 << 2 | 0;
      HEAP32[$14 >> 2] = HEAP32[($14 + $15 | 0) >> 2] | 0;
      $14 = HEAP32[($12 + 40 | 0) >> 2] | 0;
      HEAP32[$14 >> 2] = HEAP32[($14 + $15 | 0) >> 2] | 0;
     }
     HEAP32[($12 + 7052 | 0) >> 2] = 1;
    }
    if ($13 >>> 0 < $2 >>> 0) {
     continue label$2
    }
    break label$2;
   };
   $18 = 1;
  }
  return $18 | 0;
 }
 
 function FLAC__stream_encoder_process_interleaved($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $8 = 0, $15 = 0, $13 = 0, $11 = 0, $9 = 0, $10 = 0, $7 = 0, $12 = 0, $16 = 0, $4 = 0, $14 = 0, $6 = 0, $21 = 0, $22 = 0, $23 = 0, $5 = 0, $19 = 0, $20 = 0, $17 = 0, $18 = 0;
  $3 = HEAP32[$0 >> 2] | 0;
  $4 = HEAP32[($3 + 36 | 0) >> 2] | 0;
  $5 = $4 + 1 | 0;
  $6 = HEAP32[($3 + 24 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     if (!(HEAP32[($3 + 16 | 0) >> 2] | 0)) {
      break label$3
     }
     if (($6 | 0) != (2 | 0)) {
      break label$3
     }
     $7 = 0;
     $8 = 0;
     label$4 : while (1) {
      $9 = HEAP32[($0 + 4 | 0) >> 2] | 0;
      label$5 : {
       if (!(HEAP32[($3 + 4 | 0) >> 2] | 0)) {
        break label$5
       }
       $10 = HEAP32[($9 + 11800 | 0) >> 2] | 0;
       label$6 : {
        $3 = $5 - (HEAP32[($9 + 7052 | 0) >> 2] | 0) | 0;
        $11 = $2 - $8 | 0;
        $12 = $3 >>> 0 < $11 >>> 0 ? $3 : $11;
        if (!$12) {
         break label$6
        }
        $3 = $8 << 1 | 0;
        $13 = HEAP32[($9 + 11768 | 0) >> 2] | 0;
        $14 = HEAP32[($9 + 11764 | 0) >> 2] | 0;
        $11 = 0;
        label$7 : while (1) {
         $15 = $10 << 2 | 0;
         $16 = $3 << 2 | 0;
         HEAP32[($14 + $15 | 0) >> 2] = HEAP32[($1 + $16 | 0) >> 2] | 0;
         HEAP32[($13 + $15 | 0) >> 2] = HEAP32[($1 + ($16 | 4 | 0) | 0) >> 2] | 0;
         $10 = $10 + 1 | 0;
         $3 = $3 + 2 | 0;
         $11 = $11 + 1 | 0;
         if (($11 | 0) != ($12 | 0)) {
          continue label$7
         }
         break label$7;
        };
       }
       HEAP32[($9 + 11800 | 0) >> 2] = $10;
      }
      $10 = $8 >>> 0 < $2 >>> 0;
      label$8 : {
       $3 = HEAP32[($9 + 7052 | 0) >> 2] | 0;
       if ($3 >>> 0 > $4 >>> 0) {
        break label$8
       }
       if ($8 >>> 0 >= $2 >>> 0) {
        break label$8
       }
       $16 = HEAP32[($9 + 40 | 0) >> 2] | 0;
       $12 = HEAP32[($9 + 8 | 0) >> 2] | 0;
       $13 = HEAP32[($9 + 36 | 0) >> 2] | 0;
       $14 = HEAP32[($9 + 4 | 0) >> 2] | 0;
       label$9 : while (1) {
        $10 = $3 << 2 | 0;
        $15 = $1 + ($7 << 2 | 0) | 0;
        $11 = HEAP32[$15 >> 2] | 0;
        HEAP32[($14 + $10 | 0) >> 2] = $11;
        $15 = HEAP32[($15 + 4 | 0) >> 2] | 0;
        HEAP32[($12 + $10 | 0) >> 2] = $15;
        HEAP32[($16 + $10 | 0) >> 2] = $11 - $15 | 0;
        HEAP32[($13 + $10 | 0) >> 2] = ($15 + $11 | 0) >> 1 | 0;
        $7 = $7 + 2 | 0;
        $8 = $8 + 1 | 0;
        $10 = $8 >>> 0 < $2 >>> 0;
        $3 = $3 + 1 | 0;
        if ($3 >>> 0 > $4 >>> 0) {
         break label$8
        }
        if ($8 >>> 0 < $2 >>> 0) {
         continue label$9
        }
        break label$9;
       };
      }
      HEAP32[($9 + 7052 | 0) >> 2] = $3;
      label$10 : {
       if ($3 >>> 0 <= $4 >>> 0) {
        break label$10
       }
       $3 = 0;
       if (!(process_frame_($0 | 0, 0 | 0, 0 | 0) | 0)) {
        break label$1
       }
       $3 = HEAP32[($0 + 4 | 0) >> 2] | 0;
       $15 = HEAP32[($3 + 4 | 0) >> 2] | 0;
       $11 = $4 << 2 | 0;
       HEAP32[$15 >> 2] = HEAP32[($15 + $11 | 0) >> 2] | 0;
       $15 = HEAP32[($3 + 8 | 0) >> 2] | 0;
       HEAP32[$15 >> 2] = HEAP32[($15 + $11 | 0) >> 2] | 0;
       $15 = HEAP32[($3 + 36 | 0) >> 2] | 0;
       HEAP32[$15 >> 2] = HEAP32[($15 + $11 | 0) >> 2] | 0;
       $15 = HEAP32[($3 + 40 | 0) >> 2] | 0;
       HEAP32[$15 >> 2] = HEAP32[($15 + $11 | 0) >> 2] | 0;
       HEAP32[($3 + 7052 | 0) >> 2] = 1;
      }
      if (!$10) {
       break label$2
      }
      $3 = HEAP32[$0 >> 2] | 0;
      continue label$4;
     };
    }
    $17 = $6 & -4 | 0;
    $18 = $6 & 3 | 0;
    $19 = $6 & -2 | 0;
    $20 = $6 & 1 | 0;
    $21 = $6 + -1 | 0;
    $10 = 0;
    $9 = 0;
    label$11 : while (1) {
     $12 = HEAP32[($0 + 4 | 0) >> 2] | 0;
     label$12 : {
      if (!(HEAP32[($3 + 4 | 0) >> 2] | 0)) {
       break label$12
      }
      $14 = HEAP32[($12 + 11800 | 0) >> 2] | 0;
      label$13 : {
       $3 = $5 - (HEAP32[($12 + 7052 | 0) >> 2] | 0) | 0;
       $8 = $2 - $9 | 0;
       $22 = $3 >>> 0 < $8 >>> 0 ? $3 : $8;
       if (!$22) {
        break label$13
       }
       label$14 : {
        if (!$6) {
         break label$14
        }
        $3 = Math_imul($9, $6);
        $23 = 0;
        label$15 : while (1) {
         $8 = 0;
         $7 = $19;
         label$16 : {
          if (!$21) {
           break label$16
          }
          label$17 : while (1) {
           $11 = $12 + 11764 | 0;
           $15 = $8 << 2 | 0;
           $16 = $14 << 2 | 0;
           $13 = $1 + ($3 << 2 | 0) | 0;
           HEAP32[((HEAP32[($11 + $15 | 0) >> 2] | 0) + $16 | 0) >> 2] = HEAP32[$13 >> 2] | 0;
           HEAP32[((HEAP32[($11 + ($15 | 4 | 0) | 0) >> 2] | 0) + $16 | 0) >> 2] = HEAP32[($13 + 4 | 0) >> 2] | 0;
           $8 = $8 + 2 | 0;
           $3 = $3 + 2 | 0;
           $7 = $7 + -2 | 0;
           if ($7) {
            continue label$17
           }
           break label$17;
          };
         }
         label$18 : {
          if (!$20) {
           break label$18
          }
          HEAP32[((HEAP32[(($12 + ($8 << 2 | 0) | 0) + 11764 | 0) >> 2] | 0) + ($14 << 2 | 0) | 0) >> 2] = HEAP32[($1 + ($3 << 2 | 0) | 0) >> 2] | 0;
          $3 = $3 + 1 | 0;
         }
         $14 = $14 + 1 | 0;
         $23 = $23 + 1 | 0;
         if (($23 | 0) != ($22 | 0)) {
          continue label$15
         }
         break label$13;
        };
       }
       $14 = $22 + $14 | 0;
      }
      HEAP32[($12 + 11800 | 0) >> 2] = $14;
     }
     $15 = $9 >>> 0 < $2 >>> 0;
     label$19 : {
      $13 = HEAP32[($12 + 7052 | 0) >> 2] | 0;
      if ($13 >>> 0 > $4 >>> 0) {
       break label$19
      }
      if ($9 >>> 0 >= $2 >>> 0) {
       break label$19
      }
      label$20 : {
       if (!$6) {
        break label$20
       }
       label$21 : while (1) {
        $3 = 0;
        $8 = $19;
        label$22 : {
         if (!$21) {
          break label$22
         }
         label$23 : while (1) {
          $7 = $12 + 4 | 0;
          $11 = $3 << 2 | 0;
          $15 = $13 << 2 | 0;
          $16 = $1 + ($10 << 2 | 0) | 0;
          HEAP32[((HEAP32[($7 + $11 | 0) >> 2] | 0) + $15 | 0) >> 2] = HEAP32[$16 >> 2] | 0;
          HEAP32[((HEAP32[($7 + ($11 | 4 | 0) | 0) >> 2] | 0) + $15 | 0) >> 2] = HEAP32[($16 + 4 | 0) >> 2] | 0;
          $3 = $3 + 2 | 0;
          $10 = $10 + 2 | 0;
          $8 = $8 + -2 | 0;
          if ($8) {
           continue label$23
          }
          break label$23;
         };
        }
        label$24 : {
         if (!$20) {
          break label$24
         }
         HEAP32[((HEAP32[(($12 + ($3 << 2 | 0) | 0) + 4 | 0) >> 2] | 0) + ($13 << 2 | 0) | 0) >> 2] = HEAP32[($1 + ($10 << 2 | 0) | 0) >> 2] | 0;
         $10 = $10 + 1 | 0;
        }
        $9 = $9 + 1 | 0;
        $15 = $9 >>> 0 < $2 >>> 0;
        $13 = $13 + 1 | 0;
        if ($13 >>> 0 > $4 >>> 0) {
         break label$19
        }
        if ($9 >>> 0 < $2 >>> 0) {
         continue label$21
        }
        break label$19;
       };
      }
      label$25 : while (1) {
       $9 = $9 + 1 | 0;
       $15 = $9 >>> 0 < $2 >>> 0;
       $13 = $13 + 1 | 0;
       if ($13 >>> 0 > $4 >>> 0) {
        break label$19
       }
       if ($9 >>> 0 < $2 >>> 0) {
        continue label$25
       }
       break label$25;
      };
     }
     HEAP32[($12 + 7052 | 0) >> 2] = $13;
     label$26 : {
      if ($13 >>> 0 <= $4 >>> 0) {
       break label$26
      }
      $3 = 0;
      if (!(process_frame_($0 | 0, 0 | 0, 0 | 0) | 0)) {
       break label$1
      }
      $16 = HEAP32[($0 + 4 | 0) >> 2] | 0;
      label$27 : {
       if (!$6) {
        break label$27
       }
       $3 = 0;
       $12 = $17;
       label$28 : {
        if ($21 >>> 0 < 3 >>> 0) {
         break label$28
        }
        label$29 : while (1) {
         $8 = $16 + 4 | 0;
         $7 = $3 << 2 | 0;
         $13 = HEAP32[($8 + $7 | 0) >> 2] | 0;
         $11 = $4 << 2 | 0;
         HEAP32[$13 >> 2] = HEAP32[($13 + $11 | 0) >> 2] | 0;
         $13 = HEAP32[($8 + ($7 | 4 | 0) | 0) >> 2] | 0;
         HEAP32[$13 >> 2] = HEAP32[($13 + $11 | 0) >> 2] | 0;
         $13 = HEAP32[($8 + ($7 | 8 | 0) | 0) >> 2] | 0;
         HEAP32[$13 >> 2] = HEAP32[($13 + $11 | 0) >> 2] | 0;
         $8 = HEAP32[($8 + ($7 | 12 | 0) | 0) >> 2] | 0;
         HEAP32[$8 >> 2] = HEAP32[($8 + $11 | 0) >> 2] | 0;
         $3 = $3 + 4 | 0;
         $12 = $12 + -4 | 0;
         if ($12) {
          continue label$29
         }
         break label$29;
        };
       }
       $8 = $18;
       if (!$8) {
        break label$27
       }
       label$30 : while (1) {
        $7 = HEAP32[(($16 + ($3 << 2 | 0) | 0) + 4 | 0) >> 2] | 0;
        HEAP32[$7 >> 2] = HEAP32[($7 + ($4 << 2 | 0) | 0) >> 2] | 0;
        $3 = $3 + 1 | 0;
        $8 = $8 + -1 | 0;
        if ($8) {
         continue label$30
        }
        break label$30;
       };
      }
      HEAP32[($16 + 7052 | 0) >> 2] = 1;
     }
     if (!$15) {
      break label$2
     }
     $3 = HEAP32[$0 >> 2] | 0;
     continue label$11;
    };
   }
   $3 = 1;
  }
  return $3 | 0;
 }
 
 function find_best_partition_order_($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  $7 = $7 | 0;
  $8 = $8 | 0;
  $9 = $9 | 0;
  $10 = $10 | 0;
  $11 = $11 | 0;
  $12 = $12 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $20 = 0, $22 = 0, $14 = 0, $21 = 0, $36$hi = 0, $24 = 0, $23 = 0, $18 = 0, $36 = 0, $37 = 0, $37$hi = 0, $30 = 0, $38 = 0, $38$hi = 0, $16 = 0, $17 = 0, $19 = 0, $32 = 0, $15 = 0, $31 = 0, $29 = 0, $13 = 0, $26 = 0, $27 = 0, $28$hi = 0, $33 = 0, $34 = 0, $35 = 0, $62 = 0, $63 = 0, $39$hi = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $100 = 0, $107 = 0, $25 = 0, $28 = 0, $305$hi = 0, $39 = 0, $347 = 0, $354 = 0, $363 = 0, $367$hi = 0, $385 = 0, $390 = 0, $422 = 0, $423 = 0, $444 = 0;
  $13 = $5 + $4 | 0;
  $14 = FLAC__format_get_max_rice_partition_order_from_blocksize_limited_max_and_predictor_order($9 | 0, $13 | 0, $5 | 0) | 0;
  $15 = $14 >>> 0 > $8 >>> 0 ? $8 : $14;
  FUNCTION_TABLE[HEAP32[($0 + 7220 | 0) >> 2] | 0 | 0]($1, $2, $4, $5, $15, $14, $10);
  label$1 : {
   if (!$11) {
    break label$1
   }
   $10 = 0;
   $8 = 0;
   label$2 : {
    if (($14 | 0) < (0 | 0)) {
     break label$2
    }
    $16 = $13 >>> $14 | 0;
    $8 = 1 << $14 | 0;
    $17 = 0;
    $18 = 0;
    label$3 : while (1) {
     label$4 : {
      label$5 : {
       $19 = $18 ? 0 : $5;
       $20 = $16 - $19 | 0;
       if (!$20) {
        break label$5
       }
       $21 = $20 & 3 | 0;
       $22 = 0;
       $9 = $17;
       label$6 : {
        if (($16 + ($19 ^ -1 | 0) | 0) >>> 0 < 3 >>> 0) {
         break label$6
        }
        $23 = $20 & -4 | 0;
        $22 = 0;
        $9 = $17;
        label$7 : while (1) {
         $20 = $1 + ($9 << 2 | 0) | 0;
         $24 = HEAP32[($20 + 12 | 0) >> 2] | 0;
         $100 = ($24 >> 31 | 0) ^ $24 | 0;
         $24 = HEAP32[($20 + 8 | 0) >> 2] | 0;
         $107 = ($24 >> 31 | 0) ^ $24 | 0;
         $24 = HEAP32[($20 + 4 | 0) >> 2] | 0;
         $20 = HEAP32[$20 >> 2] | 0;
         $22 = $100 | ($107 | (($24 >> 31 | 0) ^ $24 | 0 | (($20 >> 31 | 0) ^ $20 | 0 | $22 | 0) | 0) | 0) | 0;
         $9 = $9 + 4 | 0;
         $23 = $23 + -4 | 0;
         if ($23) {
          continue label$7
         }
         break label$7;
        };
       }
       label$8 : {
        if (!$21) {
         break label$8
        }
        label$9 : while (1) {
         $20 = HEAP32[($1 + ($9 << 2 | 0) | 0) >> 2] | 0;
         $22 = ($20 >> 31 | 0) ^ $20 | 0 | $22 | 0;
         $9 = $9 + 1 | 0;
         $21 = $21 + -1 | 0;
         if ($21) {
          continue label$9
         }
         break label$9;
        };
       }
       $17 = ($17 + $16 | 0) - $19 | 0;
       if (!$22) {
        break label$5
       }
       $9 = (Math_clz32($22) ^ 31 | 0) + 2 | 0;
       break label$4;
      }
      $9 = 1;
     }
     HEAP32[($3 + ($18 << 2 | 0) | 0) >> 2] = $9;
     $18 = $18 + 1 | 0;
     if (($18 | 0) != ($8 | 0)) {
      continue label$3
     }
     break label$3;
    };
   }
   if (($14 | 0) <= ($15 | 0)) {
    break label$1
   }
   $21 = $14;
   label$10 : while (1) {
    $21 = $21 + -1 | 0;
    $9 = 0;
    label$11 : while (1) {
     $22 = $3 + ($10 << 2 | 0) | 0;
     $20 = HEAP32[$22 >> 2] | 0;
     $22 = HEAP32[($22 + 4 | 0) >> 2] | 0;
     HEAP32[($3 + ($8 << 2 | 0) | 0) >> 2] = $20 >>> 0 > $22 >>> 0 ? $20 : $22;
     $8 = $8 + 1 | 0;
     $10 = $10 + 2 | 0;
     $9 = $9 + 1 | 0;
     if (!($9 >>> $21 | 0)) {
      continue label$11
     }
     break label$11;
    };
    if (($21 | 0) > ($15 | 0)) {
     continue label$10
    }
    break label$10;
   };
  }
  $8 = GOT_data_internal_FLAC__ENTROPY_CODING_METHOD_PARTITIONED_RICE_PARAMETER_LEN;
  $10 = GOT_data_internal_FLAC__ENTROPY_CODING_METHOD_PARTITIONED_RICE2_PARAMETER_LEN;
  $9 = GOT_data_internal_FLAC__ENTROPY_CODING_METHOD_PARTITIONED_RICE_RAW_LEN;
  $22 = GOT_data_internal_FLAC__ENTROPY_CODING_METHOD_TYPE_LEN;
  $20 = GOT_data_internal_FLAC__ENTROPY_CODING_METHOD_PARTITIONED_RICE_ORDER_LEN;
  label$12 : {
   label$13 : {
    if (($14 | 0) < ($15 | 0)) {
     break label$13
    }
    $19 = HEAP32[$8 >> 2] | 0;
    $25 = (Math_imul($6 + 1 | 0, $4) - ($4 >>> 1 | 0) | 0) + $19 | 0;
    $17 = $7 + -1 | 0;
    $26 = (HEAP32[$9 >> 2] | 0) + (HEAP32[$10 >> 2] | 0) | 0;
    $27 = (HEAP32[$20 >> 2] | 0) + (HEAP32[$22 >> 2] | 0) | 0;
    i64toi32_i32$0 = 0;
    $28 = $6 + -1 | 0;
    $28$hi = i64toi32_i32$0;
    $29 = 0;
    $30 = 0;
    $31 = 0;
    $32 = 0;
    label$14 : {
     label$15 : while (1) {
      $33 = !$31;
      $8 = $0 + Math_imul($33, 12) | 0;
      $10 = $8 + 11724 | 0;
      FLAC__format_entropy_coding_method_partitioned_rice_contents_ensure_size($10 | 0, ($14 >>> 0 > 6 >>> 0 ? $14 : 6) | 0) | 0;
      $34 = $3 + ($29 << 2 | 0) | 0;
      $18 = $2 + ($29 << 3 | 0) | 0;
      $35 = HEAP32[($8 + 11728 | 0) >> 2] | 0;
      $16 = HEAP32[$10 >> 2] | 0;
      label$16 : {
       label$17 : {
        if (!$14) {
         break label$17
        }
        $24 = $13 >>> $14 | 0;
        $20 = 0;
        $1 = 0;
        $23 = $27;
        label$18 : while (1) {
         label$19 : {
          if ($20) {
           break label$19
          }
          if ($24 >>> 0 <= $5 >>> 0) {
           break label$14
          }
         }
         $21 = $24 - ($20 ? 0 : $5) | 0;
         label$20 : {
          label$21 : {
           label$22 : {
            label$23 : {
             i64toi32_i32$2 = $18 + ($20 << 3 | 0) | 0;
             i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
             i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
             $36 = i64toi32_i32$0;
             $36$hi = i64toi32_i32$1;
             i64toi32_i32$2 = i64toi32_i32$0;
             i64toi32_i32$0 = 0;
             i64toi32_i32$3 = 268435456;
             if (i64toi32_i32$1 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$3 >>> 0 | 0) | 0) {
              break label$23
             }
             $8 = 0;
             $10 = $21;
             i64toi32_i32$2 = $36$hi;
             $9 = $36;
             if (($10 << 3 | 0) >>> 0 < $9 >>> 0) {
              break label$22
             }
             break label$21;
            }
            i64toi32_i32$2 = 0;
            $37 = $21;
            $37$hi = i64toi32_i32$2;
            $8 = 0;
            label$24 : {
             label$25 : {
              i64toi32_i32$2 = $36$hi;
              i64toi32_i32$3 = $36;
              i64toi32_i32$1 = 16777216;
              i64toi32_i32$0 = 0;
              if (i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$3 >>> 0 <= i64toi32_i32$0 >>> 0 | 0) | 0) {
               break label$25
              }
              i64toi32_i32$3 = $37$hi;
              $38 = $37;
              $38$hi = i64toi32_i32$3;
              break label$24;
             }
             i64toi32_i32$3 = $37$hi;
             $38 = $37;
             $38$hi = i64toi32_i32$3;
             i64toi32_i32$0 = $37;
             i64toi32_i32$2 = 0;
             i64toi32_i32$1 = 7;
             i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
             if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
              i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
              $62 = 0;
             } else {
              i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
              $62 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
             }
             $305$hi = i64toi32_i32$2;
             i64toi32_i32$2 = $36$hi;
             i64toi32_i32$2 = $305$hi;
             i64toi32_i32$3 = $62;
             i64toi32_i32$0 = $36$hi;
             i64toi32_i32$1 = $36;
             if (i64toi32_i32$2 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$3 >>> 0 >= i64toi32_i32$1 >>> 0 | 0) | 0) {
              break label$24
             }
             label$26 : while (1) {
              $8 = $8 + 8 | 0;
              i64toi32_i32$3 = $37$hi;
              i64toi32_i32$1 = $37;
              i64toi32_i32$2 = 0;
              i64toi32_i32$0 = 15;
              i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
              if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
               i64toi32_i32$2 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
               $63 = 0;
              } else {
               i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
               $63 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
              }
              $39 = $63;
              $39$hi = i64toi32_i32$2;
              i64toi32_i32$2 = $37$hi;
              i64toi32_i32$3 = $37;
              i64toi32_i32$1 = 0;
              i64toi32_i32$0 = 8;
              i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
              if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
               i64toi32_i32$1 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
               $64 = 0;
              } else {
               i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
               $64 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
              }
              $38 = $64;
              $38$hi = i64toi32_i32$1;
              $37 = $38;
              $37$hi = i64toi32_i32$1;
              i64toi32_i32$1 = $39$hi;
              i64toi32_i32$1 = $36$hi;
              i64toi32_i32$1 = $39$hi;
              i64toi32_i32$2 = $39;
              i64toi32_i32$3 = $36$hi;
              i64toi32_i32$0 = $36;
              if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0) {
               continue label$26
              }
              break label$26;
             };
            }
            i64toi32_i32$2 = $38$hi;
            i64toi32_i32$2 = $36$hi;
            i64toi32_i32$2 = $38$hi;
            i64toi32_i32$0 = $38;
            i64toi32_i32$1 = $36$hi;
            i64toi32_i32$3 = $36;
            if (i64toi32_i32$2 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$0 >>> 0 >= i64toi32_i32$3 >>> 0 | 0) | 0) {
             break label$20
            }
            label$27 : while (1) {
             $8 = $8 + 1 | 0;
             i64toi32_i32$0 = $38$hi;
             i64toi32_i32$3 = $38;
             i64toi32_i32$2 = 0;
             i64toi32_i32$1 = 1;
             i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
             if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
              i64toi32_i32$2 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
              $65 = 0;
             } else {
              i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
              $65 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
             }
             $38 = $65;
             $38$hi = i64toi32_i32$2;
             i64toi32_i32$2 = $36$hi;
             i64toi32_i32$2 = $38$hi;
             i64toi32_i32$0 = $38;
             i64toi32_i32$3 = $36$hi;
             i64toi32_i32$1 = $36;
             if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0) {
              continue label$27
             }
             break label$20;
            };
           }
           label$28 : while (1) {
            $8 = $8 + 4 | 0;
            $22 = $10 << 7 | 0;
            $10 = $10 << 4 | 0;
            if ($22 >>> 0 < $9 >>> 0) {
             continue label$28
            }
            break label$28;
           };
          }
          if ($10 >>> 0 >= $9 >>> 0) {
           break label$20
          }
          label$29 : while (1) {
           $8 = $8 + 1 | 0;
           $10 = $10 << 1 | 0;
           if ($10 >>> 0 < $9 >>> 0) {
            continue label$29
           }
           break label$29;
          };
         }
         $347 = $1;
         $8 = $8 >>> 0 < $7 >>> 0 ? $8 : $17;
         $354 = $8;
         $363 = ($19 - ($21 >>> 1 | 0) | 0) + Math_imul($8 + 1 | 0, $21) | 0;
         i64toi32_i32$0 = $36$hi;
         i64toi32_i32$0 = 0;
         $367$hi = i64toi32_i32$0;
         i64toi32_i32$0 = $36$hi;
         i64toi32_i32$1 = $36;
         i64toi32_i32$2 = $367$hi;
         i64toi32_i32$3 = $8 + -1 | 0;
         i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
         if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
          i64toi32_i32$2 = 0;
          $66 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
         } else {
          i64toi32_i32$2 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
          $66 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
         }
         i64toi32_i32$2 = $36$hi;
         $8 = $363 + ($8 ? $66 : $36 << 1 | 0) | 0;
         $1 = ($8 | 0) == (-1 | 0) ? $347 : $354;
         label$30 : {
          if (!$11) {
           break label$30
          }
          $10 = $20 << 2 | 0;
          $385 = $35 + $10 | 0;
          $10 = HEAP32[($34 + $10 | 0) >> 2] | 0;
          $390 = $10;
          $9 = $26 + Math_imul($10, $21) | 0;
          $10 = $9 >>> 0 > $8 >>> 0;
          HEAP32[$385 >> 2] = $10 ? 0 : $390;
          $8 = $10 ? $8 : $9;
          $1 = $10 ? $1 : 0;
         }
         HEAP32[($16 + ($20 << 2 | 0) | 0) >> 2] = $1;
         $23 = $8 + $23 | 0;
         $20 = $20 + 1 | 0;
         if (!($20 >>> $14 | 0)) {
          continue label$18
         }
         break label$16;
        };
       }
       $422 = $6;
       $423 = $25;
       i64toi32_i32$0 = $18;
       i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
       $37 = i64toi32_i32$2;
       $37$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $28$hi;
       i64toi32_i32$1 = $37$hi;
       i64toi32_i32$0 = i64toi32_i32$2;
       i64toi32_i32$2 = $28$hi;
       i64toi32_i32$3 = $28;
       i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
        i64toi32_i32$2 = 0;
        $67 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
       } else {
        i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
        $67 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
       }
       i64toi32_i32$2 = $37$hi;
       $8 = $423 + ($6 ? $67 : $37 << 1 | 0) | 0;
       $10 = ($8 | 0) == (-1 | 0) ? 0 : $422;
       label$31 : {
        if (!$11) {
         break label$31
        }
        $9 = HEAP32[$34 >> 2] | 0;
        $444 = $9;
        $22 = $26 + Math_imul($9, $4) | 0;
        $9 = $22 >>> 0 > $8 >>> 0;
        HEAP32[$35 >> 2] = $9 ? 0 : $444;
        $8 = $9 ? $8 : $22;
        $10 = $9 ? $10 : 0;
       }
       HEAP32[$16 >> 2] = $10;
       $23 = $8 + $27 | 0;
      }
      $8 = !$32 | $23 >>> 0 < $32 >>> 0 | 0;
      $30 = $8 ? $14 : $30;
      $31 = $8 ? $33 : $31;
      $32 = $8 ? $23 : $32;
      $29 = $29 + (1 << $14 | 0) | 0;
      $8 = ($14 | 0) > ($15 | 0);
      $14 = $14 + -1 | 0;
      if ($8) {
       continue label$15
      }
      break label$15;
     };
    }
    HEAP32[($12 + 4 | 0) >> 2] = $30;
    $10 = $30 >>> 0 > 6 >>> 0 ? $30 : 6;
    break label$12;
   }
   $30 = 0;
   HEAP32[($12 + 4 | 0) >> 2] = 0;
   $10 = 6;
   $31 = 0;
   $32 = 0;
  }
  $8 = HEAP32[($12 + 8 | 0) >> 2] | 0;
  FLAC__format_entropy_coding_method_partitioned_rice_contents_ensure_size($8 | 0, $10 | 0) | 0;
  $10 = $0 + Math_imul($31, 12) | 0;
  $3 = 1 << $30 | 0;
  $9 = $3 << 2 | 0;
  __memcpy(HEAP32[$8 >> 2] | 0 | 0, HEAP32[($10 + 11724 | 0) >> 2] | 0 | 0, $9 | 0) | 0;
  label$32 : {
   if (!$11) {
    break label$32
   }
   __memcpy(HEAP32[($8 + 4 | 0) >> 2] | 0 | 0, HEAP32[($10 + 11728 | 0) >> 2] | 0 | 0, $9 | 0) | 0;
  }
  $10 = HEAP32[GOT_data_internal_FLAC__ENTROPY_CODING_METHOD_PARTITIONED_RICE_ESCAPE_PARAMETER >> 2] | 0;
  $9 = HEAP32[$8 >> 2] | 0;
  $8 = 0;
  label$33 : {
   label$34 : {
    label$35 : while (1) {
     if ((HEAP32[($9 + ($8 << 2 | 0) | 0) >> 2] | 0) >>> 0 >= $10 >>> 0) {
      break label$34
     }
     $8 = $8 + 1 | 0;
     if (($8 | 0) == ($3 | 0)) {
      break label$33
     }
     continue label$35;
    };
   }
   HEAP32[$12 >> 2] = 1;
  }
  return $32 | 0;
 }
 
 function stackSave() {
  return __stack_pointer | 0;
 }
 
 function stackRestore($0) {
  $0 = $0 | 0;
  __stack_pointer = $0;
 }
 
 function stackAlloc($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = (__stack_pointer - $0 | 0) & -16 | 0;
  __stack_pointer = $1;
  return $1 | 0;
 }
 
 function dynCall_jiji(fptr, $0, $1, $1$hi, $2) {
  fptr = fptr | 0;
  $0 = $0 | 0;
  $1 = $1 | 0;
  $1$hi = $1$hi | 0;
  $2 = $2 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$0 = FUNCTION_TABLE[fptr | 0]($0, $1, i64toi32_i32$0, $2) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$0 | 0;
 }
 
 function legalstub$FLAC__stream_encoder_set_total_samples_estimate($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $12 = 0, $3 = 0, $5 = 0, $5$hi = 0, $8$hi = 0;
  $3 = $0;
  i64toi32_i32$0 = 0;
  $5 = $1;
  $5$hi = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$2 = $2;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   $12 = 0;
  } else {
   i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
   $12 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
  }
  $8$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $5$hi;
  i64toi32_i32$0 = $5;
  i64toi32_i32$2 = $8$hi;
  i64toi32_i32$3 = $12;
  i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
  return FLAC__stream_encoder_set_total_samples_estimate($3 | 0, i64toi32_i32$0 | i64toi32_i32$3 | 0 | 0, i64toi32_i32$2 | 0) | 0 | 0;
 }
 
 function legalstub$dynCall_jiji($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$4 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $17 = 0, $18 = 0, $6 = 0, $7 = 0, $9 = 0, $9$hi = 0, $12$hi = 0, $5 = 0, $5$hi = 0;
  $6 = $0;
  $7 = $1;
  i64toi32_i32$0 = 0;
  $9 = $2;
  $9$hi = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$2 = $3;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   $17 = 0;
  } else {
   i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
   $17 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
  }
  $12$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $9$hi;
  i64toi32_i32$0 = $9;
  i64toi32_i32$2 = $12$hi;
  i64toi32_i32$3 = $17;
  i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
  i64toi32_i32$2 = dynCall_jiji($6 | 0, $7 | 0, i64toi32_i32$0 | i64toi32_i32$3 | 0 | 0, i64toi32_i32$2 | 0, $4 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $5 = i64toi32_i32$2;
  $5$hi = i64toi32_i32$0;
  i64toi32_i32$1 = i64toi32_i32$2;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = 0;
   $18 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$2 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $18 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
  }
  setTempRet0($18 | 0);
  i64toi32_i32$2 = $5$hi;
  return $5 | 0;
 }
 
 function legalfunc$__wasi_fd_seek($0, $1, $1$hi, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $1$hi = $1$hi | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var i64toi32_i32$4 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $12 = 0, $4 = 0, $6 = 0, i64toi32_i32$2 = 0;
  $4 = $0;
  i64toi32_i32$0 = $1$hi;
  $6 = $1;
  i64toi32_i32$2 = $1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = 0;
   $12 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $12 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
  }
  return legalimport$__wasi_fd_seek($4 | 0, $6 | 0, $12 | 0, $2 | 0, $3 | 0) | 0 | 0;
 }
 
 function _ZN17compiler_builtins3int3mul3Mul3mul17h070e9a1c69faec5bE(var$0, var$0$hi, var$1, var$1$hi) {
  var$0 = var$0 | 0;
  var$0$hi = var$0$hi | 0;
  var$1 = var$1 | 0;
  var$1$hi = var$1$hi | 0;
  var i64toi32_i32$4 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, var$2 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, var$3 = 0, var$4 = 0, var$5 = 0, $21 = 0, $22 = 0, var$6 = 0, $24 = 0, $17 = 0, $18 = 0, $23 = 0, $29 = 0, $45 = 0, $56$hi = 0, $62$hi = 0;
  i64toi32_i32$0 = var$1$hi;
  var$2 = var$1;
  var$4 = var$2 >>> 16 | 0;
  i64toi32_i32$0 = var$0$hi;
  var$3 = var$0;
  var$5 = var$3 >>> 16 | 0;
  $17 = Math_imul(var$4, var$5);
  $18 = var$2;
  i64toi32_i32$2 = var$3;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = 0;
   $21 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $21 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
  }
  $23 = $17 + Math_imul($18, $21) | 0;
  i64toi32_i32$1 = var$1$hi;
  i64toi32_i32$0 = var$1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = 0;
   $22 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
   $22 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
  }
  $29 = $23 + Math_imul($22, var$3) | 0;
  var$2 = var$2 & 65535 | 0;
  var$3 = var$3 & 65535 | 0;
  var$6 = Math_imul(var$2, var$3);
  var$2 = (var$6 >>> 16 | 0) + Math_imul(var$2, var$5) | 0;
  $45 = $29 + (var$2 >>> 16 | 0) | 0;
  var$2 = (var$2 & 65535 | 0) + Math_imul(var$4, var$3) | 0;
  i64toi32_i32$2 = 0;
  i64toi32_i32$1 = $45 + (var$2 >>> 16 | 0) | 0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
   $24 = 0;
  } else {
   i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
   $24 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
  }
  $56$hi = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  $62$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $56$hi;
  i64toi32_i32$2 = $24;
  i64toi32_i32$1 = $62$hi;
  i64toi32_i32$3 = var$2 << 16 | 0 | (var$6 & 65535 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
  i64toi32_i32$2 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$2 | 0;
 }
 
 function _ZN17compiler_builtins3int4udiv10divmod_u6417h6026910b5ed08e40E(var$0, var$0$hi, var$1, var$1$hi) {
  var$0 = var$0 | 0;
  var$0$hi = var$0$hi | 0;
  var$1 = var$1 | 0;
  var$1$hi = var$1$hi | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$5 = 0, var$2 = 0, var$3 = 0, var$4 = 0, var$5 = 0, var$5$hi = 0, var$6 = 0, var$6$hi = 0, i64toi32_i32$6 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, var$8$hi = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, var$7$hi = 0, $51 = 0, $63$hi = 0, $65 = 0, $65$hi = 0, $70 = 0, $119 = 0, $120$hi = 0, $129$hi = 0, $134$hi = 0, var$8 = 0, $140 = 0, $140$hi = 0, $142$hi = 0, $144 = 0, $144$hi = 0, $151 = 0, $151$hi = 0, $154$hi = 0, var$7 = 0, $165$hi = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        label$7 : {
         label$8 : {
          label$9 : {
           label$10 : {
            label$11 : {
             i64toi32_i32$0 = var$0$hi;
             i64toi32_i32$2 = var$0;
             i64toi32_i32$1 = 0;
             i64toi32_i32$3 = 32;
             i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
             if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
              i64toi32_i32$1 = 0;
              $39 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
             } else {
              i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
              $39 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
             }
             var$2 = $39;
             if (var$2) {
              block : {
               i64toi32_i32$1 = var$1$hi;
               var$3 = var$1;
               if (!var$3) {
                break label$11
               }
               i64toi32_i32$1 = var$1$hi;
               i64toi32_i32$0 = var$1;
               i64toi32_i32$2 = 0;
               i64toi32_i32$3 = 32;
               i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
               if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
                i64toi32_i32$2 = 0;
                $40 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
               } else {
                i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
                $40 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
               }
               var$4 = $40;
               if (!var$4) {
                break label$9
               }
               var$2 = Math_clz32(var$4) - Math_clz32(var$2) | 0;
               if (var$2 >>> 0 <= 31 >>> 0) {
                break label$8
               }
               break label$2;
              }
             }
             i64toi32_i32$2 = var$1$hi;
             i64toi32_i32$1 = var$1;
             i64toi32_i32$0 = 1;
             i64toi32_i32$3 = 0;
             if (i64toi32_i32$2 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$1 >>> 0 >= i64toi32_i32$3 >>> 0 | 0) | 0) {
              break label$2
             }
             i64toi32_i32$1 = var$0$hi;
             var$2 = var$0;
             i64toi32_i32$1 = var$1$hi;
             var$3 = var$1;
             var$2 = (var$2 >>> 0) / (var$3 >>> 0) | 0;
             i64toi32_i32$1 = 0;
             __wasm_intrinsics_temp_i64 = var$0 - Math_imul(var$2, var$3) | 0;
             __wasm_intrinsics_temp_i64$hi = i64toi32_i32$1;
             i64toi32_i32$1 = 0;
             i64toi32_i32$2 = var$2;
             i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
             return i64toi32_i32$2 | 0;
            }
            i64toi32_i32$2 = var$1$hi;
            i64toi32_i32$3 = var$1;
            i64toi32_i32$1 = 0;
            i64toi32_i32$0 = 32;
            i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
            if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
             i64toi32_i32$1 = 0;
             $41 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
            } else {
             i64toi32_i32$1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
             $41 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
            }
            var$3 = $41;
            i64toi32_i32$1 = var$0$hi;
            if (!var$0) {
             break label$7
            }
            if (!var$3) {
             break label$6
            }
            var$4 = var$3 + -1 | 0;
            if (var$4 & var$3 | 0) {
             break label$6
            }
            i64toi32_i32$1 = 0;
            i64toi32_i32$2 = var$4 & var$2 | 0;
            i64toi32_i32$3 = 0;
            i64toi32_i32$0 = 32;
            i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
            if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
             i64toi32_i32$3 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
             $42 = 0;
            } else {
             i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
             $42 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
            }
            $63$hi = i64toi32_i32$3;
            i64toi32_i32$3 = var$0$hi;
            i64toi32_i32$1 = var$0;
            i64toi32_i32$2 = 0;
            i64toi32_i32$0 = -1;
            i64toi32_i32$2 = i64toi32_i32$3 & i64toi32_i32$2 | 0;
            $65 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
            $65$hi = i64toi32_i32$2;
            i64toi32_i32$2 = $63$hi;
            i64toi32_i32$3 = $42;
            i64toi32_i32$1 = $65$hi;
            i64toi32_i32$0 = $65;
            i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
            __wasm_intrinsics_temp_i64 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
            __wasm_intrinsics_temp_i64$hi = i64toi32_i32$1;
            $70 = (__wasm_ctz_i32(var$3 | 0) | 0) & 31 | 0;
            i64toi32_i32$1 = 0;
            i64toi32_i32$3 = var$2 >>> $70 | 0;
            i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
            return i64toi32_i32$3 | 0;
           }
          }
          var$4 = var$3 + -1 | 0;
          if (!(var$4 & var$3 | 0)) {
           break label$5
          }
          var$2 = (Math_clz32(var$3) + 33 | 0) - Math_clz32(var$2) | 0;
          var$3 = 0 - var$2 | 0;
          break label$3;
         }
         var$3 = 63 - var$2 | 0;
         var$2 = var$2 + 1 | 0;
         break label$3;
        }
        var$4 = (var$2 >>> 0) / (var$3 >>> 0) | 0;
        i64toi32_i32$3 = 0;
        i64toi32_i32$2 = var$2 - Math_imul(var$4, var$3) | 0;
        i64toi32_i32$1 = 0;
        i64toi32_i32$0 = 32;
        i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
         i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
         $43 = 0;
        } else {
         i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
         $43 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
        }
        __wasm_intrinsics_temp_i64 = $43;
        __wasm_intrinsics_temp_i64$hi = i64toi32_i32$1;
        i64toi32_i32$1 = 0;
        i64toi32_i32$2 = var$4;
        i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
        return i64toi32_i32$2 | 0;
       }
       var$2 = Math_clz32(var$3) - Math_clz32(var$2) | 0;
       if (var$2 >>> 0 < 31 >>> 0) {
        break label$4
       }
       break label$2;
      }
      i64toi32_i32$2 = var$0$hi;
      i64toi32_i32$2 = 0;
      __wasm_intrinsics_temp_i64 = var$4 & var$0 | 0;
      __wasm_intrinsics_temp_i64$hi = i64toi32_i32$2;
      if ((var$3 | 0) == (1 | 0)) {
       break label$1
      }
      i64toi32_i32$2 = var$0$hi;
      $119 = __wasm_ctz_i32(var$3 | 0) | 0;
      i64toi32_i32$2 = 0;
      $120$hi = i64toi32_i32$2;
      i64toi32_i32$2 = var$0$hi;
      i64toi32_i32$3 = var$0;
      i64toi32_i32$1 = $120$hi;
      i64toi32_i32$0 = $119;
      i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
       i64toi32_i32$1 = 0;
       $44 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
      } else {
       i64toi32_i32$1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
       $44 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
      }
      i64toi32_i32$3 = $44;
      i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
      return i64toi32_i32$3 | 0;
     }
     var$3 = 63 - var$2 | 0;
     var$2 = var$2 + 1 | 0;
    }
    i64toi32_i32$3 = var$0$hi;
    i64toi32_i32$3 = 0;
    $129$hi = i64toi32_i32$3;
    i64toi32_i32$3 = var$0$hi;
    i64toi32_i32$2 = var$0;
    i64toi32_i32$1 = $129$hi;
    i64toi32_i32$0 = var$2 & 63 | 0;
    i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $45 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
     $45 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
    }
    var$5 = $45;
    var$5$hi = i64toi32_i32$1;
    i64toi32_i32$1 = var$0$hi;
    i64toi32_i32$1 = 0;
    $134$hi = i64toi32_i32$1;
    i64toi32_i32$1 = var$0$hi;
    i64toi32_i32$3 = var$0;
    i64toi32_i32$2 = $134$hi;
    i64toi32_i32$0 = var$3 & 63 | 0;
    i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
     $46 = 0;
    } else {
     i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
     $46 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
    }
    var$0 = $46;
    var$0$hi = i64toi32_i32$2;
    label$13 : {
     if (var$2) {
      block3 : {
       i64toi32_i32$2 = var$1$hi;
       i64toi32_i32$1 = var$1;
       i64toi32_i32$3 = -1;
       i64toi32_i32$0 = -1;
       i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
       i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
       if (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) {
        i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
       }
       var$8 = i64toi32_i32$4;
       var$8$hi = i64toi32_i32$5;
       label$15 : while (1) {
        i64toi32_i32$5 = var$5$hi;
        i64toi32_i32$2 = var$5;
        i64toi32_i32$1 = 0;
        i64toi32_i32$0 = 1;
        i64toi32_i32$3 = i64toi32_i32$0 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
         i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
         $47 = 0;
        } else {
         i64toi32_i32$1 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$3 | 0) | 0;
         $47 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
        }
        $140 = $47;
        $140$hi = i64toi32_i32$1;
        i64toi32_i32$1 = var$0$hi;
        i64toi32_i32$5 = var$0;
        i64toi32_i32$2 = 0;
        i64toi32_i32$0 = 63;
        i64toi32_i32$3 = i64toi32_i32$0 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
         i64toi32_i32$2 = 0;
         $48 = i64toi32_i32$1 >>> i64toi32_i32$3 | 0;
        } else {
         i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$3 | 0;
         $48 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$3 | 0) | 0;
        }
        $142$hi = i64toi32_i32$2;
        i64toi32_i32$2 = $140$hi;
        i64toi32_i32$1 = $140;
        i64toi32_i32$5 = $142$hi;
        i64toi32_i32$0 = $48;
        i64toi32_i32$5 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
        var$5 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
        var$5$hi = i64toi32_i32$5;
        $144 = var$5;
        $144$hi = i64toi32_i32$5;
        i64toi32_i32$5 = var$8$hi;
        i64toi32_i32$5 = var$5$hi;
        i64toi32_i32$5 = var$8$hi;
        i64toi32_i32$2 = var$8;
        i64toi32_i32$1 = var$5$hi;
        i64toi32_i32$0 = var$5;
        i64toi32_i32$3 = i64toi32_i32$2 - i64toi32_i32$0 | 0;
        i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0;
        i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$1 | 0;
        i64toi32_i32$4 = i64toi32_i32$5 - i64toi32_i32$4 | 0;
        i64toi32_i32$5 = i64toi32_i32$3;
        i64toi32_i32$2 = 0;
        i64toi32_i32$0 = 63;
        i64toi32_i32$1 = i64toi32_i32$0 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
         i64toi32_i32$2 = i64toi32_i32$4 >> 31 | 0;
         $49 = i64toi32_i32$4 >> i64toi32_i32$1 | 0;
        } else {
         i64toi32_i32$2 = i64toi32_i32$4 >> i64toi32_i32$1 | 0;
         $49 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$1 | 0) | 0;
        }
        var$6 = $49;
        var$6$hi = i64toi32_i32$2;
        i64toi32_i32$2 = var$1$hi;
        i64toi32_i32$2 = var$6$hi;
        i64toi32_i32$4 = var$6;
        i64toi32_i32$5 = var$1$hi;
        i64toi32_i32$0 = var$1;
        i64toi32_i32$5 = i64toi32_i32$2 & i64toi32_i32$5 | 0;
        $151 = i64toi32_i32$4 & i64toi32_i32$0 | 0;
        $151$hi = i64toi32_i32$5;
        i64toi32_i32$5 = $144$hi;
        i64toi32_i32$2 = $144;
        i64toi32_i32$4 = $151$hi;
        i64toi32_i32$0 = $151;
        i64toi32_i32$1 = i64toi32_i32$2 - i64toi32_i32$0 | 0;
        i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0;
        i64toi32_i32$3 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
        i64toi32_i32$3 = i64toi32_i32$5 - i64toi32_i32$3 | 0;
        var$5 = i64toi32_i32$1;
        var$5$hi = i64toi32_i32$3;
        i64toi32_i32$3 = var$0$hi;
        i64toi32_i32$5 = var$0;
        i64toi32_i32$2 = 0;
        i64toi32_i32$0 = 1;
        i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
         i64toi32_i32$2 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
         $50 = 0;
        } else {
         i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
         $50 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
        }
        $154$hi = i64toi32_i32$2;
        i64toi32_i32$2 = var$7$hi;
        i64toi32_i32$2 = $154$hi;
        i64toi32_i32$3 = $50;
        i64toi32_i32$5 = var$7$hi;
        i64toi32_i32$0 = var$7;
        i64toi32_i32$5 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
        var$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
        var$0$hi = i64toi32_i32$5;
        i64toi32_i32$5 = var$6$hi;
        i64toi32_i32$2 = var$6;
        i64toi32_i32$3 = 0;
        i64toi32_i32$0 = 1;
        i64toi32_i32$3 = i64toi32_i32$5 & i64toi32_i32$3 | 0;
        var$6 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
        var$6$hi = i64toi32_i32$3;
        var$7 = var$6;
        var$7$hi = i64toi32_i32$3;
        var$2 = var$2 + -1 | 0;
        if (var$2) {
         continue label$15
        }
        break label$15;
       };
       break label$13;
      }
     }
    }
    i64toi32_i32$3 = var$5$hi;
    __wasm_intrinsics_temp_i64 = var$5;
    __wasm_intrinsics_temp_i64$hi = i64toi32_i32$3;
    i64toi32_i32$3 = var$0$hi;
    i64toi32_i32$5 = var$0;
    i64toi32_i32$2 = 0;
    i64toi32_i32$0 = 1;
    i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
     $51 = 0;
    } else {
     i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
     $51 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
    }
    $165$hi = i64toi32_i32$2;
    i64toi32_i32$2 = var$6$hi;
    i64toi32_i32$2 = $165$hi;
    i64toi32_i32$3 = $51;
    i64toi32_i32$5 = var$6$hi;
    i64toi32_i32$0 = var$6;
    i64toi32_i32$5 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
    i64toi32_i32$3 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
    i64toi32_i32$HIGH_BITS = i64toi32_i32$5;
    return i64toi32_i32$3 | 0;
   }
   i64toi32_i32$3 = var$0$hi;
   __wasm_intrinsics_temp_i64 = var$0;
   __wasm_intrinsics_temp_i64$hi = i64toi32_i32$3;
   i64toi32_i32$3 = 0;
   var$0 = 0;
   var$0$hi = i64toi32_i32$3;
  }
  i64toi32_i32$3 = var$0$hi;
  i64toi32_i32$5 = var$0;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$3;
  return i64toi32_i32$5 | 0;
 }
 
 function __wasm_ctz_i32(var$0) {
  var$0 = var$0 | 0;
  if (var$0) {
   return 31 - Math_clz32((var$0 + -1 | 0) ^ var$0 | 0) | 0 | 0
  }
  return 32 | 0;
 }
 
 function __wasm_i64_mul(var$0, var$0$hi, var$1, var$1$hi) {
  var$0 = var$0 | 0;
  var$0$hi = var$0$hi | 0;
  var$1 = var$1 | 0;
  var$1$hi = var$1$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = var$0$hi;
  i64toi32_i32$0 = var$1$hi;
  i64toi32_i32$0 = var$0$hi;
  i64toi32_i32$1 = var$1$hi;
  i64toi32_i32$1 = _ZN17compiler_builtins3int3mul3Mul3mul17h070e9a1c69faec5bE(var$0 | 0, i64toi32_i32$0 | 0, var$1 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
  return i64toi32_i32$1 | 0;
 }
 
 function __wasm_i64_udiv(var$0, var$0$hi, var$1, var$1$hi) {
  var$0 = var$0 | 0;
  var$0$hi = var$0$hi | 0;
  var$1 = var$1 | 0;
  var$1$hi = var$1$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = var$0$hi;
  i64toi32_i32$0 = var$1$hi;
  i64toi32_i32$0 = var$0$hi;
  i64toi32_i32$1 = var$1$hi;
  i64toi32_i32$1 = _ZN17compiler_builtins3int4udiv10divmod_u6417h6026910b5ed08e40E(var$0 | 0, i64toi32_i32$0 | 0, var$1 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
  return i64toi32_i32$1 | 0;
 }
 
 function __wasm_i64_urem(var$0, var$0$hi, var$1, var$1$hi) {
  var$0 = var$0 | 0;
  var$0$hi = var$0$hi | 0;
  var$1 = var$1 | 0;
  var$1$hi = var$1$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = var$0$hi;
  i64toi32_i32$0 = var$1$hi;
  i64toi32_i32$0 = var$0$hi;
  i64toi32_i32$1 = var$1$hi;
  i64toi32_i32$1 = _ZN17compiler_builtins3int4udiv10divmod_u6417h6026910b5ed08e40E(var$0 | 0, i64toi32_i32$0 | 0, var$1 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$0 = __wasm_intrinsics_temp_i64$hi;
  i64toi32_i32$1 = __wasm_intrinsics_temp_i64;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
  return i64toi32_i32$1 | 0;
 }
 
 function __wasm_rotl_i32(var$0, var$1) {
  var$0 = var$0 | 0;
  var$1 = var$1 | 0;
  var var$2 = 0;
  var$2 = var$1 & 31 | 0;
  var$1 = (0 - var$1 | 0) & 31 | 0;
  return ((-1 >>> var$2 | 0) & var$0 | 0) << var$2 | 0 | (((-1 << var$1 | 0) & var$0 | 0) >>> var$1 | 0) | 0 | 0;
 }
 
 // EMSCRIPTEN_END_FUNCS
;
 bufferView = HEAPU8;
 initActiveSegments(env);
 var FUNCTION_TABLE = Table([null, seekpoint_compare_, __stdio_close, __stdio_read, __stdio_seek, FLAC__lpc_restore_signal, FLAC__lpc_restore_signal_wide, read_callback_, read_callback_proxy_, __emscripten_stdout_close, __stdio_write, __emscripten_stdout_seek, FLAC__lpc_compute_residual_from_qlp_coefficients, FLAC__lpc_compute_residual_from_qlp_coefficients_wide, FLAC__fixed_compute_best_predictor_wide, FLAC__fixed_compute_best_predictor, precompute_partition_info_sums_, FLAC__lpc_compute_autocorrelation, verify_read_callback_, verify_write_callback_, verify_metadata_callback_, verify_error_callback_]);
 function __wasm_memory_size() {
  return buffer.byteLength / 65536 | 0;
 }
 
 function __wasm_memory_grow(pagesToAdd) {
  pagesToAdd = pagesToAdd | 0;
  var oldPages = __wasm_memory_size() | 0;
  var newPages = oldPages + pagesToAdd | 0;
  if ((oldPages < newPages) && (newPages < 65536)) {
   var newBuffer = new ArrayBuffer(Math_imul(newPages, 65536));
   var newHEAP8 = new Int8Array(newBuffer);
   newHEAP8.set(HEAP8);
   HEAP8 = new Int8Array(newBuffer);
   HEAP16 = new Int16Array(newBuffer);
   HEAP32 = new Int32Array(newBuffer);
   HEAPU8 = new Uint8Array(newBuffer);
   HEAPU16 = new Uint16Array(newBuffer);
   HEAPU32 = new Uint32Array(newBuffer);
   HEAPF32 = new Float32Array(newBuffer);
   HEAPF64 = new Float64Array(newBuffer);
   buffer = newBuffer;
   memory.buffer = buffer;
   bufferView = HEAPU8;
  }
  return oldPages;
 }
 
 return {
  "__wasm_call_ctors": __wasm_call_ctors, 
  "FLAC__stream_decoder_new": FLAC__stream_decoder_new, 
  "FLAC__stream_decoder_delete": FLAC__stream_decoder_delete, 
  "FLAC__stream_decoder_finish": FLAC__stream_decoder_finish, 
  "FLAC__stream_decoder_init_stream": FLAC__stream_decoder_init_stream, 
  "FLAC__stream_decoder_reset": FLAC__stream_decoder_reset, 
  "FLAC__stream_decoder_init_ogg_stream": FLAC__stream_decoder_init_ogg_stream, 
  "FLAC__stream_decoder_set_ogg_serial_number": FLAC__stream_decoder_set_ogg_serial_number, 
  "FLAC__stream_decoder_set_md5_checking": FLAC__stream_decoder_set_md5_checking, 
  "FLAC__stream_decoder_set_metadata_respond": FLAC__stream_decoder_set_metadata_respond, 
  "FLAC__stream_decoder_set_metadata_respond_application": FLAC__stream_decoder_set_metadata_respond_application, 
  "FLAC__stream_decoder_set_metadata_respond_all": FLAC__stream_decoder_set_metadata_respond_all, 
  "FLAC__stream_decoder_set_metadata_ignore": FLAC__stream_decoder_set_metadata_ignore, 
  "FLAC__stream_decoder_set_metadata_ignore_application": FLAC__stream_decoder_set_metadata_ignore_application, 
  "FLAC__stream_decoder_set_metadata_ignore_all": FLAC__stream_decoder_set_metadata_ignore_all, 
  "FLAC__stream_decoder_get_state": FLAC__stream_decoder_get_state, 
  "FLAC__stream_decoder_get_md5_checking": FLAC__stream_decoder_get_md5_checking, 
  "FLAC__stream_decoder_process_single": FLAC__stream_decoder_process_single, 
  "FLAC__stream_decoder_process_until_end_of_metadata": FLAC__stream_decoder_process_until_end_of_metadata, 
  "FLAC__stream_decoder_process_until_end_of_stream": FLAC__stream_decoder_process_until_end_of_stream, 
  "FLAC__stream_encoder_new": FLAC__stream_encoder_new, 
  "FLAC__stream_encoder_delete": FLAC__stream_encoder_delete, 
  "FLAC__stream_encoder_finish": FLAC__stream_encoder_finish, 
  "FLAC__stream_encoder_init_stream": FLAC__stream_encoder_init_stream, 
  "FLAC__stream_encoder_init_ogg_stream": FLAC__stream_encoder_init_ogg_stream, 
  "FLAC__stream_encoder_set_ogg_serial_number": FLAC__stream_encoder_set_ogg_serial_number, 
  "FLAC__stream_encoder_set_verify": FLAC__stream_encoder_set_verify, 
  "FLAC__stream_encoder_set_channels": FLAC__stream_encoder_set_channels, 
  "FLAC__stream_encoder_set_bits_per_sample": FLAC__stream_encoder_set_bits_per_sample, 
  "FLAC__stream_encoder_set_sample_rate": FLAC__stream_encoder_set_sample_rate, 
  "FLAC__stream_encoder_set_compression_level": FLAC__stream_encoder_set_compression_level, 
  "FLAC__stream_encoder_set_blocksize": FLAC__stream_encoder_set_blocksize, 
  "FLAC__stream_encoder_set_total_samples_estimate": legalstub$FLAC__stream_encoder_set_total_samples_estimate, 
  "FLAC__stream_encoder_set_metadata": FLAC__stream_encoder_set_metadata, 
  "FLAC__stream_encoder_get_state": FLAC__stream_encoder_get_state, 
  "FLAC__stream_encoder_get_verify_decoder_state": FLAC__stream_encoder_get_verify_decoder_state, 
  "FLAC__stream_encoder_get_verify": FLAC__stream_encoder_get_verify, 
  "FLAC__stream_encoder_process": FLAC__stream_encoder_process, 
  "FLAC__stream_encoder_process_interleaved": FLAC__stream_encoder_process_interleaved, 
  "fflush": fflush, 
  "__errno_location": __errno_location, 
  "stackSave": stackSave, 
  "stackRestore": stackRestore, 
  "stackAlloc": stackAlloc, 
  "emscripten_stack_init": emscripten_stack_init, 
  "emscripten_stack_get_free": emscripten_stack_get_free, 
  "emscripten_stack_get_end": emscripten_stack_get_end, 
  "__indirect_function_table": FUNCTION_TABLE, 
  "dynCall_jiji": legalstub$dynCall_jiji
 };
}

  return asmFunc(asmLibraryArg);
}

)(asmLibraryArg);
  },

  instantiate: /** @suppress{checkTypes} */ function(binary, info) {
    return {
      then: function(ok) {
        var module = new WebAssembly.Module(binary);
        ok({
          'instance': new WebAssembly.Instance(module)
        });
        // Emulate a simple WebAssembly.instantiate(..).then(()=>{}).catch(()=>{}) syntax.
        return { catch: function() {} };
      }
    };
  },

  RuntimeError: Error
};

// We don't need to actually download a wasm binary, mark it as present but empty.
wasmBinary = [];

// end include: wasm2js.js
if (typeof WebAssembly !== 'object') {
  abort('no native wasm support detected');
}

// include: runtime_safe_heap.js


// In MINIMAL_RUNTIME, setValue() and getValue() are only available when building with safe heap enabled, for heap safety checking.
// In traditional runtime, setValue() and getValue() are always available (although their use is highly discouraged due to perf penalties)

/** @param {number} ptr
    @param {number} value
    @param {string} type
    @param {number|boolean=} noSafe */
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch (type) {
      case 'i1': HEAP8[((ptr)>>0)] = value; break;
      case 'i8': HEAP8[((ptr)>>0)] = value; break;
      case 'i16': HEAP16[((ptr)>>1)] = value; break;
      case 'i32': HEAP32[((ptr)>>2)] = value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math.abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math.min((+(Math.floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math.ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)] = tempI64[0],HEAP32[(((ptr)+(4))>>2)] = tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)] = value; break;
      case 'double': HEAPF64[((ptr)>>3)] = value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}

/** @param {number} ptr
    @param {string} type
    @param {number|boolean=} noSafe */
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch (type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for getValue: ' + type);
    }
  return null;
}

// end include: runtime_safe_heap.js
// Wasm globals

var wasmMemory;

//========================================
// Runtime essentials
//========================================

// whether we are quitting the application. no code should run after this.
// set in exit() and abort()
var ABORT = false;

// set by exit() and abort().  Passed to 'onExit' handler.
// NOTE: This is also used as the process return code code in shell environments
// but only when noExitRuntime is false.
var EXITSTATUS;

/** @type {function(*, string=)} */
function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  assert(func, 'Cannot call unknown function ' + ident + ', make sure it is exported');
  return func;
}

// C calling interface.
/** @param {string|null=} returnType
    @param {Array=} argTypes
    @param {Arguments|Array=} args
    @param {Object=} opts */
function ccall(ident, returnType, argTypes, args, opts) {
  // For fast lookup of conversion functions
  var toC = {
    'string': function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
        var len = (str.length << 2) + 1;
        ret = stackAlloc(len);
        stringToUTF8(str, ret, len);
      }
      return ret;
    },
    'array': function(arr) {
      var ret = stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    }
  };

  function convertReturnValue(ret) {
    if (returnType === 'string') return UTF8ToString(ret);
    if (returnType === 'boolean') return Boolean(ret);
    return ret;
  }

  var func = getCFunc(ident);
  var cArgs = [];
  var stack = 0;
  assert(returnType !== 'array', 'Return type should not be "array".');
  if (args) {
    for (var i = 0; i < args.length; i++) {
      var converter = toC[argTypes[i]];
      if (converter) {
        if (stack === 0) stack = stackSave();
        cArgs[i] = converter(args[i]);
      } else {
        cArgs[i] = args[i];
      }
    }
  }
  var ret = func.apply(null, cArgs);
  function onDone(ret) {
    if (stack !== 0) stackRestore(stack);
    return convertReturnValue(ret);
  }

  ret = onDone(ret);
  return ret;
}

/** @param {string=} returnType
    @param {Array=} argTypes
    @param {Object=} opts */
function cwrap(ident, returnType, argTypes, opts) {
  return function() {
    return ccall(ident, returnType, argTypes, arguments, opts);
  }
}

// We used to include malloc/free by default in the past. Show a helpful error in
// builds with assertions.
function _malloc() {
  abort("malloc() called but not included in the build - add '_malloc' to EXPORTED_FUNCTIONS");
}
function _free() {
  // Show a helpful error since we used to include free by default in the past.
  abort("free() called but not included in the build - add '_free' to EXPORTED_FUNCTIONS");
}

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data.
// @allocator: How to allocate memory, see ALLOC_*
/** @type {function((Uint8Array|Array<number>), number)} */
function allocate(slab, allocator) {
  var ret;
  assert(typeof allocator === 'number', 'allocate no longer takes a type argument')
  assert(typeof slab !== 'number', 'allocate no longer takes a number as arg0')

  if (allocator == ALLOC_STACK) {
    ret = stackAlloc(slab.length);
  } else {
    ret = abort('malloc was not included, but is needed in allocate. Adding "_malloc" to EXPORTED_FUNCTIONS should fix that. This may be a bug in the compiler, please file an issue.');;
  }

  if (slab.subarray || slab.slice) {
    HEAPU8.set(/** @type {!Uint8Array} */(slab), ret);
  } else {
    HEAPU8.set(new Uint8Array(slab), ret);
  }
  return ret;
}

// include: runtime_strings.js


// runtime_strings.js: Strings related runtime functions that are part of both MINIMAL_RUNTIME and regular runtime.

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

var UTF8Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf8') : undefined;

/**
 * @param {number} idx
 * @param {number=} maxBytesToRead
 * @return {string}
 */
function UTF8ArrayToString(heap, idx, maxBytesToRead) {
  var endIdx = idx + maxBytesToRead;
  var endPtr = idx;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  // (As a tiny code save trick, compare endPtr against endIdx using a negation, so that undefined means Infinity)
  while (heap[endPtr] && !(endPtr >= endIdx)) ++endPtr;

  if (endPtr - idx > 16 && heap.subarray && UTF8Decoder) {
    return UTF8Decoder.decode(heap.subarray(idx, endPtr));
  } else {
    var str = '';
    // If building with TextDecoder, we have already computed the string length above, so test loop end condition against that
    while (idx < endPtr) {
      // For UTF8 byte structure, see:
      // http://en.wikipedia.org/wiki/UTF-8#Description
      // https://www.ietf.org/rfc/rfc2279.txt
      // https://tools.ietf.org/html/rfc3629
      var u0 = heap[idx++];
      if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
      var u1 = heap[idx++] & 63;
      if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
      var u2 = heap[idx++] & 63;
      if ((u0 & 0xF0) == 0xE0) {
        u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
      } else {
        if ((u0 & 0xF8) != 0xF0) warnOnce('Invalid UTF-8 leading byte 0x' + u0.toString(16) + ' encountered when deserializing a UTF-8 string in wasm memory to a JS string!');
        u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | (heap[idx++] & 63);
      }

      if (u0 < 0x10000) {
        str += String.fromCharCode(u0);
      } else {
        var ch = u0 - 0x10000;
        str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
      }
    }
  }
  return str;
}

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns a
// copy of that string as a Javascript String object.
// maxBytesToRead: an optional length that specifies the maximum number of bytes to read. You can omit
//                 this parameter to scan the string until the first \0 byte. If maxBytesToRead is
//                 passed, and the string at [ptr, ptr+maxBytesToReadr[ contains a null byte in the
//                 middle, then the string will cut short at that byte index (i.e. maxBytesToRead will
//                 not produce a string of exact length [ptr, ptr+maxBytesToRead[)
//                 N.B. mixing frequent uses of UTF8ToString() with and without maxBytesToRead may
//                 throw JS JIT optimizations off, so it is worth to consider consistently using one
//                 style or the other.
/**
 * @param {number} ptr
 * @param {number=} maxBytesToRead
 * @return {string}
 */
function UTF8ToString(ptr, maxBytesToRead) {
  return ptr ? UTF8ArrayToString(HEAPU8, ptr, maxBytesToRead) : '';
}

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   heap: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array.
//                    This count should include the null terminator,
//                    i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, heap, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) {
      var u1 = str.charCodeAt(++i);
      u = 0x10000 + ((u & 0x3FF) << 10) | (u1 & 0x3FF);
    }
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      heap[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      heap[outIdx++] = 0xC0 | (u >> 6);
      heap[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      heap[outIdx++] = 0xE0 | (u >> 12);
      heap[outIdx++] = 0x80 | ((u >> 6) & 63);
      heap[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 3 >= endIdx) break;
      if (u >= 0x200000) warnOnce('Invalid Unicode code point 0x' + u.toString(16) + ' encountered when serializing a JS string to a UTF-8 string in wasm memory! (Valid unicode code points should be in range 0-0x1FFFFF).');
      heap[outIdx++] = 0xF0 | (u >> 18);
      heap[outIdx++] = 0x80 | ((u >> 12) & 63);
      heap[outIdx++] = 0x80 | ((u >> 6) & 63);
      heap[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  heap[outIdx] = 0;
  return outIdx - startIdx;
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.
function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) ++len;
    else if (u <= 0x7FF) len += 2;
    else if (u <= 0xFFFF) len += 3;
    else len += 4;
  }
  return len;
}

// end include: runtime_strings.js
// include: runtime_strings_extra.js


// runtime_strings_extra.js: Strings related runtime functions that are available only in regular runtime.

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAPU8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

var UTF16Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-16le') : undefined;

function UTF16ToString(ptr, maxBytesToRead) {
  assert(ptr % 2 == 0, 'Pointer passed to UTF16ToString must be aligned to two bytes!');
  var endPtr = ptr;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  var idx = endPtr >> 1;
  var maxIdx = idx + maxBytesToRead / 2;
  // If maxBytesToRead is not passed explicitly, it will be undefined, and this
  // will always evaluate to true. This saves on code size.
  while (!(idx >= maxIdx) && HEAPU16[idx]) ++idx;
  endPtr = idx << 1;

  if (endPtr - ptr > 32 && UTF16Decoder) {
    return UTF16Decoder.decode(HEAPU8.subarray(ptr, endPtr));
  } else {
    var str = '';

    // If maxBytesToRead is not passed explicitly, it will be undefined, and the for-loop's condition
    // will always evaluate to true. The loop is then terminated on the first null char.
    for (var i = 0; !(i >= maxBytesToRead / 2); ++i) {
      var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
      if (codeUnit == 0) break;
      // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
      str += String.fromCharCode(codeUnit);
    }

    return str;
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 2 == 0, 'Pointer passed to stringToUTF16 must be aligned to two bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)] = codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)] = 0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}

function UTF32ToString(ptr, maxBytesToRead) {
  assert(ptr % 4 == 0, 'Pointer passed to UTF32ToString must be aligned to four bytes!');
  var i = 0;

  var str = '';
  // If maxBytesToRead is not passed explicitly, it will be undefined, and this
  // will always evaluate to true. This saves on code size.
  while (!(i >= maxBytesToRead / 4)) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0) break;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
  return str;
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 4 == 0, 'Pointer passed to stringToUTF32 must be aligned to four bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)] = codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)] = 0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}

// Allocate heap space for a JS string, and write it there.
// It is the responsibility of the caller to free() that memory.
function allocateUTF8(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = abort('malloc was not included, but is needed in allocateUTF8. Adding "_malloc" to EXPORTED_FUNCTIONS should fix that. This may be a bug in the compiler, please file an issue.');;
  if (ret) stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

// Allocate stack space for a JS string, and write it there.
function allocateUTF8OnStack(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = stackAlloc(size);
  stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

// Deprecated: This function should not be called because it is unsafe and does not provide
// a maximum length limit of how many bytes it is allowed to write. Prefer calling the
// function stringToUTF8Array() instead, which takes in a maximum length that can be used
// to be secure from out of bounds writes.
/** @deprecated
    @param {boolean=} dontAddNull */
function writeStringToMemory(string, buffer, dontAddNull) {
  warnOnce('writeStringToMemory is deprecated and should not be called! Use stringToUTF8() instead!');

  var /** @type {number} */ lastChar, /** @type {number} */ end;
  if (dontAddNull) {
    // stringToUTF8Array always appends null. If we don't want to do that, remember the
    // character that existed at the location where the null will be placed, and restore
    // that after the write (below).
    end = buffer + lengthBytesUTF8(string);
    lastChar = HEAP8[end];
  }
  stringToUTF8(string, buffer, Infinity);
  if (dontAddNull) HEAP8[end] = lastChar; // Restore the value under the null character.
}

function writeArrayToMemory(array, buffer) {
  assert(array.length >= 0, 'writeArrayToMemory array must have a length (should be an array or typed array)')
  HEAP8.set(array, buffer);
}

/** @param {boolean=} dontAddNull */
function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[((buffer++)>>0)] = str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)] = 0;
}

// end include: runtime_strings_extra.js
// Memory management

function alignUp(x, multiple) {
  if (x % multiple > 0) {
    x += multiple - (x % multiple);
  }
  return x;
}

var HEAP,
/** @type {ArrayBuffer} */
  buffer,
/** @type {Int8Array} */
  HEAP8,
/** @type {Uint8Array} */
  HEAPU8,
/** @type {Int16Array} */
  HEAP16,
/** @type {Uint16Array} */
  HEAPU16,
/** @type {Int32Array} */
  HEAP32,
/** @type {Uint32Array} */
  HEAPU32,
/** @type {Float32Array} */
  HEAPF32,
/** @type {Float64Array} */
  HEAPF64;

function updateGlobalBufferAndViews(buf) {
  buffer = buf;
  Module['HEAP8'] = HEAP8 = new Int8Array(buf);
  Module['HEAP16'] = HEAP16 = new Int16Array(buf);
  Module['HEAP32'] = HEAP32 = new Int32Array(buf);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buf);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buf);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buf);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(buf);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(buf);
}

var TOTAL_STACK = 5242880;
if (Module['TOTAL_STACK']) assert(TOTAL_STACK === Module['TOTAL_STACK'], 'the stack size can no longer be determined at runtime')

var INITIAL_MEMORY = Module['INITIAL_MEMORY'] || 16777216;
if (!Object.getOwnPropertyDescriptor(Module, 'INITIAL_MEMORY')) {
  Object.defineProperty(Module, 'INITIAL_MEMORY', {
    configurable: true,
    get: function() {
      abort('Module.INITIAL_MEMORY has been replaced with plain INITIAL_MEMORY (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)')
    }
  });
}

assert(INITIAL_MEMORY >= TOTAL_STACK, 'INITIAL_MEMORY should be larger than TOTAL_STACK, was ' + INITIAL_MEMORY + '! (TOTAL_STACK=' + TOTAL_STACK + ')');

// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && Int32Array.prototype.subarray !== undefined && Int32Array.prototype.set !== undefined,
       'JS engine does not provide full typed array support');

// In non-standalone/normal mode, we create the memory here.
// include: runtime_init_memory.js


// Create the wasm memory. (Note: this only applies if IMPORTED_MEMORY is defined)

  if (Module['wasmMemory']) {
    wasmMemory = Module['wasmMemory'];
  } else
  {
    wasmMemory = new WebAssembly.Memory({
      'initial': INITIAL_MEMORY / 65536,
      // In theory we should not need to emit the maximum if we want "unlimited"
      // or 4GB of memory, but VMs error on that atm, see
      // https://github.com/emscripten-core/emscripten/issues/14130
      // And in the pthreads case we definitely need to emit a maximum. So
      // always emit one.
      'maximum': 2147483648 / 65536
    });
  }

if (wasmMemory) {
  buffer = wasmMemory.buffer;
}

// If the user provides an incorrect length, just use that length instead rather than providing the user to
// specifically provide the memory length with Module['INITIAL_MEMORY'].
INITIAL_MEMORY = buffer.byteLength;
assert(INITIAL_MEMORY % 65536 === 0);
updateGlobalBufferAndViews(buffer);

// end include: runtime_init_memory.js

// include: runtime_init_table.js
// In regular non-RELOCATABLE mode the table is exported
// from the wasm module and this will be assigned once
// the exports are available.
var wasmTable;

// end include: runtime_init_table.js
// include: runtime_stack_check.js


// Initializes the stack cookie. Called at the startup of main and at the startup of each thread in pthreads mode.
function writeStackCookie() {
  var max = _emscripten_stack_get_end();
  assert((max & 3) == 0);
  // The stack grows downwards
  HEAPU32[(max >> 2)+1] = 0x2135467;
  HEAPU32[(max >> 2)+2] = 0x89BACDFE;
  // Also test the global address 0 for integrity.
  HEAP32[0] = 0x63736d65; /* 'emsc' */
}

function checkStackCookie() {
  if (ABORT) return;
  var max = _emscripten_stack_get_end();
  var cookie1 = HEAPU32[(max >> 2)+1];
  var cookie2 = HEAPU32[(max >> 2)+2];
  if (cookie1 != 0x2135467 || cookie2 != 0x89BACDFE) {
    abort('Stack overflow! Stack cookie has been overwritten, expected hex dwords 0x89BACDFE and 0x2135467, but received 0x' + cookie2.toString(16) + ' ' + cookie1.toString(16));
  }
  // Also test the global address 0 for integrity.
  if (HEAP32[0] !== 0x63736d65 /* 'emsc' */) abort('Runtime error: The application has corrupted its heap memory area (address zero)!');
}

// end include: runtime_stack_check.js
// include: runtime_assertions.js


// Endianness check
(function() {
  var h16 = new Int16Array(1);
  var h8 = new Int8Array(h16.buffer);
  h16[0] = 0x6373;
  if (h8[0] !== 0x73 || h8[1] !== 0x63) throw 'Runtime error: expected the system to be little-endian! (Run with -s SUPPORT_BIG_ENDIAN=1 to bypass)';
})();

// end include: runtime_assertions.js
var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the main() is called

var runtimeInitialized = false;
var runtimeExited = false;
var runtimeKeepaliveCounter = 0;

function keepRuntimeAlive() {
  return noExitRuntime || runtimeKeepaliveCounter > 0;
}

function preRun() {

  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }

  callRuntimeCallbacks(__ATPRERUN__);
}

function initRuntime() {
  checkStackCookie();
  assert(!runtimeInitialized);
  runtimeInitialized = true;

  
if (!Module["noFSInit"] && !FS.init.initialized)
  FS.init();
FS.ignorePermissions = false;

TTY.init();
  callRuntimeCallbacks(__ATINIT__);
}

function exitRuntime() {
  checkStackCookie();
  runtimeExited = true;
}

function postRun() {
  checkStackCookie();

  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }

  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}

function addOnExit(cb) {
}

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}

// include: runtime_math.js


// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/imul

// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/fround

// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/clz32

// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/trunc

assert(Math.imul, 'This browser does not support Math.imul(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');
assert(Math.fround, 'This browser does not support Math.fround(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');
assert(Math.clz32, 'This browser does not support Math.clz32(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');
assert(Math.trunc, 'This browser does not support Math.trunc(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');

// end include: runtime_math.js
// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// Module.preRun (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function getUniqueRunDependency(id) {
  var orig = id;
  while (1) {
    if (!runDependencyTracking[id]) return id;
    id = orig + Math.random();
  }
}

function addRunDependency(id) {
  runDependencies++;

  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }

  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            err('still waiting on run dependencies:');
          }
          err('dependency: ' + dep);
        }
        if (shown) {
          err('(end of list)');
        }
      }, 10000);
    }
  } else {
    err('warning: run dependency added without ID');
  }
}

function removeRunDependency(id) {
  runDependencies--;

  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }

  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    err('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data

/** @param {string|number=} what */
function abort(what) {
  if (Module['onAbort']) {
    Module['onAbort'](what);
  }

  what += '';
  err(what);

  ABORT = true;
  EXITSTATUS = 1;

  var output = 'abort(' + what + ') at ' + stackTrace();
  what = output;

  // Use a wasm runtime error, because a JS error might be seen as a foreign
  // exception, which means we'd run destructors on it. We need the error to
  // simply make the program stop.
  var e = new WebAssembly.RuntimeError(what);

  // Throw the error whether or not MODULARIZE is set because abort is used
  // in code paths apart from instantiation where an exception is expected
  // to be thrown when abort is called.
  throw e;
}

// {{MEM_INITIALIZER}}

// include: memoryprofiler.js


// end include: memoryprofiler.js
// include: URIUtils.js


// Prefix of data URIs emitted by SINGLE_FILE and related options.
var dataURIPrefix = 'data:application/octet-stream;base64,';

// Indicates whether filename is a base64 data URI.
function isDataURI(filename) {
  // Prefix of data URIs emitted by SINGLE_FILE and related options.
  return filename.startsWith(dataURIPrefix);
}

// Indicates whether filename is delivered via file protocol (as opposed to http/https)
function isFileURI(filename) {
  return filename.startsWith('file://');
}

// end include: URIUtils.js
function createExportWrapper(name, fixedasm) {
  return function() {
    var displayName = name;
    var asm = fixedasm;
    if (!fixedasm) {
      asm = Module['asm'];
    }
    assert(runtimeInitialized, 'native function `' + displayName + '` called before runtime initialization');
    assert(!runtimeExited, 'native function `' + displayName + '` called after runtime exit (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
    if (!asm[name]) {
      assert(asm[name], 'exported native function `' + displayName + '` not found');
    }
    return asm[name].apply(null, arguments);
  };
}

var wasmBinaryFile;
  wasmBinaryFile = 'libflac.dev.wasm';
  if (!isDataURI(wasmBinaryFile)) {
    wasmBinaryFile = locateFile(wasmBinaryFile);
  }

function getBinary(file) {
  try {
    if (file == wasmBinaryFile && wasmBinary) {
      return new Uint8Array(wasmBinary);
    }
    var binary = tryParseAsDataURI(file);
    if (binary) {
      return binary;
    }
    if (readBinary) {
      return readBinary(file);
    } else {
      throw "both async and sync fetching of the wasm failed";
    }
  }
  catch (err) {
    abort(err);
  }
}

function getBinaryPromise() {
  // If we don't have the binary yet, try to to load it asynchronously.
  // Fetch has some additional restrictions over XHR, like it can't be used on a file:// url.
  // See https://github.com/github/fetch/pull/92#issuecomment-140665932
  // Cordova or Electron apps are typically loaded from a file:// url.
  // So use fetch if it is available and the url is not a file, otherwise fall back to XHR.
  if (!wasmBinary && (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER)) {
    if (typeof fetch === 'function'
      && !isFileURI(wasmBinaryFile)
    ) {
      return fetch(wasmBinaryFile, { credentials: 'same-origin' }).then(function(response) {
        if (!response['ok']) {
          throw "failed to load wasm binary file at '" + wasmBinaryFile + "'";
        }
        return response['arrayBuffer']();
      }).catch(function () {
          return getBinary(wasmBinaryFile);
      });
    }
    else {
      if (readAsync) {
        // fetch is not available or url is file => try XHR (readAsync uses XHR internally)
        return new Promise(function(resolve, reject) {
          readAsync(wasmBinaryFile, function(response) { resolve(new Uint8Array(/** @type{!ArrayBuffer} */(response))) }, reject)
        });
      }
    }
  }

  // Otherwise, getBinary should be able to get it synchronously
  return Promise.resolve().then(function() { return getBinary(wasmBinaryFile); });
}

// Create the wasm instance.
// Receives the wasm imports, returns the exports.
function createWasm() {
  // prepare imports
  var info = {
    'env': asmLibraryArg,
    'wasi_snapshot_preview1': asmLibraryArg,
  };
  // Load the wasm module and create an instance of using native support in the JS engine.
  // handle a generated wasm instance, receiving its exports and
  // performing other necessary setup
  /** @param {WebAssembly.Module=} module*/
  function receiveInstance(instance, module) {
    var exports = instance.exports;

    Module['asm'] = exports;

    wasmTable = Module['asm']['__indirect_function_table'];
    assert(wasmTable, "table not found in wasm exports");

    addOnInit(Module['asm']['__wasm_call_ctors']);

    removeRunDependency('wasm-instantiate');
  }
  // we can't run yet (except in a pthread, where we have a custom sync instantiator)
  addRunDependency('wasm-instantiate');

  // Prefer streaming instantiation if available.
  // Async compilation can be confusing when an error on the page overwrites Module
  // (for example, if the order of elements is wrong, and the one defining Module is
  // later), so we save Module and check it later.
  var trueModule = Module;
  function receiveInstantiationResult(result) {
    // 'result' is a ResultObject object which has both the module and instance.
    // receiveInstance() will swap in the exports (to Module.asm) so they can be called
    assert(Module === trueModule, 'the Module object should not be replaced during async compilation - perhaps the order of HTML elements is wrong?');
    trueModule = null;
    // TODO: Due to Closure regression https://github.com/google/closure-compiler/issues/3193, the above line no longer optimizes out down to the following line.
    // When the regression is fixed, can restore the above USE_PTHREADS-enabled path.
    receiveInstance(result['instance']);
  }

  function instantiateArrayBuffer(receiver) {
    return getBinaryPromise().then(function(binary) {
      var result = WebAssembly.instantiate(binary, info);
      return result;
    }).then(receiver, function(reason) {
      err('failed to asynchronously prepare wasm: ' + reason);

      // Warn on some common problems.
      if (isFileURI(wasmBinaryFile)) {
        err('warning: Loading from a file URI (' + wasmBinaryFile + ') is not supported in most browsers. See https://emscripten.org/docs/getting_started/FAQ.html#how-do-i-run-a-local-webserver-for-testing-why-does-my-program-stall-in-downloading-or-preparing');
      }
      abort(reason);
    });
  }

  function instantiateAsync() {
    if (!wasmBinary &&
        typeof WebAssembly.instantiateStreaming === 'function' &&
        !isDataURI(wasmBinaryFile) &&
        // Don't use streaming for file:// delivered objects in a webview, fetch them synchronously.
        !isFileURI(wasmBinaryFile) &&
        typeof fetch === 'function') {
      return fetch(wasmBinaryFile, { credentials: 'same-origin' }).then(function (response) {
        var result = WebAssembly.instantiateStreaming(response, info);

        return result.then(
          receiveInstantiationResult,
          function(reason) {
            // We expect the most common failure cause to be a bad MIME type for the binary,
            // in which case falling back to ArrayBuffer instantiation should work.
            err('wasm streaming compile failed: ' + reason);
            err('falling back to ArrayBuffer instantiation');
            return instantiateArrayBuffer(receiveInstantiationResult);
          });
      });
    } else {
      return instantiateArrayBuffer(receiveInstantiationResult);
    }
  }

  // User shell pages can write their own Module.instantiateWasm = function(imports, successCallback) callback
  // to manually instantiate the Wasm module themselves. This allows pages to run the instantiation parallel
  // to any other async startup actions they are performing.
  if (Module['instantiateWasm']) {
    try {
      var exports = Module['instantiateWasm'](info, receiveInstance);
      return exports;
    } catch(e) {
      err('Module.instantiateWasm callback failed with error: ' + e);
      return false;
    }
  }

  instantiateAsync();
  return {}; // no exports yet; we'll fill them in later
}

// Globals used by JS i64 conversions (see makeSetValue)
var tempDouble;
var tempI64;

// === Body ===

var ASM_CONSTS = {
  
};






  function callRuntimeCallbacks(callbacks) {
      while (callbacks.length > 0) {
        var callback = callbacks.shift();
        if (typeof callback == 'function') {
          callback(Module); // Pass the module as the first argument.
          continue;
        }
        var func = callback.func;
        if (typeof func === 'number') {
          if (callback.arg === undefined) {
            wasmTable.get(func)();
          } else {
            wasmTable.get(func)(callback.arg);
          }
        } else {
          func(callback.arg === undefined ? null : callback.arg);
        }
      }
    }

  function demangle(func) {
      warnOnce('warning: build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
      return func;
    }

  function demangleAll(text) {
      var regex =
        /\b_Z[\w\d_]+/g;
      return text.replace(regex,
        function(x) {
          var y = demangle(x);
          return x === y ? x : (y + ' [' + x + ']');
        });
    }

  function jsStackTrace() {
      var error = new Error();
      if (!error.stack) {
        // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
        // so try that as a special-case.
        try {
          throw new Error();
        } catch(e) {
          error = e;
        }
        if (!error.stack) {
          return '(no stack trace available)';
        }
      }
      return error.stack.toString();
    }

  function stackTrace() {
      var js = jsStackTrace();
      if (Module['extraStackTrace']) js += '\n' + Module['extraStackTrace']();
      return demangleAll(js);
    }

  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.copyWithin(dest, src, src + num);
    }

  function emscripten_realloc_buffer(size) {
      try {
        // round size grow request up to wasm page size (fixed 64KB per spec)
        wasmMemory.grow((size - buffer.byteLength + 65535) >>> 16); // .grow() takes a delta compared to the previous size
        updateGlobalBufferAndViews(wasmMemory.buffer);
        return 1 /*success*/;
      } catch(e) {
        err('emscripten_realloc_buffer: Attempted to grow heap from ' + buffer.byteLength  + ' bytes to ' + size + ' bytes, but got error: ' + e);
      }
      // implicit 0 return to save code size (caller will cast "undefined" into 0
      // anyhow)
    }
  function _emscripten_resize_heap(requestedSize) {
      var oldSize = HEAPU8.length;
      requestedSize = requestedSize >>> 0;
      // With pthreads, races can happen (another thread might increase the size in between), so return a failure, and let the caller retry.
      assert(requestedSize > oldSize);
  
      // Memory resize rules:
      // 1. Always increase heap size to at least the requested size, rounded up to next page multiple.
      // 2a. If MEMORY_GROWTH_LINEAR_STEP == -1, excessively resize the heap geometrically: increase the heap size according to 
      //                                         MEMORY_GROWTH_GEOMETRIC_STEP factor (default +20%),
      //                                         At most overreserve by MEMORY_GROWTH_GEOMETRIC_CAP bytes (default 96MB).
      // 2b. If MEMORY_GROWTH_LINEAR_STEP != -1, excessively resize the heap linearly: increase the heap size by at least MEMORY_GROWTH_LINEAR_STEP bytes.
      // 3. Max size for the heap is capped at 2048MB-WASM_PAGE_SIZE, or by MAXIMUM_MEMORY, or by ASAN limit, depending on which is smallest
      // 4. If we were unable to allocate as much memory, it may be due to over-eager decision to excessively reserve due to (3) above.
      //    Hence if an allocation fails, cut down on the amount of excess growth, in an attempt to succeed to perform a smaller allocation.
  
      // A limit is set for how much we can grow. We should not exceed that
      // (the wasm binary specifies it, so if we tried, we'd fail anyhow).
      // In CAN_ADDRESS_2GB mode, stay one Wasm page short of 4GB: while e.g. Chrome is able to allocate full 4GB Wasm memories, the size will wrap
      // back to 0 bytes in Wasm side for any code that deals with heap sizes, which would require special casing all heap size related code to treat
      // 0 specially.
      var maxHeapSize = 2147483648;
      if (requestedSize > maxHeapSize) {
        err('Cannot enlarge memory, asked to go up to ' + requestedSize + ' bytes, but the limit is ' + maxHeapSize + ' bytes!');
        return false;
      }
  
      // Loop through potential heap size increases. If we attempt a too eager reservation that fails, cut down on the
      // attempted size and reserve a smaller bump instead. (max 3 times, chosen somewhat arbitrarily)
      for (var cutDown = 1; cutDown <= 4; cutDown *= 2) {
        var overGrownHeapSize = oldSize * (1 + 0.2 / cutDown); // ensure geometric growth
        // but limit overreserving (default to capping at +96MB overgrowth at most)
        overGrownHeapSize = Math.min(overGrownHeapSize, requestedSize + 100663296 );
  
        var newSize = Math.min(maxHeapSize, alignUp(Math.max(requestedSize, overGrownHeapSize), 65536));
  
        var replacement = emscripten_realloc_buffer(newSize);
        if (replacement) {
          err('Warning: Enlarging memory arrays, this is not fast! ' + [oldSize, newSize]);
  
          return true;
        }
      }
      err('Failed to grow the heap from ' + oldSize + ' bytes to ' + newSize + ' bytes, not enough memory!');
      return false;
    }

  var PATH = {splitPath:function(filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function(parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up; up--) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function(path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function(path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function(path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        path = PATH.normalize(path);
        path = path.replace(/\/$/, "");
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function(path) {
        return PATH.splitPath(path)[3];
      },join:function() {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function(l, r) {
        return PATH.normalize(l + '/' + r);
      }};
  
  function getRandomDevice() {
      if (typeof crypto === 'object' && typeof crypto['getRandomValues'] === 'function') {
        // for modern web browsers
        var randomBuffer = new Uint8Array(1);
        return function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
      } else
      if (ENVIRONMENT_IS_NODE) {
        // for nodejs with or without crypto support included
        try {
          var crypto_module = require('crypto');
          // nodejs has crypto support
          return function() { return crypto_module['randomBytes'](1)[0]; };
        } catch (e) {
          // nodejs doesn't have crypto support
        }
      }
      // we couldn't find a proper implementation, as Math.random() is not suitable for /dev/random, see emscripten-core/emscripten/pull/7096
      return function() { abort("no cryptographic support found for randomDevice. consider polyfilling it if you want to use something insecure like Math.random(), e.g. put this in a --pre-js: var crypto = { getRandomValues: function(array) { for (var i = 0; i < array.length; i++) array[i] = (Math.random()*256)|0 } };"); };
    }
  
  var PATH_FS = {resolve:function() {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function(from, to) {
        from = PATH_FS.resolve(from).substr(1);
        to = PATH_FS.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY = {ttys:[],init:function () {
        // https://github.com/emscripten-core/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function() {
        // https://github.com/emscripten-core/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function(dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function(stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(43);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function(stream) {
          // flush any pending line data
          stream.tty.ops.flush(stream.tty);
        },flush:function(stream) {
          stream.tty.ops.flush(stream.tty);
        },read:function(stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(60);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(29);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(6);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function(stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(60);
          }
          try {
            for (var i = 0; i < length; i++) {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            }
          } catch (e) {
            throw new FS.ErrnoError(29);
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function(tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              // we will read data by chunks of BUFSIZE
              var BUFSIZE = 256;
              var buf = Buffer.alloc(BUFSIZE);
              var bytesRead = 0;
  
              try {
                bytesRead = nodeFS.readSync(process.stdin.fd, buf, 0, BUFSIZE, null);
              } catch(e) {
                // Cross-platform differences: on Windows, reading EOF throws an exception, but on other OSes,
                // reading EOF returns 0. Uniformize behavior by treating the EOF exception to return 0.
                if (e.toString().includes('EOF')) bytesRead = 0;
                else throw e;
              }
  
              if (bytesRead > 0) {
                result = buf.slice(0, bytesRead).toString('utf-8');
              } else {
                result = null;
              }
            } else
            if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function(tty, val) {
          if (val === null || val === 10) {
            out(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val); // val == 0 would cut text output off in the middle.
          }
        },flush:function(tty) {
          if (tty.output && tty.output.length > 0) {
            out(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }},default_tty1_ops:{put_char:function(tty, val) {
          if (val === null || val === 10) {
            err(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val);
          }
        },flush:function(tty) {
          if (tty.output && tty.output.length > 0) {
            err(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }}};
  
  function zeroMemory(address, size) {
      HEAPU8.fill(0, address, address + size);
    }
  
  function alignMemory(size, alignment) {
      assert(alignment, "alignment argument is required");
      return Math.ceil(size / alignment) * alignment;
    }
  function mmapAlloc(size) {
      abort('internal error: mmapAlloc called but `memalign` native symbol not exported');
    }
  var MEMFS = {ops_table:null,mount:function(mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function(parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(63);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap,
                msync: MEMFS.stream_ops.msync
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            }
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.length which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
          parent.timestamp = node.timestamp;
        }
        return node;
      },getFileDataAsTypedArray:function(node) {
        if (!node.contents) return new Uint8Array(0);
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function(node, newCapacity) {
        var prevCapacity = node.contents ? node.contents.length : 0;
        if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
        // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
        // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
        // avoid overshooting the allocation cap by a very large margin.
        var CAPACITY_DOUBLING_MAX = 1024 * 1024;
        newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) >>> 0);
        if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
        var oldContents = node.contents;
        node.contents = new Uint8Array(newCapacity); // Allocate new storage.
        if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
      },resizeFileStorage:function(node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
        } else {
          var oldContents = node.contents;
          node.contents = new Uint8Array(newSize); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
        }
      },node_ops:{getattr:function(node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function(node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function(parent, name) {
          throw FS.genericErrors[44];
        },mknod:function(parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function(old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(55);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.parent.timestamp = Date.now()
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          new_dir.timestamp = old_node.parent.timestamp;
          old_node.parent = new_dir;
        },unlink:function(parent, name) {
          delete parent.contents[name];
          parent.timestamp = Date.now();
        },rmdir:function(parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(55);
          }
          delete parent.contents[name];
          parent.timestamp = Date.now();
        },readdir:function(node) {
          var entries = ['.', '..'];
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function(parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function(node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(28);
          }
          return node.link;
        }},stream_ops:{read:function(stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function(stream, buffer, offset, length, position, canOwn) {
          // The data buffer should be a typed array view
          assert(!(buffer instanceof ArrayBuffer));
          // If the buffer is located in main memory (HEAP), and if
          // memory can grow, we can't hold on to references of the
          // memory buffer, as they may get invalidated. That means we
          // need to do copy its contents.
          if (buffer.buffer === HEAP8.buffer) {
            canOwn = false;
          }
  
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) {
              assert(position === 0, 'canOwn must imply no weird position inside the file');
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = buffer.slice(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
  
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) {
            // Use typed array write which is available.
            node.contents.set(buffer.subarray(offset, offset + length), position);
          } else {
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          }
          node.usedBytes = Math.max(node.usedBytes, position + length);
          return length;
        },llseek:function(stream, offset, whence) {
          var position = offset;
          if (whence === 1) {
            position += stream.position;
          } else if (whence === 2) {
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(28);
          }
          return position;
        },allocate:function(stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function(stream, address, length, position, prot, flags) {
          if (address !== 0) {
            // We don't currently support location hints for the address of the mapping
            throw new FS.ErrnoError(28);
          }
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(43);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if (!(flags & 2) && contents.buffer === buffer) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < contents.length) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = mmapAlloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(48);
            }
            HEAP8.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        },msync:function(stream, buffer, offset, length, mmapFlags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(43);
          }
          if (mmapFlags & 2) {
            // MAP_PRIVATE calls need not to be synced back to underlying fs
            return 0;
          }
  
          var bytesWritten = MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);
          // should we check if bytesWritten and length are the same?
          return 0;
        }}};
  
  function asyncLoad(url, onload, onerror, noRunDep) {
      var dep = !noRunDep ? getUniqueRunDependency('al ' + url) : '';
      readAsync(url, function(arrayBuffer) {
        assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
        onload(new Uint8Array(arrayBuffer));
        if (dep) removeRunDependency(dep);
      }, function(event) {
        if (onerror) {
          onerror();
        } else {
          throw 'Loading data file "' + url + '" failed.';
        }
      });
      if (dep) addRunDependency(dep);
    }
  
  var ERRNO_MESSAGES = {0:"Success",1:"Arg list too long",2:"Permission denied",3:"Address already in use",4:"Address not available",5:"Address family not supported by protocol family",6:"No more processes",7:"Socket already connected",8:"Bad file number",9:"Trying to read unreadable message",10:"Mount device busy",11:"Operation canceled",12:"No children",13:"Connection aborted",14:"Connection refused",15:"Connection reset by peer",16:"File locking deadlock error",17:"Destination address required",18:"Math arg out of domain of func",19:"Quota exceeded",20:"File exists",21:"Bad address",22:"File too large",23:"Host is unreachable",24:"Identifier removed",25:"Illegal byte sequence",26:"Connection already in progress",27:"Interrupted system call",28:"Invalid argument",29:"I/O error",30:"Socket is already connected",31:"Is a directory",32:"Too many symbolic links",33:"Too many open files",34:"Too many links",35:"Message too long",36:"Multihop attempted",37:"File or path name too long",38:"Network interface is not configured",39:"Connection reset by network",40:"Network is unreachable",41:"Too many open files in system",42:"No buffer space available",43:"No such device",44:"No such file or directory",45:"Exec format error",46:"No record locks available",47:"The link has been severed",48:"Not enough core",49:"No message of desired type",50:"Protocol not available",51:"No space left on device",52:"Function not implemented",53:"Socket is not connected",54:"Not a directory",55:"Directory not empty",56:"State not recoverable",57:"Socket operation on non-socket",59:"Not a typewriter",60:"No such device or address",61:"Value too large for defined data type",62:"Previous owner died",63:"Not super-user",64:"Broken pipe",65:"Protocol error",66:"Unknown protocol",67:"Protocol wrong type for socket",68:"Math result not representable",69:"Read only file system",70:"Illegal seek",71:"No such process",72:"Stale file handle",73:"Connection timed out",74:"Text file busy",75:"Cross-device link",100:"Device not a stream",101:"Bad font file fmt",102:"Invalid slot",103:"Invalid request code",104:"No anode",105:"Block device required",106:"Channel number out of range",107:"Level 3 halted",108:"Level 3 reset",109:"Link number out of range",110:"Protocol driver not attached",111:"No CSI structure available",112:"Level 2 halted",113:"Invalid exchange",114:"Invalid request descriptor",115:"Exchange full",116:"No data (for no delay io)",117:"Timer expired",118:"Out of streams resources",119:"Machine is not on the network",120:"Package not installed",121:"The object is remote",122:"Advertise error",123:"Srmount error",124:"Communication error on send",125:"Cross mount point (not really error)",126:"Given log. name not unique",127:"f.d. invalid for this operation",128:"Remote address changed",129:"Can   access a needed shared lib",130:"Accessing a corrupted shared lib",131:".lib section in a.out corrupted",132:"Attempting to link in too many libs",133:"Attempting to exec a shared library",135:"Streams pipe error",136:"Too many users",137:"Socket type not supported",138:"Not supported",139:"Protocol family not supported",140:"Can't send after socket shutdown",141:"Too many references",142:"Host is down",148:"No medium (in tape drive)",156:"Level 2 not synchronized"};
  
  var ERRNO_CODES = {};
  var FS = {root:null,mounts:[],devices:{},streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},filesystems:null,syncFSRequests:0,lookupPath:function(path, opts) {
        path = PATH_FS.resolve(FS.cwd(), path);
        opts = opts || {};
  
        if (!path) return { path: '', node: null };
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(32);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH_FS.resolve(PATH.dirname(current_path), link);
  
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(32);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function(node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function(parentid, name) {
        var hash = 0;
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function(node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function(node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function(parent, name) {
        var errCode = FS.mayLookup(parent);
        if (errCode) {
          throw new FS.ErrnoError(errCode, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function(parent, name, mode, rdev) {
        assert(typeof parent === 'object')
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function(node) {
        FS.hashRemoveNode(node);
      },isRoot:function(node) {
        return node === node.parent;
      },isMountpoint:function(node) {
        return !!node.mounted;
      },isFile:function(mode) {
        return (mode & 61440) === 32768;
      },isDir:function(mode) {
        return (mode & 61440) === 16384;
      },isLink:function(mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function(mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function(mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function(mode) {
        return (mode & 61440) === 4096;
      },isSocket:function(mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"r+":2,"w":577,"w+":578,"a":1089,"a+":1090},modeStringToFlags:function(str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function(flag) {
        var perms = ['r', 'w', 'rw'][flag & 3];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function(node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.includes('r') && !(node.mode & 292)) {
          return 2;
        } else if (perms.includes('w') && !(node.mode & 146)) {
          return 2;
        } else if (perms.includes('x') && !(node.mode & 73)) {
          return 2;
        }
        return 0;
      },mayLookup:function(dir) {
        var errCode = FS.nodePermissions(dir, 'x');
        if (errCode) return errCode;
        if (!dir.node_ops.lookup) return 2;
        return 0;
      },mayCreate:function(dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return 20;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function(dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var errCode = FS.nodePermissions(dir, 'wx');
        if (errCode) {
          return errCode;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return 54;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return 10;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return 31;
          }
        }
        return 0;
      },mayOpen:function(node, flags) {
        if (!node) {
          return 44;
        }
        if (FS.isLink(node.mode)) {
          return 32;
        } else if (FS.isDir(node.mode)) {
          if (FS.flagsToPermissionString(flags) !== 'r' || // opening for write
              (flags & 512)) { // TODO: check for O_SEARCH? (== search for dir only)
            return 31;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function(fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(33);
      },getStream:function(fd) {
        return FS.streams[fd];
      },createStream:function(stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = /** @constructor */ function(){};
          FS.FSStream.prototype = {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          };
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function(fd) {
        FS.streams[fd] = null;
      },chrdev_stream_ops:{open:function(stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function() {
          throw new FS.ErrnoError(70);
        }},major:function(dev) {
        return ((dev) >> 8);
      },minor:function(dev) {
        return ((dev) & 0xff);
      },makedev:function(ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function(dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function(dev) {
        return FS.devices[dev];
      },getMounts:function(mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function(populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        FS.syncFSRequests++;
  
        if (FS.syncFSRequests > 1) {
          err('warning: ' + FS.syncFSRequests + ' FS.syncfs operations in flight at once, probably just doing extra work');
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function doCallback(errCode) {
          assert(FS.syncFSRequests > 0);
          FS.syncFSRequests--;
          return callback(errCode);
        }
  
        function done(errCode) {
          if (errCode) {
            if (!done.errored) {
              done.errored = true;
              return doCallback(errCode);
            }
            return;
          }
          if (++completed >= mounts.length) {
            doCallback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function(type, opts, mountpoint) {
        if (typeof type === 'string') {
          // The filesystem was not included, and instead we have an error
          // message stored in the variable.
          throw type;
        }
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(10);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(10);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(54);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(28);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.includes(current.mount)) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function(parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function(path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(28);
        }
        var errCode = FS.mayCreate(parent, name);
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(63);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function(path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function(path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdirTree:function(path, mode) {
        var dirs = path.split('/');
        var d = '';
        for (var i = 0; i < dirs.length; ++i) {
          if (!dirs[i]) continue;
          d += '/' + dirs[i];
          try {
            FS.mkdir(d, mode);
          } catch(e) {
            if (e.errno != 20) throw e;
          }
        }
      },mkdev:function(path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function(oldpath, newpath) {
        if (!PATH_FS.resolve(oldpath)) {
          throw new FS.ErrnoError(44);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(44);
        }
        var newname = PATH.basename(newpath);
        var errCode = FS.mayCreate(parent, newname);
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(63);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function(old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
  
        // let the errors from non existant directories percolate up
        lookup = FS.lookupPath(old_path, { parent: true });
        old_dir = lookup.node;
        lookup = FS.lookupPath(new_path, { parent: true });
        new_dir = lookup.node;
  
        if (!old_dir || !new_dir) throw new FS.ErrnoError(44);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(75);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH_FS.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(28);
        }
        // new path should not be an ancestor of the old path
        relative = PATH_FS.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(55);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var errCode = FS.mayDelete(old_dir, old_name, isdir);
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        errCode = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(63);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(10);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          errCode = FS.nodePermissions(old_dir, 'w');
          if (errCode) {
            throw new FS.ErrnoError(errCode);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          err("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          err("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function(path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var errCode = FS.mayDelete(parent, name, true);
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(63);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(10);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          err("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          err("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function(path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(54);
        }
        return node.node_ops.readdir(node);
      },unlink:function(path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var errCode = FS.mayDelete(parent, name, false);
        if (errCode) {
          // According to POSIX, we should map EISDIR to EPERM, but
          // we instead do what Linux does (and we must, as we use
          // the musl linux libc).
          throw new FS.ErrnoError(errCode);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(63);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(10);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          err("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          err("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function(path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(44);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(28);
        }
        return PATH_FS.resolve(FS.getPath(link.parent), link.node_ops.readlink(link));
      },stat:function(path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(44);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(63);
        }
        return node.node_ops.getattr(node);
      },lstat:function(path) {
        return FS.stat(path, true);
      },chmod:function(path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(63);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function(path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function(fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(8);
        }
        FS.chmod(stream.node, mode);
      },chown:function(path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(63);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function(path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function(fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(8);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function(path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(28);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(63);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(31);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(28);
        }
        var errCode = FS.nodePermissions(node, 'w');
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function(fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(8);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(28);
        }
        FS.truncate(stream.node, len);
      },utime:function(path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function(path, flags, mode, fd_start, fd_end) {
        if (path === "") {
          throw new FS.ErrnoError(44);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(20);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(44);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // if asked only for a directory, then this must be one
        if ((flags & 65536) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(54);
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var errCode = FS.mayOpen(node, flags);
          if (errCode) {
            throw new FS.ErrnoError(errCode);
          }
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512 | 131072);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            err("FS.trackingDelegate error on read file: " + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          err("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function(stream) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if (stream.getdents) stream.getdents = null; // free readdir state
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
        stream.fd = null;
      },isClosed:function(stream) {
        return stream.fd === null;
      },llseek:function(stream, offset, whence) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(70);
        }
        if (whence != 0 && whence != 1 && whence != 2) {
          throw new FS.ErrnoError(28);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
      },read:function(stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(28);
        }
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(8);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(31);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(28);
        }
        var seeking = typeof position !== 'undefined';
        if (!seeking) {
          position = stream.position;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(70);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function(stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(28);
        }
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(8);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(31);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(28);
        }
        if (stream.seekable && stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = typeof position !== 'undefined';
        if (!seeking) {
          position = stream.position;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(70);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          err("FS.trackingDelegate['onWriteToFile']('"+stream.path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function(stream, offset, length) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(28);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(8);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(43);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(138);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function(stream, address, length, position, prot, flags) {
        // User requests writing to file (prot & PROT_WRITE != 0).
        // Checking if we have permissions to write to the file unless
        // MAP_PRIVATE flag is set. According to POSIX spec it is possible
        // to write to file opened in read-only mode with MAP_PRIVATE flag,
        // as all modifications will be visible only in the memory of
        // the current process.
        if ((prot & 2) !== 0
            && (flags & 2) === 0
            && (stream.flags & 2097155) !== 2) {
          throw new FS.ErrnoError(2);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(2);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(43);
        }
        return stream.stream_ops.mmap(stream, address, length, position, prot, flags);
      },msync:function(stream, buffer, offset, length, mmapFlags) {
        if (!stream || !stream.stream_ops.msync) {
          return 0;
        }
        return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags);
      },munmap:function(stream) {
        return 0;
      },ioctl:function(stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(59);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function(path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 0;
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = UTF8ArrayToString(buf, 0);
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function(path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 577;
        var stream = FS.open(path, opts.flags, opts.mode);
        if (typeof data === 'string') {
          var buf = new Uint8Array(lengthBytesUTF8(data)+1);
          var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
          FS.write(stream, buf, 0, actualNumBytes, undefined, opts.canOwn);
        } else if (ArrayBuffer.isView(data)) {
          FS.write(stream, data, 0, data.byteLength, undefined, opts.canOwn);
        } else {
          throw new Error('Unsupported data type');
        }
        FS.close(stream);
      },cwd:function() {
        return FS.currentPath;
      },chdir:function(path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (lookup.node === null) {
          throw new FS.ErrnoError(44);
        }
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(54);
        }
        var errCode = FS.nodePermissions(lookup.node, 'x');
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function() {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },createDefaultDevices:function() {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function(stream, buffer, offset, length, pos) { return length; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using err() rather than out()
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device = getRandomDevice();
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createSpecialDirectories:function() {
        // create /proc/self/fd which allows /proc/self/fd/6 => readlink gives the
        // name of the stream for fd 6 (see test_unistd_ttyname)
        FS.mkdir('/proc');
        var proc_self = FS.mkdir('/proc/self');
        FS.mkdir('/proc/self/fd');
        FS.mount({
          mount: function() {
            var node = FS.createNode(proc_self, 'fd', 16384 | 511 /* 0777 */, 73);
            node.node_ops = {
              lookup: function(parent, name) {
                var fd = +name;
                var stream = FS.getStream(fd);
                if (!stream) throw new FS.ErrnoError(8);
                var ret = {
                  parent: null,
                  mount: { mountpoint: 'fake' },
                  node_ops: { readlink: function() { return stream.path } }
                };
                ret.parent = ret; // make it look like a simple root node
                return ret;
              }
            };
            return node;
          }
        }, {}, '/proc/self/fd');
      },createStandardStreams:function() {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 0);
        var stdout = FS.open('/dev/stdout', 1);
        var stderr = FS.open('/dev/stderr', 1);
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function() {
        if (FS.ErrnoError) return;
        FS.ErrnoError = /** @this{Object} */ function ErrnoError(errno, node) {
          this.node = node;
          this.setErrno = /** @this{Object} */ function(errno) {
            this.errno = errno;
            for (var key in ERRNO_CODES) {
              if (ERRNO_CODES[key] === errno) {
                this.code = key;
                break;
              }
            }
          };
          this.setErrno(errno);
          this.message = ERRNO_MESSAGES[errno];
  
          // Try to get a maximally helpful stack trace. On Node.js, getting Error.stack
          // now ensures it shows what we want.
          if (this.stack) {
            // Define the stack property for Node.js 4, which otherwise errors on the next line.
            Object.defineProperty(this, "stack", { value: (new Error).stack, writable: true });
            this.stack = demangleAll(this.stack);
          }
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [44].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function() {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
        FS.createSpecialDirectories();
  
        FS.filesystems = {
          'MEMFS': MEMFS,
        };
      },init:function(input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function() {
        FS.init.initialized = false;
        // force-flush all streams, so we get musl std streams printed out
        var fflush = Module['_fflush'];
        if (fflush) fflush(0);
        // close all of our streams
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function(canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },findObject:function(path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          return null;
        }
      },analyzePath:function(path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createPath:function(parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function(parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function(parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 577);
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function(parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(29);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(6);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(29);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },forceLoadFile:function(obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (read_) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(read_(obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            throw new FS.ErrnoError(29);
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
      },createLazyFile:function(parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        /** @constructor */
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = /** @this{Object} */ function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize)|0;
          return this.getter(chunkNum)[chunkOffset];
        };
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        };
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var usesGzip = (header = xhr.getResponseHeader("Content-Encoding")) && header === "gzip";
  
          var chunkSize = 1024*1024; // Chunk size in bytes
  
          if (!hasByteServing) chunkSize = datalength;
  
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
  
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(/** @type{Array<number>} */(xhr.response || []));
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = this;
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * chunkSize;
            var end = (chunkNum+1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
  
          if (usesGzip || !datalength) {
            // if the server uses gzip or doesn't supply the length, we have to download the whole file to get the (uncompressed) length
            chunkSize = datalength = 1; // this will force getter(0)/doXHR do download the whole file
            datalength = this.getter(0).length;
            chunkSize = datalength;
            out("LazyFiles on gzip forces download of the whole file when length is accessed");
          }
  
          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        };
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperties(lazyArray, {
            length: {
              get: /** @this{Object} */ function() {
                if (!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._length;
              }
            },
            chunkSize: {
              get: /** @this{Object} */ function() {
                if (!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._chunkSize;
              }
            }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperties(node, {
          usedBytes: {
            get: /** @this {FSNode} */ function() { return this.contents.length; }
          }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            FS.forceLoadFile(node);
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          FS.forceLoadFile(node);
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function(parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn, preFinish) {
        Browser.init(); // XXX perhaps this method should move onto Browser?
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH_FS.resolve(PATH.join2(parent, name)) : parent;
        var dep = getUniqueRunDependency('cp ' + fullname); // might have several active requests for the same fullname
        function processData(byteArray) {
          function finish(byteArray) {
            if (preFinish) preFinish();
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency(dep);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency(dep);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency(dep);
        if (typeof url == 'string') {
          asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function() {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function() {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function(paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          out('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function(paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },absolutePath:function() {
        abort('FS.absolutePath has been removed; use PATH_FS.resolve instead');
      },createFolder:function() {
        abort('FS.createFolder has been removed; use FS.mkdir instead');
      },createLink:function() {
        abort('FS.createLink has been removed; use FS.symlink instead');
      },joinPath:function() {
        abort('FS.joinPath has been removed; use PATH.join instead');
      },mmapAlloc:function() {
        abort('FS.mmapAlloc has been replaced by the top level function mmapAlloc');
      },standardizePath:function() {
        abort('FS.standardizePath has been removed; use PATH.normalize instead');
      }};
  var SYSCALLS = {mappings:{},DEFAULT_POLLMASK:5,umask:511,calculateAt:function(dirfd, path, allowEmpty) {
        if (path[0] === '/') {
          return path;
        }
        // relative path
        var dir;
        if (dirfd === -100) {
          dir = FS.cwd();
        } else {
          var dirstream = FS.getStream(dirfd);
          if (!dirstream) throw new FS.ErrnoError(8);
          dir = dirstream.path;
        }
        if (path.length == 0) {
          if (!allowEmpty) {
            throw new FS.ErrnoError(44);;
          }
          return dir;
        }
        return PATH.join2(dir, path);
      },doStat:function(func, path, buf) {
        try {
          var stat = func(path);
        } catch (e) {
          if (e && e.node && PATH.normalize(path) !== PATH.normalize(FS.getPath(e.node))) {
            // an error occurred while trying to look up the path; we should just report ENOTDIR
            return -54;
          }
          throw e;
        }
        HEAP32[((buf)>>2)] = stat.dev;
        HEAP32[(((buf)+(4))>>2)] = 0;
        HEAP32[(((buf)+(8))>>2)] = stat.ino;
        HEAP32[(((buf)+(12))>>2)] = stat.mode;
        HEAP32[(((buf)+(16))>>2)] = stat.nlink;
        HEAP32[(((buf)+(20))>>2)] = stat.uid;
        HEAP32[(((buf)+(24))>>2)] = stat.gid;
        HEAP32[(((buf)+(28))>>2)] = stat.rdev;
        HEAP32[(((buf)+(32))>>2)] = 0;
        (tempI64 = [stat.size>>>0,(tempDouble=stat.size,(+(Math.abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math.min((+(Math.floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math.ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[(((buf)+(40))>>2)] = tempI64[0],HEAP32[(((buf)+(44))>>2)] = tempI64[1]);
        HEAP32[(((buf)+(48))>>2)] = 4096;
        HEAP32[(((buf)+(52))>>2)] = stat.blocks;
        HEAP32[(((buf)+(56))>>2)] = (stat.atime.getTime() / 1000)|0;
        HEAP32[(((buf)+(60))>>2)] = 0;
        HEAP32[(((buf)+(64))>>2)] = (stat.mtime.getTime() / 1000)|0;
        HEAP32[(((buf)+(68))>>2)] = 0;
        HEAP32[(((buf)+(72))>>2)] = (stat.ctime.getTime() / 1000)|0;
        HEAP32[(((buf)+(76))>>2)] = 0;
        (tempI64 = [stat.ino>>>0,(tempDouble=stat.ino,(+(Math.abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math.min((+(Math.floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math.ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[(((buf)+(80))>>2)] = tempI64[0],HEAP32[(((buf)+(84))>>2)] = tempI64[1]);
        return 0;
      },doMsync:function(addr, stream, len, flags, offset) {
        var buffer = HEAPU8.slice(addr, addr + len);
        FS.msync(stream, buffer, offset, len, flags);
      },doMkdir:function(path, mode) {
        // remove a trailing slash, if one - /a/b/ has basename of '', but
        // we want to create b in the context of this function
        path = PATH.normalize(path);
        if (path[path.length-1] === '/') path = path.substr(0, path.length-1);
        FS.mkdir(path, mode, 0);
        return 0;
      },doMknod:function(path, mode, dev) {
        // we don't want this in the JS API as it uses mknod to create all nodes.
        switch (mode & 61440) {
          case 32768:
          case 8192:
          case 24576:
          case 4096:
          case 49152:
            break;
          default: return -28;
        }
        FS.mknod(path, mode, dev);
        return 0;
      },doReadlink:function(path, buf, bufsize) {
        if (bufsize <= 0) return -28;
        var ret = FS.readlink(path);
  
        var len = Math.min(bufsize, lengthBytesUTF8(ret));
        var endChar = HEAP8[buf+len];
        stringToUTF8(ret, buf, bufsize+1);
        // readlink is one of the rare functions that write out a C string, but does never append a null to the output buffer(!)
        // stringToUTF8() always appends a null byte, so restore the character under the null byte after the write.
        HEAP8[buf+len] = endChar;
  
        return len;
      },doAccess:function(path, amode) {
        if (amode & ~7) {
          // need a valid mode
          return -28;
        }
        var node;
        var lookup = FS.lookupPath(path, { follow: true });
        node = lookup.node;
        if (!node) {
          return -44;
        }
        var perms = '';
        if (amode & 4) perms += 'r';
        if (amode & 2) perms += 'w';
        if (amode & 1) perms += 'x';
        if (perms /* otherwise, they've just passed F_OK */ && FS.nodePermissions(node, perms)) {
          return -2;
        }
        return 0;
      },doDup:function(path, flags, suggestFD) {
        var suggest = FS.getStream(suggestFD);
        if (suggest) FS.close(suggest);
        return FS.open(path, flags, 0, suggestFD, suggestFD).fd;
      },doReadv:function(stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.read(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
          if (curr < len) break; // nothing more to read
        }
        return ret;
      },doWritev:function(stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.write(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
        }
        return ret;
      },varargs:undefined,get:function() {
        assert(SYSCALLS.varargs != undefined);
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
        return ret;
      },getStr:function(ptr) {
        var ret = UTF8ToString(ptr);
        return ret;
      },getStreamFromFD:function(fd) {
        var stream = FS.getStream(fd);
        if (!stream) throw new FS.ErrnoError(8);
        return stream;
      },get64:function(low, high) {
        if (low >= 0) assert(high === 0);
        else assert(high === -1);
        return low;
      }};
  function _fd_close(fd) {try {
  
      var stream = SYSCALLS.getStreamFromFD(fd);
      FS.close(stream);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return e.errno;
  }
  }

  function _fd_read(fd, iov, iovcnt, pnum) {try {
  
      var stream = SYSCALLS.getStreamFromFD(fd);
      var num = SYSCALLS.doReadv(stream, iov, iovcnt);
      HEAP32[((pnum)>>2)] = num
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return e.errno;
  }
  }

  function _fd_seek(fd, offset_low, offset_high, whence, newOffset) {try {
  
      
      var stream = SYSCALLS.getStreamFromFD(fd);
      var HIGH_OFFSET = 0x100000000; // 2^32
      // use an unsigned operator on low and shift high by 32-bits
      var offset = offset_high * HIGH_OFFSET + (offset_low >>> 0);
  
      var DOUBLE_LIMIT = 0x20000000000000; // 2^53
      // we also check for equality since DOUBLE_LIMIT + 1 == DOUBLE_LIMIT
      if (offset <= -DOUBLE_LIMIT || offset >= DOUBLE_LIMIT) {
        return -61;
      }
  
      FS.llseek(stream, offset, whence);
      (tempI64 = [stream.position>>>0,(tempDouble=stream.position,(+(Math.abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math.min((+(Math.floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math.ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((newOffset)>>2)] = tempI64[0],HEAP32[(((newOffset)+(4))>>2)] = tempI64[1]);
      if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return e.errno;
  }
  }

  function _fd_write(fd, iov, iovcnt, pnum) {try {
  
      var stream = SYSCALLS.getStreamFromFD(fd);
      var num = SYSCALLS.doWritev(stream, iov, iovcnt);
      HEAP32[((pnum)>>2)] = num
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return e.errno;
  }
  }

  function _setTempRet0(val) {
      setTempRet0(val);
    }

  var FSNode = /** @constructor */ function(parent, name, mode, rdev) {
    if (!parent) {
      parent = this;  // root node sets parent to itself
    }
    this.parent = parent;
    this.mount = parent.mount;
    this.mounted = null;
    this.id = FS.nextInode++;
    this.name = name;
    this.mode = mode;
    this.node_ops = {};
    this.stream_ops = {};
    this.rdev = rdev;
  };
  var readMode = 292/*292*/ | 73/*73*/;
  var writeMode = 146/*146*/;
  Object.defineProperties(FSNode.prototype, {
   read: {
    get: /** @this{FSNode} */function() {
     return (this.mode & readMode) === readMode;
    },
    set: /** @this{FSNode} */function(val) {
     val ? this.mode |= readMode : this.mode &= ~readMode;
    }
   },
   write: {
    get: /** @this{FSNode} */function() {
     return (this.mode & writeMode) === writeMode;
    },
    set: /** @this{FSNode} */function(val) {
     val ? this.mode |= writeMode : this.mode &= ~writeMode;
    }
   },
   isFolder: {
    get: /** @this{FSNode} */function() {
     return FS.isDir(this.mode);
    }
   },
   isDevice: {
    get: /** @this{FSNode} */function() {
     return FS.isChrdev(this.mode);
    }
   }
  });
  FS.FSNode = FSNode;
  FS.staticInit();;
ERRNO_CODES = {
      'EPERM': 63,
      'ENOENT': 44,
      'ESRCH': 71,
      'EINTR': 27,
      'EIO': 29,
      'ENXIO': 60,
      'E2BIG': 1,
      'ENOEXEC': 45,
      'EBADF': 8,
      'ECHILD': 12,
      'EAGAIN': 6,
      'EWOULDBLOCK': 6,
      'ENOMEM': 48,
      'EACCES': 2,
      'EFAULT': 21,
      'ENOTBLK': 105,
      'EBUSY': 10,
      'EEXIST': 20,
      'EXDEV': 75,
      'ENODEV': 43,
      'ENOTDIR': 54,
      'EISDIR': 31,
      'EINVAL': 28,
      'ENFILE': 41,
      'EMFILE': 33,
      'ENOTTY': 59,
      'ETXTBSY': 74,
      'EFBIG': 22,
      'ENOSPC': 51,
      'ESPIPE': 70,
      'EROFS': 69,
      'EMLINK': 34,
      'EPIPE': 64,
      'EDOM': 18,
      'ERANGE': 68,
      'ENOMSG': 49,
      'EIDRM': 24,
      'ECHRNG': 106,
      'EL2NSYNC': 156,
      'EL3HLT': 107,
      'EL3RST': 108,
      'ELNRNG': 109,
      'EUNATCH': 110,
      'ENOCSI': 111,
      'EL2HLT': 112,
      'EDEADLK': 16,
      'ENOLCK': 46,
      'EBADE': 113,
      'EBADR': 114,
      'EXFULL': 115,
      'ENOANO': 104,
      'EBADRQC': 103,
      'EBADSLT': 102,
      'EDEADLOCK': 16,
      'EBFONT': 101,
      'ENOSTR': 100,
      'ENODATA': 116,
      'ETIME': 117,
      'ENOSR': 118,
      'ENONET': 119,
      'ENOPKG': 120,
      'EREMOTE': 121,
      'ENOLINK': 47,
      'EADV': 122,
      'ESRMNT': 123,
      'ECOMM': 124,
      'EPROTO': 65,
      'EMULTIHOP': 36,
      'EDOTDOT': 125,
      'EBADMSG': 9,
      'ENOTUNIQ': 126,
      'EBADFD': 127,
      'EREMCHG': 128,
      'ELIBACC': 129,
      'ELIBBAD': 130,
      'ELIBSCN': 131,
      'ELIBMAX': 132,
      'ELIBEXEC': 133,
      'ENOSYS': 52,
      'ENOTEMPTY': 55,
      'ENAMETOOLONG': 37,
      'ELOOP': 32,
      'EOPNOTSUPP': 138,
      'EPFNOSUPPORT': 139,
      'ECONNRESET': 15,
      'ENOBUFS': 42,
      'EAFNOSUPPORT': 5,
      'EPROTOTYPE': 67,
      'ENOTSOCK': 57,
      'ENOPROTOOPT': 50,
      'ESHUTDOWN': 140,
      'ECONNREFUSED': 14,
      'EADDRINUSE': 3,
      'ECONNABORTED': 13,
      'ENETUNREACH': 40,
      'ENETDOWN': 38,
      'ETIMEDOUT': 73,
      'EHOSTDOWN': 142,
      'EHOSTUNREACH': 23,
      'EINPROGRESS': 26,
      'EALREADY': 7,
      'EDESTADDRREQ': 17,
      'EMSGSIZE': 35,
      'EPROTONOSUPPORT': 66,
      'ESOCKTNOSUPPORT': 137,
      'EADDRNOTAVAIL': 4,
      'ENETRESET': 39,
      'EISCONN': 30,
      'ENOTCONN': 53,
      'ETOOMANYREFS': 141,
      'EUSERS': 136,
      'EDQUOT': 19,
      'ESTALE': 72,
      'ENOTSUP': 138,
      'ENOMEDIUM': 148,
      'EILSEQ': 25,
      'EOVERFLOW': 61,
      'ECANCELED': 11,
      'ENOTRECOVERABLE': 56,
      'EOWNERDEAD': 62,
      'ESTRPIPE': 135,
    };;
var ASSERTIONS = true;



/** @type {function(string, boolean=, number=)} */
function intArrayFromString(stringy, dontAddNull, length) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      if (ASSERTIONS) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      }
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}


// Copied from https://github.com/strophe/strophejs/blob/e06d027/src/polyfills.js#L149

// This code was written by Tyler Akins and has been placed in the
// public domain.  It would be nice if you left this header intact.
// Base64 code from Tyler Akins -- http://rumkin.com

/**
 * Decodes a base64 string.
 * @param {string} input The string to decode.
 */
var decodeBase64 = typeof atob === 'function' ? atob : function (input) {
  var keyStr = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';

  var output = '';
  var chr1, chr2, chr3;
  var enc1, enc2, enc3, enc4;
  var i = 0;
  // remove all characters that are not A-Z, a-z, 0-9, +, /, or =
  input = input.replace(/[^A-Za-z0-9\+\/\=]/g, '');
  do {
    enc1 = keyStr.indexOf(input.charAt(i++));
    enc2 = keyStr.indexOf(input.charAt(i++));
    enc3 = keyStr.indexOf(input.charAt(i++));
    enc4 = keyStr.indexOf(input.charAt(i++));

    chr1 = (enc1 << 2) | (enc2 >> 4);
    chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
    chr3 = ((enc3 & 3) << 6) | enc4;

    output = output + String.fromCharCode(chr1);

    if (enc3 !== 64) {
      output = output + String.fromCharCode(chr2);
    }
    if (enc4 !== 64) {
      output = output + String.fromCharCode(chr3);
    }
  } while (i < input.length);
  return output;
};

// Converts a string of base64 into a byte array.
// Throws error on invalid input.
function intArrayFromBase64(s) {
  if (typeof ENVIRONMENT_IS_NODE === 'boolean' && ENVIRONMENT_IS_NODE) {
    var buf = Buffer.from(s, 'base64');
    return new Uint8Array(buf['buffer'], buf['byteOffset'], buf['byteLength']);
  }

  try {
    var decoded = decodeBase64(s);
    var bytes = new Uint8Array(decoded.length);
    for (var i = 0 ; i < decoded.length ; ++i) {
      bytes[i] = decoded.charCodeAt(i);
    }
    return bytes;
  } catch (_) {
    throw new Error('Converting base64 string to bytes failed.');
  }
}

// If filename is a base64 data URI, parses and returns data (Buffer on node,
// Uint8Array otherwise). If filename is not a base64 data URI, returns undefined.
function tryParseAsDataURI(filename) {
  if (!isDataURI(filename)) {
    return;
  }

  return intArrayFromBase64(filename.slice(dataURIPrefix.length));
}


var asmLibraryArg = {
  "emscripten_memcpy_big": _emscripten_memcpy_big,
  "emscripten_resize_heap": _emscripten_resize_heap,
  "fd_close": _fd_close,
  "fd_read": _fd_read,
  "fd_seek": _fd_seek,
  "fd_write": _fd_write,
  "getTempRet0": getTempRet0,
  "memory": wasmMemory,
  "setTempRet0": setTempRet0
};
var asm = createWasm();
/** @type {function(...*):?} */
var ___wasm_call_ctors = Module["___wasm_call_ctors"] = createExportWrapper("__wasm_call_ctors");

/** @type {function(...*):?} */
var _FLAC__stream_decoder_new = Module["_FLAC__stream_decoder_new"] = createExportWrapper("FLAC__stream_decoder_new");

/** @type {function(...*):?} */
var _FLAC__stream_decoder_delete = Module["_FLAC__stream_decoder_delete"] = createExportWrapper("FLAC__stream_decoder_delete");

/** @type {function(...*):?} */
var _FLAC__stream_decoder_finish = Module["_FLAC__stream_decoder_finish"] = createExportWrapper("FLAC__stream_decoder_finish");

/** @type {function(...*):?} */
var _FLAC__stream_decoder_init_stream = Module["_FLAC__stream_decoder_init_stream"] = createExportWrapper("FLAC__stream_decoder_init_stream");

/** @type {function(...*):?} */
var _FLAC__stream_decoder_reset = Module["_FLAC__stream_decoder_reset"] = createExportWrapper("FLAC__stream_decoder_reset");

/** @type {function(...*):?} */
var _FLAC__stream_decoder_init_ogg_stream = Module["_FLAC__stream_decoder_init_ogg_stream"] = createExportWrapper("FLAC__stream_decoder_init_ogg_stream");

/** @type {function(...*):?} */
var _FLAC__stream_decoder_set_ogg_serial_number = Module["_FLAC__stream_decoder_set_ogg_serial_number"] = createExportWrapper("FLAC__stream_decoder_set_ogg_serial_number");

/** @type {function(...*):?} */
var _FLAC__stream_decoder_set_md5_checking = Module["_FLAC__stream_decoder_set_md5_checking"] = createExportWrapper("FLAC__stream_decoder_set_md5_checking");

/** @type {function(...*):?} */
var _FLAC__stream_decoder_set_metadata_respond = Module["_FLAC__stream_decoder_set_metadata_respond"] = createExportWrapper("FLAC__stream_decoder_set_metadata_respond");

/** @type {function(...*):?} */
var _FLAC__stream_decoder_set_metadata_respond_application = Module["_FLAC__stream_decoder_set_metadata_respond_application"] = createExportWrapper("FLAC__stream_decoder_set_metadata_respond_application");

/** @type {function(...*):?} */
var _FLAC__stream_decoder_set_metadata_respond_all = Module["_FLAC__stream_decoder_set_metadata_respond_all"] = createExportWrapper("FLAC__stream_decoder_set_metadata_respond_all");

/** @type {function(...*):?} */
var _FLAC__stream_decoder_set_metadata_ignore = Module["_FLAC__stream_decoder_set_metadata_ignore"] = createExportWrapper("FLAC__stream_decoder_set_metadata_ignore");

/** @type {function(...*):?} */
var _FLAC__stream_decoder_set_metadata_ignore_application = Module["_FLAC__stream_decoder_set_metadata_ignore_application"] = createExportWrapper("FLAC__stream_decoder_set_metadata_ignore_application");

/** @type {function(...*):?} */
var _FLAC__stream_decoder_set_metadata_ignore_all = Module["_FLAC__stream_decoder_set_metadata_ignore_all"] = createExportWrapper("FLAC__stream_decoder_set_metadata_ignore_all");

/** @type {function(...*):?} */
var _FLAC__stream_decoder_get_state = Module["_FLAC__stream_decoder_get_state"] = createExportWrapper("FLAC__stream_decoder_get_state");

/** @type {function(...*):?} */
var _FLAC__stream_decoder_get_md5_checking = Module["_FLAC__stream_decoder_get_md5_checking"] = createExportWrapper("FLAC__stream_decoder_get_md5_checking");

/** @type {function(...*):?} */
var _FLAC__stream_decoder_process_single = Module["_FLAC__stream_decoder_process_single"] = createExportWrapper("FLAC__stream_decoder_process_single");

/** @type {function(...*):?} */
var _FLAC__stream_decoder_process_until_end_of_metadata = Module["_FLAC__stream_decoder_process_until_end_of_metadata"] = createExportWrapper("FLAC__stream_decoder_process_until_end_of_metadata");

/** @type {function(...*):?} */
var _FLAC__stream_decoder_process_until_end_of_stream = Module["_FLAC__stream_decoder_process_until_end_of_stream"] = createExportWrapper("FLAC__stream_decoder_process_until_end_of_stream");

/** @type {function(...*):?} */
var _FLAC__stream_encoder_new = Module["_FLAC__stream_encoder_new"] = createExportWrapper("FLAC__stream_encoder_new");

/** @type {function(...*):?} */
var _FLAC__stream_encoder_delete = Module["_FLAC__stream_encoder_delete"] = createExportWrapper("FLAC__stream_encoder_delete");

/** @type {function(...*):?} */
var _FLAC__stream_encoder_finish = Module["_FLAC__stream_encoder_finish"] = createExportWrapper("FLAC__stream_encoder_finish");

/** @type {function(...*):?} */
var _FLAC__stream_encoder_init_stream = Module["_FLAC__stream_encoder_init_stream"] = createExportWrapper("FLAC__stream_encoder_init_stream");

/** @type {function(...*):?} */
var _FLAC__stream_encoder_init_ogg_stream = Module["_FLAC__stream_encoder_init_ogg_stream"] = createExportWrapper("FLAC__stream_encoder_init_ogg_stream");

/** @type {function(...*):?} */
var _FLAC__stream_encoder_set_ogg_serial_number = Module["_FLAC__stream_encoder_set_ogg_serial_number"] = createExportWrapper("FLAC__stream_encoder_set_ogg_serial_number");

/** @type {function(...*):?} */
var _FLAC__stream_encoder_set_verify = Module["_FLAC__stream_encoder_set_verify"] = createExportWrapper("FLAC__stream_encoder_set_verify");

/** @type {function(...*):?} */
var _FLAC__stream_encoder_set_channels = Module["_FLAC__stream_encoder_set_channels"] = createExportWrapper("FLAC__stream_encoder_set_channels");

/** @type {function(...*):?} */
var _FLAC__stream_encoder_set_bits_per_sample = Module["_FLAC__stream_encoder_set_bits_per_sample"] = createExportWrapper("FLAC__stream_encoder_set_bits_per_sample");

/** @type {function(...*):?} */
var _FLAC__stream_encoder_set_sample_rate = Module["_FLAC__stream_encoder_set_sample_rate"] = createExportWrapper("FLAC__stream_encoder_set_sample_rate");

/** @type {function(...*):?} */
var _FLAC__stream_encoder_set_compression_level = Module["_FLAC__stream_encoder_set_compression_level"] = createExportWrapper("FLAC__stream_encoder_set_compression_level");

/** @type {function(...*):?} */
var _FLAC__stream_encoder_set_blocksize = Module["_FLAC__stream_encoder_set_blocksize"] = createExportWrapper("FLAC__stream_encoder_set_blocksize");

/** @type {function(...*):?} */
var _FLAC__stream_encoder_set_total_samples_estimate = Module["_FLAC__stream_encoder_set_total_samples_estimate"] = createExportWrapper("FLAC__stream_encoder_set_total_samples_estimate");

/** @type {function(...*):?} */
var _FLAC__stream_encoder_set_metadata = Module["_FLAC__stream_encoder_set_metadata"] = createExportWrapper("FLAC__stream_encoder_set_metadata");

/** @type {function(...*):?} */
var _FLAC__stream_encoder_get_state = Module["_FLAC__stream_encoder_get_state"] = createExportWrapper("FLAC__stream_encoder_get_state");

/** @type {function(...*):?} */
var _FLAC__stream_encoder_get_verify_decoder_state = Module["_FLAC__stream_encoder_get_verify_decoder_state"] = createExportWrapper("FLAC__stream_encoder_get_verify_decoder_state");

/** @type {function(...*):?} */
var _FLAC__stream_encoder_get_verify = Module["_FLAC__stream_encoder_get_verify"] = createExportWrapper("FLAC__stream_encoder_get_verify");

/** @type {function(...*):?} */
var _FLAC__stream_encoder_process = Module["_FLAC__stream_encoder_process"] = createExportWrapper("FLAC__stream_encoder_process");

/** @type {function(...*):?} */
var _FLAC__stream_encoder_process_interleaved = Module["_FLAC__stream_encoder_process_interleaved"] = createExportWrapper("FLAC__stream_encoder_process_interleaved");

/** @type {function(...*):?} */
var _fflush = Module["_fflush"] = createExportWrapper("fflush");

/** @type {function(...*):?} */
var ___errno_location = Module["___errno_location"] = createExportWrapper("__errno_location");

/** @type {function(...*):?} */
var stackSave = Module["stackSave"] = createExportWrapper("stackSave");

/** @type {function(...*):?} */
var stackRestore = Module["stackRestore"] = createExportWrapper("stackRestore");

/** @type {function(...*):?} */
var stackAlloc = Module["stackAlloc"] = createExportWrapper("stackAlloc");

/** @type {function(...*):?} */
var _emscripten_stack_init = Module["_emscripten_stack_init"] = function() {
  return (_emscripten_stack_init = Module["_emscripten_stack_init"] = Module["asm"]["emscripten_stack_init"]).apply(null, arguments);
};

/** @type {function(...*):?} */
var _emscripten_stack_get_free = Module["_emscripten_stack_get_free"] = function() {
  return (_emscripten_stack_get_free = Module["_emscripten_stack_get_free"] = Module["asm"]["emscripten_stack_get_free"]).apply(null, arguments);
};

/** @type {function(...*):?} */
var _emscripten_stack_get_end = Module["_emscripten_stack_get_end"] = function() {
  return (_emscripten_stack_get_end = Module["_emscripten_stack_get_end"] = Module["asm"]["emscripten_stack_get_end"]).apply(null, arguments);
};

/** @type {function(...*):?} */
var dynCall_jiji = Module["dynCall_jiji"] = createExportWrapper("dynCall_jiji");





// === Auto-generated postamble setup entry stuff ===

if (!Object.getOwnPropertyDescriptor(Module, "intArrayFromString")) Module["intArrayFromString"] = function() { abort("'intArrayFromString' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "intArrayToString")) Module["intArrayToString"] = function() { abort("'intArrayToString' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
Module["ccall"] = ccall;
Module["cwrap"] = cwrap;
Module["setValue"] = setValue;
Module["getValue"] = getValue;
if (!Object.getOwnPropertyDescriptor(Module, "allocate")) Module["allocate"] = function() { abort("'allocate' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "UTF8ArrayToString")) Module["UTF8ArrayToString"] = function() { abort("'UTF8ArrayToString' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "UTF8ToString")) Module["UTF8ToString"] = function() { abort("'UTF8ToString' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToUTF8Array")) Module["stringToUTF8Array"] = function() { abort("'stringToUTF8Array' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToUTF8")) Module["stringToUTF8"] = function() { abort("'stringToUTF8' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "lengthBytesUTF8")) Module["lengthBytesUTF8"] = function() { abort("'lengthBytesUTF8' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stackTrace")) Module["stackTrace"] = function() { abort("'stackTrace' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addOnPreRun")) Module["addOnPreRun"] = function() { abort("'addOnPreRun' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addOnInit")) Module["addOnInit"] = function() { abort("'addOnInit' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addOnPreMain")) Module["addOnPreMain"] = function() { abort("'addOnPreMain' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addOnExit")) Module["addOnExit"] = function() { abort("'addOnExit' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addOnPostRun")) Module["addOnPostRun"] = function() { abort("'addOnPostRun' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeStringToMemory")) Module["writeStringToMemory"] = function() { abort("'writeStringToMemory' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeArrayToMemory")) Module["writeArrayToMemory"] = function() { abort("'writeArrayToMemory' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeAsciiToMemory")) Module["writeAsciiToMemory"] = function() { abort("'writeAsciiToMemory' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addRunDependency")) Module["addRunDependency"] = function() { abort("'addRunDependency' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "removeRunDependency")) Module["removeRunDependency"] = function() { abort("'removeRunDependency' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "FS_createFolder")) Module["FS_createFolder"] = function() { abort("'FS_createFolder' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "FS_createPath")) Module["FS_createPath"] = function() { abort("'FS_createPath' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "FS_createDataFile")) Module["FS_createDataFile"] = function() { abort("'FS_createDataFile' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "FS_createPreloadedFile")) Module["FS_createPreloadedFile"] = function() { abort("'FS_createPreloadedFile' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "FS_createLazyFile")) Module["FS_createLazyFile"] = function() { abort("'FS_createLazyFile' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "FS_createLink")) Module["FS_createLink"] = function() { abort("'FS_createLink' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "FS_createDevice")) Module["FS_createDevice"] = function() { abort("'FS_createDevice' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "FS_unlink")) Module["FS_unlink"] = function() { abort("'FS_unlink' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "getLEB")) Module["getLEB"] = function() { abort("'getLEB' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getFunctionTables")) Module["getFunctionTables"] = function() { abort("'getFunctionTables' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "alignFunctionTables")) Module["alignFunctionTables"] = function() { abort("'alignFunctionTables' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerFunctions")) Module["registerFunctions"] = function() { abort("'registerFunctions' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addFunction")) Module["addFunction"] = function() { abort("'addFunction' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "removeFunction")) Module["removeFunction"] = function() { abort("'removeFunction' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getFuncWrapper")) Module["getFuncWrapper"] = function() { abort("'getFuncWrapper' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "prettyPrint")) Module["prettyPrint"] = function() { abort("'prettyPrint' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "dynCall")) Module["dynCall"] = function() { abort("'dynCall' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getCompilerSetting")) Module["getCompilerSetting"] = function() { abort("'getCompilerSetting' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "print")) Module["print"] = function() { abort("'print' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "printErr")) Module["printErr"] = function() { abort("'printErr' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getTempRet0")) Module["getTempRet0"] = function() { abort("'getTempRet0' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "setTempRet0")) Module["setTempRet0"] = function() { abort("'setTempRet0' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "callMain")) Module["callMain"] = function() { abort("'callMain' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "abort")) Module["abort"] = function() { abort("'abort' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "keepRuntimeAlive")) Module["keepRuntimeAlive"] = function() { abort("'keepRuntimeAlive' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "zeroMemory")) Module["zeroMemory"] = function() { abort("'zeroMemory' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToNewUTF8")) Module["stringToNewUTF8"] = function() { abort("'stringToNewUTF8' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "setFileTime")) Module["setFileTime"] = function() { abort("'setFileTime' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emscripten_realloc_buffer")) Module["emscripten_realloc_buffer"] = function() { abort("'emscripten_realloc_buffer' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ENV")) Module["ENV"] = function() { abort("'ENV' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ERRNO_CODES")) Module["ERRNO_CODES"] = function() { abort("'ERRNO_CODES' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ERRNO_MESSAGES")) Module["ERRNO_MESSAGES"] = function() { abort("'ERRNO_MESSAGES' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "setErrNo")) Module["setErrNo"] = function() { abort("'setErrNo' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "inetPton4")) Module["inetPton4"] = function() { abort("'inetPton4' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "inetNtop4")) Module["inetNtop4"] = function() { abort("'inetNtop4' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "inetPton6")) Module["inetPton6"] = function() { abort("'inetPton6' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "inetNtop6")) Module["inetNtop6"] = function() { abort("'inetNtop6' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "readSockaddr")) Module["readSockaddr"] = function() { abort("'readSockaddr' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeSockaddr")) Module["writeSockaddr"] = function() { abort("'writeSockaddr' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "DNS")) Module["DNS"] = function() { abort("'DNS' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getHostByName")) Module["getHostByName"] = function() { abort("'getHostByName' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "GAI_ERRNO_MESSAGES")) Module["GAI_ERRNO_MESSAGES"] = function() { abort("'GAI_ERRNO_MESSAGES' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "Protocols")) Module["Protocols"] = function() { abort("'Protocols' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "Sockets")) Module["Sockets"] = function() { abort("'Sockets' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getRandomDevice")) Module["getRandomDevice"] = function() { abort("'getRandomDevice' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "traverseStack")) Module["traverseStack"] = function() { abort("'traverseStack' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "UNWIND_CACHE")) Module["UNWIND_CACHE"] = function() { abort("'UNWIND_CACHE' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "withBuiltinMalloc")) Module["withBuiltinMalloc"] = function() { abort("'withBuiltinMalloc' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "readAsmConstArgsArray")) Module["readAsmConstArgsArray"] = function() { abort("'readAsmConstArgsArray' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "readAsmConstArgs")) Module["readAsmConstArgs"] = function() { abort("'readAsmConstArgs' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "mainThreadEM_ASM")) Module["mainThreadEM_ASM"] = function() { abort("'mainThreadEM_ASM' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "jstoi_q")) Module["jstoi_q"] = function() { abort("'jstoi_q' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "jstoi_s")) Module["jstoi_s"] = function() { abort("'jstoi_s' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getExecutableName")) Module["getExecutableName"] = function() { abort("'getExecutableName' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "listenOnce")) Module["listenOnce"] = function() { abort("'listenOnce' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "autoResumeAudioContext")) Module["autoResumeAudioContext"] = function() { abort("'autoResumeAudioContext' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "dynCallLegacy")) Module["dynCallLegacy"] = function() { abort("'dynCallLegacy' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getDynCaller")) Module["getDynCaller"] = function() { abort("'getDynCaller' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "dynCall")) Module["dynCall"] = function() { abort("'dynCall' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "callRuntimeCallbacks")) Module["callRuntimeCallbacks"] = function() { abort("'callRuntimeCallbacks' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "runtimeKeepalivePush")) Module["runtimeKeepalivePush"] = function() { abort("'runtimeKeepalivePush' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "runtimeKeepalivePop")) Module["runtimeKeepalivePop"] = function() { abort("'runtimeKeepalivePop' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "callUserCallback")) Module["callUserCallback"] = function() { abort("'callUserCallback' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "maybeExit")) Module["maybeExit"] = function() { abort("'maybeExit' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "safeSetTimeout")) Module["safeSetTimeout"] = function() { abort("'safeSetTimeout' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "asmjsMangle")) Module["asmjsMangle"] = function() { abort("'asmjsMangle' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "asyncLoad")) Module["asyncLoad"] = function() { abort("'asyncLoad' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "alignMemory")) Module["alignMemory"] = function() { abort("'alignMemory' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "mmapAlloc")) Module["mmapAlloc"] = function() { abort("'mmapAlloc' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "reallyNegative")) Module["reallyNegative"] = function() { abort("'reallyNegative' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "unSign")) Module["unSign"] = function() { abort("'unSign' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "reSign")) Module["reSign"] = function() { abort("'reSign' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "formatString")) Module["formatString"] = function() { abort("'formatString' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "PATH")) Module["PATH"] = function() { abort("'PATH' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "PATH_FS")) Module["PATH_FS"] = function() { abort("'PATH_FS' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "SYSCALLS")) Module["SYSCALLS"] = function() { abort("'SYSCALLS' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "syscallMmap2")) Module["syscallMmap2"] = function() { abort("'syscallMmap2' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "syscallMunmap")) Module["syscallMunmap"] = function() { abort("'syscallMunmap' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getSocketFromFD")) Module["getSocketFromFD"] = function() { abort("'getSocketFromFD' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getSocketAddress")) Module["getSocketAddress"] = function() { abort("'getSocketAddress' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "JSEvents")) Module["JSEvents"] = function() { abort("'JSEvents' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerKeyEventCallback")) Module["registerKeyEventCallback"] = function() { abort("'registerKeyEventCallback' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "specialHTMLTargets")) Module["specialHTMLTargets"] = function() { abort("'specialHTMLTargets' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "maybeCStringToJsString")) Module["maybeCStringToJsString"] = function() { abort("'maybeCStringToJsString' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "findEventTarget")) Module["findEventTarget"] = function() { abort("'findEventTarget' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "findCanvasEventTarget")) Module["findCanvasEventTarget"] = function() { abort("'findCanvasEventTarget' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getBoundingClientRect")) Module["getBoundingClientRect"] = function() { abort("'getBoundingClientRect' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "fillMouseEventData")) Module["fillMouseEventData"] = function() { abort("'fillMouseEventData' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerMouseEventCallback")) Module["registerMouseEventCallback"] = function() { abort("'registerMouseEventCallback' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerWheelEventCallback")) Module["registerWheelEventCallback"] = function() { abort("'registerWheelEventCallback' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerUiEventCallback")) Module["registerUiEventCallback"] = function() { abort("'registerUiEventCallback' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerFocusEventCallback")) Module["registerFocusEventCallback"] = function() { abort("'registerFocusEventCallback' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "fillDeviceOrientationEventData")) Module["fillDeviceOrientationEventData"] = function() { abort("'fillDeviceOrientationEventData' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerDeviceOrientationEventCallback")) Module["registerDeviceOrientationEventCallback"] = function() { abort("'registerDeviceOrientationEventCallback' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "fillDeviceMotionEventData")) Module["fillDeviceMotionEventData"] = function() { abort("'fillDeviceMotionEventData' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerDeviceMotionEventCallback")) Module["registerDeviceMotionEventCallback"] = function() { abort("'registerDeviceMotionEventCallback' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "screenOrientation")) Module["screenOrientation"] = function() { abort("'screenOrientation' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "fillOrientationChangeEventData")) Module["fillOrientationChangeEventData"] = function() { abort("'fillOrientationChangeEventData' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerOrientationChangeEventCallback")) Module["registerOrientationChangeEventCallback"] = function() { abort("'registerOrientationChangeEventCallback' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "fillFullscreenChangeEventData")) Module["fillFullscreenChangeEventData"] = function() { abort("'fillFullscreenChangeEventData' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerFullscreenChangeEventCallback")) Module["registerFullscreenChangeEventCallback"] = function() { abort("'registerFullscreenChangeEventCallback' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerRestoreOldStyle")) Module["registerRestoreOldStyle"] = function() { abort("'registerRestoreOldStyle' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "hideEverythingExceptGivenElement")) Module["hideEverythingExceptGivenElement"] = function() { abort("'hideEverythingExceptGivenElement' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "restoreHiddenElements")) Module["restoreHiddenElements"] = function() { abort("'restoreHiddenElements' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "setLetterbox")) Module["setLetterbox"] = function() { abort("'setLetterbox' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "currentFullscreenStrategy")) Module["currentFullscreenStrategy"] = function() { abort("'currentFullscreenStrategy' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "restoreOldWindowedStyle")) Module["restoreOldWindowedStyle"] = function() { abort("'restoreOldWindowedStyle' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "softFullscreenResizeWebGLRenderTarget")) Module["softFullscreenResizeWebGLRenderTarget"] = function() { abort("'softFullscreenResizeWebGLRenderTarget' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "doRequestFullscreen")) Module["doRequestFullscreen"] = function() { abort("'doRequestFullscreen' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "fillPointerlockChangeEventData")) Module["fillPointerlockChangeEventData"] = function() { abort("'fillPointerlockChangeEventData' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerPointerlockChangeEventCallback")) Module["registerPointerlockChangeEventCallback"] = function() { abort("'registerPointerlockChangeEventCallback' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerPointerlockErrorEventCallback")) Module["registerPointerlockErrorEventCallback"] = function() { abort("'registerPointerlockErrorEventCallback' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "requestPointerLock")) Module["requestPointerLock"] = function() { abort("'requestPointerLock' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "fillVisibilityChangeEventData")) Module["fillVisibilityChangeEventData"] = function() { abort("'fillVisibilityChangeEventData' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerVisibilityChangeEventCallback")) Module["registerVisibilityChangeEventCallback"] = function() { abort("'registerVisibilityChangeEventCallback' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerTouchEventCallback")) Module["registerTouchEventCallback"] = function() { abort("'registerTouchEventCallback' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "fillGamepadEventData")) Module["fillGamepadEventData"] = function() { abort("'fillGamepadEventData' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerGamepadEventCallback")) Module["registerGamepadEventCallback"] = function() { abort("'registerGamepadEventCallback' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerBeforeUnloadEventCallback")) Module["registerBeforeUnloadEventCallback"] = function() { abort("'registerBeforeUnloadEventCallback' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "fillBatteryEventData")) Module["fillBatteryEventData"] = function() { abort("'fillBatteryEventData' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "battery")) Module["battery"] = function() { abort("'battery' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerBatteryEventCallback")) Module["registerBatteryEventCallback"] = function() { abort("'registerBatteryEventCallback' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "setCanvasElementSize")) Module["setCanvasElementSize"] = function() { abort("'setCanvasElementSize' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getCanvasElementSize")) Module["getCanvasElementSize"] = function() { abort("'getCanvasElementSize' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "polyfillSetImmediate")) Module["polyfillSetImmediate"] = function() { abort("'polyfillSetImmediate' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "demangle")) Module["demangle"] = function() { abort("'demangle' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "demangleAll")) Module["demangleAll"] = function() { abort("'demangleAll' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "jsStackTrace")) Module["jsStackTrace"] = function() { abort("'jsStackTrace' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stackTrace")) Module["stackTrace"] = function() { abort("'stackTrace' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getEnvStrings")) Module["getEnvStrings"] = function() { abort("'getEnvStrings' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "checkWasiClock")) Module["checkWasiClock"] = function() { abort("'checkWasiClock' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeI53ToI64")) Module["writeI53ToI64"] = function() { abort("'writeI53ToI64' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeI53ToI64Clamped")) Module["writeI53ToI64Clamped"] = function() { abort("'writeI53ToI64Clamped' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeI53ToI64Signaling")) Module["writeI53ToI64Signaling"] = function() { abort("'writeI53ToI64Signaling' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeI53ToU64Clamped")) Module["writeI53ToU64Clamped"] = function() { abort("'writeI53ToU64Clamped' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeI53ToU64Signaling")) Module["writeI53ToU64Signaling"] = function() { abort("'writeI53ToU64Signaling' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "readI53FromI64")) Module["readI53FromI64"] = function() { abort("'readI53FromI64' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "readI53FromU64")) Module["readI53FromU64"] = function() { abort("'readI53FromU64' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "convertI32PairToI53")) Module["convertI32PairToI53"] = function() { abort("'convertI32PairToI53' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "convertU32PairToI53")) Module["convertU32PairToI53"] = function() { abort("'convertU32PairToI53' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "uncaughtExceptionCount")) Module["uncaughtExceptionCount"] = function() { abort("'uncaughtExceptionCount' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "exceptionLast")) Module["exceptionLast"] = function() { abort("'exceptionLast' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "exceptionCaught")) Module["exceptionCaught"] = function() { abort("'exceptionCaught' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ExceptionInfo")) Module["ExceptionInfo"] = function() { abort("'ExceptionInfo' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "CatchInfo")) Module["CatchInfo"] = function() { abort("'CatchInfo' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "exception_addRef")) Module["exception_addRef"] = function() { abort("'exception_addRef' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "exception_decRef")) Module["exception_decRef"] = function() { abort("'exception_decRef' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "Browser")) Module["Browser"] = function() { abort("'Browser' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "funcWrappers")) Module["funcWrappers"] = function() { abort("'funcWrappers' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getFuncWrapper")) Module["getFuncWrapper"] = function() { abort("'getFuncWrapper' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "setMainLoop")) Module["setMainLoop"] = function() { abort("'setMainLoop' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "wget")) Module["wget"] = function() { abort("'wget' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "FS")) Module["FS"] = function() { abort("'FS' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "MEMFS")) Module["MEMFS"] = function() { abort("'MEMFS' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "TTY")) Module["TTY"] = function() { abort("'TTY' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "PIPEFS")) Module["PIPEFS"] = function() { abort("'PIPEFS' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "SOCKFS")) Module["SOCKFS"] = function() { abort("'SOCKFS' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "_setNetworkCallback")) Module["_setNetworkCallback"] = function() { abort("'_setNetworkCallback' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "tempFixedLengthArray")) Module["tempFixedLengthArray"] = function() { abort("'tempFixedLengthArray' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "miniTempWebGLFloatBuffers")) Module["miniTempWebGLFloatBuffers"] = function() { abort("'miniTempWebGLFloatBuffers' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "heapObjectForWebGLType")) Module["heapObjectForWebGLType"] = function() { abort("'heapObjectForWebGLType' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "heapAccessShiftForWebGLHeap")) Module["heapAccessShiftForWebGLHeap"] = function() { abort("'heapAccessShiftForWebGLHeap' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "GL")) Module["GL"] = function() { abort("'GL' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emscriptenWebGLGet")) Module["emscriptenWebGLGet"] = function() { abort("'emscriptenWebGLGet' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "computeUnpackAlignedImageSize")) Module["computeUnpackAlignedImageSize"] = function() { abort("'computeUnpackAlignedImageSize' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emscriptenWebGLGetTexPixelData")) Module["emscriptenWebGLGetTexPixelData"] = function() { abort("'emscriptenWebGLGetTexPixelData' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emscriptenWebGLGetUniform")) Module["emscriptenWebGLGetUniform"] = function() { abort("'emscriptenWebGLGetUniform' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "webglGetUniformLocation")) Module["webglGetUniformLocation"] = function() { abort("'webglGetUniformLocation' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "webglPrepareUniformLocationsBeforeFirstUse")) Module["webglPrepareUniformLocationsBeforeFirstUse"] = function() { abort("'webglPrepareUniformLocationsBeforeFirstUse' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "webglGetLeftBracePos")) Module["webglGetLeftBracePos"] = function() { abort("'webglGetLeftBracePos' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emscriptenWebGLGetVertexAttrib")) Module["emscriptenWebGLGetVertexAttrib"] = function() { abort("'emscriptenWebGLGetVertexAttrib' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeGLArray")) Module["writeGLArray"] = function() { abort("'writeGLArray' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "AL")) Module["AL"] = function() { abort("'AL' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "SDL_unicode")) Module["SDL_unicode"] = function() { abort("'SDL_unicode' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "SDL_ttfContext")) Module["SDL_ttfContext"] = function() { abort("'SDL_ttfContext' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "SDL_audio")) Module["SDL_audio"] = function() { abort("'SDL_audio' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "SDL")) Module["SDL"] = function() { abort("'SDL' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "SDL_gfx")) Module["SDL_gfx"] = function() { abort("'SDL_gfx' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "GLUT")) Module["GLUT"] = function() { abort("'GLUT' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "EGL")) Module["EGL"] = function() { abort("'EGL' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "GLFW_Window")) Module["GLFW_Window"] = function() { abort("'GLFW_Window' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "GLFW")) Module["GLFW"] = function() { abort("'GLFW' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "GLEW")) Module["GLEW"] = function() { abort("'GLEW' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "IDBStore")) Module["IDBStore"] = function() { abort("'IDBStore' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "runAndAbortIfError")) Module["runAndAbortIfError"] = function() { abort("'runAndAbortIfError' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "warnOnce")) Module["warnOnce"] = function() { abort("'warnOnce' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stackSave")) Module["stackSave"] = function() { abort("'stackSave' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stackRestore")) Module["stackRestore"] = function() { abort("'stackRestore' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stackAlloc")) Module["stackAlloc"] = function() { abort("'stackAlloc' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "AsciiToString")) Module["AsciiToString"] = function() { abort("'AsciiToString' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToAscii")) Module["stringToAscii"] = function() { abort("'stringToAscii' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "UTF16ToString")) Module["UTF16ToString"] = function() { abort("'UTF16ToString' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToUTF16")) Module["stringToUTF16"] = function() { abort("'stringToUTF16' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "lengthBytesUTF16")) Module["lengthBytesUTF16"] = function() { abort("'lengthBytesUTF16' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "UTF32ToString")) Module["UTF32ToString"] = function() { abort("'UTF32ToString' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToUTF32")) Module["stringToUTF32"] = function() { abort("'stringToUTF32' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "lengthBytesUTF32")) Module["lengthBytesUTF32"] = function() { abort("'lengthBytesUTF32' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "allocateUTF8")) Module["allocateUTF8"] = function() { abort("'allocateUTF8' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "allocateUTF8OnStack")) Module["allocateUTF8OnStack"] = function() { abort("'allocateUTF8OnStack' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
Module["writeStackCookie"] = writeStackCookie;
Module["checkStackCookie"] = checkStackCookie;
if (!Object.getOwnPropertyDescriptor(Module, "intArrayFromBase64")) Module["intArrayFromBase64"] = function() { abort("'intArrayFromBase64' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "tryParseAsDataURI")) Module["tryParseAsDataURI"] = function() { abort("'tryParseAsDataURI' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ALLOC_NORMAL")) Object.defineProperty(Module, "ALLOC_NORMAL", { configurable: true, get: function() { abort("'ALLOC_NORMAL' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Object.getOwnPropertyDescriptor(Module, "ALLOC_STACK")) Object.defineProperty(Module, "ALLOC_STACK", { configurable: true, get: function() { abort("'ALLOC_STACK' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") } });

var calledRun;

/**
 * @constructor
 * @this {ExitStatus}
 */
function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
}

var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!calledRun) run();
  if (!calledRun) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
};

function stackCheckInit() {
  // This is normally called automatically during __wasm_call_ctors but need to
  // get these values before even running any of the ctors so we call it redundantly
  // here.
  // TODO(sbc): Move writeStackCookie to native to to avoid this.
  _emscripten_stack_init();
  writeStackCookie();
}

/** @type {function(Array=)} */
function run(args) {
  args = args || arguments_;

  if (runDependencies > 0) {
    return;
  }

  stackCheckInit();

  preRun();

  // a preRun added a dependency, run will be called later
  if (runDependencies > 0) {
    return;
  }

  function doRun() {
    // run may have just been called through dependencies being fulfilled just in this very frame,
    // or while the async setStatus time below was happening
    if (calledRun) return;
    calledRun = true;
    Module['calledRun'] = true;

    if (ABORT) return;

    initRuntime();

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    assert(!Module['_main'], 'compiled without a main, but one is present. if you added it from JS, use Module["onRuntimeInitialized"]');

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else
  {
    doRun();
  }
  checkStackCookie();
}
Module['run'] = run;

function checkUnflushedContent() {
  // Compiler settings do not allow exiting the runtime, so flushing
  // the streams is not possible. but in ASSERTIONS mode we check
  // if there was something to flush, and if so tell the user they
  // should request that the runtime be exitable.
  // Normally we would not even include flush() at all, but in ASSERTIONS
  // builds we do so just for this check, and here we see if there is any
  // content to flush, that is, we check if there would have been
  // something a non-ASSERTIONS build would have not seen.
  // How we flush the streams depends on whether we are in SYSCALLS_REQUIRE_FILESYSTEM=0
  // mode (which has its own special function for this; otherwise, all
  // the code is inside libc)
  var oldOut = out;
  var oldErr = err;
  var has = false;
  out = err = function(x) {
    has = true;
  }
  try { // it doesn't matter if it fails
    var flush = Module['_fflush'];
    if (flush) flush(0);
    // also flush in the JS FS layer
    ['stdout', 'stderr'].forEach(function(name) {
      var info = FS.analyzePath('/dev/' + name);
      if (!info) return;
      var stream = info.object;
      var rdev = stream.rdev;
      var tty = TTY.ttys[rdev];
      if (tty && tty.output && tty.output.length) {
        has = true;
      }
    });
  } catch(e) {}
  out = oldOut;
  err = oldErr;
  if (has) {
    warnOnce('stdio streams had content in them that was not flushed. you should set EXIT_RUNTIME to 1 (see the FAQ), or make sure to emit a newline when you printf etc.');
  }
}

/** @param {boolean|number=} implicit */
function exit(status, implicit) {
  EXITSTATUS = status;

  checkUnflushedContent();

  if (keepRuntimeAlive()) {
    // if exit() was called, we may warn the user if the runtime isn't actually being shut down
    if (!implicit) {
      var msg = 'program exited (with status: ' + status + '), but EXIT_RUNTIME is not set, so halting execution but not exiting the runtime or preventing further async execution (build with EXIT_RUNTIME=1, if you want a true shutdown)';
      err(msg);
    }
  } else {
    exitRuntime();
  }

  procExit(status);
}

function procExit(code) {
  EXITSTATUS = code;
  if (!keepRuntimeAlive()) {
    if (Module['onExit']) Module['onExit'](code);
    ABORT = true;
  }
  quit_(code, new ExitStatus(code));
}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

run();





//libflac function wrappers

/**
 * HELPER read/extract stream info meta-data from frame header / meta-data
 * @param {POINTER} p_streaminfo
 * @returns StreamInfo
 */
function _readStreamInfo(p_streaminfo){//-> FLAC__StreamMetadata.type (FLAC__MetadataType) === FLAC__METADATA_TYPE_STREAMINFO (0)

	/*
	typedef struct {
		unsigned min_blocksize, max_blocksize;
		unsigned min_framesize, max_framesize;
		unsigned sample_rate;
		unsigned channels;
		unsigned bits_per_sample;
		FLAC__uint64 total_samples;
		FLAC__byte md5sum[16];
	} FLAC__StreamMetadata_StreamInfo;
	 */

	var min_blocksize = Module.getValue(p_streaminfo,'i32');//4 bytes
	var max_blocksize = Module.getValue(p_streaminfo+4,'i32');//4 bytes

	var min_framesize = Module.getValue(p_streaminfo+8,'i32');//4 bytes
	var max_framesize = Module.getValue(p_streaminfo+12,'i32');//4 bytes

	var sample_rate = Module.getValue(p_streaminfo+16,'i32');//4 bytes
	var channels = Module.getValue(p_streaminfo+20,'i32');//4 bytes

	var bits_per_sample = Module.getValue(p_streaminfo+24,'i32');//4 bytes

	//FIXME should be at p_streaminfo+28, but seems to be at p_streaminfo+32
	var total_samples = Module.getValue(p_streaminfo+32,'i64');//8 bytes

	var md5sum = _readMd5(p_streaminfo+40);//16 bytes

	return {
		min_blocksize: min_blocksize,
		max_blocksize: max_blocksize,
		min_framesize: min_framesize,
		max_framesize: max_framesize,
		sampleRate: sample_rate,
		channels: channels,
		bitsPerSample: bits_per_sample,
		total_samples: total_samples,
		md5sum: md5sum
	};
}

/**
 * read MD5 checksum
 * @param {POINTER} p_md5
 * @returns {String} as HEX string representation
 */
function _readMd5(p_md5){

	var sb = [], v, str;
	for(var i=0, len = 16; i < len; ++i){
		v = Module.getValue(p_md5+i,'i8');//1 byte
		if(v < 0) v = 256 + v;//<- "convert" to uint8, if necessary
		str = v.toString(16);
		if(str.length < 2) str = '0' + str;//<- add padding, if necessary
		sb.push(str);
	}
	return sb.join('');
}

/**
 * HELPER: read frame data
 *
 * @param {POINTER} p_frame
 * @param {Flac.CodingOptions} [enc_opt]
 * @returns FrameHeader
 */
function _readFrameHdr(p_frame, enc_opt){

	/*
	typedef struct {
		unsigned blocksize;
		unsigned sample_rate;
		unsigned channels;
		FLAC__ChannelAssignment channel_assignment;
		unsigned bits_per_sample;
		FLAC__FrameNumberType number_type;
		union {
			FLAC__uint32 frame_number;
			FLAC__uint64 sample_number;
		} number;
		FLAC__uint8 crc;
	} FLAC__FrameHeader;
	 */

	var blocksize = Module.getValue(p_frame,'i32');//4 bytes
	var sample_rate = Module.getValue(p_frame+4,'i32');//4 bytes
	var channels = Module.getValue(p_frame+8,'i32');//4 bytes

	// 0: FLAC__CHANNEL_ASSIGNMENT_INDEPENDENT	independent channels
	// 1: FLAC__CHANNEL_ASSIGNMENT_LEFT_SIDE 	left+side stereo
	// 2: FLAC__CHANNEL_ASSIGNMENT_RIGHT_SIDE 	right+side stereo
	// 3: FLAC__CHANNEL_ASSIGNMENT_MID_SIDE 	mid+side stereo
	var channel_assignment = Module.getValue(p_frame+12,'i32');//4 bytes

	var bits_per_sample = Module.getValue(p_frame+16,'i32');

	// 0: FLAC__FRAME_NUMBER_TYPE_FRAME_NUMBER 	number contains the frame number
	// 1: FLAC__FRAME_NUMBER_TYPE_SAMPLE_NUMBER	number contains the sample number of first sample in frame
	var number_type = Module.getValue(p_frame+20,'i32');

	// union {} number: The frame number or sample number of first sample in frame; use the number_type value to determine which to use.
	var frame_number = Module.getValue(p_frame+24,'i32');
	var sample_number = Module.getValue(p_frame+24,'i64');

	var number = number_type === 0? frame_number : sample_number;
	var numberType = number_type === 0? 'frames' : 'samples';

	var crc = Module.getValue(p_frame+36,'i8');

	var subframes;
	if(enc_opt && enc_opt.analyseSubframes){
		var subOffset = {offset: 40};
		subframes = [];
		for(var i=0; i < channels; ++i){
			subframes.push(_readSubFrameHdr(p_frame, subOffset, blocksize, enc_opt));
		}
		//TODO read footer
		// console.log('  footer crc ', Module.getValue(p_frame + subOffset.offset,'i16'));
	}

	return {
		blocksize: blocksize,
		sampleRate: sample_rate,
		channels: channels,
		channelAssignment: channel_assignment,
		bitsPerSample: bits_per_sample,
		number: number,
		numberType: numberType,
		crc: crc,
		subframes: subframes
	};
}


function _readSubFrameHdr(p_subframe, subOffset, block_size, enc_opt){
	/*
	FLAC__SubframeType 	type
	union {
	   FLAC__Subframe_Constant   constant
	   FLAC__Subframe_Fixed   fixed
	   FLAC__Subframe_LPC   lpc
	   FLAC__Subframe_Verbatim   verbatim
	} 	data
	unsigned 	wasted_bits
	*/

	var type = Module.getValue(p_subframe + subOffset.offset, 'i32');
	subOffset.offset += 4;

	var data;
	switch(type){
		case 0:	//FLAC__SUBFRAME_TYPE_CONSTANT
			data = {value: Module.getValue(p_subframe + subOffset.offset, 'i32')};
			subOffset.offset += 284;//4;
			break;
		case 1:	//FLAC__SUBFRAME_TYPE_VERBATIM
			data = Module.getValue(p_subframe + subOffset.offset, 'i32');
			subOffset.offset += 284;//4;
			break;
		case 2:	//FLAC__SUBFRAME_TYPE_FIXED
			data = _readSubFrameHdrFixedData(p_subframe, subOffset, block_size, false, enc_opt);
			break;
		case 3:	//FLAC__SUBFRAME_TYPE_LPC
			data = _readSubFrameHdrFixedData(p_subframe, subOffset, block_size, true, enc_opt);
			break;
	}

	var offset =  subOffset.offset;
	var wasted_bits = Module.getValue(p_subframe + offset, 'i32');
	subOffset.offset += 4;

	return {
		type: type,//['CONSTANT', 'VERBATIM', 'FIXED', 'LPC'][type],
		data: data,
		wastedBits: wasted_bits
	}
}

function _readSubFrameHdrFixedData(p_subframe_data, subOffset, block_size, is_lpc, enc_opt){

	var offset = subOffset.offset;

	var data = {order: -1, contents: {parameters: [], rawBits: []}};
	//FLAC__Subframe_Fixed:
	// FLAC__EntropyCodingMethod 	entropy_coding_method
	// unsigned 	order
	// FLAC__int32 	warmup [FLAC__MAX_FIXED_ORDER]
	// const FLAC__int32 * 	residual

	//FLAC__EntropyCodingMethod:
	// FLAC__EntropyCodingMethodType 	type
	// union {
	//    FLAC__EntropyCodingMethod_PartitionedRice   partitioned_rice
	// } 	data

	//FLAC__ENTROPY_CODING_METHOD_PARTITIONED_RICE	0		Residual is coded by partitioning into contexts, each with it's own 4-bit Rice parameter.
	//FLAC__ENTROPY_CODING_METHOD_PARTITIONED_RICE2 1	Residual is coded by partitioning into contexts, each with it's own 5-bit Rice parameter.
	var entropyType = Module.getValue(p_subframe_data, 'i32');
	offset += 4;

	//FLAC__EntropyCodingMethod_PartitionedRice:
	//	unsigned 	order
	var entropyOrder = Module.getValue(p_subframe_data + offset, 'i32');
	data.order = entropyOrder;
	offset += 4;

	//FLAC__EntropyCodingMethod_PartitionedRice:
	//	FLAC__EntropyCodingMethod_PartitionedRiceContents * 	contents
	var partitions = 1 << entropyOrder, params = data.contents.parameters, raws = data.contents.rawBits;
	//FLAC__EntropyCodingMethod_PartitionedRiceContents
	// unsigned * 	parameters
	// unsigned * 	raw_bits
	// unsigned 	capacity_by_order
	var ppart = Module.getValue(p_subframe_data + offset, 'i32');
	var pparams = Module.getValue(ppart, 'i32');
	var praw = Module.getValue(ppart + 4, 'i32');
	data.contents.capacityByOrder = Module.getValue(ppart + 8, 'i32');
	for(var i=0; i < partitions; ++i){
		params.push(Module.getValue(pparams + (i*4), 'i32'));
		raws.push(Module.getValue(praw + (i*4), 'i32'));
	}
	offset += 4;

	//FLAC__Subframe_Fixed:
	//	unsigned 	order
	var order = Module.getValue(p_subframe_data + offset, 'i32');
	offset += 4;

	var warmup = [], res;

	if(is_lpc){
		//FLAC__Subframe_LPC

		// unsigned 	qlp_coeff_precision
		var qlp_coeff_precision = Module.getValue(p_subframe_data + offset, 'i32');
		offset += 4;
		// int 	quantization_level
		var quantization_level = Module.getValue(p_subframe_data + offset, 'i32');
		offset += 4;

		//FLAC__Subframe_LPC :
		// FLAC__int32 	qlp_coeff [FLAC__MAX_LPC_ORDER]
		var qlp_coeff = [];
		for(var i=0; i < order; ++i){
			qlp_coeff.push(Module.getValue(p_subframe_data + offset, 'i32'));
			offset += 4;
		}
		data.qlp_coeff = qlp_coeff;
		data.qlp_coeff_precision = qlp_coeff_precision;
		data.quantization_level = quantization_level;

		//FLAC__Subframe_LPC:
		// FLAC__int32 	warmup [FLAC__MAX_LPC_ORDER]
		offset = subOffset.offset + 152;
		offset = _readSubFrameHdrWarmup(p_subframe_data, offset, warmup, order);

		//FLAC__Subframe_LPC:
		// const FLAC__int32 * 	residual
		if(enc_opt && enc_opt.analyseResiduals){
			offset = subOffset.offset + 280;
			res = _readSubFrameHdrResidual(p_subframe_data + offset, block_size, order);
		}

	} else {

		//FLAC__Subframe_Fixed:
		// FLAC__int32 	warmup [FLAC__MAX_FIXED_ORDER]
		offset = _readSubFrameHdrWarmup(p_subframe_data, offset, warmup, order);

		//FLAC__Subframe_Fixed:
		// const FLAC__int32 * 	residual
		offset = subOffset.offset + 32;
		if(enc_opt && enc_opt.analyseResiduals){
			res = _readSubFrameHdrResidual(p_subframe_data + offset, block_size, order);
		}
	}

	subOffset.offset += 284;
	return {
		partition: {
			type: entropyType,
			data: data
		},
		order: order,
		warmup: warmup,
		residual: res
	}
}


function _readSubFrameHdrWarmup(p_subframe_data, offset, warmup, order){

	// FLAC__int32 	warmup [FLAC__MAX_FIXED_ORDER | FLAC__MAX_LPC_ORDER]
	for(var i=0; i < order; ++i){
		warmup.push(Module.getValue(p_subframe_data + offset, 'i32'));
		offset += 4;
	}
	return offset;
}


function _readSubFrameHdrResidual(p_subframe_data_res, block_size, order){
	// const FLAC__int32 * 	residual
	var pres = Module.getValue(p_subframe_data_res, 'i32');
	var res = [];//Module.getValue(pres, 'i32');
	//TODO read residual all values(?)
	// -> "The residual signal, length == (blocksize minus order) samples.
	for(var i=0, size = block_size - order; i < size; ++i){
		res.push(Module.getValue(pres + (i*4), 'i32'));
	}
	return res;
}

function _readConstChar(ptr, length, sb){
	sb.splice(0);
	var ch;
	for(var i=0; i < length; ++i){
		ch = Module.getValue(ptr + i,'i8');
		if(ch === 0){
			break;
		}
		sb.push(String.fromCodePoint(ch));
	}
	return sb.join('');
}

function _readNullTerminatedChar(ptr, sb){
	sb.splice(0);
	var ch = 1, i = 0;
	while(ch > 0){
		ch = Module.getValue(ptr + i++, 'i8');
		if(ch === 0){
			break;
		}
		sb.push(String.fromCodePoint(ch));
	}
	return sb.join('');
}


/**
 * HELPER read/extract padding metadata meta-data from meta-data block
 * @param {POINTER} p_padding_metadata
 * @returns PaddingMetadata
 */
function _readPaddingMetadata(p_padding_metadata){//-> FLAC__StreamMetadata.type (FLAC__MetadataType) === FLAC__METADATA_TYPE_PADDING (1)

	//FLAC__StreamMetadata_Padding:
	//		int 	dummy
	return {
		dummy: Module.getValue(p_padding_metadata,'i32')
	}
}

/**
 * HELPER read/extract application metadata meta-data from meta-data block
 * @param {POINTER} p_application_metadata
 * @returns ApplicationMetadata
 */
function _readApplicationMetadata(p_application_metadata){//-> FLAC__StreamMetadata.type (FLAC__MetadataType) === FLAC__METADATA_TYPE_APPLICATION (2)

	//FLAC__StreamMetadata_Application:
	// FLAC__byte 	id [4]
	// FLAC__byte * 	data
	return {
		id : Module.getValue(p_application_metadata,'i32'),
		data: Module.getValue(p_application_metadata + 4,'i32')//TODO should read (binary) data?
	}
}


/**
 * HELPER read/extract seek table metadata meta-data from meta-data block
 * @param {POINTER} p_seek_table_metadata
 * @returns SeekTableMetadata
 */
function _readSeekTableMetadata(p_seek_table_metadata){//-> FLAC__StreamMetadata.type (FLAC__MetadataType) === FLAC__METADATA_TYPE_SEEKTABLE (3)

	//FLAC__StreamMetadata_SeekTable:
	// 	unsigned 	num_points
	// 	FLAC__StreamMetadata_SeekPoint * 	points

	var num_points = Module.getValue(p_seek_table_metadata,'i32');

	var ptrPoints = Module.getValue(p_seek_table_metadata + 4,'i32');
	var points = [];
	for(var i=0; i < num_points; ++i){

		//FLAC__StreamMetadata_SeekPoint:
		// 	FLAC__uint64 	sample_number
		// 	FLAC__uint64 	stream_offset
		// 	unsigned 	frame_samples

		points.push({
			sample_number: Module.getValue(ptrPoints + (i * 24),'i64'),
			stream_offset: Module.getValue(ptrPoints + (i * 24) + 8,'i64'),
			frame_samples: Module.getValue(ptrPoints + (i * 24) + 16,'i32')
		});
	}

	return {
		num_points: num_points,
		points: points
	}
}

/**
 * HELPER read/extract vorbis comment meta-data from meta-data block
 * @param {POINTER} p_vorbiscomment
 * @returns VorbisComment
 */
function _readVorbisComment(p_vorbiscomment){//-> FLAC__StreamMetadata.type (FLAC__MetadataType) === FLAC__METADATA_TYPE_VORBIS_COMMENT (4)

	// FLAC__StreamMetadata_VorbisComment
	// FLAC__StreamMetadata_VorbisComment_Entry vendor_string:
	// 		FLAC__uint32 	length
	// 		FLAC__byte * 	entry
	var length = Module.getValue(p_vorbiscomment,'i32');
	var entry = Module.getValue(p_vorbiscomment + 4,'i32');

	var sb = [];
	var strEntry = _readConstChar(entry, length, sb);

	// FLAC__uint32 	num_comments
	var num_comments = Module.getValue(p_vorbiscomment + 8,'i32');

	// FLAC__StreamMetadata_VorbisComment_Entry * 	comments
	var comments = [], clen, centry;
	var pc = Module.getValue(p_vorbiscomment + 12, 'i32')
	for(var i=0; i < num_comments; ++i){

		// FLAC__StreamMetadata_VorbisComment_Entry
		// 		FLAC__uint32 	length
		// 		FLAC__byte * 	entry

		clen = Module.getValue(pc + (i*8), 'i32');
		if(clen === 0){
			continue;
		}

		centry = Module.getValue(pc + (i*8) + 4, 'i32');
		comments.push(_readConstChar(centry, clen, sb));
	}

	return {
		vendor_string: strEntry,
		num_comments: num_comments,
		comments: comments
	}
}

/**
 * HELPER read/extract cue sheet meta-data from meta-data block
 * @param {POINTER} p_cue_sheet
 * @returns CueSheetMetadata
 */
function _readCueSheetMetadata(p_cue_sheet){//-> FLAC__StreamMetadata.type (FLAC__MetadataType) === FLAC__METADATA_TYPE_CUESHEET (5)

	// char 	media_catalog_number [129]
	// FLAC__uint64 	lead_in
	// FLAC__bool 	is_cd
	// unsigned 	num_tracks
	// FLAC__StreamMetadata_CueSheet_Track * 	tracks

	var sb = [];
	var media_catalog_number = _readConstChar(p_cue_sheet, 129, sb);

	var lead_in = Module.getValue(p_cue_sheet + 136,'i64');

	var is_cd = Module.getValue(p_cue_sheet + 144,'i8');
	var num_tracks = Module.getValue(p_cue_sheet + 148,'i32');

	var ptrTrack = Module.getValue(p_cue_sheet + 152,'i32');
	var tracks = [], trackOffset = ptrTrack;
	if(ptrTrack !== 0){

		for(var i=0; i < num_tracks; ++i){

			var tr = _readCueSheetMetadata_track(trackOffset, sb);
			tracks.push(tr);
			trackOffset += 32;
		}
	}

	return {
		media_catalog_number: media_catalog_number,
		lead_in: lead_in,
		is_cd: is_cd,
		num_tracks: num_tracks,
		tracks: tracks
	}
}

/**
 * helper read track data for cue-sheet metadata
 * @param       {POINTER} p_cue_sheet_track pointer to the track data
 * @param       {string[]} sb "string buffer" temporary buffer for reading string (may be reset)
 * @return      {CueSheetTrack}
 */
function _readCueSheetMetadata_track(p_cue_sheet_track, sb){

	// FLAC__StreamMetadata_CueSheet_Track:
	// 		FLAC__uint64 	offset
	// 		FLAC__byte 	number
	// 		char 	isrc [13]
	//		 unsigned 	type:1
	// 		unsigned 	pre_emphasis:1
	// 		FLAC__byte 	num_indices
	// 		FLAC__StreamMetadata_CueSheet_Index * 	indices

	var typePremph = Module.getValue(p_cue_sheet_track + 22,'i8');
	var num_indices = Module.getValue(p_cue_sheet_track + 23,'i8');

	var indices = [];
	var track = {
		offset: Module.getValue(p_cue_sheet_track,'i64'),
		number: Module.getValue(p_cue_sheet_track + 8,'i8') &255,
		isrc: _readConstChar(p_cue_sheet_track + 9, 13, sb),
		type: typePremph & 1? 'NON_AUDIO' : 'AUDIO',
		pre_emphasis: !!(typePremph & 2),
		num_indices: num_indices,
		indices: indices
	}

	var idx;
	if(num_indices > 0){
		idx = Module.getValue(p_cue_sheet_track + 24,'i32');

		//FLAC__StreamMetadata_CueSheet_Index:
		// 	FLAC__uint64 	offset
		// 	FLAC__byte 	number

		for(var i=0; i < num_indices; ++i){
			indices.push({
				offset: Module.getValue(idx + (i*16),'i64'),
				number: Module.getValue(idx + (i*16) + 8,'i8')
			});
		}
	}

	return track;
}

/**
 * HELPER read/extract picture meta-data from meta-data block
 * @param {POINTER} p_picture_metadata
 * @returns PictureMetadata
 */
function _readPictureMetadata(p_picture_metadata){//-> FLAC__StreamMetadata.type (FLAC__MetadataType) === FLAC__METADATA_TYPE_PICTURE (6)

	// FLAC__StreamMetadata_Picture_Type 	type
	// char * 	mime_type
	// FLAC__byte * 	description
	// FLAC__uint32 	width
	// FLAC__uint32 	height
	// FLAC__uint32 	depth
	// FLAC__uint32 	colors
	// FLAC__uint32 	data_length
	// FLAC__byte * 	data

	var type = Module.getValue(p_picture_metadata,'i32');

	var mime = Module.getValue(p_picture_metadata + 4,'i32');

	var sb = [];
	var mime_type = _readNullTerminatedChar(mime, sb);

	var desc = Module.getValue(p_picture_metadata + 8,'i32');
	var description = _readNullTerminatedChar(desc, sb);

	var width  = Module.getValue(p_picture_metadata + 12,'i32');
	var height = Module.getValue(p_picture_metadata + 16,'i32');
	var depth  = Module.getValue(p_picture_metadata + 20,'i32');
	var colors = Module.getValue(p_picture_metadata + 24,'i32');
	var data_length = Module.getValue(p_picture_metadata + 28,'i32');

	var data = Module.getValue(p_picture_metadata + 32,'i32');

	var buffer = Uint8Array.from(Module.HEAPU8.subarray(data, data + data_length));

	return {
		type: type,
		mime_type: mime_type,
		description: description,
		width: width,
		height: height,
		depth: depth,
		colors: colors,
		data_length: data_length,
		data: buffer
	}
}

/**
 * HELPER workaround / fix for returned write-buffer when decoding FLAC
 *
 * @param {number} heapOffset
 * 				the offset for the data on HEAPU8
 * @param {Uint8Array} newBuffer
 * 				the target buffer into which the data should be written -- with the correct (block) size
 * @param {boolean} applyFix
 * 				whether or not to apply the data repair heuristics
 * 				(handling duplicated/triplicated values in raw data)
 */
function __fix_write_buffer(heapOffset, newBuffer, applyFix){

	var dv = new DataView(newBuffer.buffer);
	var targetSize = newBuffer.length;

	var increase = !applyFix? 1 : 2;//<- for FIX/workaround, NOTE: e.g. if 24-bit padding occurres, there is no fix/increase needed (more details comment below)
	var buffer = HEAPU8.subarray(heapOffset, heapOffset + targetSize * increase);

	// FIXME for some reason, the bytes values 0 (min) and 255 (max) get "triplicated",
	//		or inserted "doubled" which should be ignored, i.e.
	//		x x x	-> x
	//		x x		-> <ignored>
	//		where x is 0 or 255
	// -> HACK for now: remove/"over-read" 2 of the values, for each of these triplets/doublications
	var jump, isPrint;
	for(var i=0, j=0, size = buffer.length; i < size && j < targetSize; ++i, ++j){

		if(i === size-1 && j < targetSize - 1){
			//increase heap-view, in order to read more (valid) data into the target buffer
			buffer = HEAPU8.subarray(heapOffset, size + targetSize);
			size = buffer.length;
		}

		// NOTE if e.g. 24-bit padding occurres, there does not seem to be no duplication/triplication of 255 or 0, so must not try to fix!
		if(applyFix && (buffer[i] === 0 || buffer[i] === 255)){

			jump = 0;
			isPrint = true;

			if(i + 1 < size && buffer[i] === buffer[i+1]){

				++jump;

				if(i + 2 < size){
					if(buffer[i] === buffer[i+2]){
						++jump;
					} else {
						//if only 2 occurrences: ignore value
						isPrint = false;
					}
				}
			}//else: if single value: do print (an do not jump)


			if(isPrint){
				dv.setUint8(j, buffer[i]);
				if(jump === 2 && i + 3 < size && buffer[i] === buffer[i+3]){
					//special case for reducing triples in case the following value is also the same
					// (ie. something like: x x x |+ x)
					// -> then: do write the value one more time, and jump one further ahead
					// i.e. if value occurs 4 times in a row, write 2 values
					++jump;
					dv.setUint8(++j, buffer[i]);
				}
			} else {
				--j;
			}

			i += jump;//<- apply jump, if there were value duplications

		} else {
			dv.setUint8(j, buffer[i]);
		}

	}
}


// FLAC__STREAM_DECODER_READ_STATUS_CONTINUE     	The read was OK and decoding can continue.
// FLAC__STREAM_DECODER_READ_STATUS_END_OF_STREAM   The read was attempted while at the end of the stream. Note that the client must only return this value when the read callback was called when already at the end of the stream. Otherwise, if the read itself moves to the end of the stream, the client should still return the data and FLAC__STREAM_DECODER_READ_STATUS_CONTINUE, and then on the next read callback it should return FLAC__STREAM_DECODER_READ_STATUS_END_OF_STREAM with a byte count of 0.
// FLAC__STREAM_DECODER_READ_STATUS_ABORT       	An unrecoverable error occurred. The decoder will return from the process call.
var FLAC__STREAM_DECODER_READ_STATUS_CONTINUE = 0;
var FLAC__STREAM_DECODER_READ_STATUS_END_OF_STREAM = 1;
var FLAC__STREAM_DECODER_READ_STATUS_ABORT = 2;

// FLAC__STREAM_DECODER_WRITE_STATUS_CONTINUE   The write was OK and decoding can continue.
// FLAC__STREAM_DECODER_WRITE_STATUS_ABORT     	An unrecoverable error occurred. The decoder will return from the process call.
var FLAC__STREAM_DECODER_WRITE_STATUS_CONTINUE = 0;
var FLAC__STREAM_DECODER_WRITE_STATUS_ABORT = 1;

/**
 * @interface FLAC__StreamDecoderInitStatus
 * @memberOf Flac
 *
 * @property {"FLAC__STREAM_DECODER_INIT_STATUS_OK"}						0 	Initialization was successful.
 * @property {"FLAC__STREAM_DECODER_INIT_STATUS_UNSUPPORTED_CONTAINER"}		1 	The library was not compiled with support for the given container format.
 * @property {"FLAC__STREAM_DECODER_INIT_STATUS_INVALID_CALLBACKS"}			2 	A required callback was not supplied.
 * @property {"FLAC__STREAM_DECODER_INIT_STATUS_MEMORY_ALLOCATION_ERROR"}	3 	An error occurred allocating memory.
 * @property {"FLAC__STREAM_DECODER_INIT_STATUS_ERROR_OPENING_FILE"}		4 	fopen() failed in FLAC__stream_decoder_init_file() or FLAC__stream_decoder_init_ogg_file().
 * @property {"FLAC__STREAM_DECODER_INIT_STATUS_ALREADY_INITIALIZED"}		5 	FLAC__stream_decoder_init_*() was called when the decoder was already initialized, usually because FLAC__stream_decoder_finish() was not called.
 */
var FLAC__STREAM_DECODER_INIT_STATUS_OK	= 0;
var FLAC__STREAM_DECODER_INIT_STATUS_UNSUPPORTED_CONTAINER	= 1;
var FLAC__STREAM_DECODER_INIT_STATUS_INVALID_CALLBACKS	= 2;
var FLAC__STREAM_DECODER_INIT_STATUS_MEMORY_ALLOCATION_ERROR = 3;
var FLAC__STREAM_DECODER_INIT_STATUS_ERROR_OPENING_FILE = 4;
var FLAC__STREAM_DECODER_INIT_STATUS_ALREADY_INITIALIZED = 5;

/**
 * @interface FLAC__StreamEncoderInitStatus
 * @memberOf Flac
 *
 * @property {"FLAC__STREAM_ENCODER_INIT_STATUS_OK"}									0 	Initialization was successful.
 * @property {"FLAC__STREAM_ENCODER_INIT_STATUS_ENCODER_ERROR"}							1 	General failure to set up encoder; call FLAC__stream_encoder_get_state() for cause.
 * @property {"FLAC__STREAM_ENCODER_INIT_STATUS_UNSUPPORTED_CONTAINER"}					2 	The library was not compiled with support for the given container format.
 * @property {"FLAC__STREAM_ENCODER_INIT_STATUS_INVALID_CALLBACKS"}						3 	A required callback was not supplied.
 * @property {"FLAC__STREAM_ENCODER_INIT_STATUS_INVALID_NUMBER_OF_CHANNELS"}			4 	The encoder has an invalid setting for number of channels.
 * @property {"FLAC__STREAM_ENCODER_INIT_STATUS_INVALID_BITS_PER_SAMPLE"}				5 	The encoder has an invalid setting for bits-per-sample. FLAC supports 4-32 bps but the reference encoder currently supports only up to 24 bps.
 * @property {"FLAC__STREAM_ENCODER_INIT_STATUS_INVALID_SAMPLE_RATE"}					6 	The encoder has an invalid setting for the input sample rate.
 * @property {"FLAC__STREAM_ENCODER_INIT_STATUS_INVALID_BLOCK_SIZE"}					7 	The encoder has an invalid setting for the block size.
 * @property {"FLAC__STREAM_ENCODER_INIT_STATUS_INVALID_MAX_LPC_ORDER"}					8 	The encoder has an invalid setting for the maximum LPC order.
 * @property {"FLAC__STREAM_ENCODER_INIT_STATUS_INVALID_QLP_COEFF_PRECISION"}			9 	The encoder has an invalid setting for the precision of the quantized linear predictor coefficients.
 * @property {"FLAC__STREAM_ENCODER_INIT_STATUS_BLOCK_SIZE_TOO_SMALL_FOR_LPC_ORDER"}	10 	The specified block size is less than the maximum LPC order.
 * @property {"FLAC__STREAM_ENCODER_INIT_STATUS_NOT_STREAMABLE"}						11 	The encoder is bound to the Subset but other settings violate it.
 * @property {"FLAC__STREAM_ENCODER_INIT_STATUS_INVALID_METADATA"}						12 	The metadata input to the encoder is invalid, in one of the following ways:
 *																						      FLAC__stream_encoder_set_metadata() was called with a null pointer but a block count > 0
 *																						      One of the metadata blocks contains an undefined type
 *																						      It contains an illegal CUESHEET as checked by FLAC__format_cuesheet_is_legal()
 *																						      It contains an illegal SEEKTABLE as checked by FLAC__format_seektable_is_legal()
 *																						      It contains more than one SEEKTABLE block or more than one VORBIS_COMMENT block
 * @property {"FLAC__STREAM_ENCODER_INIT_STATUS_ALREADY_INITIALIZED"}					13 	FLAC__stream_encoder_init_*() was called when the encoder was already initialized, usually because FLAC__stream_encoder_finish() was not called.
 */
var FLAC__STREAM_ENCODER_INIT_STATUS_OK = 0;
var FLAC__STREAM_ENCODER_INIT_STATUS_ENCODER_ERROR = 1;
var FLAC__STREAM_ENCODER_INIT_STATUS_UNSUPPORTED_CONTAINER = 2;
var FLAC__STREAM_ENCODER_INIT_STATUS_INVALID_CALLBACKS = 3;
var FLAC__STREAM_ENCODER_INIT_STATUS_INVALID_NUMBER_OF_CHANNELS = 4;
var FLAC__STREAM_ENCODER_INIT_STATUS_INVALID_BITS_PER_SAMPLE = 5;
var FLAC__STREAM_ENCODER_INIT_STATUS_INVALID_SAMPLE_RATE = 6;
var FLAC__STREAM_ENCODER_INIT_STATUS_INVALID_BLOCK_SIZE = 7;
var FLAC__STREAM_ENCODER_INIT_STATUS_INVALID_MAX_LPC_ORDER = 8;
var FLAC__STREAM_ENCODER_INIT_STATUS_INVALID_QLP_COEFF_PRECISION = 9;
var FLAC__STREAM_ENCODER_INIT_STATUS_BLOCK_SIZE_TOO_SMALL_FOR_LPC_ORDER = 10;
var FLAC__STREAM_ENCODER_INIT_STATUS_NOT_STREAMABLE = 11;
var FLAC__STREAM_ENCODER_INIT_STATUS_INVALID_METADATA = 12;
var FLAC__STREAM_ENCODER_INIT_STATUS_ALREADY_INITIALIZED = 13;

//FLAC__STREAM_ENCODER_WRITE_STATUS_OK 				The write was OK and encoding can continue.
//FLAC__STREAM_ENCODER_WRITE_STATUS_FATAL_ERROR		An unrecoverable error occurred. The encoder will return from the process call
var FLAC__STREAM_ENCODER_WRITE_STATUS_OK = 0;
var FLAC__STREAM_ENCODER_WRITE_STATUS_FATAL_ERROR = 1;


/**
 * Map for encoder/decoder callback functions
 *
 * <pre>[ID] -> {function_type: FUNCTION}</pre>
 *
 * type: {[id: number]: {[callback_type: string]: function}}
 * @private
 */
var coders = {};

/**
 * Get a registered callback for the encoder / decoder instance
 *
 * @param {Number} p_coder
 * 			the encoder/decoder pointer (ID)
 * @param {String} func_type
 * 			the callback type, one of
 * 				"write" | "read" | "error" | "metadata"
 * @returns {Function} the callback (or VOID if there is no callback registered)
 * @private
 */
function getCallback(p_coder, func_type){
	if(coders[p_coder]){
		return coders[p_coder][func_type];
	}
}

/**
 * Register a callback for an encoder / decoder instance (will / should be deleted, when finish()/delete())
 *
 * @param {Number} p_coder
 * 			the encoder/decoder pointer (ID)
 * @param {String} func_type
 * 			the callback type, one of
 * 				"write" | "read" | "error" | "metadata"
 * @param {Function} callback
 * 			the callback function
 * @private
 */
function setCallback(p_coder, func_type, callback){
	if(!coders[p_coder]){
		coders[p_coder] = {};
	}
	coders[p_coder][func_type] = callback;
}

/**
 * Get coding options for the encoder / decoder instance:
 * returns FALSY when not set.
 *
 * @param {Number} p_coder
 * 			the encoder/decoder pointer (ID)
 * @returns {CodingOptions} the coding options
 * @private
 * @memberOf Flac
 */
function _getOptions(p_coder){
	if(coders[p_coder]){
		return coders[p_coder]["options"];
	}
}

/**
 * Set coding options for an encoder / decoder instance (will / should be deleted, when finish()/delete())
 *
 * @param {Number} p_coder
 * 			the encoder/decoder pointer (ID)
 * @param {Flac.CodingOptions} options
 * 			the coding options
 * @private
 * @memberOf Flac
 */
function _setOptions(p_coder, options){
	if(!coders[p_coder]){
		coders[p_coder] = {};
	}
	coders[p_coder]["options"] = options;
}

//(const FLAC__StreamEncoder *encoder, const FLAC__byte buffer[], size_t bytes, unsigned samples, unsigned current_frame, void *client_data)
// -> FLAC__StreamEncoderWriteStatus
var enc_write_fn_ptr = addFunction(function(p_encoder, buffer, bytes, samples, current_frame, p_client_data){
	var retdata = new Uint8Array(bytes);
	retdata.set(HEAPU8.subarray(buffer, buffer + bytes));
	var write_callback_fn = getCallback(p_encoder, 'write');
	try{
		write_callback_fn(retdata, bytes, samples, current_frame, p_client_data);
	} catch(err) {
		console.error(err);
		return FLAC__STREAM_ENCODER_WRITE_STATUS_FATAL_ERROR;
	}
	return FLAC__STREAM_ENCODER_WRITE_STATUS_OK;
}, 'iiiiiii');

//(const FLAC__StreamDecoder *decoder, FLAC__byte buffer[], size_t *bytes, void *client_data)
// -> FLAC__StreamDecoderReadStatus
var dec_read_fn_ptr = addFunction(function(p_decoder, buffer, bytes, p_client_data){
	//FLAC__StreamDecoderReadCallback, see https://xiph.org/flac/api/group__flac__stream__decoder.html#ga7a5f593b9bc2d163884348b48c4285fd

	var len = Module.getValue(bytes, 'i32');

	if(len === 0){
		return FLAC__STREAM_DECODER_READ_STATUS_ABORT;
	}

	var read_callback_fn = getCallback(p_decoder, 'read');

	//callback must return object with: {buffer: TypedArray, readDataLength: number, error: boolean}
	var readResult = read_callback_fn(len, p_client_data);
	//in case of END_OF_STREAM or an error, readResult.readDataLength must be returned with 0

	var readLen = readResult.readDataLength;
	Module.setValue(bytes, readLen, 'i32');

	if(readResult.error){
		return FLAC__STREAM_DECODER_READ_STATUS_ABORT;
	}

	if(readLen === 0){
		return FLAC__STREAM_DECODER_READ_STATUS_END_OF_STREAM;
	}

	var readBuf = readResult.buffer;

	var dataHeap = new Uint8Array(Module.HEAPU8.buffer, buffer, readLen);
	dataHeap.set(new Uint8Array(readBuf));

	return FLAC__STREAM_DECODER_READ_STATUS_CONTINUE;
}, 'iiiii');

//(const FLAC__StreamDecoder *decoder, const FLAC__Frame *frame, const FLAC__int32 *const buffer[], void *client_data)
// -> FLAC__StreamDecoderWriteStatus
var dec_write_fn_ptr = addFunction(function(p_decoder, p_frame, p_buffer, p_client_data){

	// var dec = Module.getValue(p_decoder,'i32');
	// var clientData = Module.getValue(p_client_data,'i32');

	var dec_opts = _getOptions(p_decoder);
	var frameInfo = _readFrameHdr(p_frame, dec_opts);

//	console.log(frameInfo);//DEBUG

	var channels = frameInfo.channels;
	var block_size = frameInfo.blocksize * (frameInfo.bitsPerSample / 8);

	//whether or not to apply data fixing heuristics (e.g. not needed for 24-bit samples)
	var isFix = frameInfo.bitsPerSample !== 24;

	//take padding bits into account for calculating buffer size
	// -> seems to be done for uneven byte sizes, i.e. 1 (8 bits) and 3 (24 bits)
	var padding = (frameInfo.bitsPerSample / 8)%2;
	if(padding > 0){
		block_size += frameInfo.blocksize * padding;
	}

	var data = [];//<- array for the data of each channel
	var bufferOffset, _buffer;

	for(var i=0; i < channels; ++i){

		bufferOffset = Module.getValue(p_buffer + (i*4),'i32');

		_buffer = new Uint8Array(block_size);
		//FIXME HACK for "strange" data (see helper function __fix_write_buffer)
		__fix_write_buffer(bufferOffset, _buffer, isFix);

		data.push(_buffer.subarray(0, block_size));
	}

	var write_callback_fn = getCallback(p_decoder, 'write');
	var res = write_callback_fn(data, frameInfo);//, clientData);

	// FLAC__STREAM_DECODER_WRITE_STATUS_CONTINUE	The write was OK and decoding can continue.
	// FLAC__STREAM_DECODER_WRITE_STATUS_ABORT     	An unrecoverable error occurred. The decoder will return from the process call.

	return res !== false? FLAC__STREAM_DECODER_WRITE_STATUS_CONTINUE : FLAC__STREAM_DECODER_WRITE_STATUS_ABORT;
}, 'iiiii');

/**
 * Decoding error codes.
 *
 * <br>
 * If the error code is not known, value <code>FLAC__STREAM_DECODER_ERROR__UNKNOWN__</code> is used.
 *
 * @property {"FLAC__STREAM_DECODER_ERROR_STATUS_LOST_SYNC"}			0   An error in the stream caused the decoder to lose synchronization.
 * @property {"FLAC__STREAM_DECODER_ERROR_STATUS_BAD_HEADER"}  			1   The decoder encountered a corrupted frame header.
 * @property {"FLAC__STREAM_DECODER_ERROR_STATUS_FRAME_CRC_MISMATCH"}	2   The frame's data did not match the CRC in the footer.
 * @property {"FLAC__STREAM_DECODER_ERROR_STATUS_UNPARSEABLE_STREAM"}	3   The decoder encountered reserved fields in use in the stream.
 *
 *
 * @interface FLAC__StreamDecoderErrorStatus
 * @memberOf Flac
 */
var DecoderErrorCode = {
	0: 'FLAC__STREAM_DECODER_ERROR_STATUS_LOST_SYNC',
	1: 'FLAC__STREAM_DECODER_ERROR_STATUS_BAD_HEADER',
	2: 'FLAC__STREAM_DECODER_ERROR_STATUS_FRAME_CRC_MISMATCH',
	3: 'FLAC__STREAM_DECODER_ERROR_STATUS_UNPARSEABLE_STREAM'
}

//(const FLAC__StreamDecoder *decoder, FLAC__StreamDecoderErrorStatus status, void *client_data)
// -> void
var dec_error_fn_ptr = addFunction(function(p_decoder, err, p_client_data){

	//err:
	var msg = DecoderErrorCode[err] || 'FLAC__STREAM_DECODER_ERROR__UNKNOWN__';//<- this should never happen;

	var error_callback_fn = getCallback(p_decoder, 'error');
	error_callback_fn(err, msg, p_client_data);
}, 'viii');

//(const FLAC__StreamDecoder *decoder, const FLAC__StreamMetadata *metadata, void *client_data) -> void
//(const FLAC__StreamEncoder *encoder, const FLAC__StreamMetadata *metadata, void *client_data) -> void
var metadata_fn_ptr = addFunction(function(p_coder, p_metadata, p_client_data){
	/*
	 typedef struct {
		FLAC__MetadataType type;
		FLAC__bool is_last;
		unsigned length;
		union {
			FLAC__StreamMetadata_StreamInfo stream_info;
			FLAC__StreamMetadata_Padding padding;
			FLAC__StreamMetadata_Application application;
			FLAC__StreamMetadata_SeekTable seek_table;
			FLAC__StreamMetadata_VorbisComment vorbis_comment;
			FLAC__StreamMetadata_CueSheet cue_sheet;
			FLAC__StreamMetadata_Picture picture;
			FLAC__StreamMetadata_Unknown unknown;
		} data;
	} FLAC__StreamMetadata;
	 */

	/*
	FLAC__METADATA_TYPE_STREAMINFO 		STREAMINFO block
	FLAC__METADATA_TYPE_PADDING 		PADDING block
	FLAC__METADATA_TYPE_APPLICATION 	APPLICATION block
	FLAC__METADATA_TYPE_SEEKTABLE 		SEEKTABLE block
	FLAC__METADATA_TYPE_VORBIS_COMMENT 	VORBISCOMMENT block (a.k.a. FLAC tags)
	FLAC__METADATA_TYPE_CUESHEET 		CUESHEET block
	FLAC__METADATA_TYPE_PICTURE 		PICTURE block
	FLAC__METADATA_TYPE_UNDEFINED 		marker to denote beginning of undefined type range; this number will increase as new metadata types are added
	FLAC__MAX_METADATA_TYPE 			No type will ever be greater than this. There is not enough room in the protocol block.
	 */

	var type = Module.getValue(p_metadata,'i32');//4 bytes
	var is_last = Module.getValue(p_metadata+4,'i32');//4 bytes
	var length = Module.getValue(p_metadata+8,'i64');//8 bytes

	var meta_data = {
		type: type,
		isLast: is_last,
		length: length,
		data: void(0)
	};

	var metadata_callback_fn = getCallback(p_coder, 'metadata');
	if(type === 0){// === FLAC__METADATA_TYPE_STREAMINFO

		meta_data.data = _readStreamInfo(p_metadata+16);
		metadata_callback_fn(meta_data.data, meta_data);

	} else {

		var data;
		switch(type){
			case 1: //FLAC__METADATA_TYPE_PADDING
				data = _readPaddingMetadata(p_metadata+16);
				break;
			case 2: //FLAC__METADATA_TYPE_APPLICATION
				data =  readApplicationMetadata(p_metadata+16);
				break;
			case 3: //FLAC__METADATA_TYPE_SEEKTABLE
				data = _readSeekTableMetadata(p_metadata+16);
				break;

			case 4: //FLAC__METADATA_TYPE_VORBIS_COMMENT
				data = _readVorbisComment(p_metadata+16);
				break;

			case 5: //FLAC__METADATA_TYPE_CUESHEET
				data = _readCueSheetMetadata(p_metadata+16);
				break;

			case 6: //FLAC__METADATA_TYPE_PICTURE
				data = _readPictureMetadata(p_metadata+16);
				break;
			default: { //NOTE this should not happen, and the raw data is very likely not correct!
				var cod_opts = _getOptions(p_coder);
				if(cod_opts && cod_opts.enableRawMetadata){
					var buffer = Uint8Array.from(HEAPU8.subarray(p_metadata+16, p_metadata+16+length));
					meta_data.raw = buffer;
				}
			}

		}

		meta_data.data = data;
		metadata_callback_fn(void(0), meta_data);
	}

}, 'viii');


////////////// helper fields and functions for event handling
// see exported on()/off() functions
var listeners = {};
var persistedEvents = [];
var add_event_listener = function (eventName, listener){
	var list = listeners[eventName];
	if(!list){
		list = [listener];
		listeners[eventName] = list;
	} else {
		list.push(listener);
	}
	check_and_trigger_persisted_event(eventName, listener);
};
var check_and_trigger_persisted_event = function(eventName, listener){
	var activated;
	for(var i=persistedEvents.length-1; i >= 0; --i){
		activated = persistedEvents[i];
		if(activated && activated.event === eventName){
			listener.apply(null, activated.args);
			break;
		}
	}
};
var remove_event_listener = function (eventName, listener){
	var list = listeners[eventName];
	if(list){
		for(var i=list.length-1; i >= 0; --i){
			if(list[i] === listener){
				list.splice(i, 1);
			}
		}
	}
};
/**
 * HELPER: fire an event
 * @param  {string} eventName
 * 										the event name
 * @param  {any[]} [args] OPITIONAL
 * 										the arguments when triggering the listeners
 * @param  {boolean} [isPersist] OPTIONAL (positinal argument!)
 * 										if TRUE, handlers for this event that will be registered after this will get triggered immediately
 * 										(i.e. event is "persistent": once triggered it stays "active")
 *
 */
var do_fire_event = function (eventName, args, isPersist){
	if(_exported['on'+eventName]){
		_exported['on'+eventName].apply(null, args);
	}
	var list = listeners[eventName];
	if(list){
		for(var i=0, size=list.length; i < size; ++i){
			list[i].apply(null, args)
		}
	}
	if(isPersist){
		persistedEvents.push({event: eventName, args: args});
	}
}

/////////////////////////////////////    export / public: /////////////////////////////////////////////
/**
 * The <code>Flac</code> module that provides functionality
 * for encoding WAV/PCM audio to Flac and decoding Flac to PCM.
 *
 * <br/><br/>
 * <p>
 * NOTE most functions are named analogous to the original C library functions,
 *      so that its documentation may be used for further reading.
 * </p>
 *
 * @see https://xiph.org/flac/api/group__flac__stream__encoder.html
 * @see https://xiph.org/flac/api/group__flac__stream__decoder.html
 *
 * @class Flac
 * @namespace Flac
 */
var _exported = {
	_module: Module,//internal: reference to Flac module
	_clear_enc_cb: function(enc_ptr){//internal function: remove reference to encoder instance and its callbacks
		delete coders[enc_ptr];
	},
	_clear_dec_cb: function(dec_ptr){//internal function: remove reference to decoder instance and its callbacks
		delete coders[dec_ptr];
	},
	/**
	 * Additional options for encoding or decoding
	 * @interface CodingOptions
	 * @memberOf Flac
	 * @property {boolean}  [analyseSubframes] for decoding: include subframes metadata in write-callback metadata, DEFAULT: false
	 * @property {boolean}  [analyseResiduals] for decoding: include residual data in subframes metadata in write-callback metadata, NOTE {@link #analyseSubframes} muste also be enabled, DEFAULT: false
	 * @property {boolean}  [enableRawMetadata] DEBUG option for decoding: enable receiving raw metadata for unknown metadata types in second argument in the metadata-callback, DEFAULT: false
	 *
	 * @see Flac#setOptions
	 * @see Flac~metadata_callback_fn
	 * @see Flac#FLAC__stream_decoder_set_metadata_respond_all
	 */
	/**
	 * FLAC raw metadata
	 *
	 * @interface MetadataBlock
	 * @memberOf Flac
	 * @property {Flac.FLAC__MetadataType}  type the type of the metadata
	 * @property {boolean}  isLast if it is the last block of metadata
	 * @property {number}  length the length of the metadata block (bytes)
	 * @property {Flac.StreamMetadata | Flac.PaddingMetadata | Flac.ApplicationMetadata | Flac.SeekTableMetadata | Flac.CueSheetMetadata | Flac.PictureMetadata}  [data] the metadata (omitted for unknown metadata types)
	 * @property {Uint8Array}  [raw] raw metadata (for debugging: enable via {@link Flac#setOptions})
	 */
	/**
	 * FLAC padding metadata block
	 *
	 * @interface PaddingMetadata
	 * @memberOf Flac
	 * @property {number}  dummy Conceptually this is an empty struct since we don't store the padding bytes. Empty structs are not allowed by some C compilers, hence the dummy.
	 *
	 * @see Flac.FLAC__MetadataType#FLAC__METADATA_TYPE_PADDING
	 */
	/**
	 * FLAC application metadata block
	 *
	 * NOTE the application meta data type is not really supported, i.e. the
	 *      (binary) data is only a pointer to the memory heap.
	 *
	 * @interface ApplicationMetadata
	 * @memberOf Flac
	 * @property {number}  id the application ID
	 * @property {number}  data (pointer)
	 *
	 * @see Flac.FLAC__MetadataType#FLAC__METADATA_TYPE_APPLICATION
	 * @see <a href="https://xiph.org/flac/format.html#metadata_block_application">application block format specification</a>
	 */
	/**
	 * FLAC seek table metadata block
	 *
	 * <p>
	 * From the format specification:
	 *
	 * The seek points must be sorted by ascending sample number.
	 *
	 * Each seek point's sample number must be the first sample of the target frame.
	 *
	 * Each seek point's sample number must be unique within the table
	 *
	 * Existence of a SEEKTABLE block implies a correct setting of total_samples in the stream_info block.
	 *
	 * Behavior is undefined when more than one SEEKTABLE block is present in a stream.
	 *
	 * @interface SeekTableMetadata
	 * @memberOf Flac
	 * @property {number}  num_points the number of seek points
	 * @property {Flac.SeekPoint[]}  points the seek points
	 *
	 * @see Flac.FLAC__MetadataType#FLAC__METADATA_TYPE_SEEKTABLE
	 */
	/**
	 * FLAC seek point data
	 *
	 * @interface SeekPoint
	 * @memberOf Flac
	 * @property {number}  sample_number The sample number of the target frame. NOTE <code>-1</code> for a placeholder point.
	 * @property {number}  stream_offset The offset, in bytes, of the target frame with respect to beginning of the first frame.
	 * @property {number}  frame_samples The number of samples in the target frame.
	 *
	 * @see Flac.SeekTableMetadata
	 */
	/**
	 * FLAC vorbis comment metadata block
	 *
	 * @interface VorbisCommentMetadata
	 * @memberOf Flac
	 * @property {string}  vendor_string the vendor string
	 * @property {number}  num_comments the number of comments
	 * @property {string[]}  comments the comments
	 *
	 * @see Flac.FLAC__MetadataType#FLAC__METADATA_TYPE_VORBIS_COMMENT
	 */
	 /**
	 * FLAC cue sheet metadata block
	 *
	 * @interface CueSheetMetadata
	 * @memberOf Flac
	 * @property {string}  media_catalog_number Media catalog number, in ASCII printable characters 0x20-0x7e. In general, the media catalog number may be 0 to 128 bytes long.
	 * @property {number}  lead_in The number of lead-in samples.
	 * @property {boolean}  is_cd true if CUESHEET corresponds to a Compact Disc, else false.
	 * @property {number}  num_tracks The number of tracks.
	 * @property {Flac.CueSheetTrack[]}  tracks the tracks
	 *
	 * @see Flac.FLAC__MetadataType#FLAC__METADATA_TYPE_CUESHEET
	 */
	 /**
	 * FLAC cue sheet track data
	 *
	 * @interface CueSheetTrack
	 * @memberOf Flac
	 * @property {number}  offset Track offset in samples, relative to the beginning of the FLAC audio stream.
	 * @property {number}  number The track number.
	 * @property {string}  isrc Track ISRC. This is a 12-digit alphanumeric code.
	 * @property {"AUDIO" | "NON_AUDIO"}  type The track type: audio or non-audio.
	 * @property {boolean}  pre_emphasis The pre-emphasis flag
	 * @property {number}  num_indices The number of track index points.
	 * @property {Flac.CueSheetTracIndex}  indices The track index points.
	 *
	 * @see Flac.CueSheetMetadata
	 */
	/**
	 * FLAC track index data for cue sheet metadata
	 *
	 * @interface CueSheetTracIndex
	 * @memberOf Flac
	 * @property {number}  offset Offset in samples, relative to the track offset, of the index point.
	 * @property {number}  number The index point number.
	 *
	 * @see Flac.CueSheetTrack
	 */
	/**
	 * FLAC picture metadata block
	 *
	 * @interface PictureMetadata
	 * @memberOf Flac
	 * @property {Flac.FLAC__StreamMetadata_Picture_Type}  type The kind of picture stored.
	 * @property {string}  mime_type Picture data's MIME type, in ASCII printable characters 0x20-0x7e, NUL terminated. For best compatibility with players, use picture data of MIME type image/jpeg or image/png. A MIME type of '–>' is also allowed, in which case the picture data should be a complete URL.
	 * @property {string}  description Picture's description.
	 * @property {number}  width Picture's width in pixels.
	 * @property {number}  height Picture's height in pixels.
	 * @property {number}  depth Picture's color depth in bits-per-pixel.
	 * @property {number}  colors For indexed palettes (like GIF), picture's number of colors (the number of palette entries), or 0 for non-indexed (i.e. 2^depth).
	 * @property {number}  data_length Length of binary picture data in bytes.
	 * @property {Uint8Array}  data Binary picture data.
	 */
	/**
	 * An enumeration of the PICTURE types (see FLAC__StreamMetadataPicture and id3 v2.4 APIC tag).
	 *
	 * @interface FLAC__StreamMetadata_Picture_Type
	 * @memberOf Flac
	 * @property {"FLAC__STREAM_METADATA_PICTURE_TYPE_OTHER"} 					0		Other
	 * @property {"FLAC__STREAM_METADATA_PICTURE_TYPE_FILE_ICON_STANDARD"} 		1		32x32 pixels 'file icon' (PNG only)
	 * @property {"FLAC__STREAM_METADATA_PICTURE_TYPE_FILE_ICON"} 				2		Other file icon
	 * @property {"FLAC__STREAM_METADATA_PICTURE_TYPE_FRONT_COVER"} 			3		Cover (front)
	 * @property {"FLAC__STREAM_METADATA_PICTURE_TYPE_BACK_COVER"} 				4		Cover (back)
	 * @property {"FLAC__STREAM_METADATA_PICTURE_TYPE_LEAFLET_PAGE"} 			5		Leaflet page
	 * @property {"FLAC__STREAM_METADATA_PICTURE_TYPE_MEDIA"} 					6		Media (e.g. label side of CD)
	 * @property {"FLAC__STREAM_METADATA_PICTURE_TYPE_LEAD_ARTIST"} 			7		Lead artist/lead performer/soloist
	 * @property {"FLAC__STREAM_METADATA_PICTURE_TYPE_ARTIST"} 					8		Artist/performer
	 * @property {"FLAC__STREAM_METADATA_PICTURE_TYPE_CONDUCTOR"} 				9		Conductor
	 * @property {"FLAC__STREAM_METADATA_PICTURE_TYPE_BAND"} 					10		Band/Orchestra
	 * @property {"FLAC__STREAM_METADATA_PICTURE_TYPE_COMPOSER"} 				11		Composer
	 * @property {"FLAC__STREAM_METADATA_PICTURE_TYPE_LYRICIST"} 				12		Lyricist/text writer
	 * @property {"FLAC__STREAM_METADATA_PICTURE_TYPE_RECORDING_LOCATION"} 		13		Recording Location
	 * @property {"FLAC__STREAM_METADATA_PICTURE_TYPE_DURING_RECORDING"} 		14		During recording
	 * @property {"FLAC__STREAM_METADATA_PICTURE_TYPE_DURING_PERFORMANCE"} 		15		During performance
	 * @property {"FLAC__STREAM_METADATA_PICTURE_TYPE_VIDEO_SCREEN_CAPTURE"} 	16		Movie/video screen capture
	 * @property {"FLAC__STREAM_METADATA_PICTURE_TYPE_FISH"} 					17		A bright coloured fish
	 * @property {"FLAC__STREAM_METADATA_PICTURE_TYPE_ILLUSTRATION"} 			18		Illustration
	 * @property {"FLAC__STREAM_METADATA_PICTURE_TYPE_BAND_LOGOTYPE"} 			19		Band/artist logotype
	 * @property {"FLAC__STREAM_METADATA_PICTURE_TYPE_PUBLISHER_LOGOTYPE"} 		20		Publisher/Studio logotype
	 *
	 * @see Flac.PictureMetadata
	 */

	/**
	 * An enumeration of the available metadata block types.
	 *
	 * @interface FLAC__MetadataType
	 * @memberOf Flac
	 *
	 * @property {"FLAC__METADATA_TYPE_STREAMINFO"} 		0	STREAMINFO block
	 * @property {"FLAC__METADATA_TYPE_PADDING"} 			1	PADDING block
	 * @property {"FLAC__METADATA_TYPE_APPLICATION"} 		2	APPLICATION block
	 * @property {"FLAC__METADATA_TYPE_SEEKTABLE"} 			3	SEEKTABLE block
	 * @property {"FLAC__METADATA_TYPE_VORBIS_COMMENT"} 	4	VORBISCOMMENT block (a.k.a. FLAC tags)
	 * @property {"FLAC__METADATA_TYPE_CUESHEET"} 			5	CUESHEET block
	 * @property {"FLAC__METADATA_TYPE_PICTURE"} 			6	PICTURE block
	 * @property {"FLAC__METADATA_TYPE_UNDEFINED"} 			7	marker to denote beginning of undefined type range; this number will increase as new metadata types are added
	 * @property {"FLAC__MAX_METADATA_TYPE"} 				126	No type will ever be greater than this. There is not enough room in the protocol block.
	 *
	 * @see Flac.MetadataBlock
	 * @see <a href="https://xiph.org/flac/format.html">FLAC format documentation</a>
	 */
	/**
	 * @function
	 * @public
	 * @memberOf Flac#
	 * @copydoc Flac._setOptions
	 */
	setOptions: _setOptions,
	/**
	 * @function
	 * @public
	 * @memberOf Flac#
	 * @copydoc Flac._getOptions
	 */
	getOptions: _getOptions,
	/**
	 * Returns if Flac has been initialized / is ready to be used.
	 *
	 * @returns {boolean} <code>true</code>, if Flac is ready to be used
	 *
	 * @memberOf Flac#
	 * @function
	 * @see #onready
	 * @see #on
	 */
	isReady: function() { return _flac_ready; },
	/**
	 * Hook for handler function that gets called, when asynchronous initialization has finished.
	 *
	 * NOTE that if the execution environment does not support <code>Object#defineProperty</code>, then
	 *      this function is not called, after {@link #isReady} is <code>true</code>.
	 *      In this case, {@link #isReady} should be checked, before setting <code>onready</code>
	 *      and if it is <code>true</code>, handler should be executed immediately instead of setting <code>onready</code>.
	 *
	 * @memberOf Flac#
	 * @function
	 * @param {Flac.event:ReadyEvent} event the ready-event object
	 * @see #isReady
	 * @see #on
	 * @default undefined
	 * @example
	 *  // [1] if Object.defineProperty() IS supported:
	 *  Flac.onready = function(event){
	 *     //gets executed when library becomes ready, or immediately, if it already is ready...
	 *	   doSomethingWithFlac();
	 *  };
	 *
	 *  // [2] if Object.defineProperty() is NOT supported:
	 *	// do check Flac.isReady(), and only set handler, if not ready yet
	 *  // (otherwise immediately excute handler code)
	 *  if(!Flac.isReady()){
	 *    Flac.onready = function(event){
	 *       //gets executed when library becomes ready...
	 *		 doSomethingWithFlac();
	 *    };
	 *  } else {
	 * 		// Flac is already ready: immediately start processing
	 *		doSomethingWithFlac();
	 *	}
	 */
	onready: void(0),
	/**
	 * Ready event: is fired when the library has been initialized and is ready to be used
	 * (e.g. asynchronous loading of binary / WASM modules has been completed).
	 *
	 * Before this event is fired, use of functions related to encoding and decoding may
	 * cause errors.
	 *
	 * @event ReadyEvent
	 * @memberOf Flac
	 * @type {object}
	 * @property {"ready"} type 	the type of the event <code>"ready"</code>
	 * @property {Flac} target 	the initalized FLAC library instance
	 *
	 * @see #isReady
	 * @see #on
	 */
	/**
	 * Created event: is fired when an encoder or decoder was created.
	 *
	 * @event CreatedEvent
	 * @memberOf Flac
	 * @type {object}
	 * @property {"created"} type 	the type of the event <code>"created"</code>
	 * @property {Flac.CoderChangedEventData} target 	the information for the created encoder or decoder
	 *
	 * @see #on
	 */
	/**
	 * Destroyed event: is fired when an encoder or decoder was destroyed.
	 *
	 * @event DestroyedEvent
	 * @memberOf Flac
	 * @type {object}
	 * @property {"destroyed"} type 	the type of the event <code>"destroyed"</code>
	 * @property {Flac.CoderChangedEventData} target 	the information for the destroyed encoder or decoder
	 *
	 * @see #on
	 */
	/**
	 * Life cycle event data for signaling life cycle changes of encoder or decoder instances
	 * @interface CoderChangedEventData
	 * @memberOf Flac
	 * @property {number}  id  the ID for the encoder or decoder instance
	 * @property {"encoder" | "decoder"}  type  signifies whether the event is for an encoder or decoder instance
	 * @property {any}  [data]  specific data for the life cycle change
	 *
	 * @see Flac.event:CreatedEvent
	 * @see Flac.event:DestroyedEvent
	 */
	/**
	 * Add an event listener for module-events.
	 * Supported events:
	 * <ul>
	 *  <li> <code>"ready"</code> &rarr; {@link Flac.event:ReadyEvent}: emitted when module is ready for usage (i.e. {@link #isReady} is true)<br/>
	 *             <em>NOTE listener will get immediately triggered if module is already <code>"ready"</code></em>
	 *  </li>
	 *  <li> <code>"created"</code> &rarr; {@link Flac.event:CreatedEvent}: emitted when an encoder or decoder instance was created<br/>
	 *  </li>
	 *  <li> <code>"destroyed"</code> &rarr; {@link Flac.event:DestroyedEvent}: emitted when an encoder or decoder instance was destroyed<br/>
	 *  </li>
	 * </ul>
	 *
	 * @param {string} eventName
	 * @param {Function} listener
	 *
	 * @memberOf Flac#
	 * @function
	 * @see #off
	 * @see #onready
	 * @see Flac.event:ReadyEvent
	 * @see Flac.event:CreatedEvent
	 * @see Flac.event:DestroyedEvent
	 * @example
	 *  Flac.on('ready', function(event){
	 *     //gets executed when library is ready, or becomes ready...
	 *  });
	 */
	on: add_event_listener,
	/**
	 * Remove an event listener for module-events.
	 * @param {string} eventName
	 * @param {Function} listener
	 *
	 * @memberOf Flac#
	 * @function
	 * @see #on
	 */
	off: remove_event_listener,

	/**
	 * Set the "verify" flag. If true, the encoder will verify it's own encoded output by feeding it through an internal decoder and comparing the original signal against the decoded signal. If a mismatch occurs, the process call will return false. Note that this will slow the encoding process by the extra time required for decoding and comparison.
	 *
	 * <p>
	 * NOTE: only use on un-initilized encoder instances!
	 *
	 * @param {number} encoder
	 * 				the ID of the encoder instance
	 *
	 * @param {boolean} is_verify enable/disable checksum verification during encoding
	 *
	 * @returns {boolean} <code>false</code> if the encoder is already initialized, else <code>true</code>
	 *
	 * @see #create_libflac_encoder
	 * @see #FLAC__stream_encoder_get_verify
	 *
	 * @memberOf Flac#
	 * @function
	 */
	FLAC__stream_encoder_set_verify: function(encoder, is_verify){
		is_verify = is_verify? 1 : 0;
		Module.ccall('FLAC__stream_encoder_set_verify', 'number', ['number', 'number'], [ encoder, is_verify ]);
	},
	/**
	 * Set the compression level
	 *
	 * The compression level is roughly proportional to the amount of effort the encoder expends to compress the file. A higher level usually means more computation but higher compression. The default level is suitable for most applications.
	 *
	 * Currently the levels range from 0 (fastest, least compression) to 8 (slowest, most compression). A value larger than 8 will be treated as 8.
	 *
	 *
	 * <p>
	 * NOTE: only use on un-initilized encoder instances!
	 *
	 * @param {number} encoder
	 * 				the ID of the encoder instance
	 *
	 * @param {Flac.CompressionLevel} compression_level the desired Flac compression level: [0, 8]
	 *
	 * @returns {boolean} <code>false</code> if the encoder is already initialized, else <code>true</code>
	 *
	 * @see #create_libflac_encoder
	 * @see Flac.CompressionLevel
	 * @see <a href="https://xiph.org/flac/api/group__flac__stream__encoder.html#gae49cf32f5256cb47eecd33779493ac85">FLAC API for FLAC__stream_encoder_set_compression_level()</a>
	 *
	 * @memberOf Flac#
	 * @function
	 */
	FLAC__stream_encoder_set_compression_level: Module.cwrap('FLAC__stream_encoder_set_compression_level', 'number', [ 'number', 'number' ]),
	/**
	 * Set the blocksize to use while encoding.
	 * The number of samples to use per frame. Use 0 to let the encoder estimate a blocksize; this is usually best.
	 *
	 * <p>
	 * NOTE: only use on un-initilized encoder instances!
	 *
	 * @param {number} encoder
	 * 				the ID of the encoder instance
	 *
	 * @param {number} block_size  the number of samples to use per frame
	 *
	 * @returns {boolean} <code>false</code> if the encoder is already initialized, else <code>true</code>
	 *
	 * @see #create_libflac_encoder
	 *
	 * @memberOf Flac#
	 * @function
	 */
	FLAC__stream_encoder_set_blocksize: Module.cwrap('FLAC__stream_encoder_set_blocksize', 'number', [ 'number', 'number']),


	/**
	 * Get the state of the verify stream decoder. Useful when the stream encoder state is FLAC__STREAM_ENCODER_VERIFY_DECODER_ERROR.
	 *
	 * @param {number} encoder
	 * 				the ID of the encoder instance
	 *
	 * @returns {Flac.FLAC__StreamDecoderState} the verify stream decoder state
	 *
	 * @memberOf Flac#
	 * @function
	 */
	FLAC__stream_encoder_get_verify_decoder_state: Module.cwrap('FLAC__stream_encoder_get_verify_decoder_state', 'number', ['number']),

	/**
	 * Get the "verify" flag for the encoder.
	 *
	 * @param {number} encoder
	 * 				the ID of the encoder instance
	 *
	 * @returns {boolean} the verify flag for the encoder
	 *
	 *
	 * @memberOf Flac#
	 * @function
	 *
	 * @see #FLAC__stream_encoder_set_verify
	 */
	FLAC__stream_encoder_get_verify: Module.cwrap('FLAC__stream_encoder_get_verify', 'number', ['number']),
/*

TODO export other encoder API functions?:

FLAC__bool 	FLAC__stream_encoder_set_channels (FLAC__StreamEncoder *encoder, unsigned value)

FLAC__bool 	FLAC__stream_encoder_set_bits_per_sample (FLAC__StreamEncoder *encoder, unsigned value)

FLAC__bool 	FLAC__stream_encoder_set_sample_rate (FLAC__StreamEncoder *encoder, unsigned value)

FLAC__bool 	FLAC__stream_encoder_set_do_mid_side_stereo (FLAC__StreamEncoder *encoder, FLAC__bool value)

FLAC__bool 	FLAC__stream_encoder_set_loose_mid_side_stereo (FLAC__StreamEncoder *encoder, FLAC__bool value)

FLAC__bool 	FLAC__stream_encoder_set_apodization (FLAC__StreamEncoder *encoder, const char *specification)

FLAC__bool 	FLAC__stream_encoder_set_max_lpc_order (FLAC__StreamEncoder *encoder, unsigned value)

FLAC__bool 	FLAC__stream_encoder_set_qlp_coeff_precision (FLAC__StreamEncoder *encoder, unsigned value)

FLAC__bool 	FLAC__stream_encoder_set_do_qlp_coeff_prec_search (FLAC__StreamEncoder *encoder, FLAC__bool value)

FLAC__bool 	FLAC__stream_encoder_set_do_escape_coding (FLAC__StreamEncoder *encoder, FLAC__bool value)

FLAC__bool 	FLAC__stream_encoder_set_do_exhaustive_model_search (FLAC__StreamEncoder *encoder, FLAC__bool value)

FLAC__bool 	FLAC__stream_encoder_set_min_residual_partition_order (FLAC__StreamEncoder *encoder, unsigned value)

FLAC__bool 	FLAC__stream_encoder_set_max_residual_partition_order (FLAC__StreamEncoder *encoder, unsigned value)

FLAC__bool 	FLAC__stream_encoder_set_rice_parameter_search_dist (FLAC__StreamEncoder *encoder, unsigned value)

FLAC__bool 	FLAC__stream_encoder_get_streamable_subset (const FLAC__StreamEncoder *encoder)

unsigned 	FLAC__stream_encoder_get_channels (const FLAC__StreamEncoder *encoder)

unsigned 	FLAC__stream_encoder_get_bits_per_sample (const FLAC__StreamEncoder *encoder)

unsigned 	FLAC__stream_encoder_get_sample_rate (const FLAC__StreamEncoder *encoder)

unsigned 	FLAC__stream_encoder_get_blocksize (const FLAC__StreamEncoder *encoder)

FLAC__bool 	FLAC__stream_encoder_get_do_mid_side_stereo (const FLAC__StreamEncoder *encoder)

FLAC__bool 	FLAC__stream_encoder_get_loose_mid_side_stereo (const FLAC__StreamEncoder *encoder)

unsigned 	FLAC__stream_encoder_get_max_lpc_order (const FLAC__StreamEncoder *encoder)

unsigned 	FLAC__stream_encoder_get_qlp_coeff_precision (const FLAC__StreamEncoder *encoder)

FLAC__bool 	FLAC__stream_encoder_get_do_qlp_coeff_prec_search (const FLAC__StreamEncoder *encoder)

FLAC__bool 	FLAC__stream_encoder_get_do_escape_coding (const FLAC__StreamEncoder *encoder)

FLAC__bool 	FLAC__stream_encoder_get_do_exhaustive_model_search (const FLAC__StreamEncoder *encoder)

unsigned 	FLAC__stream_encoder_get_min_residual_partition_order (const FLAC__StreamEncoder *encoder)

unsigned 	FLAC__stream_encoder_get_max_residual_partition_order (const FLAC__StreamEncoder *encoder)

unsigned 	FLAC__stream_encoder_get_rice_parameter_search_dist (const FLAC__StreamEncoder *encoder)

FLAC__uint64 	FLAC__stream_encoder_get_total_samples_estimate (const FLAC__StreamEncoder *encoder)



TODO export other decoder API functions?:


const char * 	FLAC__stream_decoder_get_resolved_state_string (const FLAC__StreamDecoder *decoder)

FLAC__uint64 	FLAC__stream_decoder_get_total_samples (const FLAC__StreamDecoder *decoder)

unsigned 	FLAC__stream_decoder_get_channels (const FLAC__StreamDecoder *decoder)

unsigned 	FLAC__stream_decoder_get_bits_per_sample (const FLAC__StreamDecoder *decoder)

unsigned 	FLAC__stream_decoder_get_sample_rate (const FLAC__StreamDecoder *decoder)

unsigned 	FLAC__stream_decoder_get_blocksize (const FLAC__StreamDecoder *decoder)


FLAC__bool 	FLAC__stream_decoder_flush (FLAC__StreamDecoder *decoder)

FLAC__bool 	FLAC__stream_decoder_skip_single_frame (FLAC__StreamDecoder *decoder)

 */

	 /**
	 * Set the compression level
	 *
	 * The compression level is roughly proportional to the amount of effort the encoder expends to compress the file. A higher level usually means more computation but higher compression. The default level is suitable for most applications.
	 *
	 * Currently the levels range from 0 (fastest, least compression) to 8 (slowest, most compression). A value larger than 8 will be treated as 8.
	 *
	 * This function automatically calls the following other set functions with appropriate values, so the client does not need to unless it specifically wants to override them:
	 * <pre>
	 *     FLAC__stream_encoder_set_do_mid_side_stereo()
	 *     FLAC__stream_encoder_set_loose_mid_side_stereo()
	 *     FLAC__stream_encoder_set_apodization()
	 *     FLAC__stream_encoder_set_max_lpc_order()
	 *     FLAC__stream_encoder_set_qlp_coeff_precision()
	 *     FLAC__stream_encoder_set_do_qlp_coeff_prec_search()
	 *     FLAC__stream_encoder_set_do_escape_coding()
	 *     FLAC__stream_encoder_set_do_exhaustive_model_search()
	 *     FLAC__stream_encoder_set_min_residual_partition_order()
	 *     FLAC__stream_encoder_set_max_residual_partition_order()
	 *     FLAC__stream_encoder_set_rice_parameter_search_dist()
	 * </pre>
	 * The actual values set for each level are:
	 * | level  | do mid-side stereo  | loose mid-side stereo  | apodization                                    | max lpc order  | qlp coeff precision  | qlp coeff prec search  | escape coding  | exhaustive model search  | min residual partition order  | max residual partition order  | rice parameter search dist   |
	 * |--------|---------------------|------------------------|------------------------------------------------|----------------|----------------------|------------------------|----------------|--------------------------|-------------------------------|-------------------------------|------------------------------|
	 * | 0      | false               | false                  | tukey(0.5)                                     | 0              | 0                    | false                  | false          | false                    | 0                             | 3                             | 0                            |
	 * | 1      | true                | true                   | tukey(0.5)                                     | 0              | 0                    | false                  | false          | false                    | 0                             | 3                             | 0                            |
	 * | 2      | true                | false                  | tukey(0.5)                                     | 0              | 0                    | false                  | false          | false                    | 0                             | 3                             | 0                            |
	 * | 3      | false               | false                  | tukey(0.5)                                     | 6              | 0                    | false                  | false          | false                    | 0                             | 4                             | 0                            |
	 * | 4      | true                | true                   | tukey(0.5)                                     | 8              | 0                    | false                  | false          | false                    | 0                             | 4                             | 0                            |
	 * | 5      | true                | false                  | tukey(0.5)                                     | 8              | 0                    | false                  | false          | false                    | 0                             | 5                             | 0                            |
	 * | 6      | true                | false                  | tukey(0.5);partial_tukey(2)                    | 8              | 0                    | false                  | false          | false                    | 0                             | 6                             | 0                            |
	 * | 7      | true                | false                  | tukey(0.5);partial_tukey(2)                    | 12             | 0                    | false                  | false          | false                    | 0                             | 6                             | 0                            |
	 * | 8      | true                | false                  | tukey(0.5);partial_tukey(2);punchout_tukey(3)  | 12             | 0                    | false                  | false          | false                    | 0                             | 6                             | 0                            |
	 *
	 * @interface CompressionLevel
	 * @memberOf Flac
	 *
	 * @property {"FLAC__COMPRESSION_LEVEL_0"} 		0	compression level 0
	 * @property {"FLAC__COMPRESSION_LEVEL_1"} 		1	compression level 1
	 * @property {"FLAC__COMPRESSION_LEVEL_2"} 		2	compression level 2
	 * @property {"FLAC__COMPRESSION_LEVEL_3"} 		3	compression level 3
	 * @property {"FLAC__COMPRESSION_LEVEL_4"} 		4	compression level 4
	 * @property {"FLAC__COMPRESSION_LEVEL_5"} 		5	compression level 5
	 * @property {"FLAC__COMPRESSION_LEVEL_6"} 		6	compression level 6
	 * @property {"FLAC__COMPRESSION_LEVEL_7"} 		7	compression level 7
	 * @property {"FLAC__COMPRESSION_LEVEL_8"} 		8	compression level 8
	 */
	/**
	 * Create an encoder.
	 *
	 * @param {number} sample_rate
	 * 					the sample rate of the input PCM data
	 * @param {number} channels
	 * 					the number of channels of the input PCM data
	 * @param {number} bps
	 * 					bits per sample of the input PCM data
	 * @param {Flac.CompressionLevel} compression_level
	 * 					the desired Flac compression level: [0, 8]
	 * @param {number} [total_samples] OPTIONAL
	 * 					the number of total samples of the input PCM data:<br>
	 * 					 Sets an estimate of the total samples that will be encoded.
	 * 					 This is merely an estimate and may be set to 0 if unknown.
	 * 					 This value will be written to the STREAMINFO block before encoding,
	 * 					 and can remove the need for the caller to rewrite the value later if
	 * 					 the value is known before encoding.<br>
	 * 					If specified, the it will be written into metadata of the FLAC header.<br>
	 * 					DEFAULT: 0 (i.e. unknown number of samples)
	 * @param {boolean} [is_verify] OPTIONAL
	 * 					enable/disable checksum verification during encoding<br>
	 * 					DEFAULT: true<br>
	 * 					NOTE: this argument is positional (i.e. total_samples must also be given)
	 * @param {number} [block_size] OPTIONAL
	 * 					the number of samples to use per frame.<br>
	 * 					DEFAULT: 0 (i.e. encoder sets block size automatically)
	 * 					NOTE: this argument is positional (i.e. total_samples and is_verify must also be given)
	 *
	 *
	 * @returns {number} the ID of the created encoder instance (or 0, if there was an error)
	 *
	 * @memberOf Flac#
	 * @function
	 */
	create_libflac_encoder: function(sample_rate, channels, bps, compression_level, total_samples, is_verify, block_size){
		is_verify = typeof is_verify === 'undefined'? 1 : is_verify + 0;
		total_samples = typeof total_samples === 'number'? total_samples : 0;
		block_size = typeof block_size === 'number'? block_size : 0;
		var ok = true;
		var encoder = Module.ccall('FLAC__stream_encoder_new', 'number', [ ], [ ]);
		ok &= Module.ccall('FLAC__stream_encoder_set_verify', 'number', ['number', 'number'], [ encoder, is_verify ]);
		ok &= Module.ccall('FLAC__stream_encoder_set_compression_level', 'number', ['number', 'number'], [ encoder, compression_level ]);
		ok &= Module.ccall('FLAC__stream_encoder_set_channels', 'number', ['number', 'number'], [ encoder, channels ]);
		ok &= Module.ccall('FLAC__stream_encoder_set_bits_per_sample', 'number', ['number', 'number'], [ encoder, bps ]);
		ok &= Module.ccall('FLAC__stream_encoder_set_sample_rate', 'number', ['number', 'number'], [ encoder, sample_rate ]);
		ok &= Module.ccall('FLAC__stream_encoder_set_blocksize', 'number', [ 'number', 'number'], [ encoder, block_size ]);
		ok &= Module.ccall('FLAC__stream_encoder_set_total_samples_estimate', 'number', ['number', 'number'], [ encoder, total_samples ]);
		if (ok){
			do_fire_event('created', [{type: 'created', target: {id: encoder, type: 'encoder'}}], false);
			return encoder;
		}
		return 0;
	},
	/**
	 * @deprecated use {@link #create_libflac_encoder} instead
	 * @memberOf Flac#
	 * @function
	 */
	init_libflac_encoder: function(){
		console.warn('Flac.init_libflac_encoder() is deprecated, use Flac.create_libflac_encoder() instead!');
		return this.create_libflac_encoder.apply(this, arguments);
	},

	/**
	 * Create a decoder.
	 *
	 * @param {boolean} [is_verify]
	 * 				enable/disable checksum verification during decoding<br>
	 * 				DEFAULT: true
	 *
	 * @returns {number} the ID of the created decoder instance (or 0, if there was an error)
	 *
	 * @memberOf Flac#
	 * @function
	 */
	create_libflac_decoder: function(is_verify){
		is_verify = typeof is_verify === 'undefined'? 1 : is_verify + 0;
		var ok = true;
		var decoder = Module.ccall('FLAC__stream_decoder_new', 'number', [ ], [ ]);
		ok &= Module.ccall('FLAC__stream_decoder_set_md5_checking', 'number', ['number', 'number'], [ decoder, is_verify ]);
		if (ok){
			do_fire_event('created', [{type: 'created', target: {id: decoder, type: 'decoder'}}], false);
			return decoder;
		}
		return 0;
	},
	/**
	 * @deprecated use {@link #create_libflac_decoder} instead
	 * @memberOf Flac#
	 * @function
	 */
	init_libflac_decoder: function(){
		console.warn('Flac.init_libflac_decoder() is deprecated, use Flac.create_libflac_decoder() instead!');
		return this.create_libflac_decoder.apply(this, arguments);
	},
	/**
	 * The callback for writing the encoded FLAC data.
	 *
	 * @callback Flac~encoder_write_callback_fn
	 * @param {Uint8Array} data the encoded FLAC data
	 * @param {number} numberOfBytes the number of bytes in data
	 * @param {number} samples the number of samples encoded in data
	 * @param {number} currentFrame the number of the (current) encoded frame in data
	 * @returns {void | false} returning <code>false</code> indicates that an
	 * 								unrecoverable error occurred and decoding should be aborted
	 */
	/**
	 * The callback for the metadata of the encoded/decoded Flac data.
	 *
	 * By default, only the STREAMINFO metadata is enabled.
	 *
	 * For other metadata types {@link Flac.FLAC__MetadataType} they need to be enabled,
	 * see e.g. {@link Flac#FLAC__stream_decoder_set_metadata_respond}
	 *
	 * @callback Flac~metadata_callback_fn
	 * @param {Flac.StreamMetadata | undefined} metadata the FLAC meta data, NOTE only STREAMINFO is returned in first argument, for other types use 2nd argument's <code>metadataBlock.data<code>
	 * @param {Flac.MetadataBlock} metadataBlock the detailed meta data block
	 *
	 * @see Flac#init_decoder_stream
	 * @see Flac#init_encoder_stream
	 * @see Flac.CodingOptions
	 * @see Flac#FLAC__stream_decoder_set_metadata_respond_all
	 */
	/**
	 * FLAC meta data
	 * @interface Metadata
	 * @memberOf Flac
	 * @property {number}  sampleRate the sample rate (Hz)
	 * @property {number}  channels the number of channels
	 * @property {number}  bitsPerSample bits per sample
	 */
	/**
	 * FLAC stream meta data
	 * @interface StreamMetadata
	 * @memberOf Flac
	 * @augments Flac.Metadata
	 * @property {number}  min_blocksize the minimal block size (bytes)
	 * @property {number}  max_blocksize the maximal block size (bytes)
	 * @property {number}  min_framesize the minimal frame size (bytes)
	 * @property {number}  max_framesize the maximal frame size (bytes)
	 * @property {number}  total_samples the total number of (encoded/decoded) samples
	 * @property {string}  md5sum  the MD5 checksum for the decoded data (if validation is active)
	 */
	/**
	 * Initialize the encoder.
	 *
	 * @param {number} encoder
	 * 				the ID of the encoder instance that has not been initialized (or has been reset)
	 *
	 * @param {Flac~encoder_write_callback_fn} write_callback_fn
	 * 				the callback for writing the encoded Flac data:
	 * 				<pre>write_callback_fn(data: Uint8Array, numberOfBytes: Number, samples: Number, currentFrame: Number)</pre>
	 *
	 * @param {Flac~metadata_callback_fn} [metadata_callback_fn] OPTIONAL
	 * 				the callback for the metadata of the encoded Flac data:
	 * 				<pre>metadata_callback_fn(metadata: StreamMetadata)</pre>
	 *
	 * @param {number|boolean} [ogg_serial_number] OPTIONAL
	 * 				if number or <code>true</code> is specified, the encoder will be initialized to
	 * 				write to an OGG container, see {@link Flac.init_encoder_ogg_stream}:
	 * 				<code>true</code> will set a default serial number (<code>1</code>),
	 * 				if specified as number, it will be used as the stream's serial number within the ogg container.
	 *
	 * @returns {Flac.FLAC__StreamEncoderInitStatus} the encoder status (<code>0</code> for <code>FLAC__STREAM_ENCODER_INIT_STATUS_OK</code>)
	 *
	 * @memberOf Flac#
	 * @function
	 */
	init_encoder_stream: function(encoder, write_callback_fn, metadata_callback_fn, ogg_serial_number, client_data){

		var is_ogg = (ogg_serial_number === true);
		client_data = client_data|0;

		if(typeof write_callback_fn !== 'function'){
			return FLAC__STREAM_ENCODER_INIT_STATUS_INVALID_CALLBACKS;
		}
		setCallback(encoder, 'write', write_callback_fn);

		var __metadata_callback_fn_ptr = 0;
		if(typeof metadata_callback_fn === 'function'){
			setCallback(encoder, 'metadata', metadata_callback_fn);
			__metadata_callback_fn_ptr = metadata_fn_ptr;
		}

		//NOTE the following comments are used for auto-detecting exported functions (only change if ccall function name(s) change!):
		//	Module.ccall('FLAC__stream_encoder_init_stream'
		var func_name = 'FLAC__stream_encoder_init_stream';
		var args_types = ['number', 'number', 'number', 'number', 'number', 'number'];
		var args = [
			encoder,
			enc_write_fn_ptr,
			0,//	FLAC__StreamEncoderSeekCallback
			0,//	FLAC__StreamEncoderTellCallback
			__metadata_callback_fn_ptr,
			client_data
		];

		if(typeof ogg_serial_number === 'number'){

			is_ogg = true;

		} else if(is_ogg){//else: set default serial number for stream in OGG container

			//NOTE from FLAC docs: "It is recommended to set a serial number explicitly as the default of '0' may collide with other streams."
			ogg_serial_number = 1;
		}

		if(is_ogg){
			//NOTE the following comments are used for auto-detecting exported functions (only change if ccall function name(s) change!):
			//	Module.ccall('FLAC__stream_encoder_init_ogg_stream'
			func_name = 'FLAC__stream_encoder_init_ogg_stream';

			//2nd arg: FLAC__StreamEncoderReadCallback ptr -> duplicate first entry & insert at [1]
			args.unshift(args[0]);
			args[1] = 0;//	FLAC__StreamEncoderReadCallback

			args_types.unshift(args_types[0]);
			args_types[1] = 'number';


			//NOTE ignore BOOL return value when setting serial number, since init-call's returned
			//     status will also indicate, if encoder already has been initialized
			Module.ccall(
				'FLAC__stream_encoder_set_ogg_serial_number', 'number',
				['number', 'number'],
				[ encoder, ogg_serial_number ]
			);
		}

		var init_status = Module.ccall(func_name, 'number', args_types, args);

		return init_status;
	},
	/**
	 * Initialize the encoder for writing to an OGG container.
	 *
	 * @param {number} [ogg_serial_number] OPTIONAL
	 * 				the serial number for the stream in the OGG container
	 * 				DEFAULT: <code>1</code>
	 *
	 * @memberOf Flac#
	 * @function
	 * @copydoc #init_encoder_stream
	 */
	init_encoder_ogg_stream: function(encoder, write_callback_fn, metadata_callback_fn, ogg_serial_number, client_data){

		if(typeof ogg_serial_number !== 'number'){
			ogg_serial_number = true;
		}
		return this.init_encoder_stream(encoder, write_callback_fn, metadata_callback_fn, ogg_serial_number, client_data);
	},
	/**
	 * Result / return value for {@link Flac~decoder_read_callback_fn} callback function
	 *
	 * @interface ReadResult
	 * @memberOf Flac
	 * @property {TypedArray}  buffer  a TypedArray (e.g. Uint8Array) with the read data
	 * @property {number}  readDataLength the number of read data bytes. A number of <code>0</code> (zero) indicates that the end-of-stream is reached.
	 * @property {boolean}  [error] OPTIONAL value of <code>true</code> indicates that an error occured (decoding will be aborted)
	 */
	/**
	 * Result / return value for {@link Flac~decoder_read_callback_fn} callback function for signifying that there is no more data to read
	 *
	 * @interface CompletedReadResult
	 * @memberOf Flac
	 * @augments Flac.ReadResult
	 * @property {TypedArray | undefined}  buffer  a TypedArray (e.g. Uint8Array) with the read data (will be ignored in case readDataLength is <code>0</code>)
	 * @property {0}  readDataLength the number of read data bytes: The number of <code>0</code> (zero) indicates that the end-of-stream is reached.
	 */
	/**
	 * The callback for reading the FLAC data that will be decoded.
	 *
	 * @callback Flac~decoder_read_callback_fn
	 * @param {number} numberOfBytes the maximal number of bytes that the read callback can return
	 * @returns {Flac.ReadResult | Flac.CompletedReadResult} the result of the reading action/request
	 */
	/**
	 * The callback for writing the decoded FLAC data.
	 *
	 * @callback Flac~decoder_write_callback_fn
	 * @param {Uint8Array[]} data array of the channels with the decoded PCM data as <code>Uint8Array</code>s
	 * @param {Flac.BlockMetadata} frameInfo the metadata information for the decoded data
	 */
	/**
	 * The callback for reporting decoding errors.
	 *
	 * @callback Flac~decoder_error_callback_fn
	 * @param {number} errorCode the error code
	 * @param {Flac.FLAC__StreamDecoderErrorStatus} errorDescription the string representation / description of the error
	 */
	/**
	 * FLAC block meta data
	 * @interface BlockMetadata
	 * @augments Flac.Metadata
	 * @memberOf Flac
	 *
	 * @property {number}  blocksize the block size (bytes)
	 * @property {number}  number the number of the decoded samples or frames
	 * @property {string}  numberType the type to which <code>number</code> refers to: either <code>"frames"</code> or <code>"samples"</code>
	 * @property {Flac.FLAC__ChannelAssignment} channelAssignment the channel assignment
	 * @property {string}  crc the MD5 checksum for the decoded data, if validation is enabled
	 * @property {Flac.SubFrameMetadata[]}  [subframes] the metadata of the subframes. The array length corresponds to the number of channels. NOTE will only be included if {@link Flac.CodingOptions CodingOptions.analyseSubframes} is enabled for the decoder.
	 *
	 * @see Flac.CodingOptions
	 * @see Flac#setOptions
	 */
	/**
	 * FLAC subframe metadata
	 * @interface SubFrameMetadata
	 * @memberOf Flac
	 *
	 * @property {Flac.FLAC__SubframeType}  type the type of the subframe
	 * @property {number|Flac.FixedSubFrameData|Flac.LPCSubFrameData}  data the type specific metadata for subframe
	 * @property {number}  wastedBits the wasted bits-per-sample
	 */
	/**
	 * metadata for FIXED subframe type
	 * @interface FixedSubFrameData
	 * @memberOf Flac
	 *
	 * @property {number}  order  The polynomial order.
	 * @property {number[]}  warmup  Warmup samples to prime the predictor, length == order.
	 * @property {Flac.SubFramePartition}  partition  The residual coding method.
	 * @property {number[]}  [residual]  The residual signal, length == (blocksize minus order) samples.
	 * 									NOTE will only be included if {@link Flac.CodingOptions CodingOptions.analyseSubframes} is enabled for the decoder.
	 */
	/**
	 * metadata for LPC subframe type
	 * @interface LPCSubFrameData
	 * @augments Flac.FixedSubFrameData
	 * @memberOf Flac
	 *
	 * @property {number}  order  The FIR order.
	 * @property {number[]}  qlp_coeff  FIR filter coefficients.
	 * @property {number}  qlp_coeff_precision  Quantized FIR filter coefficient precision in bits.
	 * @property {number}  quantization_level The qlp coeff shift needed.
	 */
	/**
	 * metadata for FIXED or LPC subframe partitions
	 * @interface SubFramePartition
	 * @memberOf Flac
	 *
	 * @property {Flac.FLAC__EntropyCodingMethodType}  type  the entropy coding method
	 * @property {Flac.SubFramePartitionData}  data  metadata for a Rice partitioned residual
	 */
	/**
	 * metadata for FIXED or LPC subframe partition data
	 * @interface SubFramePartitionData
	 * @memberOf Flac
	 *
	 * @property {number}  order  The partition order, i.e. # of contexts = 2 ^ order.
	 * @property {Flac.SubFramePartitionContent}  contents  The context's Rice parameters and/or raw bits.
	 */
	/**
	 * metadata for FIXED or LPC subframe partition data content
	 * @interface SubFramePartitionContent
	 * @memberOf Flac
	 *
	 * @property {number[]}  parameters  The Rice parameters for each context.
	 * @property {number[]}  rawBits  Widths for escape-coded partitions. Will be non-zero for escaped partitions and zero for unescaped partitions.
	 * @property {number}  capacityByOrder  The capacity of the parameters and raw_bits arrays specified as an order, i.e. the number of array elements allocated is 2 ^ capacity_by_order.
	 */
	/**
	 * The types for FLAC subframes
	 *
	 * @interface FLAC__SubframeType
	 * @memberOf Flac
	 *
	 * @property {"FLAC__SUBFRAME_TYPE_CONSTANT"} 	0	constant signal
	 * @property {"FLAC__SUBFRAME_TYPE_VERBATIM"} 	1	uncompressed signal
	 * @property {"FLAC__SUBFRAME_TYPE_FIXED"} 		2	fixed polynomial prediction
	 * @property {"FLAC__SUBFRAME_TYPE_LPC"} 		3	linear prediction
	 */
	/**
	 * The channel assignment for the (decoded) frame.
	 *
	 * @interface FLAC__ChannelAssignment
	 * @memberOf Flac
	 *
	 * @property {"FLAC__CHANNEL_ASSIGNMENT_INDEPENDENT"} 		0	independent channels
	 * @property {"FLAC__CHANNEL_ASSIGNMENT_LEFT_SIDE"}  		1	left+side stereo
	 * @property {"FLAC__CHANNEL_ASSIGNMENT_RIGHT_SIDE"} 		2	right+side stereo
	 * @property {"FLAC__CHANNEL_ASSIGNMENT_MID_SIDE"}			3	mid+side stereo
	 */
	/**
	 * entropy coding methods
	 *
	 * @interface FLAC__EntropyCodingMethodType
	 * @memberOf Flac
	 *
	 * @property {"FLAC__ENTROPY_CODING_METHOD_PARTITIONED_RICE"} 	0	Residual is coded by partitioning into contexts, each with it's own 4-bit Rice parameter.
	 * @property {"FLAC__ENTROPY_CODING_METHOD_PARTITIONED_RICE2"} 	1	Residual is coded by partitioning into contexts, each with it's own 5-bit Rice parameter.
	 */
	/**
	 * Initialize the decoder.
	 *
	 * @param {number} decoder
	 * 				the ID of the decoder instance that has not been initialized (or has been reset)
	 *
	 * @param {Flac~decoder_read_callback_fn} read_callback_fn
	 * 				the callback for reading the Flac data that should get decoded:
	 * 				<pre>read_callback_fn(numberOfBytes: Number) : {buffer: ArrayBuffer, readDataLength: number, error: boolean}</pre>
	 *
	 * @param {Flac~decoder_write_callback_fn} write_callback_fn
	 * 				the callback for writing the decoded data:
	 * 				<pre>write_callback_fn(data: Uint8Array[], frameInfo: Metadata)</pre>
	 *
	 * @param {Flac~decoder_error_callback_fn} error_callback_fn
	 * 				the error callback:
	 * 				<pre>error_callback_fn(errorCode: Number, errorDescription: String)</pre>
	 *
	 * @param {Flac~metadata_callback_fn} [metadata_callback_fn] OPTIONAL
	 * 				callback for receiving the metadata of FLAC data that will be decoded:
	 * 				<pre>metadata_callback_fn(metadata: StreamMetadata)</pre>
	 *
	 * @param {number|boolean} [ogg_serial_number] OPTIONAL
	 * 				if number or <code>true</code> is specified, the decoder will be initilized to
	 * 				read from an OGG container, see {@link Flac.init_decoder_ogg_stream}:<br/>
	 * 				<code>true</code> will use the default serial number, if specified as number the
	 * 				corresponding stream with the serial number from the ogg container will be used.
	 *
	 * @returns {Flac.FLAC__StreamDecoderInitStatus} the decoder status(<code>0</code> for <code>FLAC__STREAM_DECODER_INIT_STATUS_OK</code>)
	 *
	 * @memberOf Flac#
	 * @function
	 */
	init_decoder_stream: function(decoder, read_callback_fn, write_callback_fn, error_callback_fn, metadata_callback_fn, ogg_serial_number, client_data){

		client_data = client_data|0;

		if(typeof read_callback_fn !== 'function'){
			return FLAC__STREAM_DECODER_INIT_STATUS_INVALID_CALLBACKS;
		}
		setCallback(decoder, 'read', read_callback_fn);

		if(typeof write_callback_fn !== 'function'){
			return FLAC__STREAM_DECODER_INIT_STATUS_INVALID_CALLBACKS;
		}
		setCallback(decoder, 'write', write_callback_fn);

		var __error_callback_fn_ptr = 0;
		if(typeof error_callback_fn === 'function'){
			setCallback(decoder, 'error', error_callback_fn);
			__error_callback_fn_ptr = dec_error_fn_ptr;
		}

		var __metadata_callback_fn_ptr = 0;
		if(typeof metadata_callback_fn === 'function'){
			setCallback(decoder, 'metadata', metadata_callback_fn);
			__metadata_callback_fn_ptr = metadata_fn_ptr;
		}

		var is_ogg = (ogg_serial_number === true);
		if(typeof ogg_serial_number === 'number'){

			is_ogg = true;

			//NOTE ignore BOOL return value when setting serial number, since init-call's returned
			//     status will also indicate, if decoder already has been initialized
			Module.ccall(
				'FLAC__stream_decoder_set_ogg_serial_number', 'number',
				['number', 'number'],
				[ decoder, ogg_serial_number ]
			);
		}

		//NOTE the following comments are used for auto-detecting exported functions (only change if ccall function name(s) change!):
		//	Module.ccall('FLAC__stream_decoder_init_stream'
		//	Module.ccall('FLAC__stream_decoder_init_ogg_stream'
		var init_func_name = !is_ogg? 'FLAC__stream_decoder_init_stream' : 'FLAC__stream_decoder_init_ogg_stream';

		var init_status = Module.ccall(
				init_func_name, 'number',
				[ 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number'],
				[
					 decoder,
					 dec_read_fn_ptr,
					 0,// 	FLAC__StreamDecoderSeekCallback
					 0,// 	FLAC__StreamDecoderTellCallback
					 0,//	FLAC__StreamDecoderLengthCallback
					 0,//	FLAC__StreamDecoderEofCallback
					 dec_write_fn_ptr,
					 __metadata_callback_fn_ptr,
					 __error_callback_fn_ptr,
					 client_data
				]
		);

		return init_status;
	},
	/**
	 * Initialize the decoder for writing to an OGG container.
	 *
	 * @param {number} [ogg_serial_number] OPTIONAL
	 * 				the serial number for the stream in the OGG container that should be decoded.<br/>
	 * 				The default behavior is to use the serial number of the first Ogg page. Setting a serial number here will explicitly specify which stream is to be decoded.
	 *
	 * @memberOf Flac#
	 * @function
	 * @copydoc #init_decoder_stream
	 */
	init_decoder_ogg_stream: function(decoder, read_callback_fn, write_callback_fn, error_callback_fn, metadata_callback_fn, ogg_serial_number, client_data){

		if(typeof ogg_serial_number !== 'number'){
			ogg_serial_number = true;
		}
		return this.init_decoder_stream(decoder, read_callback_fn, write_callback_fn, error_callback_fn, metadata_callback_fn, ogg_serial_number, client_data);
	},
	/**
	 * Encode / submit data for encoding.
	 *
	 * This version allows you to supply the input data where the channels are interleaved into a
	 * single array (i.e. channel0_sample0, channel1_sample0, ... , channelN_sample0, channel0_sample1, ...).
	 *
	 * The samples need not be block-aligned but they must be sample-aligned, i.e. the first value should be
	 * channel0_sample0 and the last value channelN_sampleM.
	 *
	 * Each sample should be a signed integer, right-justified to the resolution set by bits-per-sample.
	 *
	 * For example, if the resolution is 16 bits per sample, the samples should all be in the range [-32768,32767].
	 *
	 *
	 * For applications where channel order is important, channels must follow the order as described in the frame header.
	 *
	 * @param {number} encoder
	 * 				the ID of the encoder instance
	 *
	 * @param {TypedArray} buffer
	 * 				the audio data in a typed array with signed integers (and size according to the set bits-per-sample setting)
	 *
	 * @param {number} num_of_samples
	 * 				the number of samples in buffer
	 *
	 * @returns {boolean} true if successful, else false; in this case, check the encoder state with FLAC__stream_encoder_get_state() to see what went wrong.
	 *
	 * @memberOf Flac#
	 * @function
	 */
	FLAC__stream_encoder_process_interleaved: function(encoder, buffer, num_of_samples){
		// get the length of the data in bytes
		var numBytes = buffer.length * buffer.BYTES_PER_ELEMENT;
		// malloc enough space for the data
		var ptr = Module._malloc(numBytes);
		// get a bytes-wise view on the newly allocated buffer
		var heapBytes= new Uint8Array(Module.HEAPU8.buffer, ptr, numBytes);
		// copy data into heapBytes
		heapBytes.set(new Uint8Array(buffer.buffer, buffer.byteOffset, buffer.byteLength));// issue #11 (2): do use byteOffset and byteLength for copying the data in case the underlying buffer/ArrayBuffer of the TypedArray view is larger than the TypedArray
		var status = Module.ccall('FLAC__stream_encoder_process_interleaved', 'number',
				['number', 'number', 'number'],
				[encoder, heapBytes.byteOffset, num_of_samples]
		);
		Module._free(ptr);
		return status;
	},

	/**
	 * Encode / submit data for encoding.
	 *
	 * Submit data for encoding. This version allows you to supply the input data via an array of pointers,
	 * each pointer pointing to an array of samples samples representing one channel.
	 * The samples need not be block-aligned, but each channel should have the same number of samples.
	 *
	 * Each sample should be a signed integer, right-justified to the resolution set by FLAC__stream_encoder_set_bits_per_sample().
	 * For example, if the resolution is 16 bits per sample, the samples should all be in the range [-32768,32767].
	 *
	 *
	 * For applications where channel order is important, channels must follow the order as described in the frame header.
	 *
	 * @param {number} encoder
	 * 				the ID of the encoder instance
	 *
	 * @param {TypedArray[]} channelBuffers
	 * 				an array for the audio data channels as typed arrays with signed integers (and size according to the set bits-per-sample setting)
	 *
	 * @param {number} num_of_samples
	 * 				the number of samples in one channel (i.e. one of the buffers)
	 *
	 * @returns {boolean} true if successful, else false; in this case, check the encoder state with FLAC__stream_encoder_get_state() to see what went wrong.
	 *
	 * @memberOf Flac#
	 * @function
	 */
	FLAC__stream_encoder_process: function(encoder, channelBuffers, num_of_samples){

		var ptrInfo = this._create_pointer_array(channelBuffers);
		var pointerPtr = ptrInfo.pointerPointer;

		var status = Module.ccall('FLAC__stream_encoder_process', 'number',
				['number', 'number', 'number'],
				[encoder, pointerPtr, num_of_samples]
		);

		this._destroy_pointer_array(ptrInfo);
		return status;
	},
	/**
	 * Decodes a single frame.
	 *
	 * To check decoding progress, use {@link #FLAC__stream_decoder_get_state}.
	 *
	 * @param {number} decoder
	 * 				the ID of the decoder instance
	 *
	 * @returns {boolean} FALSE if an error occurred
	 *
	 * @memberOf Flac#
	 * @function
	 */
	FLAC__stream_decoder_process_single: Module.cwrap('FLAC__stream_decoder_process_single', 'number', ['number']),

	/**
	 * Decodes data until end of stream.
	 *
	 * @param {number} decoder
	 * 				the ID of the decoder instance
	 *
	 * @returns {boolean} FALSE if an error occurred
	 *
	 * @memberOf Flac#
	 * @function
	 */
	FLAC__stream_decoder_process_until_end_of_stream: Module.cwrap('FLAC__stream_decoder_process_until_end_of_stream', 'number', ['number']),

	/**
	 * Decodes data until end of metadata.
	 *
	 * @param {number} decoder
	 * 				the ID of the decoder instance
	 *
	 * @returns {boolean} false if any fatal read, write, or memory allocation error occurred (meaning decoding must stop), else true.
	 *
	 * @memberOf Flac#
	 * @function
	 */
	FLAC__stream_decoder_process_until_end_of_metadata: Module.cwrap('FLAC__stream_decoder_process_until_end_of_metadata', 'number', ['number']),

	/**
	 * Decoder state code.
	 *
	 * @interface FLAC__StreamDecoderState
	 * @memberOf Flac
	 *
	 * @property {"FLAC__STREAM_DECODER_SEARCH_FOR_METADATA"} 		0	The decoder is ready to search for metadata
	 * @property {"FLAC__STREAM_DECODER_READ_METADATA"}  			1	The decoder is ready to or is in the process of reading metadata
	 * @property {"FLAC__STREAM_DECODER_SEARCH_FOR_FRAME_SYNC"} 	2	The decoder is ready to or is in the process of searching for the frame sync code
	 * @property {"FLAC__STREAM_DECODER_READ_FRAME"}				3	The decoder is ready to or is in the process of reading a frame
	 * @property {"FLAC__STREAM_DECODER_END_OF_STREAM"}				4	The decoder has reached the end of the stream
	 * @property {"FLAC__STREAM_DECODER_OGG_ERROR"}					5	An error occurred in the underlying Ogg layer
	 * @property {"FLAC__STREAM_DECODER_SEEK_ERROR"}				6	An error occurred while seeking. The decoder must be flushed with FLAC__stream_decoder_flush() or reset with FLAC__stream_decoder_reset() before decoding can continue
	 * @property {"FLAC__STREAM_DECODER_ABORTED"}					7	The decoder was aborted by the read callback
	 * @property {"FLAC__STREAM_DECODER_MEMORY_ALLOCATION_ERROR"}	8	An error occurred allocating memory. The decoder is in an invalid state and can no longer be used
	 * @property {"FLAC__STREAM_DECODER_UNINITIALIZED"}				9	The decoder is in the uninitialized state; one of the FLAC__stream_decoder_init_*() functions must be called before samples can be processed.
	 *
	 */
	/**
	 *
	 * @param {number} decoder
	 * 				the ID of the decoder instance
	 *
	 * @returns {Flac.FLAC__StreamDecoderState} the decoder state
	 *
	 * @memberOf Flac#
	 * @function
	 */
	FLAC__stream_decoder_get_state: Module.cwrap('FLAC__stream_decoder_get_state', 'number', ['number']),

	/**
	 * Encoder state code.
	 *
	 * @interface FLAC__StreamEncoderState
	 * @memberOf Flac
	 *
	 * @property {"FLAC__STREAM_ENCODER_OK"}								0 	The encoder is in the normal OK state and samples can be processed.
	 * @property {"FLAC__STREAM_ENCODER_UNINITIALIZED"}						1 	The encoder is in the uninitialized state; one of the FLAC__stream_encoder_init_*() functions must be called before samples can be processed.
	 * @property {"FLAC__STREAM_ENCODER_OGG_ERROR"}							2 	An error occurred in the underlying Ogg layer.
	 * @property {"FLAC__STREAM_ENCODER_VERIFY_DECODER_ERROR"}				3 	An error occurred in the underlying verify stream decoder; check FLAC__stream_encoder_get_verify_decoder_state().
	 * @property {"FLAC__STREAM_ENCODER_VERIFY_MISMATCH_IN_AUDIO_DATA"}		4 	The verify decoder detected a mismatch between the original audio signal and the decoded audio signal.
	 * @property {"FLAC__STREAM_ENCODER_CLIENT_ERROR"}						5 	One of the callbacks returned a fatal error.
	 * @property {"FLAC__STREAM_ENCODER_IO_ERROR"}							6 	An I/O error occurred while opening/reading/writing a file. Check errno.
	 * @property {"FLAC__STREAM_ENCODER_FRAMING_ERROR"}						7 	An error occurred while writing the stream; usually, the write_callback returned an error.
	 * @property {"FLAC__STREAM_ENCODER_MEMORY_ALLOCATION_ERROR"}			8 	Memory allocation failed.
	 *
	 */
	/**
	 *
	 * @param {number} encoder
	 * 				the ID of the encoder instance
	 *
	 * @returns {Flac.FLAC__StreamEncoderState} the encoder state
	 *
	 * @memberOf Flac#
	 * @function
	 */
	FLAC__stream_encoder_get_state:  Module.cwrap('FLAC__stream_encoder_get_state', 'number', ['number']),
	/**
	 * Direct the decoder to pass on all metadata blocks of type type.
	 *
	 * By default, only the STREAMINFO block is returned via the metadata callback.
	 *
	 * <p>
	 * NOTE: only use on un-initilized decoder instances!
	 *
	 * @param {number} decoder
	 * 				the ID of the decoder instance
	 *
	 * @param {Flac.FLAC__MetadataType} type  the metadata type to be enabled
	 *
	 * @returns {boolean} <code>false</code> if the decoder is already initialized, else <code>true</code>
	 *
	 * @memberOf Flac#
	 * @function
	 *
	 * @see Flac#FLAC__stream_decoder_set_metadata_respond_all
	 */
	FLAC__stream_decoder_set_metadata_respond: Module.cwrap('FLAC__stream_decoder_set_metadata_respond', 'number', ['number', 'number']),
	/**
	 * Direct the decoder to pass on all APPLICATION metadata blocks of the given id.
	 *
	 * By default, only the STREAMINFO block is returned via the metadata callback.
	 *
	 * <p>
	 * NOTE: only use on un-initilized decoder instances!
	 *
	 * @param {number} decoder
	 * 				the ID of the decoder instance
	 *
	 * @param {number} id  the ID of application metadata
	 *
	 * @returns {boolean} <code>false</code> if the decoder is already initialized, else <code>true</code>
	 *
	 * @memberOf Flac#
	 * @function
	 *
	 * @see Flac#FLAC__stream_decoder_set_metadata_respond_all
	 */
	FLAC__stream_decoder_set_metadata_respond_application: Module.cwrap('FLAC__stream_decoder_set_metadata_respond_application', 'number', ['number', 'number']),// (FLAC__StreamDecoder *decoder, const FLAC__byte id[4])
	/**
	 * Direct the decoder to pass on all metadata blocks of any type.
	 *
	 * By default, only the STREAMINFO block is returned via the metadata callback.
	 *
	 * <p>
	 * NOTE: only use on un-initilized decoder instances!
	 *
	 * @param {number} decoder
	 * 				the ID of the decoder instance
	 *
	 * @returns {boolean} <code>false</code> if the decoder is already initialized, else <code>true</code>
	 *
	 * @memberOf Flac#
	 * @function
	 *
	 * @see Flac#FLAC__stream_decoder_set_metadata_ignore_all
	 * @see Flac#FLAC__stream_decoder_set_metadata_respond_application
	 * @see Flac#FLAC__stream_decoder_set_metadata_respond
	 */
	FLAC__stream_decoder_set_metadata_respond_all: Module.cwrap('FLAC__stream_decoder_set_metadata_respond_all', 'number', ['number']),// (FLAC__StreamDecoder *decoder)
	/**
	 * Direct the decoder to filter out all metadata blocks of type type.
	 *
	 * By default, only the STREAMINFO block is returned via the metadata callback.
	 *
	 * <p>
	 * NOTE: only use on un-initilized decoder instances!
	 *
	 * @param {number} decoder
	 * 				the ID of the decoder instance
	 *
	 * @param {Flac.FLAC__MetadataType} type  the metadata type to be ignored
	 *
	 * @returns {boolean} <code>false</code> if the decoder is already initialized, else <code>true</code>
	 *
	 * @memberOf Flac#
	 * @function
	 *
	 * @see Flac#FLAC__stream_decoder_set_metadata_ignore_all
	 */
	FLAC__stream_decoder_set_metadata_ignore: Module.cwrap('FLAC__stream_decoder_set_metadata_ignore', 'number', ['number', 'number']),// (FLAC__StreamDecoder *decoder, FLAC__MetadataType type)
	/**
	 * Direct the decoder to filter out all APPLICATION metadata blocks of the given id.
	 *
	 * By default, only the STREAMINFO block is returned via the metadata callback.
	 *
	 * <p>
	 * NOTE: only use on un-initilized decoder instances!
	 *
	 * @param {number} decoder
	 * 				the ID of the decoder instance
	 *
	 * @param {number} id  the ID of application metadata
	 *
	 * @returns {boolean} <code>false</code> if the decoder is already initialized, else <code>true</code>
	 *
	 * @memberOf Flac#
	 * @function
	 *
	 * @see Flac#FLAC__stream_decoder_set_metadata_ignore_all
	 */
	FLAC__stream_decoder_set_metadata_ignore_application: Module.cwrap('FLAC__stream_decoder_set_metadata_ignore_application', 'number', ['number', 'number']),// (FLAC__StreamDecoder *decoder, const FLAC__byte id[4])
	/**
	 * Direct the decoder to filter out all metadata blocks of any type.
	 *
	 * By default, only the STREAMINFO block is returned via the metadata callback.
	 *
	 * <p>
	 * NOTE: only use on un-initilized decoder instances!
	 *
	 * @param {number} decoder
	 * 				the ID of the decoder instance
	 *
	 * @returns {boolean} <code>false</code> if the decoder is already initialized, else <code>true</code>
	 *
	 * @memberOf Flac#
	 * @function
	 *
	 * @see Flac#FLAC__stream_decoder_set_metadata_respond_all
	 * @see Flac#FLAC__stream_decoder_set_metadata_ignore
	 * @see Flac#FLAC__stream_decoder_set_metadata_ignore_application
	 */
	FLAC__stream_decoder_set_metadata_ignore_all: Module.cwrap('FLAC__stream_decoder_set_metadata_ignore_all', 'number', ['number']),// (FLAC__StreamDecoder *decoder)
	/**
	 * Set the metadata blocks to be emitted to the stream before encoding. A value of NULL, 0 implies no metadata; otherwise, supply an array of pointers to metadata blocks.
	 * The array is non-const since the encoder may need to change the is_last flag inside them, and in some cases update seek point offsets. Otherwise, the encoder
	 * will not modify or free the blocks. It is up to the caller to free the metadata blocks after encoding finishes.
	 *
	 * <p>
	 *     The encoder stores only copies of the pointers in the metadata array; the metadata blocks themselves must survive at least until after FLAC__stream_encoder_finish() returns.
	 *     Do not free the blocks until then.
	 *
	 *     The STREAMINFO block is always written and no STREAMINFO block may occur in the supplied array.
	 *
	 *     By default the encoder does not create a SEEKTABLE. If one is supplied in the metadata array, but the client has specified that it does not support seeking,
	 *     then the SEEKTABLE will be written verbatim. However by itself this is not very useful as the client will not know the stream offsets for the seekpoints ahead of time.
	 *     In order to get a proper seektable the client must support seeking. See next note.
	 *
	 *     SEEKTABLE blocks are handled specially. Since you will not know the values for the seek point stream offsets, you should pass in a SEEKTABLE 'template', that is,
	 *     a SEEKTABLE object with the required sample numbers (or placeholder points), with 0 for the frame_samples and stream_offset fields for each point.
	 *     If the client has specified that it supports seeking by providing a seek callback to FLAC__stream_encoder_init_stream() or both seek AND read callback to
	 *      FLAC__stream_encoder_init_ogg_stream() (or by using FLAC__stream_encoder_init*_file() or FLAC__stream_encoder_init*_FILE()), then while it is encoding the encoder will
	 *      fill the stream offsets in for you and when encoding is finished, it will seek back and write the real values into the SEEKTABLE block in the stream. There are helper
	 *      routines for manipulating seektable template blocks; see metadata.h: FLAC__metadata_object_seektable_template_*(). If the client does not support seeking,
	 *      the SEEKTABLE will have inaccurate offsets which will slow down or remove the ability to seek in the FLAC stream.
	 *
	 *     The encoder instance will modify the first SEEKTABLE block as it transforms the template to a valid seektable while encoding, but it is still up to the caller to free
	 *     all metadata blocks after encoding.
	 *
	 *     A VORBIS_COMMENT block may be supplied. The vendor string in it will be ignored. libFLAC will use it's own vendor string. libFLAC will not modify the passed-in
	 *     VORBIS_COMMENT's vendor string, it will simply write it's own into the stream. If no VORBIS_COMMENT block is present in the metadata array, libFLAC will write an
	 *     empty one, containing only the vendor string.
	 *
	 *     The Ogg FLAC mapping requires that the VORBIS_COMMENT block be the second metadata block of the stream. The encoder already supplies the STREAMINFO block automatically.
	 *
	 *     If metadata does not contain a VORBIS_COMMENT block, the encoder will supply that too. Otherwise, if metadata does contain a VORBIS_COMMENT block and it is not the first,
	 *     the init function will reorder metadata by moving the VORBIS_COMMENT block to the front; the relative ordering of the other blocks will remain as they were.
	 *
	 *     The Ogg FLAC mapping limits the number of metadata blocks per stream to 65535. If num_blocks exceeds this the function will return false.
	 *
	 * @param {number} encoder
	 * 				the ID of the encoder instance
	 *
	 * @param {Flac.PointerInfo} metadataBuffersPointer
	 *
	 * @param {number} num_blocks
	 *
	 * @returns {boolean} <code>false</code> if the encoder is already initialized, else <code>true</code>. <code>false</code> if the encoder is already initialized, or if num_blocks > 65535 if encoding to Ogg FLAC, else true.
	 *
	 * @memberOf Flac#
	 * @function
	 *
	 * @see Flac.FLAC__MetadataType
	 * @see Flac#_create_pointer_array
	 * @see Flac#_destroy_pointer_array
	 */
	FLAC__stream_encoder_set_metadata: function(encoder, metadataBuffersPointer, num_blocks){// ( FLAC__StreamEncoder *  encoder, FLAC__StreamMetadata **  metadata, unsigned  num_blocks)
		var status = Module.ccall('FLAC__stream_encoder_set_metadata', 'number',
				['number', 'number', 'number'],
				[encoder, metadataBuffersPointer.pointerPointer, num_blocks]
		);
		return status;
	},
	/**
	 * Helper object for allocating an array of buffers on the (memory) heap.
	 *
	 * @interface PointerInfo
	 * @memberOf Flac
	 * @property {number}  pointerPointer pointer to the array of (pointer) buffers
	 * @property {number[]}  dataPointer array of pointers to the allocated data arrays (i.e. buffers)
	 *
	 * @see Flac#_create_pointer_array
	 * @see Flac#_destroy_pointer_array
	 */
	/**
	 * Helper function for creating pointer (and allocating the data) to an array of buffers on the (memory) heap.
	 *
	 * Use the returned <code>PointerInfo.dataPointer</code> as argument, where the array-pointer is required.
	 *
	 * NOTE: afer use, the allocated buffers on the heap need be freed, see {@link #_destroy_pointer_array}.
	 *
	 * @param {Uint8Array[]} bufferArray
	 * 						the buffer for which to create
	 *
	 * @returns {Flac.PointerInfo} <code>false</code> if the decoder is already initialized, else <code>true</code>
	 *
	 * @memberOf Flac#
	 * @function
	 *
	 * @see Flac#_destroy_pointer_array
	 */
	_create_pointer_array: function(bufferArray){
		var size=bufferArray.length;
		var ptrs = [], ptrData = new Uint32Array(size);
		var ptrOffsets = new DataView(ptrData.buffer);
		var buffer, numBytes, heapBytes, ptr;
		for(var i=0, size; i < size; ++i){
			buffer = bufferArray[i];
			// get the length of the data in bytes
			numBytes = buffer.length * buffer.BYTES_PER_ELEMENT;
			// malloc enough space for the data
			ptr = Module._malloc(numBytes);
			ptrs.push(ptr);
			// get a bytes-wise view on the newly allocated buffer
			heapBytes = new Uint8Array(Module.HEAPU8.buffer, ptr, numBytes);
			// copy data into heapBytes
			heapBytes.set(new Uint8Array(buffer.buffer, buffer.byteOffset, buffer.byteLength));// use FIX for issue #11 (2)
			ptrOffsets.setUint32(i*4, ptr, true);
		}
		var nPointerBytes = ptrData.length * ptrData.BYTES_PER_ELEMENT
		var pointerPtr = Module._malloc(nPointerBytes);
		var pointerHeap = new Uint8Array(Module.HEAPU8.buffer, pointerPtr, nPointerBytes);
		pointerHeap.set( new Uint8Array(ptrData.buffer) );

		return {
			dataPointer: ptrs,
			pointerPointer: pointerPtr
		};
	},
	/**
	 * Helper function for destroying/freeing a previously created pointer (and allocating the data) of an array of buffers on the (memory) heap.
	 *
	 * @param {Flac.PointerInfo} pointerInfo
	 * 						the pointer / allocation information that should be destroyed/freed
	 *
	 *
	 * @memberOf Flac#
	 * @function
	 *
	 * @see Flac#_create_pointer_array
	 */
	_destroy_pointer_array: function(pointerInfo){
		var pointerArray = pointerInfo.dataPointer;
		for(var i=0, size=pointerArray.length; i < size; ++i){
			Module._free(pointerArray[i]);
		}
		Module._free(pointerInfo.pointerPointer);
	},
	/**
	 * Get if MD5 verification is enabled for the decoder
	 *
	 * @param {number} decoder
	 * 				the ID of the decoder instance
	 *
	 * @returns {boolean} <code>true</code> if MD5 verification is enabled
	 *
	 * @memberOf Flac#
	 * @function
	 *
	 * @see #FLAC__stream_decoder_set_md5_checking
	 */
	FLAC__stream_decoder_get_md5_checking: Module.cwrap('FLAC__stream_decoder_get_md5_checking', 'number', ['number']),

	/**
	 * Set the "MD5 signature checking" flag. If true, the decoder will compute the MD5 signature of the unencoded audio data while decoding and compare it to the signature from the STREAMINFO block,
	 * if it exists, during {@link Flac.FLAC__stream_decoder_finish FLAC__stream_decoder_finish()}.
	 *
	 * MD5 signature checking will be turned off (until the next {@link Flac.FLAC__stream_decoder_reset FLAC__stream_decoder_reset()}) if there is no signature in the STREAMINFO block or when a seek is attempted.
	 *
	 * Clients that do not use the MD5 check should leave this off to speed up decoding.
	 *
	 * @param {number} decoder
	 * 				the ID of the decoder instance
	 * @param {boolean} is_verify
	 * 				enable/disable checksum verification during decoding
	 * @returns {boolean} FALSE if the decoder is already initialized, else TRUE.
	 *
	 * @memberOf Flac#
	 * @function
	 *
	 * @see #FLAC__stream_decoder_get_md5_checking
	 */
	FLAC__stream_decoder_set_md5_checking: function(decoder, is_verify){
		is_verify = is_verify? 1 : 0;
		return Module.ccall('FLAC__stream_decoder_set_md5_checking', 'number', ['number', 'number'], [ decoder, is_verify ]);
	},

	/**
	 * Finish the encoding process.
	 *
	 * @param {number} encoder
	 * 				the ID of the encoder instance
	 *
	 * @returns {boolean} <code>false</code> if an error occurred processing the last frame;
	 * 					 or if verify mode is set, there was a verify mismatch; else <code>true</code>.
	 * 					 If <code>false</code>, caller should check the state with {@link Flac#FLAC__stream_encoder_get_state}
	 * 					 for more information about the error.
	 *
	 * @memberOf Flac#
	 * @function
	 */
	FLAC__stream_encoder_finish: Module.cwrap('FLAC__stream_encoder_finish', 'number', [ 'number' ]),
	/**
	 * Finish the decoding process.
	 *
	 * The decoder can be reused, after initializing it again.
	 *
	 * @param {number} decoder
	 * 				the ID of the decoder instance
	 *
	 * @returns {boolean} <code>false</code> if MD5 checking is on AND a STREAMINFO block was available AND the MD5 signature in
	 * 						 the STREAMINFO block was non-zero AND the signature does not match the one computed by the decoder;
	 * 						 else <code>true</code>.
	 *
	 * @memberOf Flac#
	 * @function
	 */
	FLAC__stream_decoder_finish: Module.cwrap('FLAC__stream_decoder_finish', 'number', [ 'number' ]),
	/**
	 * Reset the decoder for reuse.
	 *
	 * <p>
	 * NOTE: Needs to be re-initialized, before it can be used again
	 *
	 * @param {number} decoder
	 * 				the ID of the decoder instance
	 *
	 * @returns {boolean} true if successful
	 *
	 * @see #init_decoder_stream
	 * @see #init_decoder_ogg_stream
	 *
	 * @memberOf Flac#
	 * @function
	 */
	FLAC__stream_decoder_reset: Module.cwrap('FLAC__stream_decoder_reset', 'number', [ 'number' ]),
	/**
	 * Delete the encoder instance, and free up its resources.
	 *
	 * @param {number} encoder
	 * 				the ID of the encoder instance
	 *
	 * @memberOf Flac#
	 * @function
	 */
	FLAC__stream_encoder_delete: function(encoder){
		this._clear_enc_cb(encoder);//<- remove callback references
		Module.ccall('FLAC__stream_encoder_delete', 'number', [ 'number' ], [encoder]);
		do_fire_event('destroyed', [{type: 'destroyed', target: {id: encoder, type: 'encoder'}}], false);
	},
	/**
	 * Delete the decoder instance, and free up its resources.
	 *
	 * @param {number} decoder
	 * 				the ID of the decoder instance
	 *
	 * @memberOf Flac#
	 * @function
	 */
	FLAC__stream_decoder_delete: function(decoder){
		this._clear_dec_cb(decoder);//<- remove callback references
		Module.ccall('FLAC__stream_decoder_delete', 'number', [ 'number' ], [decoder]);
		do_fire_event('destroyed', [{type: 'destroyed', target: {id: decoder, type: 'decoder'}}], false);
	}

};//END: var _exported = {

//if Properties are supported by JS execution environment:
// support "immediate triggering" onready function, if library is already initialized when setting onready callback
if(typeof Object.defineProperty === 'function'){
	//add internal field for storing onready callback:
	_exported._onready = void(0);
	//define getter & define setter with "immediate trigger" functionality:
	Object.defineProperty(_exported, 'onready', {
		get() { return this._onready; },
		set(newValue) {
			this._onready = newValue;
			if(newValue && this.isReady()){
				check_and_trigger_persisted_event('ready', newValue);
			}
		}
	});
} else {
	//if Properties are NOTE supported by JS execution environment:
	// pring usage warning for onready hook instead
	console.warn('WARN: note that setting Flac.onready handler after Flac.isReady() is already true, will have no effect, that is, the handler function will not be triggered!');
}

if(expLib && expLib.exports){
	expLib.exports = _exported;
}
return _exported;

}));//END: UMD wrapper

